{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4b141cd7-12bc-4749-b969-6d2ae04036c0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4f6e79d9-b508-470c-9ed0-aa46cf8df928",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "94e08146-1e09-4ab3-bffc-11ca6f981535",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "38467a41-0f31-42ad-961e-2af2c73ab2eb"
                }
              }
            ]
          },
          {
            "id": "c6eefcee-ca63-4f39-9b56-695667e58c5b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d10f48a-c237-403f-8aad-eccfa5fc76ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ab5269c4-019e-4584-9658-696dd0697e07"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "181f0313-1e28-4f67-a71b-06ea4a9aa531",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8807893a-39c9-4323-97a3-e1143fae86e5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d01d31b3-effc-45f4-88c1-b38dbaec9104",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50c500ff-d54a-40ab-be58-22b56b835861",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a1eb2d0-6bf1-4366-b37d-dcd7a5ba66db"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5e05cf9-6f41-4247-b952-7a7cf30f9d7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ae1fb72-4330-4feb-a65b-431cd5197d4a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "30206d0d-f30e-4ed4-b48c-e31cb161529a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a65052d-ca37-418d-8b8f-76dbcf4cc850"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f110faf8-e823-4ff4-816c-854918403eb1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fb5444ce-974d-4394-a7ff-72376a9c1f01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bd8930e-220b-4f29-b701-e8f1bd162011",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04a176e0-b9fe-47b8-9a9d-acc66d53c99c"
            }
          }
        ]
      },
      {
        "id": "00b2d82a-5a85-4b16-853e-a0933e7ba0cc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8f2b6af1-450d-4f2a-861b-32847f5ec597",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5cc8e8d3-2bd9-4219-9dfe-d0655543770b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c2efe056-75b2-4783-9a1c-b5a2691d7cba",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d69da07-2b48-45ea-af94-7d414be5bb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8af1b685-ba23-4655-aaa4-6792ea140594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6ed360-3c7d-42ea-a617-97a1c28b1e6a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ddce5f-15ee-49cd-a6db-48457058b98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c86a9da-f5dc-4413-9cc6-44e535c8b1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e860c6-b3dc-44eb-8c35-08918c8b34eb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e83cb4-1e22-49e7-8c82-6d282bff2ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf16735a-c7fa-44eb-b6a9-3d0c49c05fe4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f7c6c5c7-15f2-4ef3-bc81-a93e4d873386",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0bb0dcc-517c-42f0-809e-b9dca73a1109",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e45ad7-0f59-4fb8-9986-b6b094a40d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13c89a37-3e1f-48f7-b258-4deeeb7b1a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123fbdf3-b135-47ff-bd0e-9af8863b7722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f390af-f3f9-49e5-9a2b-845264755d8f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0e1cde42-3338-4830-9f7e-dbc98c1805d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a6400913-cbd7-491b-ab03-e7f3919f59e3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb762768-3754-4153-9ca9-50618f46fa4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cdce3b59-5017-4d6f-afb5-74ddf9eca658"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ace3f563-4ff0-49ee-abb5-fb51e4b0e4b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9cfdac94-56db-46c7-89c5-7dc0d19c692d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4b7a82b-da65-4980-afe4-9a01f567fc9b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac94c0e5-c649-405d-94ac-d0f32647b085"
            }
          }
        ]
      },
      {
        "id": "e8d023d9-eecd-48be-96eb-6eeac025fe22",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f447d040-2bdd-46a2-9f39-5877a086f775",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66fb3956-871a-410d-826a-7bfc41301b10",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d40f3630-b55d-47b8-8dff-5fdb15cedfcf",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7876fb-a05b-4128-bd82-3388dec9e035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0929194e-6855-4608-9063-b1a0130b4000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7352a1-679b-4e80-8d17-7d85deb6c057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a931773b-8709-4738-bae9-b8526bb95438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cf7525-ebd7-4d5f-aacc-e50ed211b67f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d811e1a-e0cd-4727-9756-d7922fd748d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db2f950-4596-4129-8130-f3ae9f209348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40202d5d-1d34-4bf3-91d5-0173341054e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3b87f06-7646-440a-a4b8-da9cd9d9b991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11961ef-cf19-44a1-ab88-d07d10793fcb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeadf31d-f851-495a-9464-44ddb20fb3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956a8d0c-4580-4104-b882-1e9d861328d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e65dc49-ddf4-43a2-a5da-8cacaf0a178a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dcbfaee-aba2-4b28-a62c-8f803dbb3623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a141016-0231-41a5-b616-8459ea459c2c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e0d00d-0565-431a-8052-cea580554880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f7440f-46ee-4ea2-aa1e-1e882d0b8603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6358d080-b37f-4c96-abc7-29dce7491e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44024bb6-8432-4fee-87ff-afd87b4fb311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b07b4bb-6e35-48c0-90da-1d6e74a84d9a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb29cde3-7dcf-46ea-b651-b41ade7b3c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae27291a-d1d8-44a8-a46e-b4ff5128686b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58ff65b-cdcd-4816-949c-4e8f96600b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fed8eb83-3d90-47d9-b959-4dd218e99bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b3697e-28fb-4a60-823e-873a461a1ec2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24c9f8b-6015-4949-9b55-59bd36c7a838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82b3088-a4e8-42de-99ec-b341063b43d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3948a72d-8f08-4866-b2bf-2ca8cc57efa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b705dda-a987-40c5-8c26-5b896cd0321d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30eaa938-dff5-45ba-9be8-db62d1c87e52",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37467145-777d-4ce9-a3e7-8d097459d124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf71825-eede-40a2-986b-37be990b7a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017ed5bf-19f0-4e79-839f-c22de3ef7d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "120ca1b2-277b-4c14-8315-e15c1931db2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c45e8f-4d2f-44c7-ad2a-22d142262e09",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a315c061-e8f8-4356-bc88-cbfc2d6f31d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd588bed-aee3-462b-9d88-268f6fbbfd97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6fc9c3-f587-4562-bb30-fa87490be716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "775fcdd9-d087-44dd-b32d-2145df783fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1c12c5-704a-4248-bd9d-43dd3f809e8f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e13d14c-42c6-479b-86ee-bcbf7fe091ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5593b3-1099-47b7-8c70-464660cbb8d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9319dce1-27f1-4282-8eca-ab3a02e7e0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8e2da58-6d89-406f-a5bd-4805ec226fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576ce96b-8c1f-47b5-871f-f0417064c802",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f9471f-f02a-4cc8-956d-1f6a0d330455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9be5564-fc40-42c8-b960-5ea3b8291613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1a150d-1b40-45c0-8d55-fdeea9fa8143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4229af77-011a-4016-b4b5-53a58817a2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d033ba-30c0-493f-8b5a-38fe70777c1e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca21512-e91b-445a-86bd-58e9df852cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28630d3-410e-4752-9215-19d3133d52ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e02b393-0fda-40b7-837d-abaf8645fe3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec09a372-e0ac-47ba-9cba-55322d7f25c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e2c8ea-a5b3-46e3-a6e4-5419a1f7d600",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c915a12-392b-494a-a2ab-2c1166bde3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dbc8468-84ca-4c8a-bc4e-27f7673e962a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6193cbdc-b9ca-4683-8b7c-1b3f0f80e635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6e7119e-4889-43a4-9285-5221a52ca65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0ab37d-ebab-4cc9-9416-bc6d4d3b4e54",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bae0d33-3aa4-4b05-b1cf-edd98c0e2dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89a9851-eb85-4294-930a-14dea2225b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831320aa-f457-4c90-8315-69422af41f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "362383b9-9178-402c-8914-ac8efff1bdc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a8a78a-806c-4bde-84d0-acc45cba65ff",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f77284-7f3a-4f7f-b548-7ec1a48b46c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3968ceb-55ae-4fbe-862b-c371275e3dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fc2361-1b84-4e4f-9cd6-83671b8a03ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d04d132c-5a8c-4dc6-81a7-263b8c3aaba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7cf595-975d-4093-a093-b4afdfd1d55b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cde865-2d97-4a08-a100-9d4bed6efec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2cc72d-b6a6-46b1-9203-756c25f75f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80538994-770a-4c15-9112-32c4112bfcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db5965cd-bd64-4ac3-ab46-edbd510e62d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1adaefb6-36e8-4f0d-b828-8562423010e7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6179a1a3-4308-45a4-bf48-9759f0d220f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9196f547-79ce-4aa0-ad5e-63a757a31096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5151571d-6662-4c1d-ad98-7d80c590ae1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee0218d6-59f1-4db3-a7d6-f74aba617a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cf559c-2932-4614-8f7d-cc4ecceb92e0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5719817-bc7b-4494-ab88-dc6e36ada997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0a01b6-405e-4115-bf9a-9758432a1e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337454b0-270b-49c7-b42c-35987da0bdf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3206cd9-0e1c-4d58-aef3-3a90f07a2cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5022ac5-4abe-4e9d-8fff-7dc4b3bca70a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15c09ec-251a-4fc1-b1a2-c8f956efe2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edabbab-87ef-404c-8b74-61510f9fcb54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee31f268-0ce8-47a9-9c27-ef87db304c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "43424cee-b280-4a30-b6ba-07578150a48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40dcc7a8-a4b4-42cc-847b-d41607aec16a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cb988e-3bdd-465a-85b8-0199a952c5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0e9c69-d0ce-4ae2-87b9-16e8aac739d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11385f3b-c33d-46c8-ad7c-255c03a0cbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a991eae9-fcea-4a2e-8132-edaf77c32876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747eb6e3-a7e3-4804-a695-e4dac5e06bb5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441a44b5-8110-46d9-a6d3-5b531ffab1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a601a6-7a65-442b-ad84-543a31ad72af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7fe0d0-9449-4a74-b6a2-6baae44e29bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8abacef0-9ba6-41e4-ad95-e44777a51466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba54739-1c7c-4b44-b387-bc2e879f992a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "747a9934-0d3e-4028-bd0f-9d3fcf6799b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65eb9ffc-2c6f-4890-81a7-b35c96cf61cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393e7e0c-58c9-4e3c-96cf-082bd9354f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "733954cd-a9f4-4ca8-829a-3ae7b9085a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8204c1a-bdc9-435f-8228-261710afd986",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288b07f1-d007-4255-8869-077ea44c5afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d26edc5-4075-4767-826b-96d7da62db31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2eb0a1a-60d8-4dd8-86f0-4442fec6fa52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8197456-e187-4a10-b97f-77cd381983a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69eac42-85b5-4c52-b3ee-4836b9216696",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781dbd9a-4d12-4faf-8b9c-3fb34dee7394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be30b4eb-ba39-41df-a2a7-cd001666ae11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8415bb-97c9-4ae6-84c7-f0e8bafd107d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "52dfada3-f1b2-4e76-b8df-845a36ce65d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d27718-f4c6-404d-b1eb-7a81f31d963c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c723bcee-2d9a-4e87-a9ae-ad74dc93faa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ca3f93-2fca-4013-90c6-a7de33580a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13958104-237f-449b-b44c-4fb92617d623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "93b4d7d6-1545-4086-ad59-c4452d4f45e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797855e4-331d-4812-80a8-d450b6391667",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2c1f01-c7ab-40b2-830c-ef7238758721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d39a074-7656-4189-89a7-efdbd314aa06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d07d95-1dce-4a0b-bae9-faae6580dcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "646d1f63-936e-4d56-bb8b-092c59fe3901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878743dc-8aee-40e2-953f-e02c43256bbd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827c4064-f4c0-4b75-aaf4-9bd01f0c5fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3afc72a1-c4bb-4570-ab94-0119f3f471ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec14654-f22f-4476-ac6f-42e1f646a9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5de262b-85f3-45f4-98fe-1d4109a9fdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1fd2b1-1af0-4595-9dc1-b5acfc94943e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad03059-9768-4895-8be4-ed8dc3320e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563980ed-8791-4b7c-be11-e9f85a5f9c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c7746e-017c-421e-8d9d-1c10ea4aa388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9594b61-6228-4491-9ad7-ee1648a29b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0724404d-5c3f-4649-b4ef-f23b92d25312",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f909e7eb-681c-4ddd-9163-86a438900c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "099c1a71-9a3c-4bb8-9cc8-1071a3c2f129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4166ebde-797e-473a-bfcd-b1d5f1591555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2889eefa-fe9a-4ada-961a-95fb860e1095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27d4b32-a052-4c70-bbdb-3bf3877c55b9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8245ee-beb4-4520-b8ea-036cea438d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb75358-66f2-47c5-9169-7ebac2d012b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848f9751-1558-44c2-ab5e-7faa458de460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dd7acbe-3c39-43f7-9721-f96b4b73c5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2bb58e-39a7-40a7-8840-4aa6e5c3977f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a207cfcf-21aa-4841-91f9-d54cca18b72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba5c679-ec9c-46f4-89a3-d68392d77a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5d20bc-cae8-4885-903b-4b55301322c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6b4a18-1a63-4755-9c45-5471492613bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a40fb8-868c-4b0d-8db6-a14a062296be",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23460443-e45e-4828-9fa3-af4f676bdbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a839a726-24e1-4c22-9d25-050221f6ea72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bb4b40-4694-484a-837c-cfce697b6290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c58f2661-ca62-493b-b858-f3c16958a8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89b4bc7-c95d-40d6-8535-c1b288a82f46",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7843a5-c666-4ac3-ab31-4cf62e8823a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644d0275-d144-416a-ace5-74b7c24e8865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75778ec7-05e9-480d-bfcb-cb5736b885b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f468a05b-fb80-4859-98ff-43f81298e006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf407e2-e06b-464b-999e-87854454b2f9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d85aa15-7abb-4618-b4bf-e88220eeae19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2566fd66-aeaa-4d5d-85b9-3ea00e7dd148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21329a5c-d289-4f34-b811-a1717fb72af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79e82ff3-e18c-4468-9f00-4a81bf346d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6646f8a4-ceb7-4ef1-b019-17aa5186a32f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a05fc84-6d40-48cf-b8a7-5f4f2f4bbc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e300769a-dac8-4974-b63e-1d62519508a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a0c7d0-25ce-4263-aeb7-efcb7013618b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b881df06-8b09-4d2b-9b44-17d44258ae95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a43661-50e3-44aa-99f5-e1091efcfccc",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c49826-e386-4789-b74f-01320c01a7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91907f42-0d29-435a-b611-9f5f5b34bfce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b10fe0-b39c-40df-88be-7a435e34eb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ef40359c-e1a0-435c-a233-fd50db5bab7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6635a34-49b2-493e-975f-c3ebfdd9118c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e1c532-bf48-4c64-8bd2-7838bc2930b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb838cdd-1502-4eed-8309-a1222bc9c47e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3730793-498c-4af7-9e3e-559d93227487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96a2c947-22b5-4310-a946-0196812a0bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8fc134-bef2-44c3-a240-94a3743b0d4a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97532d7-478d-4491-900e-2f68bfb6779f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb628890-a32a-4065-b6d0-db43db05329b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e8d538-c947-4a32-aeec-8b51a8e97b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a94de3-4101-4fcd-878a-dd1decbf0af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dea071-61e5-4574-b3cc-930c7a9330da",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc45498-723f-4e1a-aca9-fec381e8120b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f960ec-ff90-421c-ae97-ae2e0b3e4245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04239e24-877d-49e5-a32a-19c5c0614f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9733bd1a-3dee-4db0-a38b-38e71bcec07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fdd377-3b7f-40a4-a496-27e9da252f7a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba29ccd6-d3d3-4e15-ab11-104a25003048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfa812b-3c9c-4d86-9b96-623d74adfddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d2f2b1-a3da-4537-be22-834a5f844ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7afb7a-fa2c-40a8-a809-9961f31ddf35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4cf66e5-b179-4e1d-8765-7f944581b563",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c12d469-f350-4c17-811a-adcedf1e83ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640e2280-d0d8-4d45-9b85-8d3c472484ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608686e0-7fb3-4658-9c75-a3754245ceb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b1a231a-51fc-4947-a3af-9c40d6ed902a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65799129-8ce1-4a04-ac3d-a4b96f3c300c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82cd035-4836-483b-a290-97e2ac076044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a6efc9-993b-464d-aa34-115267119edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d7a793-d094-45cf-8cf1-55cad4f754a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c043f52d-b47d-43a1-abd0-2594013b885b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ed03a1-026c-452a-9387-bb3a7c8fc2e8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6135ad10-b021-410e-920f-c8fbc232ee73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab130e8-cb87-4c6a-abd9-433f01e9c421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c77c0c7-f8de-4a29-a381-55431220211e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ce248a10-7ec9-48cc-be79-3f99a2404537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45077ff7-d653-4dbd-9858-528dd87e481b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e114d5ba-c9d2-4ede-87ab-332d96b1aa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b08306-1090-4a07-8898-d5e696c670c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd37bbd-7220-4721-ae68-89cd37ef885f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e5c9c90-f052-4935-b98a-3d4bb9e7a2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b019440-c4f8-4755-936f-29bffc4941a0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f829e7-bebb-4880-9a9b-aeb96bde5213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4893c472-2e62-4f05-87bd-8504bc619342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e82cf65-c730-4aef-9ebc-1bcfb3ed6707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b014e9b4-c16b-46de-9ca1-7cbeccd8e0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b295bf47-40fc-4c56-80bb-c84c7f8265e6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51465e0-c3d5-4fdd-b14a-927539bca539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1607f7b6-c33b-4e55-9e04-998755a5c771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001c030e-8a87-4efd-a22e-4de5901bf0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d58fe27f-e04a-4a1f-bb9c-4e6b8aa69678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43781d7-f54f-4fe1-b88d-8691600da5f5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c189c9d-ac60-4a13-8eb0-b14ae72e1195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b35dc1-5b00-4b8c-93fb-c47b38f007bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c743d83-2bea-4b46-b823-20945b2a3503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb3b3d0-ec22-402e-bae3-7b89f9e4bded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb43fbe-03b1-4650-906d-b331fad3abbd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0488ef0d-7786-4ec6-979f-92920b4a2993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e08c56-b107-480d-8569-759e8efa5a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f6ed18-c6d2-4029-9e29-f32460704ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21bb4f27-f918-4865-8a8f-dea95bbae0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7c3067-d6a3-4305-9727-b1a6ccd3375b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c34057-b0e6-42d7-bff4-40e9b409db84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7273bd-459c-4577-8266-77a00ec050bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5cfe74-7f3e-437f-bae3-f73b4a098915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e18ae9c8-2376-461f-94b2-5c9bb007fa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b6e2df-3122-4c32-bc57-21012c32a0c5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7570aa-fe19-43f4-bdf4-63d66a912a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ae16ba-1cf1-403b-98d3-8b867f812859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbbd378-45e6-4f08-a6ad-8f6c250e1cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54ba9286-8887-4eba-b4e8-69208bdd9e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850c82a8-2fe0-4f9e-a333-524b58ee73be",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8615925d-6590-43ac-a18e-a4fd9b8c1745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07bd2bf4-eed0-46b1-8f09-cb9f7b683e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63971f59-7418-440f-aa75-08f661a0b69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a5246e4-8674-4165-abd8-f24c4e9e979b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049b8df4-60a0-430d-ba73-2514e75eaf6f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fd568a-a920-4644-b330-ee8424e3defd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89858bee-972b-4648-9f4a-0206100465a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e14fa95-3365-4f82-b570-84f36968b780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c74da0e9-be56-4c66-bccc-b9a618f57a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e7ec8c-ebac-4e3a-946b-123858cc22c8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77197815-2120-4d4c-a466-4ac5c63edbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "830fd356-2d2e-4754-bfa0-6aa993e8c81c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42883492-bb7e-48ae-9677-39ecf619ae4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a3ba1d-979d-4aab-9198-0fb1b388e9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa40e70d-d784-44b8-9c8a-c564080ed809",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f309581f-e4a1-429d-8693-83528b0ba244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe349f81-89fd-4c0b-ae43-e7cb94325482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0333767-35a6-4912-a06b-4936bb1c9e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abc059d5-8c01-48e4-9b56-d5df43dd7285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbd34f0-230a-40ce-a15b-d785b33baab8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9472640-4608-462a-bc45-166fdc63f7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b79d1157-adf8-4b3d-921e-990659635e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934b415d-a69b-4023-a045-dbf957ec491d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e59ebc2e-d787-4bb5-af43-d9561e73bced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ef1454-cc5c-47f7-af3e-4bc465fc08f4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df19e75-a0f9-4d6f-906a-2d6c739f10d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c2773e-ad8e-4dc0-8d12-acde98b4bc2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afaa2a2a-3e50-4271-b267-8ed87aedab6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff548eda-1f9e-4ce2-80b3-1660d2f2703a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6bcb0d-fb4b-49de-9cd2-ddf2866e8b9a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2710fe5-bc39-41e0-beb2-308d3ccfdf37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5bba59-422d-4684-ad8e-f3c9eaeedd3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54ae1e4-ed51-4c59-a239-20e742eb8d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "512f6917-8f7c-40af-920b-348729c94cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c118c4-1b61-444a-b728-fa6fcff5659d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2060eb11-8d02-4063-b836-d6e0bdd7b035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351d1214-37ac-41aa-b6cc-a7a8b24d7fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920b56d7-6884-4031-aba1-cd26dc4ea88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae59d935-b668-45a4-901c-f44281a50bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e8fe33-1b21-4fc4-b5a2-7595bae8689b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f32136c-d0a6-4bbf-84be-9f9b07600057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e8104e-32e8-4230-95b6-27baec41c6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db2830b-5ef5-4891-af7c-2cb7a287598b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc4ae7f-1784-4f7f-bb65-cdf3baa9b4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2b6688-5600-44b9-a5cc-21abc47a3617",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00df6a5f-424a-4051-bc37-cf31391b2ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3dfbaf-cdb9-4fbc-9e99-ab8e8c935549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c324c3f-56bd-4814-8ac8-e9bd9aa1c226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "69bb8ab0-44c9-4e22-92ba-98da1e8d9806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c081246b-563c-4784-85ef-43cd71076cff",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cdbb71-f265-4394-b4d9-8fc65a186f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28be2d1d-b439-4173-a0d4-8cecbd4aa85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f7d3a4-bca2-4244-a175-d0bb2282fbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "92504928-c1dc-4613-81d8-781e10a713a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5b2e56-3ef5-45d0-91dc-254369566a70",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7c2cf4-3991-49e3-b0fd-eaf1f71f6739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f6ff9e-7ff6-4fd9-be86-e3a1478c3a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9a03d8-d6ee-4e53-8e29-8164cdee3dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4689b883-5f80-43cd-add3-a52c16352c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9a05d8-7f37-416a-9afc-cdb57016630b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879be7b0-585a-4bdb-a19d-3f3b585ad6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7633a677-6380-4e87-b51f-4885e2c27640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4057d000-d605-4b08-a938-c665512d6e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "10dfa7dd-89ab-472b-8b8e-f1d1de34fcff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93794297-f90a-4248-9085-d6f08cfdbb3e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f2ea57-c53e-42ea-83fa-96bb6231b463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7515bb57-d5df-4b7d-b4b0-a6b6a2b52d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6ed2f1-729a-4dd1-83cb-01512210787b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b16e69-c539-48e7-9d8c-9922c144846f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b71212-be3e-48dc-aa1c-e350433cbeb9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c099801f-e05d-4c5e-9db9-d5992db174b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c49094-8ed2-4de1-8733-d46a91d11c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19fc395-80ac-465d-ab9d-31b4151c4271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f995697e-4bad-47b1-a432-326eb60b7f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dddc2349-1d9e-47fc-a051-dfec5ca9a886",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff79781-0d60-42d3-82db-4f2a015d5d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0dce62-4a4e-4998-943c-2d0651f9bef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64928695-80df-4f73-a755-b77647adfe52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d01ddb8a-84eb-42b3-aa71-4b4aa264acc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf88842-54ad-4148-bdef-24378d555214",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07381544-0171-4916-aa0b-a24286723401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276d792b-adea-4f7c-9519-fd53655ac416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376b2564-244e-463c-98ff-8fbfa752c5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de2f59ff-1f36-4359-a8f1-a1c20992741b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8106f0-1e2c-43ae-b2b8-740047b9afbc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1e7823-65eb-4c5c-bf56-fc1bac0f4f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96fc2559-9380-4f0e-8638-1ce4ee86988e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd96431-7e98-48df-b867-b940c27caf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2625db7f-0903-40ca-9b46-544aa2e3a72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2050d557-688c-4a46-b28e-2d34fd578821",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1c4b88-a73b-4870-836d-910b16876a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c96622-de8f-4893-ba37-e480e95f5ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdc2b4d-3489-4a53-806a-b494027fff2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d99eac01-6287-463b-9927-a0a8d479bc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbc29bd-bf47-47d5-888f-6157fb3f86bf",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b62b64-4ccc-49e0-b725-0fb65698c242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc416a3-90ab-435d-b82d-5916bfe94419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff76f99-38d3-4629-a41f-5fa959cd1f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3047864-e86d-4378-b554-03bac2455229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5353ead5-adec-4a8c-943e-a86731e5ba9e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3c4fec-dd02-4998-ba27-1aa3e59ad3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17d223e-4f12-4214-9b80-f809d6e5cec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2d8e62-075e-4f6f-a1ca-605e458c4f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f09e1c-5620-4597-a2ce-ea3249f27239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f0272e-3614-4936-8491-d1a5d65575a0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b88ee1b-e7aa-419f-9859-81e66cc1a3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83aaa4bf-a339-4739-85de-c86a4bf08c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb90cc9f-d669-4bf0-87b0-6e248434051f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6690c7c1-465f-4037-bec3-0f6d7b8a145c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ce6cef-e8f8-43a8-b9b7-b77601fb608d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d069abed-d1b3-4390-b9fe-6a3e717376e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbdf84d-733e-4fca-9bd0-d60a132c2eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d105e7f5-c783-4298-8bc4-d842291310cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd446db-bef8-45f9-8b0a-5c5d11dd0a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15c3fa0-5cb3-4043-bc0e-caeff45b8e29",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891f33dd-9e22-4f95-a17d-08e92eff815e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54321051-63a9-4230-9e12-4b7c360ce3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc85159f-4801-4b19-96de-c00d960cf31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbbdc5c1-692c-4a24-95aa-7636d48a31d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0801e2-d735-43d8-89b6-897ce57269db",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786d34e4-7653-4aea-8e2b-528e34dc9c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeca574d-2c1b-4f0c-adea-6681f3e6e112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fa1e59-5a4e-4d28-94df-b757ee322014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b935d48e-e1f9-489b-86e0-27138982d72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa40e53-6e49-4018-bca4-a979323f5b7c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b64f5c-e01f-4516-8cc6-0159a175768f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ea38d3-a907-44e0-a8d8-fda53dd21e5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c661a556-2d99-4f87-b74e-28d7cb8e7334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c72d3b-5b5b-474f-8849-1ac3a7efc78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9add4c-1d1d-4660-a45d-93cf34411db7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b68298-f7ec-4554-a83c-7639e75095f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1a64e5-b39b-4004-a47a-ffc1f08ef345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389057ee-94c3-4a53-bcae-43d92b2cbdf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf0a6e0-107e-4638-b52c-09937f9562c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42276b6-d0c0-40be-9b4f-8d3f8d69638e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044bd2f9-e932-46fd-97da-4c7d5bdde59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a56bc1-f310-43dc-90f0-1c0061e94900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9dddb9-37b8-4c34-a882-3a28575cd6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fedbab8c-42ed-4757-be82-6ca3095de753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02de9b2-b816-4761-805d-0c5e48e7982a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3723355d-1826-4879-9dc3-1dd3377cfb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86596c2-57de-4ed4-9f34-a83e4243ccb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0121b3e6-aded-471d-a1bd-2a0fcea5513c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8849b8e-08d6-4425-8d04-551cd0eb643c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427e516a-95a3-49b0-9d52-3b5e0fb79423",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db891fcb-0f83-4eaf-a563-f61a30065b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822ff3ba-4285-4165-a88f-45083b5cf677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6df51a6-0870-406e-84bb-012666c41228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f76ef66c-cbf2-42f9-8cd4-00ff0024a4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1673f0b7-b7f7-49ef-bf9f-c0f98992ce83",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d9c2be-5b2f-431b-aff8-d92baf48de57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73cb938-b39a-4e47-a0ea-d394f6eb6d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ba44f4-cea8-4653-a199-c1f2529c1ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e80f4ec-3343-402f-8d4a-22dff12afc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f950fe-4c06-4041-b424-c4301634f952",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2f47e2-a450-45d0-93b4-29a4c553f506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82d87f3-94e7-412a-b426-3c9c65c574b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f02713-d1bd-4f54-8120-70573e9b4aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9691a530-ae3b-4efa-80a8-c4f43f24667e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa38b922-7ce0-4245-9652-89d90712b20b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d8402b-d307-4439-93cd-149400d1bbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5167835-ade5-4c6c-894c-7ea1a1053b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f65618d-6303-4c75-8ada-0bd983b0edd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d543eb14-e3b8-4691-b4f8-e68e5f84977b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88584734-d6e1-4399-a4d2-f509312bfa67",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2773a926-1b01-4e99-a7ba-5171b32cb0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5834c1-319c-47f9-83a6-b2ab52717f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eae7d8a-9418-463d-bf18-02b610589b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c023434c-f489-400a-af44-73a8086dc889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01590e43-02e7-447d-8140-f43cc580ee7d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48769a85-49d1-4dff-b4f8-e90e2869d818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f077978-a45f-4950-b328-25fc137b1b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67929cb4-f3c5-4238-bd04-3b0ca574eb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "651f06b8-2550-4a60-b4fe-f88bf1e23668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b83830-cdf5-4aeb-b682-e297486f6198",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ba0a67-765b-48aa-8194-69f6bb577c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d244895-aab9-4003-ac16-c6299224c682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3d014e-9322-4a6a-ac19-1436e7857339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "559f7ec7-84e7-466a-8e5d-7d1b000bf058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628655dd-f418-4799-a48f-b1544799c5a9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c442b4f2-9acf-4196-9c36-752ebae1a243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e764e1-2b40-4652-bc01-e3ebead8d4fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ce0f6a-0529-4305-a11d-97f98606e5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6158c43-2a31-4351-b242-ab44854900a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b682c365-4267-4a7d-a712-eeb129a10d12",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c194df0-f5bb-4ac1-93ef-98d0540e9d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e283d4a-ec14-406f-9ea5-7ee603bbe421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256f261f-b3b2-4d86-9859-3680f562e5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6754dba-3a1f-490c-8003-97cc93209af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453f101f-29b5-4e8a-a205-e7cd2a3de8f6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acea5056-91f7-4eec-a684-8d141a7eba5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b285c49-aae0-4d49-b17a-0f164feedcdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc33607b-df13-4f14-8821-f95dfd01a367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8f71d5-f03c-4fae-9fdb-a694ee738587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a514296e-494f-4c2c-8ed7-6dac666a5f27",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18357b4a-3225-49d1-abc1-80ba8fdcb127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69430fad-3f0c-41f3-87f6-bb99fc068774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15cfc950-8603-4f82-a79d-ece6b96d5ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10d529fa-4f9b-4299-b12a-82f76baa4aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0c3b8d-9ebf-45eb-b1f7-d71e63307e49",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ad796a-b6a2-4d76-9870-2838d19c15e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc9e256-3df8-4968-a1c2-901144aaad98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10318af4-8d22-4ac3-ba63-c627d7fdb6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "90f1a80c-48a5-466d-a0c6-a4a9756b660a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a83b51-3358-4bc4-aa0c-f6dac557f14a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1370cf-ad8a-40de-9925-005fd566e2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92de92d4-bf67-4b2f-815b-0f4b739c1568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835956c7-33f0-4e64-b9a5-d4c7d39d00de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "89154391-0d1f-4f73-8d94-58dd76f3d830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d460c39b-9c94-4e6a-bbec-5cb092954ea4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683f901c-0a41-4178-8995-d328d5d96e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c08c8e3e-5aa4-44f2-adb1-6773b3f34049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836bf2fd-8f22-438b-90ae-46e94814dc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "73fd6d3b-41af-4927-b41e-6815db1b1464"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "942d583a-3396-47df-ad9d-27cf43849a52",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21471c6e-d8b3-47ed-98b5-fce5c268c555",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e1e55d-778c-427a-a235-9d6f7df1e5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f321ee17-993b-49f9-9632-206675c89ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96696616-80e7-4151-8f0c-6aff57cc813a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db33cb0f-cda2-4b64-9cd0-4cf6a92c88e9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c6bb260-a449-457b-974a-732ed2cd54f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3b19bda-9c04-40ab-b5a7-89bea2116270"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd804e31-f54c-4617-9b7f-8a3a9caa326c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5800a8b0-b083-42e6-9d01-8c8f33474a94"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "725c50ac-3209-443c-8f20-6d7889be8025",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2929044f-bdf3-45a8-8c9b-541bc927e53b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02f04628-3a38-4507-b415-66f2e94083d2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7a326f7c-a608-44ef-86df-87e540aeee3e"
                }
              }
            ]
          },
          {
            "id": "5a70af6a-71a8-40c8-a30d-8abb25cfcb21",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8ed7c473-3083-4865-bdc9-397a31357c03",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "88f90cdc-0485-442d-8c4f-014695d0b3c4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de9fc29-fed1-4248-81fb-6ba44f047999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "40533139-9cd2-4305-b42a-2668c58e1231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ece3d72-c6c6-49fe-932a-5263e108cd75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e325b0-5e4c-479e-9792-03ad7b555423"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6b23911d-0588-40b2-a21c-09da4699df26",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4dfa889-6da3-4420-aa85-b7a47aaf58fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7355f33e-e08d-409c-b010-9dbee40cdc70"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9dcc646-1d10-4168-9c41-4c959680d1d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6869054b-e536-4fdc-8053-d8647a7d48b6"
                    }
                  }
                ]
              },
              {
                "id": "10f6cbc4-bee4-4281-87a4-a162f575d8fe",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7409bae0-88a3-4bd5-8662-aa3f781a16ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80770039-0e48-4543-b442-b9203188fc71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d2d3294-c2e1-4c49-9a68-021edeb42841",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c9ca9a47-f243-4155-ace5-bac3bbcd915d"
                    }
                  }
                ]
              },
              {
                "id": "b5a475e5-9cbf-4212-926a-ab12f730d213",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1073abdc-e91d-4a59-8c3e-09036f1a4aab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4f65e87-946d-4fa3-bb2d-edc46c214c96"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac23d5ec-125c-45e9-ba80-96218b2c28bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d2a6a589-a458-465f-a373-0f137864da4d"
                    }
                  }
                ]
              },
              {
                "id": "b60f35f9-fa60-4268-a2c2-b84b241595da",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c72e3c38-766d-47ae-b36e-cf7be8e80cc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3404be67-4215-4192-87fa-8940b0da2e4a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b3302f5-68ac-4c31-a65d-80bef68ced77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d8169caa-2371-4280-91e2-5038894c5593"
                    }
                  }
                ]
              },
              {
                "id": "9ccd74b2-415c-43b9-9059-bdb2e4c48dd0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b22465bd-627a-4109-ba29-6a0a0388c6c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68522bf5-6bd7-4160-b5d1-abf7ea728044"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49b6aa4a-bf28-4739-a9a4-0b214b0fd3b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c636107f-8b3e-4661-a638-a94704c97679"
                    }
                  }
                ]
              },
              {
                "id": "e7f811d3-7d7e-4ea7-821b-43c0e65620c2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73fe190e-32bc-440b-92e8-b13b2a5a0f50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bde662c8-983c-4154-bbd3-ed171c81737b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3faa412b-8e20-4b0a-9439-eb8591d4d4c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "04b73e43-4586-4d0d-bf61-97d05c37d48d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd9c42be-5ac3-49e6-8039-23c36087021a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7c8c392-0f4a-41aa-93bf-9e9358f2accf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "49294269-8212-4de6-97dc-5cc590581749",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "254ddae9-bb72-4fb4-bf83-a7605a459672"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43da5385-4e16-4962-b2ff-9ab195001af6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "edede10a-ced1-4c16-a8e9-e3638c5fe458"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7793bb3-3d1c-49a4-a90e-51c87ab95d05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f428155-3721-4dcf-994e-0445f9292e28"
            }
          }
        ]
      },
      {
        "id": "c470fc7a-ce3b-4128-bcd1-2869ac368340",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7bf96fe4-2542-454c-8555-cdaaf6a80fef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "59a1180a-ea41-41a2-baa0-aecd65440890",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1d88b2e8-97ee-4c59-b87c-5465c0cb33cc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7049d09a-17e4-4633-8286-d7fea0f1223d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb9cf34-39db-4a22-8c7f-63d89ed82a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5f5e21-0de7-4615-a7ac-0c7f70d90d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf94bb9-f29c-4e2c-8378-b3c7aefc0cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a02df01-8bad-4256-9205-59fd056c167c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6994b2-2c02-4a83-8fe6-b0793a7ea19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe0d6ef-aa3c-4b75-a08d-834507c555cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6852bc-59dd-4889-8ec4-6fe6baceab2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b18ba50-70c0-48b0-a4d6-b11cccd2e8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5afbd5f-ffbc-4678-93ea-c29a04317268",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c9513b-b8c6-4ab3-86a4-b4b58d273f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41cf6ad-ea57-42bc-832e-8141e9d8a30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8273fb-bbcc-487a-aab0-ed88dae54274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4785198a-4e0d-4fdd-b452-d3ae6b4ca5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0c49a2-9c80-4f57-adeb-e489c7ea46ea",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f338cbe1-8b69-4532-885f-54650e069d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4305076d-cc16-4558-ab20-fe649aa6711d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc525d0d-5435-490c-b982-88317767fd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44a147f8-a227-406a-9b96-7d8ad9798555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100b0c17-3c88-4ca4-a35a-d8214a97ae35",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f4bfdc-b5c6-4a68-b444-7f28237c2e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29602012-4b4f-4822-9e43-ca0959b54305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0976b34-934d-4c9d-9304-61fbafb13d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0288ea18-f7ab-4215-9467-2d8f8e90ae13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffec898-0f8d-4e73-aebe-a02ea16a9013",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5fdd60-8e1c-43e3-b7c2-8a886f6258bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45a14d1-3c99-453d-829c-a0215dfcdbeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49979cfe-e25e-4536-a0b6-eb1d8f3f6d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae2421f-6244-42c2-b27f-4c17aaf2e73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e989c86a-8471-4014-b717-e5c175e432eb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1305025-fd8d-4ee3-95b3-96cb28459141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc3c5ad-7fe6-4f41-ae80-070b13df5b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4eac5a-21bf-4426-9099-157ae527b6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd370e20-4b9b-408c-bcce-d0fbf4729368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdd504c-7931-4448-983f-25dbc631af01",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649c74bb-3fe8-4f61-906e-703e869d7a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b38e45c-784c-4218-ae1c-48b0b0309837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6a8592-3a58-4df5-b4bb-5978dc057b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "60ee583b-3d39-459e-ac52-02c6ae411faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ff0f8f-38cd-4e40-ab36-cf4be85218e7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe79bf21-f4c1-4a23-8095-b2bc5e477d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "758806c1-2219-4d24-a28b-bfe83ff281b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f472d25-4787-4972-b336-d8a0a649367e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f71dbc-7dec-441a-87f7-bd672913e030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a093819-9365-49b3-aada-2bbb106b6563",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9231db88-4705-47c7-9791-ccb8c6764bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1012e26-7b49-4c4f-ab91-83e36ae41be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90ebe51-8c4b-40dd-80bd-cb9fe376911d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42898123-d6dd-4de9-a2bd-bfaf7ceeb990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f29037b-07ce-4acc-ac85-2434aee0610c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a5c5a4-26dc-4f9e-931a-d803e7ae37d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10dac5b-5d7d-4606-b3d9-a0bce64ac153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2f5da6-79c4-4cd2-8c1f-ecafb311b656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bb60e12d-233f-4735-8894-dfb8b8326aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1013b38-fbd1-4010-89bd-be2398f04d6a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042860dd-474b-447a-b731-e7fc1062302c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124e6971-40ef-4847-b479-2121b5b57cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3330005a-8f7f-41b3-99a8-a5b28b9ffc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb47415-fb70-47cd-a8c8-4af4aef12607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99675d2-7d23-4997-86ec-3c8f1fa3892b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e9d468-e929-4f33-9e10-2e5e1991df68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3666e9-3c53-430c-8725-10c391ea055e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1451aa-ea63-4122-861a-fd17de705555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cbae70f-b3b0-4744-a8c8-ffe143c82fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048c8182-a919-406a-8a10-5ba4d77ba440",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0145eb66-13b7-4474-b809-00e291493db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97294a5b-4ec0-47bb-aa9a-56d3d729d891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48259a7-8b1f-4ad7-bd32-53d56ae616dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aaa2ccf-652e-4fed-aba6-6dabcae837b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de421e1-a31a-4518-be35-746e8e26e430",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bd542e-3f7b-49cf-b89c-cf2f53186f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a530d2-1f6e-4452-9398-fbdbca786c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c76c369-fab6-4ed9-8339-d5f4c3b0a8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa92e2da-a5b4-4c7e-9d81-25d1a32ddb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935b61d7-f671-476b-a4ce-18a3e42aa2d8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378cbbff-15fa-46ce-bf22-42f2a935c2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ed31d7-6774-4fc8-b628-9a8f2b4e69f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce4137f-bfd0-4244-9cef-86803c8ed065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4edc9c0b-82d3-4f15-a900-b9abf2e93cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739184da-0ee9-4c18-ad22-c5572e2ff282",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f738ca1-01a4-4f82-9d44-557141bee23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfbd065-d639-45ae-ad08-2372bcf9568a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c22739e-26a9-44f0-be15-88501b69e4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "71acd5c1-d42c-4fad-a7f3-902b04e90340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce037b3-2eba-485c-8a9e-ca00d8aab946",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8334e823-341b-4e43-b273-1316fed7d166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ccfccc-021f-4f6e-a06a-e164a3c3fe2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96bb4d9-5830-4e63-9ff7-8081c3e3a025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fef7efb-eb19-4c80-804b-36462111af4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d3541d-76ae-4945-a309-019bab406097",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b072ad-254a-4135-bf26-2ac0d813f4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0808520d-a132-4946-b8dd-a558da71fcd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45caf73f-ae63-4c39-af8a-2caebd6abeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3838801e-177c-4d25-b430-fdcd85b80447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5efe963-554f-44c4-a35a-0c82576363c6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8118a22f-8195-479e-96c3-769646932bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4670039-0e67-4e6e-b7d5-50a583cd4d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc66f34d-1555-4243-bbd0-5e5cee97eaff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2604f045-d6a2-4882-ae13-a737d18dbfc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036da156-6953-4591-90f2-385d911ff3c0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02600c06-f39b-40a1-97ea-284f6eed6136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df44164-f25c-42fb-a060-c718b30c5882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29f7ab4-eca5-4e6f-8fea-73736786b3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f387bf2f-c944-4dfb-9a5d-92ecc10e4f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cae8507-8b5c-4533-8d85-2efcc3336b7b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79925d0e-11c8-43e1-9b25-d4c304645544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d4c8e7-71f0-4c61-a712-555f9a77503b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d18832e-0f9d-491d-9be1-4071b2ab0176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "756516d5-a3d6-41f4-8f71-6679ce87b113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167775ed-51ef-4533-9a2e-8d432d2ca630",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be1b02a-ca2b-4830-b943-81c2d2058ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7fc8664-c56d-4e21-8fb9-dc6e100f335e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013e68df-9b87-4a59-8c48-66ca15ab8df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca02bfe5-7c89-472e-aad3-398480b93bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11164272-d658-4c0a-a877-f02534bf1097",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1c83b1-8ff6-4dd7-8e11-39fd09ddefc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e5c102-b685-4016-ac07-2b1ddd2a0c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754ef83c-9760-4749-8f83-e38e7d543c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6bc4f53-38ad-4b8f-86e5-e4a8123cf7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2e2a6a-e851-4262-9fc9-4193922fcdc4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87def071-05eb-45e3-9c59-d5db0d7eef24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18080f15-d61d-43c3-91f4-ff762372efc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e73455f-269c-4947-b67b-388ca0a0644a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3eb4b6-b5c8-4409-ae1d-be7cee2b134c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c05a261-97d9-4aae-b154-e3d25eba2622",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e0a058-1513-4c77-af54-59daebbb4eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96671660-825b-4ed3-9b49-fee39dac966e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f4ebf4-0fd1-4869-a6fb-cad3013e5f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d05b168e-5315-4129-84da-173fd5e5c660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51a382f-8617-4162-a36e-052c709d092a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c6a2ce-4b62-4715-980c-c812d0070e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80997d8-9379-42fe-b20a-f472e86a35f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77dec1dc-6a90-47a3-8d3a-a081e236e2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1164471-17a1-4ef4-97d6-7e6bf7608292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7fc749f-63c2-4822-a127-0dbbd966315e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01eccd5-3498-4b53-b81d-e9a456434e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f3682a-a3a4-40b9-b355-8d96141ebca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f732a0-f681-4dd1-bec3-aea7dbe722d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5bde08a-964d-40a2-8e5f-a9ba0f4f0e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12facd7-268c-4d85-a35f-00a09f640535",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdd5fd4-578c-497d-8d34-28a21b852f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b95b8d2-59d9-4c7a-9df9-18092672aa02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542610ad-9a96-4967-8903-8cb59f8d3972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f24c0b-c2cb-4bca-9615-d37b42102ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b6bf7d-4cd8-4b00-ae95-f3c6549c7440",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26efb194-056a-42d2-8601-56819c5a4170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1deac52-b04f-4172-aca8-79bd7603db5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3fdfbd0-5c2a-499c-b0d2-1d2b09d03523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47ccb42a-82cf-4d57-a029-ac4354436c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e03544-1a91-43d2-87b8-c4b86d65d0bc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2111f2d-452e-4bcc-9a6b-f6ce20d7b711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "059b5e2e-6258-4864-bbfd-b2868129e815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c831182-d27b-4f16-a9bf-2ec4741b1b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "083aa621-b5b2-41fa-b9b0-71c15fa798cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8cf478-9744-4a76-9ea5-224a2a8bdae5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae68410-364f-48fa-bb85-47e0dd586add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13a583a-b079-4ba7-9925-6bc44edea6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2992df-8bc6-487e-9253-52e23ec0aa1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd9fa4b-4e40-417e-8178-803a8deaa5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b201dc-abe2-4053-b247-541723a42bba",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0e3612-6df6-4807-898f-3ae284a3a0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c0e1ae6-ca94-4c05-9d4f-400b30f6d2c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e30631-be0b-43c1-acb9-edd377f4e0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "872a316e-7dfc-4747-aff1-7c73c31edbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10a9592-feb1-4896-9e58-bd7c9b360ca4",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d60d13-67b1-4f28-adaa-98bc8b7aa935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a93c68-5983-4fdd-839b-98ba91d3e175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3987718c-4c09-4511-aef7-f1a3c65558f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "078ead46-3b06-4263-a4d5-e447a1e94562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2764ea97-34fa-4238-b352-d8dc5dbf774a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782e2ce7-7c7d-4cd1-9bf4-e753b72385af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668dc716-8737-476a-89f1-fe122175d90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c048d0-28ac-42bb-87ec-a5086aa46492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68b8e995-2447-4900-a4dd-2cdf12124356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c43007f-414d-4b28-ba9b-59a6fa324fc2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1b7e8c-1c04-4e4e-bcdd-56e7755fd44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1bc544-08cc-4c0d-af49-82aa17974ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c7ffd8-d65a-44ed-b4e2-7ca58b8d2e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb41aa5f-dccc-432e-9b9f-3b03662f686e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c462308c-f21b-4d44-88f2-5f7907f5988f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffef266-6a84-4b1d-9baf-0f1c83cc383f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2060e2-3912-4cb4-ba59-84b3007e923f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32aaf500-41d1-4023-a326-b66c5160cde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f29d97b-b51e-42e2-9e31-13754b8a4c8a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "acc70d1d-25ca-4d27-8224-ab29d35ad478",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e8784c2-3fda-49aa-ab21-6091c54289ce",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293ef10c-ec78-4d4a-8abe-86af1dd92f1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "583cfb03-6262-41d2-8838-8e407efa882e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "859f0401-28d3-424a-9c54-1c948ee4c78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ae6b2f2-00c6-4865-8af3-bf087faffb78"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2ed01d2-4193-4cdb-b6fe-bf803c2fbf67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "adb92e76-0e6f-46c9-8452-3180f000b770"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d46c8f7-45d5-4d8e-af8f-317b462ab5f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8585db57-1644-4352-8d2b-199c37100054"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2dec5fa-8e3e-433c-a7c9-69219e648a46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5569d4be-db49-4e72-9a1e-79e46418cda4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fba7fdcf-c4dd-4cba-8c32-a7fa0bb91e75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "028c3368-ef9c-402b-9cd7-d9e495dbb8cb"
            }
          }
        ]
      },
      {
        "id": "ab300637-d1e8-492e-80cf-b8a39f1b495f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3b52cbfa-ae31-499c-8916-1b14b9c9cc78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3222652-8bcd-4129-8e93-37a6bf5caf88",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dd452671-660a-45a7-862a-3343f2cbbd0a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c2d357-edf9-4699-ab37-e77e66593556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bde6a45-cbae-4a8d-892e-0a867ab0882e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e47cb6-3c57-47cf-88de-4304e45e9644",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b375f883-3893-4bf4-b2bf-d616dd20d7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9672570-e491-4e3e-86e2-d4944b6e178e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a77d90-0e65-4fa7-8fb4-f8b6efe0f982",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d92f876-41cb-47d7-9d22-93595c914404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9f5e44-8d3b-45d0-bf26-a0ac8e6e0ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0bd7f7-91d3-4940-863c-8649b26ea28a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5087ed29-b1af-43ba-982b-e88004eb6597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a08a8e2e-9509-4a20-a399-4ffed0dd372f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6968cad5-3e9f-4dfe-a521-9635a1527079",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6174ead4-08c6-4196-a44b-b8c71b2fc00f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5f8cbc-881f-42ad-a15e-5b37fdab472c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953acdb6-fbd4-4fe2-a44e-de6408d99bc5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69060dcf-e722-4dbb-8b7d-8d1ce5e0d681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de639020-2d5b-4a43-b226-a7500e2c1b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98c819f-9a2f-4f5b-a40f-cf2dbef061e4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1eec27f-d4e8-4912-a3a2-c994a39d20f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55efd510-7e7a-413c-879b-aef308f30451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32467a58-e25d-40ea-b715-c33dd00458ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1761d4e5-c9c6-4fb8-bc12-a13568d68eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133af0f4-bb79-42fc-b2be-2e40f570e136",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87c822f-da6f-4480-8067-752762a5c8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b99c3cd-3f93-42ce-a3b3-1a8a9c855138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880f5cb5-8881-4738-8ede-ca8a814e5f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade15d89-34a2-4e84-b9b5-56deff9f71f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a006fbd-38a8-45ae-85eb-e02e79e89faf",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a62e826-2ab9-4334-826e-dffd351c47fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00f408e1-c7bc-40eb-9a4f-9049775f45bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ee6b7f-83d8-429b-9bb3-5327d4112d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9dd3093-bd70-4f6f-8fa5-b27bf57a5da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df27e20-3e13-48c8-8ba8-cdf9267d1f08",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02d0f7b-daa3-404a-91b7-60454506e481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7080f5e2-cc48-4aaa-9398-c3a55d51fee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ad89a2-057e-4510-a5ed-c7f052ed801a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a00a73-1f65-451b-afec-3e333da913e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13cfaeee-e393-4cf5-8c9e-e1acb2ebd429",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4fac13-7e51-4efe-8234-911f2768dcb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b554ff-8d46-4697-bbe4-b742d7de41d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad4546a-93e1-408f-b424-d04b849641b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67607fa7-6166-41cb-ac3f-915354777b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7fbd3d-6b49-4adb-9f54-2a74e4a0f999",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37091019-25d1-44d2-ade5-d3412cfbff0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b40bce-1c72-4b9c-8595-9610aad05a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b226d6c-97e8-488e-9ace-37c3a3465930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77b6c33-9a17-405a-895a-94e8c3e275f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcf248f-aca9-416e-a740-2aba23b13099",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607c474d-6928-4dbe-8d59-8e0a3fea1201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd6b4442-2d40-4b5f-894c-eb3ba1cf12b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12db7ed9-5f82-4d5b-a5d9-369a10ad287f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05aafa60-6979-4f60-9f15-f24dce83bf59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f2bcd9-d359-44fa-b9a8-d23032519092",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfabf32-2fc7-4c7d-a9dc-909b232bb388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1000382-f7d8-4dd1-a6fe-f1cbaef20cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee3c4ce-9683-4401-b2dd-9923afe46e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffef891d-ba8a-4942-87a3-2cdca0a45c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c748422-02e0-41f0-b0e5-ec45bcb267a1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7ff60f-3951-4a6d-a4df-943d38f98f25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427bfcb1-ad6e-445c-9a94-8642e251fb06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef78080-fafe-47ea-b1a2-8781559265b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d03d78-3460-480c-a850-b02de8042740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ab92d2-a1f0-4928-814e-dbba3422b657",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1181f3-155c-45e3-b156-c0d4dde11259",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f98e02f-320a-4084-8767-8c4169ee3a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f48538e-b9ce-461f-b959-8b15635dec4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4431ae8f-3dc5-4f2c-9e8f-580594bfec94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b072f07-3df5-4e56-a5e0-45c57123ab4e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4f0193-bec8-406c-b78b-d2aa4958aed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10275e5a-fd56-42f3-abb1-1643bfa60d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b00f92a-a2b2-4691-871b-07036698c2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db97333-0c1c-4899-87ec-4d0286d46c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4fe5f7-e450-4d93-a012-b71d4e57d58c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d6d7c6-979b-48f0-905e-a90c9a378de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa804429-3e07-4d6f-ab2a-8b1475ca29b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdb5847-3073-41c6-86bb-9d1f0bba600a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ae1872-2e10-4317-9cc1-6c2f7bdb585e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a909e16a-b475-4d70-b0be-2510ad64e4a2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3482b600-7538-42bd-bc0c-09c5ae86ae87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ca7565-cff9-4687-ab8d-2ad326ca0f64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc023fae-2786-4f69-8c88-145244b619b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201f70b5-7b3e-4285-9c71-66e0dbfc33c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54239833-210d-4819-a1c3-7ff61802a602",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661cc030-8f36-401a-82dd-66536a247fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da1326c-cc59-43ad-bcfc-817a8411d5c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc4ef82-b2bb-482a-8589-f5449ec1d8cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c986883-7cf5-4aae-88e0-3e3e8e8707c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e362679b-3293-4696-9fd0-f537d4787412",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ea6249-f583-419f-8acb-e31097806853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6524f17-547f-482a-b4ff-0fd898351385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7087af65-bc90-4a0c-916e-0c36f2713ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8d7b9d-9c13-4e1b-bc9b-1006a05239b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecabdfb-64b7-42b2-8ce3-817e575a2e0e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eba6ffe-63bb-422a-a86d-2e2d5f394c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b721c5f3-9720-4465-ab81-b415066e9336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e21ec18-2c3b-468e-8626-dc311d1f06d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02cfe28-6b83-4bfa-b36e-cec83cb54a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a497d7-17ff-4e8b-be51-d27d7dfa0566",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937cd6f7-42f0-4b01-8a49-684f2dfbe253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b5bf0e-9d27-446c-b40f-f084e06ceadf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b26611-f731-483c-b74f-07d87e21fe12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9be4cfb-27e6-449b-aeab-ed2d53caa613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af7ba7f-7a67-40eb-8a67-da5ef70b5cf8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfe5bfd-4bf1-45b4-8175-ff4844a6638b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c725264-fd0e-40cd-8d21-a61af2b4f79f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece3a11b-ecf2-423d-abfc-02ef3e0a0d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aefd680a-2593-4942-a678-54f523e8455d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca2dac1-bebc-4337-abd1-631f640bbed2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c885c02a-52b8-4af5-b398-417d83bcc0fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d98c5672-42b1-4586-8538-236b31121255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605b61aa-9b98-455e-8bc1-1d0174cd23b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e748e0-811d-4c38-a0fa-d356f73d710d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac22b8e-298d-4ef2-b0be-511b58d5558a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ad09e7-335c-42bf-8cd8-fa91293a7bf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d16fa68e-7b8d-4eb2-a5c3-fe2eab63443d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9df89e0-6bec-4d10-90bb-d17b612455b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59dc45dc-cac6-4732-bd0f-463b7558dc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806ea4b4-7f96-449a-9e76-be05e36206f2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4feab22c-4e52-4166-a3d8-c1aa79a78fef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "936dc832-b32b-46ae-a6b2-3240ad754668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a60043-271e-4d68-8f77-280558a4be68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3892643-c8e4-4fe2-aa8c-3c68aa0f2cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45515e7-15aa-4e48-bbb5-d407213b3ac7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f169820c-4475-41b9-9607-0b817436742c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8901e13a-4df2-4cf9-8328-4231d2e4f9b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f00f1e-be99-4d42-a9f8-b26570d5844c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b7053d-bc2d-48c2-a513-29c853d929b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5449a734-cf0e-46af-a5f5-959515b5febb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9963fbca-10cc-4a4d-9688-62d6abdb7c57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d6aa6a6-8ba6-41cf-bb5b-33befbbaeefa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "271b93ce-a242-4524-bce5-4f42660f0b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5458a03e-dbce-4bfb-89ba-aa69995836c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defb7e47-de11-4cb0-b731-a5938c1c4fa5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466e99c9-9654-4c20-b663-89c408e1fa05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b055b4a3-4451-40fa-8fd6-68b4e8151421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec436197-0858-4490-96d0-e44e9b27f759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1d6a13-9123-44fd-8e78-73600b903ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bdc5d2-97a6-4193-962a-0906871f6c46",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327195e3-e042-49e7-9a73-fb8391ebeae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa96cffc-3ac6-40a4-9c83-4998a5df522e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10962b19-06b0-4405-8f69-d181c5592f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dada97fd-fadb-4010-8567-b662c4068a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db0c072-f9ef-4acf-8712-70714685b58e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5576f1b-1a0c-4d12-8fa8-df95db49edab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ef9578-6a61-4f02-95d6-4b551c910517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad571c19-e0e5-41d0-bef1-61a6ec92c5ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a17f9e-0bd5-42b5-af80-8b7844a14d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79813918-9390-4dd3-b8b8-815743ba4c69",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43edfd5b-e103-4039-b37b-353d588ace75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79fad0f3-065b-4a38-8925-e5b808cbb584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2cd1d7-2cbb-4c5c-94d0-2952f5917a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bccaa38-c058-4a36-b33a-a8796d5d0306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c0ccdc-5ced-4896-ba4c-044a6b548ccc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff867b21-f330-4506-80cf-b41c5783d8dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "192fd793-22a1-4c20-9d17-4fec7ad4c7d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e862d13-ab1f-4c43-b1fb-1f4f622daaee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977443a5-43d3-4125-bc68-8a0acf7c5696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7dcb9e-429f-42ea-a2fc-1321825980e7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20aa0a4-bb3e-4580-9665-ca9dd7587e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65059919-7d31-4203-803e-2fb6a63458d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cbe6b3-e295-46e9-b71a-9ac72ae6744a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daece950-628a-443b-8318-9ff38187d4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4779e59-3eca-401e-aa49-71af1761f137",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5293f1b9-5adc-4f7d-baba-e85f351962a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ba32c7-e1c9-41d5-8263-ec6c48807e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac67f4b-0e14-424f-9fe8-deccb4f1f193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d59bad-ec3d-4753-b39e-abdd51dbc482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904901f8-7c47-42ab-b7d4-55390def9afb",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79a9ba2-d065-4b71-9692-f88e6610f93c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24f1d1c-70ee-4ad9-9224-4a988c423d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b26cc33-2052-406b-890b-a69b415fdc04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8aedbff-3a97-4bbf-b33a-4df56f9bbf37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98eea66-ecd6-4c97-8a50-a2889f0f4b13",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29246471-8c3b-4be5-8427-a566158a8721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448a726f-a96c-4019-9be5-3abf1c89e25c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abc8c22-f99d-46c7-9a79-1b35df9ebeed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b42c08-08c9-422b-ac94-42abd2660336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95dcc3a-5dd1-4f72-b77c-08930db9f638",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388dc2aa-b232-4db9-b8e3-98cfeac2633f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae0a9ae-831e-4dcf-9798-7d8f5c8a9639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae396a9-8ce5-4958-951e-6362027e5ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b88105b6-9a56-4e8d-8dea-3a25caf1e89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf8f4a2-dbdc-4446-93a7-9d2c8b048050",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0202d320-100c-4d53-b442-5576f0e66648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526ec467-b254-4d2e-8c4a-8dee9c893724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6bbc32-d52a-4257-aebf-ac53ac4564df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7341558-3c30-42c8-9282-4e5127c14dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ce7b67-ed22-4b4e-b6fe-81648d56c910",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0c6a8d-33ca-445d-a9a2-6757254c0b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25fbd82b-1ba9-4495-b0ba-3e8aa9ffabcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b648dc7d-37b2-46aa-9493-043616f423a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a10a61-1356-461d-97d3-68942ba111af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b797bb3b-d116-4484-afc2-d080fb7ffc98",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237f69f5-6e08-4e86-a9b2-75bf94aa753b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d7cdac-33d3-465d-82db-12c0d53adbaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b445b0b7-7bb4-4b10-abba-f9baa90225e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387d1d1c-ff0c-450a-ad0e-7f0c19f99692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5b68d0-1341-42e2-b7e8-fbfaab04961e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa0cc8e-f3f1-42c9-ba8b-142be038a4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00166a5d-9b95-425c-afae-637dee1be20e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025e87e1-f02c-4a12-8c95-e799fe99add3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a6627ae-e40d-4164-a1f4-c5d09c108a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7e9c67-d107-48ce-85fb-b16858016d28",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcd49c0-49a8-4977-839e-7dd9b77b0365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f617b4e-0f50-4413-8b62-5dc2ef7b3452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35eb218c-ba3f-44ed-a357-4758b9d4235d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80160903-d561-4cf9-b448-755a840c10ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcfb0c0-8400-46eb-a6b2-094366aa7217",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d87fd9c-405f-4da0-8a9d-b93b546ce225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92a3685-245b-4cef-bb17-89089caacbbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38124f2-8363-4106-ae61-3fe9e3d01651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0e336d-ab80-4a5d-a09f-c4f048dffc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c969f72c-2a70-4dd7-93ea-13a54f0d69dc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58582f6d-cbd9-4fbf-addd-13865fb3acbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ff589d-b510-4396-8b63-bf624867c977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cf9b7c-a017-4776-8a01-86980fbbe410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528e2b52-b989-477d-89bf-ffb2b5714c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c2fb5f-0eaf-469f-a140-b843d63ce71c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc6a51d-fe5f-4b9d-8e61-6c278ece7a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b346b0-33a7-40ea-8f3c-692662de5cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14dfbe7-8341-48a6-838c-81a602f6a0fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a00233a-f9de-44dd-842b-8a4654d595c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235175bf-e47f-4a4e-a823-575b2b17f34d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94178ba-246c-42e0-9510-11c21be24fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4887ec-0c70-4a69-911d-860fa42ad2f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf88510e-4e17-4860-9279-c4f215aaa269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44bd2590-1e7b-4183-b5b4-d03693fe1c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcc320f-c756-41c3-9ddd-2073d38eac6f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca2a0b3-2464-4c4b-8408-7036c90036ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebfd8234-11a6-4d47-8813-35673b5bcf77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47582b9-f664-4bf9-8948-fa49a0bb21da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74b249f-29ac-481f-8527-9203c383d967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2baff31b-72e3-4143-b28e-7068d2e7c0ea",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17faafb2-996c-4d19-bbb2-a607601d03e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d6ad90-bb22-4a52-92e9-d280b4640639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb913421-10b3-4a9d-9309-d2d37a8e26ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a6b63f-0928-4128-b067-408d5a3bbbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ace8d8-43ab-41dd-97e8-990544406f68",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e3eef2-7651-4f1e-8638-9a5892c14c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299ff833-9ea0-4684-a3c3-4ac854472cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a629d14-880b-4b4e-8bb8-e0873f6f3b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbaf380-1555-4d24-be7e-9471285a2f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a32aa53-428b-4b0c-b5bc-9b692468a7da",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063aa6ec-af11-4a59-9a3c-cde19a3cfc2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93fabc73-cba0-4e42-af77-cbff1f835cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8c5682-5854-48c9-b2ac-66cf71e9b533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8beb47-48cc-4376-ae3a-63d2ccdd399c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca5ac3f-8da8-4ba9-a9b9-1fe311d42600",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb1e8f3-16ed-438b-8eeb-c9c0e408c5f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a74d60d-7410-4c81-91da-ee59c5175a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b282b0-6cd0-4433-981a-82f9cd6a4366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d715e28b-ee29-41a6-8035-1ad4ea6f3d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3409f0-4866-4645-8d44-1cdc10881b0b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb8faf3-ba0e-4bb4-ac12-b0eb8a611bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec75f70-cdae-4605-a106-d16d0f4cc59a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b839753-4e80-4e7b-9378-72f63cb52e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e97f78-ecae-4d4a-9740-0661f1f24001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bde0018-171f-48a1-8e12-ee89a657b474",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe880f1b-e82c-4163-a7f7-de0b894482fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c76183-9409-4f88-b364-bac4a5c61c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd32c84-af08-4fbe-ac7e-417404f9b310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e72061d-00ef-43de-a855-e26df1a74de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4fd4463-a80c-4def-8072-bfb40a982403",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9deb6eb6-c899-4085-9934-e9a2c3ccbf2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03dfba95-3965-4333-8836-6e267f485c5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bb967c-c0fc-4b2f-b259-6d14db23bdcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29045761-8140-49f3-89c9-a12e27269e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36ac687-f776-4621-aaf1-9cec41ae223c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b291b84-535a-481b-86b9-4b971ec44fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9300c8f7-735c-487e-995b-c5c9159c6611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7546a8f9-9355-47b0-8c6b-f8e59ba2889c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963ee7ad-9f25-4593-87ee-4a2324e8de22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6568e5a-47e9-414b-bee2-83be0e29dd8e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f085659-958d-4145-ae99-b0254ad56e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9930917e-3ea9-45d4-8491-a28c42ef33cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee18686a-7114-4fcc-9263-e7059b617023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f67a277-9f63-47b4-a149-297fc18b8f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650cee43-cf9f-496f-9fda-c3c0979fe7d0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2fb3c2-a891-47c4-b115-e5397f292a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7f9bf9-17d7-4049-8075-f7b4101af29b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "474e3c61-4c55-4dfb-bc54-32aa10fca257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8885092f-2c16-4e2f-9e4b-bad2a3987de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d121165c-fcf4-452d-b292-d7d1ef4c6e0b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5b752f-659e-4070-bcbb-3d4d7f2541d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c26f8bfb-66b0-4dd6-b0cc-281cd4ee6b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9577b4e9-b77f-4cd1-8ba1-eda11708c716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a2a9d4b-a1fe-4ae2-8b5d-db4f967ad7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97483b1d-8cbf-4b78-b72e-e211d98535bb",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67066614-02e5-48b6-ba58-356903182f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463aaf10-3fa7-4715-861e-c904447a8211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c05d369-1db6-4da0-83ca-22ffd04e6209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335f424e-1bd7-4510-b717-9bcef51c353b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d028b15-9b7b-4df4-a690-77cb4337539a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c18bb38-73bd-43dc-a922-86d5a4215849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa8be4b1-26b1-4709-88c0-8e71c200d86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674e35d0-2d67-4c71-8fde-fa81a2d831c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b52841-7a50-4faf-af33-7088fb4e700a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362c39e1-f8c6-4ce9-9961-42c05d792993",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51420cb0-dcc0-4e38-b7cb-59d5465ae56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c8e56d-2f21-4e35-88d6-25d60bce87ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84195030-3901-47dd-8a8b-75ddef9d22ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d523a9-d976-4150-94d3-d4e4ce67e039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e783c97f-f229-4de0-a2f3-b8fe656cfe0c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5269776e-0893-4292-8984-f87a890ac641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80ace99c-f03b-408f-8a75-3bcb087fd464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935ba580-13e7-4844-93ae-3b7ac082c26f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a37287-afd0-4f6f-9947-2cf4f4f562cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30996443-7670-4627-9082-2ab5f1bef27e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a67c3a-9903-4ce8-9602-c5479522eb60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22711e20-6820-4a89-99f0-5a1467a7f210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82192a7a-5391-4fcc-9e8f-ddf735151aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95ce8a5-5a9f-4f36-8795-e0c3aa161b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa3f96c-4f87-48c4-89e9-f912656274c8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce346a52-883b-413c-9deb-8614db390b3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c871c5b6-1889-4c06-8147-9d804f16d1ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74ec99a-e41e-4c01-9ed0-6302ff7197e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5a751d-3b43-4069-bfac-5d0997a80c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719c1989-51d2-4129-8c43-e94dab7784a4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d9eafd-bc93-4bac-bb44-0320ae832b02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b2daabf-bf5f-4a86-8bfd-e845e4b34bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcdf0f1-8c2f-4edd-b371-299a4f554f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3658fe-4bd1-477c-9a5f-46f2f13c6095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81ea750-e9b6-435e-a4a2-561691e162cd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcdfb2d-f96e-4324-a4d3-5d0d6437e73d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5c57b52-fb2b-41ea-ac49-59ff20c73adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6364be6-c445-49fa-96c3-5fced7a74c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0792df4-8b67-4178-b63f-165a2ddf2b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84d864c-3b59-447a-9d9a-95b67968c1f2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81348d7-a74a-42eb-992c-5719f6858481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c393c4d-f4e3-43c6-af34-a93c84a3f729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d2dd68-0b73-4e39-8592-3d56b66b7c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa437420-7031-46a8-9049-11cb22e37a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a255d610-957a-4342-995a-3e14e8bffb42",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086294bd-7563-4482-a91e-70f63b195865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "269cfc73-d4c4-4542-a907-4e2ee37bed34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce924145-7738-48df-aab6-4be1740c2b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15b01ed0-19fb-41ff-bb00-396f5103f4be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73b62ed-b054-4e24-8519-71a2afb5fd65",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be6f419-16d2-4d28-a1c5-e24ad93e1653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfb53d98-5b85-4d6a-8264-8e0ec517a89e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf09f0f-15f3-490b-be2c-861c3a348633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f648018-f876-4e6f-9c6a-1c5646a296ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4baf86-d9f5-4c5b-9780-9505629c740d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba7100b-ce9e-433b-89ec-089271351631",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "135d3ba6-0711-40d5-a5e7-5bb8bbdda87f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcb5a8a-acf6-43e0-bac8-ebf3e926b039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440b8195-c38c-4fb2-945b-7feed4fa0886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a520b9cb-2d16-4b53-b44c-094f9feed61b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0a6682-e839-467e-bb91-42f33b870bc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "279f9458-929c-4931-b234-ebd83d4bd062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c656b8-35c3-40cb-a094-e901f646300f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b3f480-c979-48a0-98ec-d8b03bb42b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88dea90a-e129-428c-9470-e2b8c694d31f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df4e07e-df3e-4324-bbef-8e2326e56b3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29b97111-1e80-4f22-b731-87f1f1ee65c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fa4da8-f9f6-49c5-b0b8-b20b673d7d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc83b41b-32c7-4fb6-bd47-75c6d5b36d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e29e3b-c444-4256-a45d-351588d2e24b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e66371c-ef87-479c-9eae-60d977d260fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66a9ef42-9eb3-4c98-996f-7d1d24e99b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "480c4ddb-bb23-42c2-a68b-1d917cc4912a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b43003a-2fa0-48f5-93b4-4e2b7d6a9cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304466e0-ff3a-49ab-b93c-51d1813d2428",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5ee193-098d-4f62-b220-6b844fb37e5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "089e4e72-0f70-4e3f-9bc6-2b0eac059e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d914e5-09a2-4e0a-a1b0-00e1af3198f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff56691-8fc5-430b-9a76-d8d74638eeed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869547e4-9ecd-495a-9857-e4f9141b012b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da8d41f-a3aa-423d-846a-70712b10d36b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "218d869e-ddc7-4fef-a83c-b2168af661ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ab0c96-3d17-4042-8cba-c075ceae1869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e512d72f-c460-4569-9729-492df77d1f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b6eb2e-ff8b-45b8-a012-9677041e2767",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cbb76e-1963-40c3-9862-866e3b078004",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d98b187-2af7-4ced-9067-5e53c10cd4c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3003c299-19c9-42f1-80db-bc1cfa593ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11a7f9a-a9ca-4fa6-bf14-82a3e04b4dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9a2f59-4467-4da7-acaa-27bb779c525b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7631695-f86d-4695-9a09-432ef3f1b4f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "452e9d6c-fd32-4632-99ab-e5aebcc49ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389f56b0-4941-45a8-b130-6662fadf8504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3268ba3-4364-4ce3-b5b7-4a70f31850e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cba9fcb-762a-44ca-9f85-bb1b3d3ae257",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01b6113-f0f6-49ec-9fd2-2f6c528d34ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "483ce38d-ca9e-40d4-8011-4cc7cdf4ae9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6340081e-34b0-4060-a5a2-cdf4bcc3dbdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91166917-4817-4467-8a7e-5855bb75e9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2ed8f7-8625-4940-aafd-61982ef7c661",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b69ea04-d30b-4d2b-afe4-7a3c6a12a846",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccc2b68c-5eb3-4810-8474-3deae6fef773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1842905-33f4-4465-b88a-9e6c50d5bd6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed054ae-6d09-4c2f-9963-096e406584c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab10a41-a09e-465c-b3f9-5002b10e7038",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080b8e73-ef76-4720-9942-c205518c24db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a724c9a7-71cf-4364-86a7-b2ce69733681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a07fc83-1526-4345-bbcd-c9fc6e94187b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d73a25f-9d90-4b43-8e8b-944477ee0c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f140d3ec-04d9-46bb-a80a-0b3cd01e61d6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c1c1f3-3deb-4d7d-aeb8-3010f46d222a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c8f34be-18de-4a6a-9ee9-d9b4f8af91c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe8dccd-6cc2-430f-94b1-49ee9ad85fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f20f3db-b741-4a58-bbf6-340cba71d199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a3e615-90b8-4870-8907-5fea3adf0e6e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496d013d-8a2c-47c0-905f-415ed281ee24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3b31687-ccee-47ef-8320-0e49df713770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1416142-a056-4bec-a951-21f84ee177df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc847af-21b9-4da7-a639-b24d99ad0aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097f2687-297c-41ec-bed4-e76642e2e697",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812b0fc0-c9ab-4098-a5cd-77db4a6f83f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43eae1ef-aadb-4a84-9314-e3a42c7b825b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfef23bc-f9a1-4c8a-ba87-39c97bb80656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611de6e9-68ce-454c-995b-6908deb25fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4da2d4-6d74-4dc5-baec-fa35efd0a9a1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7abf4e4b-0c98-495f-9a0d-fd57effac6db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52e047ab-eae3-4499-99ba-ee32b8c65f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6365a19-9f35-437e-9fc7-053ed343d458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e603605-1bac-49de-8378-90b48e957beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb23cb3-9cde-471f-824a-a01465952a67",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1007c28c-c0f6-4be7-9105-ac8bb4d790e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f98ea80-c573-4350-bcd4-3501e13915f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49790777-8b84-484d-87b7-6d5f03abed92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c7d76d-107f-4ac9-96fb-e4ba48aefaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7418b049-7ef3-4642-86ac-2d575e9bfc81",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404782c3-34bc-47ef-9a0f-b020c1f84d2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5416630-86f7-4f13-bbba-b3db111a8144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f0ab62-3ce1-4d5d-9799-b343b96ba4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f53019-090a-4e05-9f7b-2b0b58131cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3d9230-a616-485c-aede-b2384a549125",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2bf750-22d7-44c7-aa44-9f76e6c1f612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffaf31ac-878e-43c7-a279-cb435d8500bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39a81c4-0747-4205-a818-b9ad61e3158d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497b1317-ff5f-41b5-8a03-9a3f9530b35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5f2a09-1499-49fb-9303-6c1940e56b67",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfdbf34-eccb-4de7-adef-7d9674d2ee39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "726f83e8-9e91-4923-9e6e-9bea4ed9b1da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f46ccc-15a8-4e9d-bd09-9729895e8449",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e38f2f-5674-4ce9-ad51-8188a41f1a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb89986-4d80-4165-982f-b88fa367bd83",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e52d5b-eeab-40a6-bbaa-3b25090e265d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e66f2d8a-5a34-4cb3-aaa0-598f0b5827d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cb5d3a-a72a-4396-b845-a89fe0aaeecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b3c23a-73a7-411b-8f75-d3412f62ba51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec5bb04-4f91-4493-b7f2-e5a4d4c7cfec",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714d0847-5402-4055-a92e-606017d918a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1ef3196-3144-4898-ad01-7263ce06f92f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcb5fba-cfc5-4d0e-8177-e5570b53431d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956c71a5-86f0-47ee-881a-63f93a3ff0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbf2537-3a8d-4105-b7ea-83c95e01eb37",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7bde2e-2c3b-4261-a190-b6116c7892a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86d3a8c2-7a69-49b6-aa47-85c0edd1e195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ba914d-0c28-4d57-9ff1-07cfdb33f468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c92e2b-f74a-4f46-9479-412b44960456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e242da-139d-41cf-aa43-b69bbafd73d2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0169d21-807f-4e35-8e36-7196b015f68d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ffb48c2-c039-48ef-9b98-e825e825792e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e628af0-268a-453f-9d9c-248ebc4900cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba09ce5-a3d1-4f79-9156-dbe951c8be3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2955ac50-6f8a-49c3-9c82-13f2c0af7b86",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e952d387-828a-4954-9cff-585a872830d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dfaf191-5ff2-4908-8cf6-5ef4b4e69d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cc06f9-a408-4460-9b74-da3975cc89bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf86d60-e6f5-4de9-8861-b0811848e1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca15bab-e248-49ab-a62c-251df3d03502",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e76c0d-559c-43f4-9860-fb7399e9615f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1d2a462-5c89-48fe-bdc1-8faee3619aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daaa626c-27e4-464a-9f97-1a6161fe6d98",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe14084-4f33-4dee-9380-d86ab46150ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdde686b-8c3a-4666-8a5d-7299e4c182f8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e97187-7483-477f-a5ef-6e9c522b9d51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39f190ab-0cb6-497a-84d2-b4c08b835baa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dbaebc-926b-459d-af10-b7644d387a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8744bfa4-0842-4908-98a3-16e6338cfe12"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c89035fc-1bf5-47cf-baaf-c6f3dde035fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e34781f-ac63-4ff8-9b22-99d21520706f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6aa9052b-a94a-412a-b28a-fc6de418a4dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31b4e9a0-d03f-4ca2-9d82-b9648776133b"
                    }
                  }
                ]
              },
              {
                "id": "69ac2369-dc42-4d29-8cc3-06423bacfbb0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1dda037-012d-46f0-be47-28cf3f24f9d5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d812b1f-fb9e-4d95-af3a-738c996cdfb8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b184d629-45ab-4bc5-a6ac-c35b389734c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab217d34-5b47-4dab-a289-48c2caf98d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f94e9b86-67c4-4b87-b52f-c6562696185d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "333f58ed-f93c-4077-8e7b-3f541b9306c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb68ce3e-c138-4202-8c92-c14e1df3c8e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7c9944f-bd48-4082-905d-8a40bff3ffa7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ceb6f74-bfda-470c-b013-229a210c452d"
                    }
                  }
                ]
              },
              {
                "id": "652f9cad-b5db-4210-912e-35e3b2b2c19e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e6607004-1377-4ca2-99a4-e5af469ac588",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcf35e8-6867-4ff2-a442-03f842a89437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7b4e2acd-1830-4e82-ad23-416fa616a812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e67ede7-1385-472b-8fc7-70c740466c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc09e84-8d68-4433-b97d-eece6bbec66f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b026f253-ec8b-4691-8899-8990d363bb43",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5b400463-f30f-41f8-be3f-f8ff6f899bf1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4817fe1-76dc-499e-b573-c2252fa05706",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b664d5ca-4c48-495d-b94f-550b315c24c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25cc20d9-608f-4c92-8c54-355b1acb48f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbf9f6bd-252d-4e41-8a53-36fe86166cd5"
                    }
                  }
                ]
              },
              {
                "id": "462b48ff-445e-4688-a5ff-3bc687639462",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81248553-59ae-4ac7-9f15-c19def21d529",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3779f7c5-1c05-48e6-a340-165674c74a0e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45ce97e1-4d96-46f5-a5e7-537938f68094",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac3f5056-8029-44b9-a9b5-44a3031955b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8fdb8ffc-11f7-4481-9165-f8a0d63f63be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "987beb76-6d13-424e-9989-e509506429f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f8f9312-95bd-4590-8baf-795ba0a762bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64008add-c8ce-439e-a8ea-71f6dac01cd2"
            }
          }
        ]
      },
      {
        "id": "d52bc3d2-650a-4271-bb89-ca68c4f72c44",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7c518fea-b1f9-48d7-bb6e-d121597762e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "afac3f11-05d0-4bc8-bcc5-0ec1b2fc0b3b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e7d6022-d013-4285-9305-8de4df8b316f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bf1213-7434-433d-9e75-f217e1fa57e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7df013c4-6266-404e-8731-a4e3c1587956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21f5df5-dda6-4958-89d0-dab8087da22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92d5a16b-ec9a-4c79-90d3-9f3a40ab138d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30913e4b-d44b-4785-86da-d51188c3d40f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b509e22-e714-472c-bc92-37fa4c28b6e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9e7d088-6c15-4c5f-9d15-6d481e137642",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bed04660-0c49-4ee4-8205-84ea75df5d41"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "991f1b24-4ad1-4bdd-bdba-280be7245bf7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "682c7cf7-69d8-423c-95a8-c95aa98097cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b30d1fa7-d649-4ac8-84ca-85c7725c6cb9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7c0032a-de93-42db-93fb-de772045799c"
            }
          }
        ]
      },
      {
        "id": "8296de82-baed-4595-b416-012ed95d35f1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7468c11a-73cd-4c41-8854-234c06b8c121",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d42bbef-9b17-4fc0-97b4-5da642fa63bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb2a3cd7-37b0-4a92-9a82-419a1cb85581",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45031a48-c90a-45b2-bffe-26373052f29c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97220ec9-da73-440a-95ba-4ddc668d8ccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f257d6d6-6aef-4b9e-b3ed-06a9ee3b1a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "046804c8-1eff-4b86-bc6b-d4d65058d3fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99f9550d-fc30-43f8-8c52-67f3b124d206",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16b325fc-b7e5-4ec3-a321-ee04042b96a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90d6ab45-4f09-4b36-84b2-d74182faafc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "911d69a4-1b49-4171-89c6-fa6036b3c1ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c60922e2-83e6-48a8-be14-cbbc68f68361",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7c2ec930-a2e2-4058-ab68-d80c0b357e6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54c400ad-fdb8-456f-822b-3cdf88b7c17c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ffe4706-b9ae-464a-b51c-8299b8f30610"
            }
          }
        ]
      },
      {
        "id": "91bc13e6-2074-42f1-856d-6cb0e88117dd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "02f0ea45-facc-40a8-9157-0262e11ebc1e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c03aff84-35de-436f-95e7-d3f67df4c17e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3b9a3caa-89ee-455a-b54b-62a144cfff92",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd712724-ca3d-4df3-be23-2ee90d056179",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b223501-352f-4d6e-9be5-7df71ce32641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1852af30-2bd4-4310-9eae-df2c461b51b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01c5566f-0a43-4397-a949-71a26706279e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c29fdb36-1abd-4945-a1e5-1b6bcdaf8d19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6008ef90-1a75-4e24-9ffd-7f12e8bf0860"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6d00594-98a8-4e85-8c3b-52d912ed6b97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f9c9ff1-ccc9-4eba-a970-fafb6b0c5e7f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4aed5515-7730-42ea-906d-da58dc53b58f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "82165ceb-2e6b-4626-8410-5a3c3a314d70"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b3037f0-7c70-4953-917a-26b48b4284e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4eb73cd0-9bf6-4e8e-b4eb-8ed1c5606193"
            }
          }
        ]
      },
      {
        "id": "ec62fd09-a1b3-4ad1-92ef-8a4adc5206e0",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f1f295a-6286-4d84-bf32-7dc9970abd48",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c954b02-11c6-4dce-aa79-8b8a10ec215e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a97aa5e6-7fe8-47ca-afb2-f8708cab4a07",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fcee637-3b2e-4b9c-bd38-08964f516843",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdd12ae4-d02b-4f1d-92c1-ff01f4d0eda9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.30952380952381,
      "responseMin": 15,
      "responseMax": 638,
      "responseSd": 78.42759923646436,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715646982038,
      "completed": 1715647005274
    },
    "executions": [
      {
        "id": "4f6e79d9-b508-470c-9ed0-aa46cf8df928",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7efcbda-b2ce-49ea-86d5-122fced73099",
          "httpRequestId": "0b2b6d08-42bc-42a7-9743-ce132d7ce04d"
        },
        "item": {
          "id": "4f6e79d9-b508-470c-9ed0-aa46cf8df928",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "143441bc-db16-4ca5-b110-d57ea0b905fc",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 0
        }
      },
      {
        "id": "c6eefcee-ca63-4f39-9b56-695667e58c5b",
        "cursor": {
          "ref": "3836880b-c5b3-44fd-a1a5-063099282f80",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5a779480-890f-4183-beb3-7f16ee0d1178"
        },
        "item": {
          "id": "c6eefcee-ca63-4f39-9b56-695667e58c5b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1ded4062-35ac-47f1-95e0-541e1428e2ee",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "d01d31b3-effc-45f4-88c1-b38dbaec9104",
        "cursor": {
          "ref": "e3076c9b-5003-4a10-8911-1a581f19149a",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "006c8183-386a-495c-8264-24d47004e14a"
        },
        "item": {
          "id": "d01d31b3-effc-45f4-88c1-b38dbaec9104",
          "name": "did_json"
        },
        "response": {
          "id": "136d7104-80c5-495d-b35b-174446103fb3",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2efe056-75b2-4783-9a1c-b5a2691d7cba",
        "cursor": {
          "ref": "011cbf70-ab62-4cea-9927-8bd6d7f2daeb",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "79c35d86-5c58-49e6-b32a-6f02f9fc58c0"
        },
        "item": {
          "id": "c2efe056-75b2-4783-9a1c-b5a2691d7cba",
          "name": "did:invalid"
        },
        "response": {
          "id": "88403acf-af4b-46fe-b8c1-c26e329e25b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2efe056-75b2-4783-9a1c-b5a2691d7cba",
        "cursor": {
          "ref": "011cbf70-ab62-4cea-9927-8bd6d7f2daeb",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "79c35d86-5c58-49e6-b32a-6f02f9fc58c0"
        },
        "item": {
          "id": "c2efe056-75b2-4783-9a1c-b5a2691d7cba",
          "name": "did:invalid"
        },
        "response": {
          "id": "88403acf-af4b-46fe-b8c1-c26e329e25b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6ed360-3c7d-42ea-a617-97a1c28b1e6a",
        "cursor": {
          "ref": "f22e9c7b-da80-4944-a335-1fefa1a35ae5",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "970fc09b-1b24-4a3e-b502-bdb21f8d0ac8"
        },
        "item": {
          "id": "0d6ed360-3c7d-42ea-a617-97a1c28b1e6a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e9b928e7-9a8b-42b3-91fb-2d124a76f637",
          "status": "Not Found",
          "code": 404,
          "responseTime": 143,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e860c6-b3dc-44eb-8c35-08918c8b34eb",
        "cursor": {
          "ref": "6f07ad01-e0b2-4e80-b7a5-9f523e984f66",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0dca05f3-16c0-4bae-baca-f38d6819cebd"
        },
        "item": {
          "id": "45e860c6-b3dc-44eb-8c35-08918c8b34eb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3d2c50dd-e30c-483a-97a0-df16d82ff094",
          "status": "Not Found",
          "code": 404,
          "responseTime": 27,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bb0dcc-517c-42f0-809e-b9dca73a1109",
        "cursor": {
          "ref": "c43d4baf-2a76-44eb-97ec-9fe22c931b4c",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8819827d-f973-454b-85ed-325b3b14111c"
        },
        "item": {
          "id": "a0bb0dcc-517c-42f0-809e-b9dca73a1109",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0d32bb49-d68e-4fb3-97b7-a4a514e5f829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6400913-cbd7-491b-ab03-e7f3919f59e3",
        "cursor": {
          "ref": "2bc7e14b-54db-48a2-b1e1-70586ae12cb4",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3b366adc-4107-4100-9557-92519acab7da"
        },
        "item": {
          "id": "a6400913-cbd7-491b-ab03-e7f3919f59e3",
          "name": "identifiers"
        },
        "response": {
          "id": "810663a3-4c85-4177-b207-546d338c2db2",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40f3630-b55d-47b8-8dff-5fdb15cedfcf",
        "cursor": {
          "ref": "d1966f26-0835-4ec0-873b-60b1f22fd558",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "80d1e950-f3f4-4314-836a-f26c9655900d"
        },
        "item": {
          "id": "d40f3630-b55d-47b8-8dff-5fdb15cedfcf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4ee74ccc-96bc-4aa8-9f32-e602099e8e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cf7525-ebd7-4d5f-aacc-e50ed211b67f",
        "cursor": {
          "ref": "b67e1b6f-b191-4828-b220-a30efd27ef71",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bf5061cb-54fc-4f5c-a322-521fbf6e2376"
        },
        "item": {
          "id": "58cf7525-ebd7-4d5f-aacc-e50ed211b67f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "24f91a45-251b-406a-8e5a-d978582c2dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11961ef-cf19-44a1-ab88-d07d10793fcb",
        "cursor": {
          "ref": "1c4257c1-6383-43d0-91af-e279e7507b65",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "210936a8-83a0-45aa-8d8d-d3901bad08e9"
        },
        "item": {
          "id": "e11961ef-cf19-44a1-ab88-d07d10793fcb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bba1dd34-9d0b-4ae0-bc31-d4f43ec38179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a141016-0231-41a5-b616-8459ea459c2c",
        "cursor": {
          "ref": "731c2930-227b-4759-be71-9e8fcaafb2b5",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a65f6100-a2cb-449b-8938-10229ddde1fb"
        },
        "item": {
          "id": "8a141016-0231-41a5-b616-8459ea459c2c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4834dff8-c158-4d69-b641-8b070af6ccf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b07b4bb-6e35-48c0-90da-1d6e74a84d9a",
        "cursor": {
          "ref": "db0f6c49-b021-4ae7-aa3c-a083a2b3d41b",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e16e96f4-774b-4c1f-88ad-27edbd9e1748"
        },
        "item": {
          "id": "3b07b4bb-6e35-48c0-90da-1d6e74a84d9a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "68c75c18-a55a-43f1-96f6-233b857c84c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b3697e-28fb-4a60-823e-873a461a1ec2",
        "cursor": {
          "ref": "3f14a196-ea5a-4f7d-b3b2-e8a12ace8ecd",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a5832769-4c5d-4e18-94f0-715b5e187f79"
        },
        "item": {
          "id": "d9b3697e-28fb-4a60-823e-873a461a1ec2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3ef79a8e-59aa-4043-847d-17fa5e018dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30eaa938-dff5-45ba-9be8-db62d1c87e52",
        "cursor": {
          "ref": "2b5cb506-7509-4b61-aeb2-48c5df5ffcb3",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4ed1733e-144d-482e-b757-64d4f3f41537"
        },
        "item": {
          "id": "30eaa938-dff5-45ba-9be8-db62d1c87e52",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ab6e141d-f17b-4e0e-99b8-442cd1a403cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c45e8f-4d2f-44c7-ad2a-22d142262e09",
        "cursor": {
          "ref": "13eb6ec1-5426-4962-bc13-b6efff3e141a",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "df413f73-1a08-46e1-86be-fb28441b610c"
        },
        "item": {
          "id": "c8c45e8f-4d2f-44c7-ad2a-22d142262e09",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bc5c58d5-8a6c-4ddd-bb0a-852dc0706652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1c12c5-704a-4248-bd9d-43dd3f809e8f",
        "cursor": {
          "ref": "3f4d5765-b930-4a15-9a4f-460d31cd221b",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "53bd8ef1-8d86-44c8-9d4c-58d60135a14b"
        },
        "item": {
          "id": "2b1c12c5-704a-4248-bd9d-43dd3f809e8f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "02d398d8-261b-4585-8463-605a42fc90c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576ce96b-8c1f-47b5-871f-f0417064c802",
        "cursor": {
          "ref": "dd8d6cb6-6583-41d6-b6ba-d9bded343656",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6955a858-4f71-45fe-b8d1-645972eb0fe6"
        },
        "item": {
          "id": "576ce96b-8c1f-47b5-871f-f0417064c802",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d8a29890-d1d0-4522-8b13-aa41841a570c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d033ba-30c0-493f-8b5a-38fe70777c1e",
        "cursor": {
          "ref": "8efa5a83-e8b4-42b9-bd82-8b925280e061",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2e9e9463-8075-423a-8e8c-8762312437d8"
        },
        "item": {
          "id": "b9d033ba-30c0-493f-8b5a-38fe70777c1e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "45e5e76a-9123-4f4a-8014-a09acb66fcf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e2c8ea-a5b3-46e3-a6e4-5419a1f7d600",
        "cursor": {
          "ref": "74740444-0dfd-4c5f-a44a-c57e6a20bea5",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a7f563a8-7a65-47cb-8c1b-e32500a4bbd3"
        },
        "item": {
          "id": "c8e2c8ea-a5b3-46e3-a6e4-5419a1f7d600",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d60475f8-2ca3-4674-a02e-33dc8c53da17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0ab37d-ebab-4cc9-9416-bc6d4d3b4e54",
        "cursor": {
          "ref": "a8cabe5d-392d-426f-82ed-12efcd26da21",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ffd7a93b-4003-4784-b763-17bbfa09ce2b"
        },
        "item": {
          "id": "2e0ab37d-ebab-4cc9-9416-bc6d4d3b4e54",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "03c404c3-6b3d-4a1e-ab79-567ba68f30e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a8a78a-806c-4bde-84d0-acc45cba65ff",
        "cursor": {
          "ref": "164bca31-8c1c-4df6-9966-fd9d8080373e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4194e6c4-fb58-4331-8001-4ac300420918"
        },
        "item": {
          "id": "b5a8a78a-806c-4bde-84d0-acc45cba65ff",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b9829030-35c9-4344-b23b-fed4c80c5864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7cf595-975d-4093-a093-b4afdfd1d55b",
        "cursor": {
          "ref": "05c9cd70-c893-4da0-8f3f-7dafe3487116",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2f3fb833-3cb5-4c5e-a157-e82746590275"
        },
        "item": {
          "id": "5f7cf595-975d-4093-a093-b4afdfd1d55b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6d7fc404-847b-4a4d-9bc2-ca01dacbf613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1adaefb6-36e8-4f0d-b828-8562423010e7",
        "cursor": {
          "ref": "8b68efd2-297b-45e0-9bdc-783153737137",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a9336317-063a-4691-aaf4-b48022ed6111"
        },
        "item": {
          "id": "1adaefb6-36e8-4f0d-b828-8562423010e7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fe9e97c5-86c1-4252-af37-d825cbf2846f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cf559c-2932-4614-8f7d-cc4ecceb92e0",
        "cursor": {
          "ref": "8059d0ee-cdbc-4aab-88a1-ba290606d54a",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6a755f16-dc9c-436f-b822-cbc051aa7830"
        },
        "item": {
          "id": "75cf559c-2932-4614-8f7d-cc4ecceb92e0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "82b58946-2dfc-4c93-bdef-7bf31f30feb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5022ac5-4abe-4e9d-8fff-7dc4b3bca70a",
        "cursor": {
          "ref": "af4c95eb-39c5-42af-a412-ba790eb55d96",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cf88c2c4-53c6-427b-b55c-712eb6fcb9b0"
        },
        "item": {
          "id": "d5022ac5-4abe-4e9d-8fff-7dc4b3bca70a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "267d8b01-82b9-45a8-81a2-02bcd24d810f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40dcc7a8-a4b4-42cc-847b-d41607aec16a",
        "cursor": {
          "ref": "abd33f2c-d990-41fe-9826-a0729d382b20",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fd9204ef-6bda-4aa0-9249-b429745aec9c"
        },
        "item": {
          "id": "40dcc7a8-a4b4-42cc-847b-d41607aec16a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9a31211c-cf97-422d-a0e1-83212d7019ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747eb6e3-a7e3-4804-a695-e4dac5e06bb5",
        "cursor": {
          "ref": "e2ca870e-b49e-4b36-8b69-8b087471e848",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "227debb0-f0ff-43bf-a36f-6932c8b0acd3"
        },
        "item": {
          "id": "747eb6e3-a7e3-4804-a695-e4dac5e06bb5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "186256dc-c134-42c9-9fcd-a3025d1acb42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba54739-1c7c-4b44-b387-bc2e879f992a",
        "cursor": {
          "ref": "fdf21c96-0ed2-4e6e-882a-96c2b38f7e74",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "99923664-826a-43d6-9d7e-32335be16cff"
        },
        "item": {
          "id": "5ba54739-1c7c-4b44-b387-bc2e879f992a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2cd9b780-b618-473d-9990-fa1997844282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8204c1a-bdc9-435f-8228-261710afd986",
        "cursor": {
          "ref": "68f0e524-6273-460f-9475-ead8461264a7",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3c623bb7-4760-43d6-861f-41ba88b8f933"
        },
        "item": {
          "id": "c8204c1a-bdc9-435f-8228-261710afd986",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "05bfb189-e1c4-483d-8d18-043127672c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69eac42-85b5-4c52-b3ee-4836b9216696",
        "cursor": {
          "ref": "985551fc-6dfe-4d0b-a578-3b56f05d4e2a",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "98f5ffd4-c148-4618-9c8e-c16e4fdd5d8c"
        },
        "item": {
          "id": "c69eac42-85b5-4c52-b3ee-4836b9216696",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "314b0cf7-ca2e-4e93-8916-f3289688cf75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d27718-f4c6-404d-b1eb-7a81f31d963c",
        "cursor": {
          "ref": "694bbfa3-53ba-4e33-8ea3-a3b267abee2d",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "33d7e2ad-428b-46b6-9800-86c94f6168ff"
        },
        "item": {
          "id": "76d27718-f4c6-404d-b1eb-7a81f31d963c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fd8dfce7-6a8b-4d16-b84c-fd7cb9162f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797855e4-331d-4812-80a8-d450b6391667",
        "cursor": {
          "ref": "545a7394-6b09-4bc7-bbcd-c8be43df6d90",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "75f7bbf4-d652-4da2-bb88-d5cac7ad707e"
        },
        "item": {
          "id": "797855e4-331d-4812-80a8-d450b6391667",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e33ce9df-b924-4168-9fba-b8088c279f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878743dc-8aee-40e2-953f-e02c43256bbd",
        "cursor": {
          "ref": "ac0d642b-df50-4298-bc9f-4b2cc32f748a",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3cfd33f8-b649-4ec3-9d6b-00d738543325"
        },
        "item": {
          "id": "878743dc-8aee-40e2-953f-e02c43256bbd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "422d2423-69dd-48bd-89e1-a58ecd0c5afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1fd2b1-1af0-4595-9dc1-b5acfc94943e",
        "cursor": {
          "ref": "267b19a2-da1b-477f-a4b5-2dee13c04699",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1a7da21f-fab4-43c7-a71f-fba667f7ba62"
        },
        "item": {
          "id": "8d1fd2b1-1af0-4595-9dc1-b5acfc94943e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4d46d0e9-dcd4-456a-a46c-f885d14299a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0724404d-5c3f-4649-b4ef-f23b92d25312",
        "cursor": {
          "ref": "1f9bb358-78f4-43ee-b53f-f9b9f2731d95",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c6330d84-0c3a-45bb-b2aa-b4057133039b"
        },
        "item": {
          "id": "0724404d-5c3f-4649-b4ef-f23b92d25312",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6f37fdd3-9ebb-472a-9c30-7c1dfa84e0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27d4b32-a052-4c70-bbdb-3bf3877c55b9",
        "cursor": {
          "ref": "732d0f0f-c311-4882-8d1c-c1ecd9893074",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d9262107-4930-4c2c-9703-1df2bf0348d5"
        },
        "item": {
          "id": "e27d4b32-a052-4c70-bbdb-3bf3877c55b9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0b7391d3-0d3e-44b3-8088-7fc776c63d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2bb58e-39a7-40a7-8840-4aa6e5c3977f",
        "cursor": {
          "ref": "9e34df5d-9bde-40b5-8668-4f69106a5027",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c2aa0d2d-2722-4f3b-96de-a28b33876637"
        },
        "item": {
          "id": "1a2bb58e-39a7-40a7-8840-4aa6e5c3977f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cc97a438-0fd1-45f3-a10c-e40a7a28d606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a40fb8-868c-4b0d-8db6-a14a062296be",
        "cursor": {
          "ref": "cec67553-d635-42d3-81fb-947b9c428197",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dcf0cb55-84c7-49a7-b87b-e4ed0f095205"
        },
        "item": {
          "id": "84a40fb8-868c-4b0d-8db6-a14a062296be",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "10787c56-19d8-452b-a9bc-3b86547b6993",
          "status": "Created",
          "code": 201,
          "responseTime": 638,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f89b4bc7-c95d-40d6-8535-c1b288a82f46",
        "cursor": {
          "ref": "573e4db2-084b-4266-96de-3d9afe3f1c79",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a05ddc15-1782-4648-a731-cc1309e6fe78"
        },
        "item": {
          "id": "f89b4bc7-c95d-40d6-8535-c1b288a82f46",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0017f521-dbe2-4433-8fd1-3f297eb958d9",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0cf407e2-e06b-464b-999e-87854454b2f9",
        "cursor": {
          "ref": "2c45b6b3-2270-4a66-9845-ff6c9ac036ae",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "83ccf7a5-f1f9-433d-8355-c38dfe437a46"
        },
        "item": {
          "id": "0cf407e2-e06b-464b-999e-87854454b2f9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "59a3e167-364b-4fc5-b653-d599abd50eb8",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "6646f8a4-ceb7-4ef1-b019-17aa5186a32f",
        "cursor": {
          "ref": "313d89b5-6b7c-4637-bd4d-ce8f641e22b0",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "88b5be54-99af-4651-91b1-4a8a7974451b"
        },
        "item": {
          "id": "6646f8a4-ceb7-4ef1-b019-17aa5186a32f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b30f98a0-30bf-4b6c-9ac8-71859b6a825f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a43661-50e3-44aa-99f5-e1091efcfccc",
        "cursor": {
          "ref": "d6e423e0-691c-44ba-9276-f175de28db6f",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2bfd2790-c3f9-4ea9-bd08-d17941f9da7c"
        },
        "item": {
          "id": "c3a43661-50e3-44aa-99f5-e1091efcfccc",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0fc00738-1374-4498-8bee-2a910784f9c9",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c6635a34-49b2-493e-975f-c3ebfdd9118c",
        "cursor": {
          "ref": "7ebc006f-3d37-4334-9e99-faa7c8c49b49",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "576c96e5-2739-4435-ac05-ab823601c4d7"
        },
        "item": {
          "id": "c6635a34-49b2-493e-975f-c3ebfdd9118c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f4ec19f2-2543-4d60-8360-251aae856a5c",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "bb8fc134-bef2-44c3-a240-94a3743b0d4a",
        "cursor": {
          "ref": "032785db-5964-4e42-84e4-39cd162acc96",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "747f24ae-17dc-47c6-a812-b3c9ec1d5475"
        },
        "item": {
          "id": "bb8fc134-bef2-44c3-a240-94a3743b0d4a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cfa6874c-57e9-48a1-a1cf-4f5a4cd019bb",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "95dea071-61e5-4574-b3cc-930c7a9330da",
        "cursor": {
          "ref": "1a524ac8-fc68-4a9f-8cfb-9a2db5bbea6d",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "91c7a0d6-a570-44ae-83da-2987f3fae79a"
        },
        "item": {
          "id": "95dea071-61e5-4574-b3cc-930c7a9330da",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "49c9b10b-3f79-408f-80c5-5f5feef2bc2d",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "50fdd377-3b7f-40a4-a496-27e9da252f7a",
        "cursor": {
          "ref": "17fe94de-ac5f-4f23-b051-d117dd73c46e",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8a343559-1426-472a-9cf5-3705ad6150cc"
        },
        "item": {
          "id": "50fdd377-3b7f-40a4-a496-27e9da252f7a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "10198453-4d28-4014-bd9e-fc10ba7dc0dc",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e4cf66e5-b179-4e1d-8765-7f944581b563",
        "cursor": {
          "ref": "727dd1dd-bf38-4590-ba48-696a648544ee",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "93111d4f-8a54-491d-972c-b154981b286d"
        },
        "item": {
          "id": "e4cf66e5-b179-4e1d-8765-7f944581b563",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "57d1f985-7ee9-4b2b-b2ba-e73a9290cf06",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "65799129-8ce1-4a04-ac3d-a4b96f3c300c",
        "cursor": {
          "ref": "9b579590-c115-4624-992c-f0013474081b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e0a78287-0d1f-4ab7-9652-3eb73e74557e"
        },
        "item": {
          "id": "65799129-8ce1-4a04-ac3d-a4b96f3c300c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1a8f5cbc-2efc-45c5-8d19-8fd6022671eb",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "53ed03a1-026c-452a-9387-bb3a7c8fc2e8",
        "cursor": {
          "ref": "1e24d669-70ee-4a81-8740-2ccc53d80fb6",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "63237ea3-ec98-4755-a018-b78e3ad3a36a"
        },
        "item": {
          "id": "53ed03a1-026c-452a-9387-bb3a7c8fc2e8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "84f6c1c0-214a-4b30-a3b9-a625044b0a3c",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "45077ff7-d653-4dbd-9858-528dd87e481b",
        "cursor": {
          "ref": "7858abb2-f6cf-4530-9367-1dd2168351ef",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2004983f-9c6f-44e2-8458-bed92e96cf0f"
        },
        "item": {
          "id": "45077ff7-d653-4dbd-9858-528dd87e481b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e615ba61-b6a4-4512-b836-9e1d645d27b8",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1b019440-c4f8-4755-936f-29bffc4941a0",
        "cursor": {
          "ref": "be79cdc4-3924-4f61-820a-b3c954a2eb6e",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "03ecb03a-29e5-4176-820d-e5d68bb12081"
        },
        "item": {
          "id": "1b019440-c4f8-4755-936f-29bffc4941a0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8158e12b-ea57-4cc4-aa81-f6528f9bdd03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b295bf47-40fc-4c56-80bb-c84c7f8265e6",
        "cursor": {
          "ref": "5c6982d8-18a5-4667-9aa7-7808fbd9cf7d",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a4740d11-766a-4d19-a49e-ab78967c5bed"
        },
        "item": {
          "id": "b295bf47-40fc-4c56-80bb-c84c7f8265e6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "227ca614-1c0f-458c-9aca-a5ce5ae3bf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43781d7-f54f-4fe1-b88d-8691600da5f5",
        "cursor": {
          "ref": "b2319acf-930e-410e-9397-437da84e7b72",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1e818a8f-a153-477b-97b4-e2c0ddac1be0"
        },
        "item": {
          "id": "d43781d7-f54f-4fe1-b88d-8691600da5f5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0d2d0346-fe04-424c-94f2-d1c873b96e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb43fbe-03b1-4650-906d-b331fad3abbd",
        "cursor": {
          "ref": "41a3a1b2-5e0e-490b-8872-61b919bf5935",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8ed1d1ef-0473-4bdc-879a-3e709854382b"
        },
        "item": {
          "id": "5fb43fbe-03b1-4650-906d-b331fad3abbd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f9caaefa-e67c-481f-a854-95aa57ae3f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7c3067-d6a3-4305-9727-b1a6ccd3375b",
        "cursor": {
          "ref": "e5a9c608-eed9-479b-a2f5-6fb6c2c519b5",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b33d7190-3d6c-4592-9300-c40619a1e285"
        },
        "item": {
          "id": "ae7c3067-d6a3-4305-9727-b1a6ccd3375b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c5995a79-368a-4fd0-8f42-4db1fa79ced8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b6e2df-3122-4c32-bc57-21012c32a0c5",
        "cursor": {
          "ref": "8796e0da-95ec-497e-99e8-79193f7177c9",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bf179f9a-6108-4fe8-81f0-beb0e72371bd"
        },
        "item": {
          "id": "35b6e2df-3122-4c32-bc57-21012c32a0c5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3fe84185-6fe3-4b79-9690-d62cdeb55532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850c82a8-2fe0-4f9e-a333-524b58ee73be",
        "cursor": {
          "ref": "b53ea18f-fe74-48e3-89d6-d90c0ccc8355",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c6e79ae4-cc3a-430c-8113-abd7874cda6c"
        },
        "item": {
          "id": "850c82a8-2fe0-4f9e-a333-524b58ee73be",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7754075a-cc27-47b2-8ccf-f42383603a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049b8df4-60a0-430d-ba73-2514e75eaf6f",
        "cursor": {
          "ref": "fd4d360e-f4ec-42a5-bffe-cf7dc4c73a6a",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "79fd5350-e1bb-431c-bd5f-0be3a000c5ef"
        },
        "item": {
          "id": "049b8df4-60a0-430d-ba73-2514e75eaf6f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a470df47-a9e8-40cc-9a65-39c09c380506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e7ec8c-ebac-4e3a-946b-123858cc22c8",
        "cursor": {
          "ref": "39eb230b-3414-44bf-b4dd-56c4d3f34198",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7fd8a86e-d0e7-4fcd-b8b2-d4eb52232bdb"
        },
        "item": {
          "id": "c0e7ec8c-ebac-4e3a-946b-123858cc22c8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "89ef279f-4902-47a0-8b4d-279f48e3ea66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa40e70d-d784-44b8-9c8a-c564080ed809",
        "cursor": {
          "ref": "ede9d7e9-fa88-4d3b-8d3b-b55c5c04cdb0",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5d1eae9d-2a48-451b-98b4-a8f4b2a143b1"
        },
        "item": {
          "id": "aa40e70d-d784-44b8-9c8a-c564080ed809",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "32089961-b8f6-438f-ac92-df61344f0cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dbd34f0-230a-40ce-a15b-d785b33baab8",
        "cursor": {
          "ref": "b9b68e47-41dc-4394-b24f-71cf9da3c34b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a6a0b301-66cc-4e12-bd90-66c116084033"
        },
        "item": {
          "id": "2dbd34f0-230a-40ce-a15b-d785b33baab8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "eb44a2c2-29f0-44b0-8da2-f701bdbfc9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ef1454-cc5c-47f7-af3e-4bc465fc08f4",
        "cursor": {
          "ref": "dfae7c48-b856-4085-8571-c9a85cec0b37",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "062aff1f-7f57-46b9-9c72-f016be9577ba"
        },
        "item": {
          "id": "c0ef1454-cc5c-47f7-af3e-4bc465fc08f4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "74e7a12e-c67a-47bf-8b19-b415c9063a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6bcb0d-fb4b-49de-9cd2-ddf2866e8b9a",
        "cursor": {
          "ref": "eec09b7e-6b28-4efb-9427-b7a058586f25",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4ba3ba12-39be-4bd6-b8ce-aa96d5d5c4b7"
        },
        "item": {
          "id": "6e6bcb0d-fb4b-49de-9cd2-ddf2866e8b9a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0029ed12-3053-447b-8775-7c7f7960d851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c118c4-1b61-444a-b728-fa6fcff5659d",
        "cursor": {
          "ref": "87bbfd1d-2ea1-4e83-a7aa-a2e189a1e422",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "827d799d-6ca7-4244-acb0-b9666fa78e38"
        },
        "item": {
          "id": "d6c118c4-1b61-444a-b728-fa6fcff5659d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4707e7b3-35a2-492e-af15-fd2658f10708",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "61e8fe33-1b21-4fc4-b5a2-7595bae8689b",
        "cursor": {
          "ref": "21356403-81d6-43e7-82a1-0145f6928f63",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "16717894-3744-4e75-ae69-99b45798d15f"
        },
        "item": {
          "id": "61e8fe33-1b21-4fc4-b5a2-7595bae8689b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d7f9fae4-2cdf-4553-9ca3-467a305d6f24",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1c2b6688-5600-44b9-a5cc-21abc47a3617",
        "cursor": {
          "ref": "a742879d-ecec-4c41-a59c-e275d2a9424f",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a0411d76-2d86-4519-a975-4601c7214849"
        },
        "item": {
          "id": "1c2b6688-5600-44b9-a5cc-21abc47a3617",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1ffc6f94-c64e-4faf-8617-803d4c894909",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c081246b-563c-4784-85ef-43cd71076cff",
        "cursor": {
          "ref": "416a433b-3d78-4deb-9b47-4ea09d3fe0c7",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e4b1ee25-49ef-4a01-9906-eb760019172c"
        },
        "item": {
          "id": "c081246b-563c-4784-85ef-43cd71076cff",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7372a43e-ace0-4073-89f9-f9aa8463d7bb",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8e5b2e56-3ef5-45d0-91dc-254369566a70",
        "cursor": {
          "ref": "017f21f5-640a-4150-a691-c31aac6a05b8",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f3ce4993-e192-44c2-8660-9923edd36578"
        },
        "item": {
          "id": "8e5b2e56-3ef5-45d0-91dc-254369566a70",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "35bbae74-fdd7-40db-abcf-801d049eb54e",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "bc9a05d8-7f37-416a-9afc-cdb57016630b",
        "cursor": {
          "ref": "f2550b4b-d0ec-4a98-9e03-defd632a60d9",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3e0b163b-819e-4400-8ffe-cd289fbca2a0"
        },
        "item": {
          "id": "bc9a05d8-7f37-416a-9afc-cdb57016630b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "70db6fd8-ed7c-4d97-a92e-1d9c40a04b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93794297-f90a-4248-9085-d6f08cfdbb3e",
        "cursor": {
          "ref": "67b4733d-d14f-49f9-bb4b-ab606854a748",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "883ec2e7-d3f8-4ab4-bbb9-a76b28877688"
        },
        "item": {
          "id": "93794297-f90a-4248-9085-d6f08cfdbb3e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "de21a98b-102d-40fa-afd3-2487e17b5333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b71212-be3e-48dc-aa1c-e350433cbeb9",
        "cursor": {
          "ref": "ba9389f0-8a2d-4bf4-a01c-328861934c68",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b22ff39b-6904-468b-9b24-4c702a1dbfe4"
        },
        "item": {
          "id": "95b71212-be3e-48dc-aa1c-e350433cbeb9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f4004399-aac1-42ce-a212-e0e28ebf5245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dddc2349-1d9e-47fc-a051-dfec5ca9a886",
        "cursor": {
          "ref": "2040be43-6849-42b7-a1b7-cc773ffb85a1",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a283e2fd-49b5-4403-8d01-95ffb48364d0"
        },
        "item": {
          "id": "dddc2349-1d9e-47fc-a051-dfec5ca9a886",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6447bd61-be33-439d-95fd-a789f4da47f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf88842-54ad-4148-bdef-24378d555214",
        "cursor": {
          "ref": "c6042120-e1a7-4095-a43b-d703bf54dbd4",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "56b04bce-1679-437a-96bb-e53b3f7880c3"
        },
        "item": {
          "id": "1cf88842-54ad-4148-bdef-24378d555214",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "42ccccf1-245d-4504-b950-6afcf5b5419e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8106f0-1e2c-43ae-b2b8-740047b9afbc",
        "cursor": {
          "ref": "5fd697ac-ba0a-4139-ae1e-5e6fe63bce4f",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "34af94ea-c97a-4b3b-a963-ea3b55ec7151"
        },
        "item": {
          "id": "dd8106f0-1e2c-43ae-b2b8-740047b9afbc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cf229eeb-1815-4bf4-b2cb-48f6a0a0dde6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2050d557-688c-4a46-b28e-2d34fd578821",
        "cursor": {
          "ref": "8f765fbe-8a79-4ea2-80c6-21bdc565b56a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "184f5d18-cdf3-40c8-aaaf-584df036a810"
        },
        "item": {
          "id": "2050d557-688c-4a46-b28e-2d34fd578821",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bf96ff6a-43cb-4980-af62-83517a0ea5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbc29bd-bf47-47d5-888f-6157fb3f86bf",
        "cursor": {
          "ref": "8fb7e085-ef93-49f1-a3b7-c44f3d3fc6f4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3c92fa26-3e31-4fab-8fd8-45b8a9c5fe12"
        },
        "item": {
          "id": "cbbc29bd-bf47-47d5-888f-6157fb3f86bf",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f7045607-299d-43a7-bf1c-703205d88b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5353ead5-adec-4a8c-943e-a86731e5ba9e",
        "cursor": {
          "ref": "fc5846d6-3e45-4dd8-8bd8-38f872b2ca50",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "86eda75a-e700-40ea-8be1-b238994b0f00"
        },
        "item": {
          "id": "5353ead5-adec-4a8c-943e-a86731e5ba9e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "080d782a-df5d-4b47-b7ee-0713b5e4901d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f0272e-3614-4936-8491-d1a5d65575a0",
        "cursor": {
          "ref": "b8fee103-4034-4fb6-ac1a-83f972476c3f",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5868fdb2-31c3-4df1-a0b8-c4052bdb3a39"
        },
        "item": {
          "id": "14f0272e-3614-4936-8491-d1a5d65575a0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "de70e04c-7188-459e-a6d9-aba0798ce211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ce6cef-e8f8-43a8-b9b7-b77601fb608d",
        "cursor": {
          "ref": "4098679d-3da2-40ae-bfb9-7408592ed540",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f19bf526-af9d-40e4-811e-47655dbc63ad"
        },
        "item": {
          "id": "91ce6cef-e8f8-43a8-b9b7-b77601fb608d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6799dd56-7ba8-4422-86a9-d62e30b2edea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15c3fa0-5cb3-4043-bc0e-caeff45b8e29",
        "cursor": {
          "ref": "8f17ae4a-e0d7-42f2-a2e6-e5c5f481f0b7",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c89fb5af-02a9-4572-97c5-0cac817df4ac"
        },
        "item": {
          "id": "f15c3fa0-5cb3-4043-bc0e-caeff45b8e29",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e4cb875e-adad-448e-aebc-990171d5c24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0801e2-d735-43d8-89b6-897ce57269db",
        "cursor": {
          "ref": "50d724ac-c123-4784-89b6-246e1745941d",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9a78d1b5-ba47-45a9-8ea1-6913e873c0f9"
        },
        "item": {
          "id": "7d0801e2-d735-43d8-89b6-897ce57269db",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9e966c3e-372e-4190-b639-6b079f80603d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa40e53-6e49-4018-bca4-a979323f5b7c",
        "cursor": {
          "ref": "b46e9113-8429-4cce-a73c-8819d357b4ec",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dd53941e-5c6c-41e7-be5c-acca69cb4c1a"
        },
        "item": {
          "id": "4aa40e53-6e49-4018-bca4-a979323f5b7c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2c71919a-c266-48ab-b328-1e696db3bb1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9add4c-1d1d-4660-a45d-93cf34411db7",
        "cursor": {
          "ref": "0ea2a171-2dc6-49d8-a1a2-0ed431e16908",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "94ef06da-bbc3-42ea-a32c-72f6dc0a8ede"
        },
        "item": {
          "id": "5f9add4c-1d1d-4660-a45d-93cf34411db7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "23160d5a-8030-4ac4-8322-f91feaa9c07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42276b6-d0c0-40be-9b4f-8d3f8d69638e",
        "cursor": {
          "ref": "4aab172f-e53e-41a8-97e6-ddb9b275626b",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "66bf73a3-4e9a-4f1c-af10-e6852a7327c5"
        },
        "item": {
          "id": "e42276b6-d0c0-40be-9b4f-8d3f8d69638e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "46efedd2-f81f-445c-ad1c-9358c8f883fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02de9b2-b816-4761-805d-0c5e48e7982a",
        "cursor": {
          "ref": "31a22653-2ea0-449c-8a90-dd8b542c1e80",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8ca9e98c-f814-4d2f-9158-5d8dffe22765"
        },
        "item": {
          "id": "c02de9b2-b816-4761-805d-0c5e48e7982a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "64a186bf-ab90-4547-9e5a-f93a1aec3c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427e516a-95a3-49b0-9d52-3b5e0fb79423",
        "cursor": {
          "ref": "4a7ee41d-5455-4a78-94ad-efae976a49b7",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6cb1baa9-ee11-4337-ae40-ca2248f59fb1"
        },
        "item": {
          "id": "427e516a-95a3-49b0-9d52-3b5e0fb79423",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "00404dac-98ea-4a2c-b116-0a73d45095c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1673f0b7-b7f7-49ef-bf9f-c0f98992ce83",
        "cursor": {
          "ref": "db1d4fb3-2218-45f4-a4e8-01a3eb5fc493",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6a35025a-cae6-4508-93a2-09f40c1d80b1"
        },
        "item": {
          "id": "1673f0b7-b7f7-49ef-bf9f-c0f98992ce83",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "373d60e7-935e-41f2-9b3f-af6f3185081c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f950fe-4c06-4041-b424-c4301634f952",
        "cursor": {
          "ref": "b8361414-49ed-46c2-a8f7-d754ea28b464",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "96a16c4d-1142-4eba-86ea-101d6c92ddd1"
        },
        "item": {
          "id": "35f950fe-4c06-4041-b424-c4301634f952",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2d9f11ed-c2ef-456b-89fe-33cea1b1e5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa38b922-7ce0-4245-9652-89d90712b20b",
        "cursor": {
          "ref": "2147ea25-2951-4f76-9077-cce5a7dfb6ed",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "21730cc3-60ef-44f4-bc44-67772a17e33c"
        },
        "item": {
          "id": "fa38b922-7ce0-4245-9652-89d90712b20b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "731b0974-f4cd-4cbd-8457-9e5b5cc6b572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88584734-d6e1-4399-a4d2-f509312bfa67",
        "cursor": {
          "ref": "100a95be-3701-417e-91ca-78777667b4c7",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6f5c59e6-45ae-4a0b-8ad3-27727a67a10c"
        },
        "item": {
          "id": "88584734-d6e1-4399-a4d2-f509312bfa67",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c7efaa58-3908-4fcf-b5f0-5e6742a4bd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01590e43-02e7-447d-8140-f43cc580ee7d",
        "cursor": {
          "ref": "5a30d977-f858-47f7-b732-f2eda5c95b13",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0f2662c5-b20c-4eed-91a7-1aa210963196"
        },
        "item": {
          "id": "01590e43-02e7-447d-8140-f43cc580ee7d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c8acb17e-a515-40dd-a6bb-c1310a243b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b83830-cdf5-4aeb-b682-e297486f6198",
        "cursor": {
          "ref": "3c9e7511-4aac-4eb2-9782-90936309152f",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5f5ca796-6c6d-45ee-af59-aab10b775545"
        },
        "item": {
          "id": "e8b83830-cdf5-4aeb-b682-e297486f6198",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c37fa794-12d2-4684-9d7f-25d4c61af5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628655dd-f418-4799-a48f-b1544799c5a9",
        "cursor": {
          "ref": "5f2aec20-125f-4878-aee0-0e86dd846fc4",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "37e44c32-4303-4a46-a8c4-8de38fac007d"
        },
        "item": {
          "id": "628655dd-f418-4799-a48f-b1544799c5a9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "683dca18-b1dc-4f67-a2ea-9e104d1bcc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b682c365-4267-4a7d-a712-eeb129a10d12",
        "cursor": {
          "ref": "95befaa6-89c8-4009-8c7e-66f827335104",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6e7fc832-f1f6-4b0e-9ef9-04af871904e5"
        },
        "item": {
          "id": "b682c365-4267-4a7d-a712-eeb129a10d12",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "57247a66-7cf5-46d4-981d-839ff9dde2ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453f101f-29b5-4e8a-a205-e7cd2a3de8f6",
        "cursor": {
          "ref": "e4a191ab-f477-4f5f-b081-7cb63628bdfa",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "48aa6dac-89cf-4696-bad9-ba93dfc66070"
        },
        "item": {
          "id": "453f101f-29b5-4e8a-a205-e7cd2a3de8f6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "79382ac4-880a-4400-80c3-e39193885a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a514296e-494f-4c2c-8ed7-6dac666a5f27",
        "cursor": {
          "ref": "b59bf845-3d82-46af-9380-1ec8a1e18707",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1443e486-7a89-465a-b707-fa63c9aaba2c"
        },
        "item": {
          "id": "a514296e-494f-4c2c-8ed7-6dac666a5f27",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0be196be-fc4e-4fa9-a2cc-68e0131a8c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0c3b8d-9ebf-45eb-b1f7-d71e63307e49",
        "cursor": {
          "ref": "1b5eab8c-4980-4481-91e6-b09f0c42a014",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bf84b281-bcb1-4f2f-aafe-cae5d0401314"
        },
        "item": {
          "id": "dd0c3b8d-9ebf-45eb-b1f7-d71e63307e49",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ba95bc89-1d76-404c-b074-7027e6b64254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a83b51-3358-4bc4-aa0c-f6dac557f14a",
        "cursor": {
          "ref": "4d9b56f5-6327-4a07-9010-d64312fa8e2b",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "64ce2d8d-e957-4ff2-ad5c-802bdb8a28b6"
        },
        "item": {
          "id": "d1a83b51-3358-4bc4-aa0c-f6dac557f14a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0ac58185-ba32-46c9-ae78-35dd14d558cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d460c39b-9c94-4e6a-bbec-5cb092954ea4",
        "cursor": {
          "ref": "62c93c49-e13d-4a85-b42b-a2e473a6186c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "87946003-720f-44ec-997e-73fb120f7125"
        },
        "item": {
          "id": "d460c39b-9c94-4e6a-bbec-5cb092954ea4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7ae967fc-f325-418c-9fa3-0cf6564b5b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21471c6e-d8b3-47ed-98b5-fce5c268c555",
        "cursor": {
          "ref": "e010ca55-6942-437a-90f5-c5afdb76eaa4",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f7e54f5e-5291-4830-8e23-5a64d5f2b1b8"
        },
        "item": {
          "id": "21471c6e-d8b3-47ed-98b5-fce5c268c555",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "525e9a1a-9bf8-40e7-b7fb-7f65553b5036",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f90cdc-0485-442d-8c4f-014695d0b3c4",
        "cursor": {
          "ref": "d50290ec-5901-4b45-a870-15807ec11127",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "06dbdfca-63ee-46fd-9b10-ea99e10281b8"
        },
        "item": {
          "id": "88f90cdc-0485-442d-8c4f-014695d0b3c4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4736374d-121e-4e8e-96d0-364864c2e93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6b23911d-0588-40b2-a21c-09da4699df26",
        "cursor": {
          "ref": "78529bed-5d7f-4928-a57b-e6078b72d6dc",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c8b75832-6180-46ea-8d36-09e956d6fba0"
        },
        "item": {
          "id": "6b23911d-0588-40b2-a21c-09da4699df26",
          "name": "credentials_issue"
        },
        "response": {
          "id": "09686285-e72a-49af-8999-9f74ae62fce1",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f6cbc4-bee4-4281-87a4-a162f575d8fe",
        "cursor": {
          "ref": "7c408163-fddc-4389-be12-a5df40d6e00f",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bfb02ac9-7f02-48fa-b4e6-a6bd1f09d3aa"
        },
        "item": {
          "id": "10f6cbc4-bee4-4281-87a4-a162f575d8fe",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a3af5168-a832-4701-a6b1-86122c87d06e",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a475e5-9cbf-4212-926a-ab12f730d213",
        "cursor": {
          "ref": "bbffe739-a4ce-4492-bfdb-a50c7e7abe0e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9d7921c7-d4e6-4c1a-9c47-3614c1d61b6c"
        },
        "item": {
          "id": "b5a475e5-9cbf-4212-926a-ab12f730d213",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "52d83524-f381-42e8-a2b0-a7c4ba247713",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60f35f9-fa60-4268-a2c2-b84b241595da",
        "cursor": {
          "ref": "47149b3a-d1ee-410e-a318-b109e15f4665",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "51240a9f-0e19-4d2e-8d03-6e26bab5da1c"
        },
        "item": {
          "id": "b60f35f9-fa60-4268-a2c2-b84b241595da",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fd613b81-05e8-4b7f-a3d1-7af3a3d11095",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ccd74b2-415c-43b9-9059-bdb2e4c48dd0",
        "cursor": {
          "ref": "7fd07106-d316-43e6-9ec1-4ccef8a9d67f",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3edd1d60-f0dc-42e5-9b1d-c68f87662602"
        },
        "item": {
          "id": "9ccd74b2-415c-43b9-9059-bdb2e4c48dd0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8922b1de-5273-4d56-8278-f0575c69768f",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-14T00:36:35.277Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-14T00:36:35.277Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "e7f811d3-7d7e-4ea7-821b-43c0e65620c2",
        "cursor": {
          "ref": "7a852933-47c2-4f22-b5ff-72d05530d22c",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4fa0ba63-6f70-45af-8b61-487404d345fd"
        },
        "item": {
          "id": "e7f811d3-7d7e-4ea7-821b-43c0e65620c2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f6fea95c-70ff-461c-919c-1c35e7137176",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d88b2e8-97ee-4c59-b87c-5465c0cb33cc",
        "cursor": {
          "ref": "6150d9c3-c439-4312-9148-ec8fe376e6ad",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "01168306-9d64-49fe-8935-32d862c78351"
        },
        "item": {
          "id": "1d88b2e8-97ee-4c59-b87c-5465c0cb33cc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6180c107-9768-4412-9b97-56157502cc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a02df01-8bad-4256-9205-59fd056c167c",
        "cursor": {
          "ref": "ebf9c351-ae79-4a29-b3ce-56d7083e1aea",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e03f7113-1eac-4f5a-b969-b64c0dae5b15"
        },
        "item": {
          "id": "9a02df01-8bad-4256-9205-59fd056c167c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "af85b139-7978-482c-b628-14cac2dad633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5afbd5f-ffbc-4678-93ea-c29a04317268",
        "cursor": {
          "ref": "169604a0-5352-493b-977f-8528424e7d11",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3cf088bf-e511-4d26-acf4-8a2763e99047"
        },
        "item": {
          "id": "a5afbd5f-ffbc-4678-93ea-c29a04317268",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f4dd2d20-1e23-4a79-a3b1-66b4f2ed59a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0c49a2-9c80-4f57-adeb-e489c7ea46ea",
        "cursor": {
          "ref": "bf4bb2cc-6981-4c44-894f-332c9942c0ce",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "166533c4-b0aa-4c3a-bf68-a56805681abc"
        },
        "item": {
          "id": "1c0c49a2-9c80-4f57-adeb-e489c7ea46ea",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e6b23543-d87c-4737-a7d6-ae4e15136e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100b0c17-3c88-4ca4-a35a-d8214a97ae35",
        "cursor": {
          "ref": "7161ad2c-8cca-421a-87d2-2bcf51991623",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "99936a3c-1705-4d08-9cda-95141a80ada8"
        },
        "item": {
          "id": "100b0c17-3c88-4ca4-a35a-d8214a97ae35",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5244c475-1cef-4f4d-a97c-62bd5f03100b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffec898-0f8d-4e73-aebe-a02ea16a9013",
        "cursor": {
          "ref": "4bf4a4bf-55c4-4791-a686-db957c4dac99",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6b6cafd8-203d-44d6-af45-357d80891137"
        },
        "item": {
          "id": "4ffec898-0f8d-4e73-aebe-a02ea16a9013",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "912da29f-1d76-448d-9497-4af2a7fc4821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e989c86a-8471-4014-b717-e5c175e432eb",
        "cursor": {
          "ref": "3e90575b-c897-41ca-a1aa-95a6025f9abc",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cdf6d873-43d4-4b70-add3-317b61a1c70e"
        },
        "item": {
          "id": "e989c86a-8471-4014-b717-e5c175e432eb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3ae04193-bad4-448d-a364-72c5b7e44c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbdd504c-7931-4448-983f-25dbc631af01",
        "cursor": {
          "ref": "84cd023f-85fe-4dbc-b3d7-59762b7ed036",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "92051925-a2a8-4339-a3ba-301da0030811"
        },
        "item": {
          "id": "fbdd504c-7931-4448-983f-25dbc631af01",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4207bb5c-c869-4768-b1ce-c31daa16f7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ff0f8f-38cd-4e40-ab36-cf4be85218e7",
        "cursor": {
          "ref": "1d8a9a2a-bdc1-4937-abc9-622767b060ac",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d2f9305c-922b-4789-9f92-4295bd42b04c"
        },
        "item": {
          "id": "40ff0f8f-38cd-4e40-ab36-cf4be85218e7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "05799eaa-b409-4801-b420-2dc1f567a878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a093819-9365-49b3-aada-2bbb106b6563",
        "cursor": {
          "ref": "1fff795b-b546-438d-8c57-1283eebed464",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a16c8cb9-ca17-4bff-b7d0-72aa39ad6911"
        },
        "item": {
          "id": "5a093819-9365-49b3-aada-2bbb106b6563",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "906b72db-7a03-4390-bab8-a48b56354dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f29037b-07ce-4acc-ac85-2434aee0610c",
        "cursor": {
          "ref": "d557ffa9-78e9-442b-b8d5-5a8e78d19cb8",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "63a007a5-5859-4823-b5f9-9b4dce6a741b"
        },
        "item": {
          "id": "6f29037b-07ce-4acc-ac85-2434aee0610c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0d44e285-5818-4224-9aa4-f0604ef3b469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1013b38-fbd1-4010-89bd-be2398f04d6a",
        "cursor": {
          "ref": "85722cbb-b655-4908-885b-7c5d9ec59d59",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ee57cd0c-52df-46c1-9620-7f5c277eead5"
        },
        "item": {
          "id": "a1013b38-fbd1-4010-89bd-be2398f04d6a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4cff84c2-2425-4c03-b161-11955874339b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99675d2-7d23-4997-86ec-3c8f1fa3892b",
        "cursor": {
          "ref": "673048c5-ff46-4e41-aafb-918d47623a61",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1a3e419b-da39-42fd-a4d4-2355f5405654"
        },
        "item": {
          "id": "f99675d2-7d23-4997-86ec-3c8f1fa3892b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "aab24b24-bcab-4603-a251-1cf2eb08c1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048c8182-a919-406a-8a10-5ba4d77ba440",
        "cursor": {
          "ref": "439c4a6c-b584-4280-9f28-69daa8fae3e8",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f4e3ec4f-ea7d-4b79-bee5-ef26332cdb13"
        },
        "item": {
          "id": "048c8182-a919-406a-8a10-5ba4d77ba440",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5617a6bd-964b-4497-8d86-dc811d98f22b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2de421e1-a31a-4518-be35-746e8e26e430",
        "cursor": {
          "ref": "abba1e09-e6f5-484e-b1d7-24303969298d",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0530d734-c1cd-43f5-ad35-20c77b10467c"
        },
        "item": {
          "id": "2de421e1-a31a-4518-be35-746e8e26e430",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6bbbfb7b-42d5-4837-8dad-5bc255648115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935b61d7-f671-476b-a4ce-18a3e42aa2d8",
        "cursor": {
          "ref": "52f63739-1f86-4edc-9280-6bda8bc572cb",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5f63bec5-0d4d-487d-95d4-59c1d707d539"
        },
        "item": {
          "id": "935b61d7-f671-476b-a4ce-18a3e42aa2d8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b3f74ba7-26e1-4d75-86c3-5d27782f26b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739184da-0ee9-4c18-ad22-c5572e2ff282",
        "cursor": {
          "ref": "6a840463-60cc-4677-a4fe-16fcd9b0ab75",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "57ad69a0-7c24-4f75-b89e-d6672575554c"
        },
        "item": {
          "id": "739184da-0ee9-4c18-ad22-c5572e2ff282",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4029ab2a-1077-4e07-8c49-5a4b4a783f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce037b3-2eba-485c-8a9e-ca00d8aab946",
        "cursor": {
          "ref": "30e56aa4-2d08-401c-9a20-734021958dab",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3d5ad063-140c-4d86-9937-ef6ce72eed91"
        },
        "item": {
          "id": "dce037b3-2eba-485c-8a9e-ca00d8aab946",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5918c53c-469e-4869-bd27-d44529dff423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d3541d-76ae-4945-a309-019bab406097",
        "cursor": {
          "ref": "afad4b3e-1ee5-4700-a72e-2df338458330",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "17023a69-5625-44d4-9b56-bea2d2acc0f7"
        },
        "item": {
          "id": "05d3541d-76ae-4945-a309-019bab406097",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "01a06e4b-894b-43a4-80ae-5f8d61daf3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5efe963-554f-44c4-a35a-0c82576363c6",
        "cursor": {
          "ref": "930de145-6fe5-42fe-bf9a-9c859a2454cb",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "68bc770b-0607-4013-8382-92912ee9bcbf"
        },
        "item": {
          "id": "f5efe963-554f-44c4-a35a-0c82576363c6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "af5ac9b6-8481-42bd-b511-7a2e03ab8b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036da156-6953-4591-90f2-385d911ff3c0",
        "cursor": {
          "ref": "3147c074-3778-4e9e-bc14-134a6301a52b",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3f0bd0f5-3330-445f-91c2-49589a5e7fff"
        },
        "item": {
          "id": "036da156-6953-4591-90f2-385d911ff3c0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5b83bd96-c29a-4637-bfb5-9efbdb6c792e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cae8507-8b5c-4533-8d85-2efcc3336b7b",
        "cursor": {
          "ref": "f876e528-2c43-4f93-9fc5-63a8b18acdbf",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "52cf67b8-2a39-4724-a199-e245de063fbf"
        },
        "item": {
          "id": "4cae8507-8b5c-4533-8d85-2efcc3336b7b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a257d28a-eaa5-4b4c-85d9-0890a36dfb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167775ed-51ef-4533-9a2e-8d432d2ca630",
        "cursor": {
          "ref": "de96f7fa-5162-4409-8588-ad1a9020871e",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0c22b6d7-404a-4150-a64e-019be3dfb808"
        },
        "item": {
          "id": "167775ed-51ef-4533-9a2e-8d432d2ca630",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "46f69a1b-14ed-4bf5-90a3-ad68c5987012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11164272-d658-4c0a-a877-f02534bf1097",
        "cursor": {
          "ref": "fbd3841b-3616-4905-845d-c955be03f69a",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "40a335ea-456e-4e09-9152-ceeceeea9e4e"
        },
        "item": {
          "id": "11164272-d658-4c0a-a877-f02534bf1097",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "10c8921c-d6f6-40d3-984e-0d37eb4359fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2e2a6a-e851-4262-9fc9-4193922fcdc4",
        "cursor": {
          "ref": "7b1973fa-b880-4436-8931-5028c2522b6e",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f6a551b1-4681-4174-b22a-3a5fdfaa1a34"
        },
        "item": {
          "id": "6e2e2a6a-e851-4262-9fc9-4193922fcdc4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "88c1737a-368c-4b8f-876b-80dcd709151d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c05a261-97d9-4aae-b154-e3d25eba2622",
        "cursor": {
          "ref": "3b528bba-7428-4fe6-bc5f-086e8a46c1a2",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "20e4b5a1-85ed-4572-8de2-4cd39c0b7b03"
        },
        "item": {
          "id": "0c05a261-97d9-4aae-b154-e3d25eba2622",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "66cb8074-e8e0-4659-9509-13fa1603b23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51a382f-8617-4162-a36e-052c709d092a",
        "cursor": {
          "ref": "0f43933a-2c97-4eaa-9ce4-d29de7e454a0",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c4187f6a-d617-40b8-b72d-c8fabafbbf0a"
        },
        "item": {
          "id": "d51a382f-8617-4162-a36e-052c709d092a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4a1b76d7-d9d0-46a2-b0f6-455e19addf7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7fc749f-63c2-4822-a127-0dbbd966315e",
        "cursor": {
          "ref": "ad89b4b5-5e6e-46d3-b900-3f2a95392b45",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e18ad05d-12d2-4030-aded-ce938bd853c0"
        },
        "item": {
          "id": "d7fc749f-63c2-4822-a127-0dbbd966315e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "41b0d711-2974-4c0d-944a-0ba5a5a34310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12facd7-268c-4d85-a35f-00a09f640535",
        "cursor": {
          "ref": "3354eed2-69cf-461f-b72f-696b8de8e880",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8720cc61-40be-444b-9525-c80169dfece8"
        },
        "item": {
          "id": "f12facd7-268c-4d85-a35f-00a09f640535",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "63dd301c-ee25-4c9c-a0b8-c826bd5b0468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b6bf7d-4cd8-4b00-ae95-f3c6549c7440",
        "cursor": {
          "ref": "58a99cc6-fa3b-4e18-8cd8-113c09049ebb",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3d9b7f02-8903-4838-9c23-78fceb587389"
        },
        "item": {
          "id": "97b6bf7d-4cd8-4b00-ae95-f3c6549c7440",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d36a7a3c-88f1-4e6e-8530-1387ee76b098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e03544-1a91-43d2-87b8-c4b86d65d0bc",
        "cursor": {
          "ref": "810c7697-d949-48cd-846e-62ffa74033b4",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ed1a3d15-5d29-4c32-ad9d-caecfa9b461a"
        },
        "item": {
          "id": "51e03544-1a91-43d2-87b8-c4b86d65d0bc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "36545cda-fcf5-42ce-aadc-1e69cd0f4498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8cf478-9744-4a76-9ea5-224a2a8bdae5",
        "cursor": {
          "ref": "cca26d5a-e7eb-4fc6-8b15-ea1ac142b1cb",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "38593b11-5743-49cb-a261-5ae13bb84d5d"
        },
        "item": {
          "id": "5d8cf478-9744-4a76-9ea5-224a2a8bdae5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "eaaa2913-b9c9-43b7-8e64-a40cf6066f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b201dc-abe2-4053-b247-541723a42bba",
        "cursor": {
          "ref": "dcf6177d-8159-4e79-bb07-0ff550df38aa",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0d6a9330-e344-45c0-bde0-ba1c04440582"
        },
        "item": {
          "id": "88b201dc-abe2-4053-b247-541723a42bba",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1cc5ebe5-8c66-4515-8e07-15ea0c4c1d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10a9592-feb1-4896-9e58-bd7c9b360ca4",
        "cursor": {
          "ref": "70294bcb-0be4-44a4-8ad3-82f4ed5bfcd9",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ddfa35e6-f95a-47fa-a58e-cb89c2fe3701"
        },
        "item": {
          "id": "e10a9592-feb1-4896-9e58-bd7c9b360ca4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5580f01d-a29e-4884-be1c-07a0639713cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2764ea97-34fa-4238-b352-d8dc5dbf774a",
        "cursor": {
          "ref": "6e4db2ef-b23b-48d8-931c-1b5788316041",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2c618f98-a673-48c1-ac9d-22271faee9d0"
        },
        "item": {
          "id": "2764ea97-34fa-4238-b352-d8dc5dbf774a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "343e45bf-0845-46c7-a7d8-d51179613259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c43007f-414d-4b28-ba9b-59a6fa324fc2",
        "cursor": {
          "ref": "df976666-8201-4e94-a66f-66ee7579a7f2",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4684d79d-c601-49be-b65c-2110365d4722"
        },
        "item": {
          "id": "8c43007f-414d-4b28-ba9b-59a6fa324fc2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9350e212-d369-4b7e-9b38-9135eaa0fccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c462308c-f21b-4d44-88f2-5f7907f5988f",
        "cursor": {
          "ref": "9b1a7e41-2003-42f9-b66e-bb98b2e02056",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "642efa9b-82b2-4cee-9b98-6cfa7806e868"
        },
        "item": {
          "id": "c462308c-f21b-4d44-88f2-5f7907f5988f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a33763fc-604a-4a75-8b37-3732f854d135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8784c2-3fda-49aa-ab21-6091c54289ce",
        "cursor": {
          "ref": "4bdb4904-cbc0-4eb6-a0c8-881e0d12c0aa",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "18a9e615-2e84-4193-9c8c-a8cdeafc8f3c"
        },
        "item": {
          "id": "2e8784c2-3fda-49aa-ab21-6091c54289ce",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3320be71-1e71-462e-af47-f5e0b3a9bbc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd452671-660a-45a7-862a-3343f2cbbd0a",
        "cursor": {
          "ref": "791ef6bb-cac0-42c3-a56c-78bd293d0e17",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ee5d95cc-4910-429a-8da0-fb7ca505573c"
        },
        "item": {
          "id": "dd452671-660a-45a7-862a-3343f2cbbd0a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "188a641b-70e2-4a45-8140-2fe3c1742c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e47cb6-3c57-47cf-88de-4304e45e9644",
        "cursor": {
          "ref": "640e39b9-d11c-4a24-9680-11a536d30d22",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a11808aa-773a-49a0-a460-63c3e13bf3a2"
        },
        "item": {
          "id": "e1e47cb6-3c57-47cf-88de-4304e45e9644",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1e13488f-d0b3-4e49-88a9-b7237fb84f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a77d90-0e65-4fa7-8fb4-f8b6efe0f982",
        "cursor": {
          "ref": "d9dc333c-822c-4d53-a7ae-6fc9bfcd75c5",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a1aa6b9b-6ad6-4821-92f2-40eb0c561d0a"
        },
        "item": {
          "id": "19a77d90-0e65-4fa7-8fb4-f8b6efe0f982",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2c2bdffd-030f-443b-b0a2-b22629da82e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0bd7f7-91d3-4940-863c-8649b26ea28a",
        "cursor": {
          "ref": "f758addb-b58f-4f45-a7e7-2ea2e8eb51a1",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "63cd85fc-056d-4479-906e-6824d10ac00b"
        },
        "item": {
          "id": "1d0bd7f7-91d3-4940-863c-8649b26ea28a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "84d89028-8a3b-40ab-82fa-53e495c0fdbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6968cad5-3e9f-4dfe-a521-9635a1527079",
        "cursor": {
          "ref": "7081abcb-5619-461a-9c2d-1a233731bd64",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e6d94c9a-82e8-4f1a-8b50-240b73c0dde6"
        },
        "item": {
          "id": "6968cad5-3e9f-4dfe-a521-9635a1527079",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d881bb79-b75a-4cf4-99e6-fe859856bd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953acdb6-fbd4-4fe2-a44e-de6408d99bc5",
        "cursor": {
          "ref": "b08c16ca-a1c0-46ec-86f5-90efd7c04660",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c31f1fda-04b4-4f5f-868e-0a1363f1568e"
        },
        "item": {
          "id": "953acdb6-fbd4-4fe2-a44e-de6408d99bc5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1f511404-e75c-4fa7-a2f9-6efe99a5a7c7",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a98c819f-9a2f-4f5b-a40f-cf2dbef061e4",
        "cursor": {
          "ref": "2e0fa5c0-2b7d-413f-85f2-5c5175abeb3e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c2d96b20-cf49-428f-b10e-948cac68c2c4"
        },
        "item": {
          "id": "a98c819f-9a2f-4f5b-a40f-cf2dbef061e4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e6922583-a6aa-4f07-a136-abca4a69caff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133af0f4-bb79-42fc-b2be-2e40f570e136",
        "cursor": {
          "ref": "502b7188-cdc9-411c-b45e-04ddc6fdf10c",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "41c5eeaa-3602-4851-bdaf-bea45ae08986"
        },
        "item": {
          "id": "133af0f4-bb79-42fc-b2be-2e40f570e136",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bd8ffdcf-cc8a-4bb2-bd4d-8f47c4ce0e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a006fbd-38a8-45ae-85eb-e02e79e89faf",
        "cursor": {
          "ref": "b8c7e6b6-ff0c-414d-846e-98d103b3b8ab",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d3077c36-a194-4b1b-873a-4bbd63b14085"
        },
        "item": {
          "id": "3a006fbd-38a8-45ae-85eb-e02e79e89faf",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "aefd93e3-b750-485a-9a22-4580031f6006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df27e20-3e13-48c8-8ba8-cdf9267d1f08",
        "cursor": {
          "ref": "50282a2a-18e8-4274-99e7-c1c7af6ead7e",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6d573703-e0e2-4440-ac2a-d1ea40d37c1b"
        },
        "item": {
          "id": "4df27e20-3e13-48c8-8ba8-cdf9267d1f08",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4a7f2e3b-4477-4187-a944-1047cbb5826e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13cfaeee-e393-4cf5-8c9e-e1acb2ebd429",
        "cursor": {
          "ref": "dbb6dfe3-5925-4954-909f-55e58cd27697",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1d167a84-657d-4071-9eb4-571e79d0cdf1"
        },
        "item": {
          "id": "13cfaeee-e393-4cf5-8c9e-e1acb2ebd429",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7cd183f2-49fb-4d21-8fc5-f964c003af9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7fbd3d-6b49-4adb-9f54-2a74e4a0f999",
        "cursor": {
          "ref": "a62eb19b-a9b5-4526-a6fb-a68e0595d505",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "18faf5c5-a73f-48a0-b19d-ced72f30c7bd"
        },
        "item": {
          "id": "9f7fbd3d-6b49-4adb-9f54-2a74e4a0f999",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "930cac0a-3dfc-4dff-9bc0-f26d19c3eae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdcf248f-aca9-416e-a740-2aba23b13099",
        "cursor": {
          "ref": "e37a4b28-7be3-42e5-ba18-cbc138998a55",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d605fc16-b484-4126-9af7-2e895f05881d"
        },
        "item": {
          "id": "cdcf248f-aca9-416e-a740-2aba23b13099",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1717981c-006a-40b6-b0e8-1ca820325bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f2bcd9-d359-44fa-b9a8-d23032519092",
        "cursor": {
          "ref": "84734eb4-7510-4b8c-ba08-369fb4de63c0",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3032610f-a374-4cd3-b2b5-3fef5222da54"
        },
        "item": {
          "id": "78f2bcd9-d359-44fa-b9a8-d23032519092",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4c702a31-697b-4c0c-9ffa-e969653e00c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c748422-02e0-41f0-b0e5-ec45bcb267a1",
        "cursor": {
          "ref": "ca932661-5a4a-4ed7-947b-bb07ff52dad2",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b8ed6e58-82c8-4e93-9a66-d19e5d427f31"
        },
        "item": {
          "id": "1c748422-02e0-41f0-b0e5-ec45bcb267a1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f5c62428-eb79-4bd2-b571-1f7cd3efbfa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ab92d2-a1f0-4928-814e-dbba3422b657",
        "cursor": {
          "ref": "6a211d77-41ec-4dca-9607-16e05d42b096",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a99b5932-0d6f-4b53-bdea-55ffd57534d1"
        },
        "item": {
          "id": "58ab92d2-a1f0-4928-814e-dbba3422b657",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "10f265cf-2e13-454c-8076-898889acf85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b072f07-3df5-4e56-a5e0-45c57123ab4e",
        "cursor": {
          "ref": "6259de42-9499-489a-9526-af761bee6bd9",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "724063cf-c252-4048-b730-df840ad8f8d2"
        },
        "item": {
          "id": "6b072f07-3df5-4e56-a5e0-45c57123ab4e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "37bc515c-9ec5-464e-abac-b0b368a73cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4fe5f7-e450-4d93-a012-b71d4e57d58c",
        "cursor": {
          "ref": "3a003052-cb5f-49bf-b8f5-9dcab23a490b",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a67d899f-b2cf-4ac6-a738-25572b0fd4e6"
        },
        "item": {
          "id": "9e4fe5f7-e450-4d93-a012-b71d4e57d58c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d95290f1-7c9e-48d5-b1d5-47f60661be6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a909e16a-b475-4d70-b0be-2510ad64e4a2",
        "cursor": {
          "ref": "a34a9615-6f18-4b47-a33c-00a6cec07160",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c184277a-10b6-48a6-a70a-fb6c4a832453"
        },
        "item": {
          "id": "a909e16a-b475-4d70-b0be-2510ad64e4a2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5a2d20f7-3b12-44bf-b801-d959f76e4ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54239833-210d-4819-a1c3-7ff61802a602",
        "cursor": {
          "ref": "6358f0b3-b030-4ea9-9baa-85fa94aeb4f5",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6fb2121d-6e2a-4f07-a0fa-44f9c1378e79"
        },
        "item": {
          "id": "54239833-210d-4819-a1c3-7ff61802a602",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c15abc82-7e41-45dc-9be0-fc541a992071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e362679b-3293-4696-9fd0-f537d4787412",
        "cursor": {
          "ref": "b9adf677-4a56-4590-a7b8-f5ffff88fc9f",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a8ace276-8c49-4ad2-88c6-3399d49be4f2"
        },
        "item": {
          "id": "e362679b-3293-4696-9fd0-f537d4787412",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3afe2717-5f65-4a8f-bbb7-572114018e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecabdfb-64b7-42b2-8ce3-817e575a2e0e",
        "cursor": {
          "ref": "fa021df4-a2d0-4991-ac62-f03a18c6012c",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5e15e518-3da6-4104-8a9d-9c6d68f1c052"
        },
        "item": {
          "id": "2ecabdfb-64b7-42b2-8ce3-817e575a2e0e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "240c36c1-c28e-4444-bfed-0f14ac606378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a497d7-17ff-4e8b-be51-d27d7dfa0566",
        "cursor": {
          "ref": "64da8a9d-5b46-48a8-b4a1-80305f787df1",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5aec6833-3e28-4c01-aa0e-b3cd7d39c44e"
        },
        "item": {
          "id": "56a497d7-17ff-4e8b-be51-d27d7dfa0566",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "92dee05f-81e5-4e47-8324-3b5908b806f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af7ba7f-7a67-40eb-8a67-da5ef70b5cf8",
        "cursor": {
          "ref": "e8e85c5d-3a59-4818-87cd-b782e087968e",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "990f68a7-8a71-4b7a-bc30-844f5bdd2d92"
        },
        "item": {
          "id": "3af7ba7f-7a67-40eb-8a67-da5ef70b5cf8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "daddc828-b057-4bfc-8f0d-9037bff22c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca2dac1-bebc-4337-abd1-631f640bbed2",
        "cursor": {
          "ref": "9d3d7e53-51c6-433d-a703-da75c91946f7",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c0eb1845-154f-462f-9214-8e48c025c5f3"
        },
        "item": {
          "id": "8ca2dac1-bebc-4337-abd1-631f640bbed2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e75bc9c2-2d09-4b3d-aa43-c872dc457d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac22b8e-298d-4ef2-b0be-511b58d5558a",
        "cursor": {
          "ref": "586ff26d-d213-4777-8eca-fe0db40c2d7e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4f133825-9018-494b-8e15-921526b06c4d"
        },
        "item": {
          "id": "cac22b8e-298d-4ef2-b0be-511b58d5558a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "11a6ac2f-fe14-485b-adb0-b550ec6828a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806ea4b4-7f96-449a-9e76-be05e36206f2",
        "cursor": {
          "ref": "495967ac-804c-409a-854a-d2c787c818a6",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c256b493-f26a-4e7b-a587-2c9c846f4cfc"
        },
        "item": {
          "id": "806ea4b4-7f96-449a-9e76-be05e36206f2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4ef88136-96c6-40ad-8b26-ddedadc4b86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45515e7-15aa-4e48-bbb5-d407213b3ac7",
        "cursor": {
          "ref": "3e1b61f4-eb4c-41f1-a227-7972e7df63e9",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8427ee7d-eb1d-441a-bb69-02cbb513a48c"
        },
        "item": {
          "id": "a45515e7-15aa-4e48-bbb5-d407213b3ac7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "da95bb48-4091-4f67-bc15-83ba63130aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5449a734-cf0e-46af-a5f5-959515b5febb",
        "cursor": {
          "ref": "38719508-71b6-483c-b512-bc7e2d4d068e",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "064e844f-e56e-4f6e-802a-d677d8288067"
        },
        "item": {
          "id": "5449a734-cf0e-46af-a5f5-959515b5febb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6f2d31e8-c0c4-4cbc-bb7b-f48cd1d6dff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defb7e47-de11-4cb0-b731-a5938c1c4fa5",
        "cursor": {
          "ref": "b9d978c5-9242-45e0-b75f-1fbbb48e71e2",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9da8a362-c316-4c62-98ce-567baa8a486c"
        },
        "item": {
          "id": "defb7e47-de11-4cb0-b731-a5938c1c4fa5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f431b588-07ea-4c2c-8bec-098c435aece7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bdc5d2-97a6-4193-962a-0906871f6c46",
        "cursor": {
          "ref": "8a6c84e4-6dd3-4211-a89d-34b89d71a9c8",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b0c9cf91-fbb1-472f-8893-55ac9d2c0216"
        },
        "item": {
          "id": "00bdc5d2-97a6-4193-962a-0906871f6c46",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "dd092449-aefa-4dd0-b1e8-4a0a82151aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db0c072-f9ef-4acf-8712-70714685b58e",
        "cursor": {
          "ref": "aa3635a6-c3ac-4690-be57-0cbe970d33bc",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "595ab27f-9dd4-4007-8036-5e2fba33829c"
        },
        "item": {
          "id": "1db0c072-f9ef-4acf-8712-70714685b58e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4e4ba28b-44e6-420e-b25e-6df68a2cfe6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79813918-9390-4dd3-b8b8-815743ba4c69",
        "cursor": {
          "ref": "a018e36f-9b35-472b-b37b-09f801f47697",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4cb0ed4c-14d7-4c00-9c1f-c554ce0eb0a1"
        },
        "item": {
          "id": "79813918-9390-4dd3-b8b8-815743ba4c69",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f333cd9f-224f-4e0a-bd03-2079fa83df96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c0ccdc-5ced-4896-ba4c-044a6b548ccc",
        "cursor": {
          "ref": "43df8685-5189-46f9-9a4b-9d52da174381",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1ef8089d-e602-4a96-a9b3-141e72079c36"
        },
        "item": {
          "id": "57c0ccdc-5ced-4896-ba4c-044a6b548ccc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a273eef9-a47e-4361-9b0e-407180bfefd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7dcb9e-429f-42ea-a2fc-1321825980e7",
        "cursor": {
          "ref": "70094fa5-aa17-4945-89bf-880e1d10ba63",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4466617d-9772-4023-be48-7511a609384f"
        },
        "item": {
          "id": "fd7dcb9e-429f-42ea-a2fc-1321825980e7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0eca16d7-0364-49bd-856f-f27a159342c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4779e59-3eca-401e-aa49-71af1761f137",
        "cursor": {
          "ref": "c70d6f31-fb8e-42ae-bf95-a10bc0075875",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "baac4ca2-e5be-4889-9ea8-741b7b1c291b"
        },
        "item": {
          "id": "a4779e59-3eca-401e-aa49-71af1761f137",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "930338f2-9a9b-45ad-ab99-090981fad1a2",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "904901f8-7c47-42ab-b7d4-55390def9afb",
        "cursor": {
          "ref": "15daaeff-e776-455a-8403-e4ebe3822c76",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f198b07d-e68d-4d6f-aa95-ea55171d37d2"
        },
        "item": {
          "id": "904901f8-7c47-42ab-b7d4-55390def9afb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5e3e592a-77c2-4600-8523-3ac6440fcdd7",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "a98eea66-ecd6-4c97-8a50-a2889f0f4b13",
        "cursor": {
          "ref": "cb6cb1fe-5d78-4fe6-8844-001a25c154fd",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "01115a69-7b22-45d1-9532-957015794636"
        },
        "item": {
          "id": "a98eea66-ecd6-4c97-8a50-a2889f0f4b13",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d0904b2f-bcf8-4e4c-834b-1ee31d0d3fe6",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a95dcc3a-5dd1-4f72-b77c-08930db9f638",
        "cursor": {
          "ref": "feeb8850-77eb-4d8e-961d-5272dc465b20",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "73036844-3382-497c-8280-7649901b9154"
        },
        "item": {
          "id": "a95dcc3a-5dd1-4f72-b77c-08930db9f638",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8dcfd64e-85ac-4a1b-97f1-ca32abb49a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf8f4a2-dbdc-4446-93a7-9d2c8b048050",
        "cursor": {
          "ref": "7065d31f-4737-42d7-80e7-cf334711d1d8",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b28a6c6c-0394-452b-929b-6b314f9e1719"
        },
        "item": {
          "id": "dbf8f4a2-dbdc-4446-93a7-9d2c8b048050",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b25c16f9-b797-42fe-b633-93fe6e4f3715",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c7ce7b67-ed22-4b4e-b6fe-81648d56c910",
        "cursor": {
          "ref": "523b658b-8cb1-498a-a3ba-0c5f1ab28f01",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "24cae445-3ce2-4b63-a112-6af2c63f2eec"
        },
        "item": {
          "id": "c7ce7b67-ed22-4b4e-b6fe-81648d56c910",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f5d14ed0-3800-49a4-b0c2-e3dd63286b60",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "b797bb3b-d116-4484-afc2-d080fb7ffc98",
        "cursor": {
          "ref": "fa40788b-499f-4f66-b34a-84c2bfc66641",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6ff87fa7-ae2c-45ab-8e81-74605c2befca"
        },
        "item": {
          "id": "b797bb3b-d116-4484-afc2-d080fb7ffc98",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "28470fb2-1e25-4cb1-927d-c1af1f77e7c2",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "8d5b68d0-1341-42e2-b7e8-fbfaab04961e",
        "cursor": {
          "ref": "13305d29-f127-4fe7-be68-50ff81eb66b8",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2a4610ef-1cae-47ff-aee1-0e98c6b63423"
        },
        "item": {
          "id": "8d5b68d0-1341-42e2-b7e8-fbfaab04961e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d00503f8-98fa-463f-b951-b9c0e48046c8",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "bb7e9c67-d107-48ce-85fb-b16858016d28",
        "cursor": {
          "ref": "eaea2b9e-5fe2-4ca2-93b0-f93ae3f6d414",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "419bd2ec-d22b-400f-b6ce-52fd627e2b46"
        },
        "item": {
          "id": "bb7e9c67-d107-48ce-85fb-b16858016d28",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "83bd15c8-53ab-4a6e-ae61-eb570b1a8a50",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5dcfb0c0-8400-46eb-a6b2-094366aa7217",
        "cursor": {
          "ref": "8e453a09-236e-494f-a85a-4273f49ca66c",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "58c7c238-70b3-4de2-8aa6-2db51341c7b6"
        },
        "item": {
          "id": "5dcfb0c0-8400-46eb-a6b2-094366aa7217",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "22d28957-28b0-4542-b09b-1232a72e5036",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c969f72c-2a70-4dd7-93ea-13a54f0d69dc",
        "cursor": {
          "ref": "57c20854-a68b-4c81-a2ce-89244cf4dbcd",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c7eeead2-84ba-4525-ae36-597b60a16b3f"
        },
        "item": {
          "id": "c969f72c-2a70-4dd7-93ea-13a54f0d69dc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "51991968-aef4-45fe-ab1e-2f5b513bd20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c2fb5f-0eaf-469f-a140-b843d63ce71c",
        "cursor": {
          "ref": "701c1ce6-e592-42da-bdfc-eb510d3fb39a",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "367252ae-1995-4ea1-9d11-2be6973ae847"
        },
        "item": {
          "id": "08c2fb5f-0eaf-469f-a140-b843d63ce71c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fee03e4e-ba27-45c6-bd84-075c1b868166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235175bf-e47f-4a4e-a823-575b2b17f34d",
        "cursor": {
          "ref": "ec69bda1-ceed-4857-bf17-0e92dbb55ac3",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cf66ac6d-59e7-4471-9312-37d61206a6fc"
        },
        "item": {
          "id": "235175bf-e47f-4a4e-a823-575b2b17f34d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c8a12521-662f-41a9-8be8-ae2519383b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcc320f-c756-41c3-9ddd-2073d38eac6f",
        "cursor": {
          "ref": "487582e6-65db-4474-b99c-a614f9e8b920",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "45c582af-39f8-43c0-aa6d-db7093baee63"
        },
        "item": {
          "id": "9bcc320f-c756-41c3-9ddd-2073d38eac6f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "251c8c71-22de-4260-8214-053460db2ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2baff31b-72e3-4143-b28e-7068d2e7c0ea",
        "cursor": {
          "ref": "c978dde3-3f7c-4733-b4dc-c2a6835cea9b",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "736405b1-5c4f-4f1a-a255-f5f3d6ffe022"
        },
        "item": {
          "id": "2baff31b-72e3-4143-b28e-7068d2e7c0ea",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "03e138ea-cf4f-4470-8730-7a487d778a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ace8d8-43ab-41dd-97e8-990544406f68",
        "cursor": {
          "ref": "8ec1e4d5-fe88-4635-a135-f73ace08b609",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "915d858e-c1fc-4d8c-ae5f-74f85737f66b"
        },
        "item": {
          "id": "64ace8d8-43ab-41dd-97e8-990544406f68",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5e0e612a-357d-458b-a9a5-2b55721ca48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a32aa53-428b-4b0c-b5bc-9b692468a7da",
        "cursor": {
          "ref": "1ed16455-9102-42ad-ba95-9bd09efb2a58",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f7eddbf8-4215-499b-a247-42c49ac91d9b"
        },
        "item": {
          "id": "6a32aa53-428b-4b0c-b5bc-9b692468a7da",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7a2328b0-3a72-4eed-b3c1-5813219aa908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca5ac3f-8da8-4ba9-a9b9-1fe311d42600",
        "cursor": {
          "ref": "9d7d4257-731a-416d-9207-d5f81a6ee4ac",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4e00ee4d-e09f-43bb-abb1-5bb576c712be"
        },
        "item": {
          "id": "fca5ac3f-8da8-4ba9-a9b9-1fe311d42600",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "05c74ef2-f28f-4c5d-9812-c27057540abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3409f0-4866-4645-8d44-1cdc10881b0b",
        "cursor": {
          "ref": "157e8890-178d-44a8-ac34-a1c1bd5ec9e3",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3a903e54-309d-40ae-a7ec-57168486d769"
        },
        "item": {
          "id": "bb3409f0-4866-4645-8d44-1cdc10881b0b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fb4403c7-5257-4232-8c99-eb185ac947f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bde0018-171f-48a1-8e12-ee89a657b474",
        "cursor": {
          "ref": "c5a28b7b-8222-4679-82c5-a6e59c8aaac2",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "84536279-79e6-44ea-ae2d-9c2804d9f9be"
        },
        "item": {
          "id": "6bde0018-171f-48a1-8e12-ee89a657b474",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fe59cc6f-8353-4700-9e4c-c341e89dc91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4fd4463-a80c-4def-8072-bfb40a982403",
        "cursor": {
          "ref": "57504448-9b56-4504-a20c-567ad46c38fd",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cc9a77ca-f0e0-4528-a0a5-d35719b57c38"
        },
        "item": {
          "id": "e4fd4463-a80c-4def-8072-bfb40a982403",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e4148a5a-34a5-44ec-be79-c6cce3234d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36ac687-f776-4621-aaf1-9cec41ae223c",
        "cursor": {
          "ref": "ab3559ed-3c97-4bf3-99fd-c36a7464f187",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ca04ffc7-6a84-4a79-8887-c3ec3fcdc1a8"
        },
        "item": {
          "id": "c36ac687-f776-4621-aaf1-9cec41ae223c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3d4563f6-b57d-448e-8ad3-7b641064d6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6568e5a-47e9-414b-bee2-83be0e29dd8e",
        "cursor": {
          "ref": "3d8680b9-21ba-4481-afc3-3c318b364c63",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0529060f-9a28-432e-8e55-99e541596e13"
        },
        "item": {
          "id": "c6568e5a-47e9-414b-bee2-83be0e29dd8e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ebc0f6dd-7668-486c-89c1-20c6cadcacd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650cee43-cf9f-496f-9fda-c3c0979fe7d0",
        "cursor": {
          "ref": "7108290e-fc12-46af-a6c7-39b1a631d840",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7f8bd13d-e89f-482f-8967-0c9eb5e90e2c"
        },
        "item": {
          "id": "650cee43-cf9f-496f-9fda-c3c0979fe7d0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e845c7a5-8d2d-4ddf-9f4b-69f451a3ba1a",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d121165c-fcf4-452d-b292-d7d1ef4c6e0b",
        "cursor": {
          "ref": "43f7b4ed-0c05-444f-954e-240b52d8161a",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7c65a6f6-d41f-413c-b4c7-ba28650c5f58"
        },
        "item": {
          "id": "d121165c-fcf4-452d-b292-d7d1ef4c6e0b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3237b0f5-4470-4138-9266-f1bab6dfbaf4",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "97483b1d-8cbf-4b78-b72e-e211d98535bb",
        "cursor": {
          "ref": "d5069f21-3d82-47e5-bc62-9220c3234fbc",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "dd670a74-e909-43df-a4fa-41013a24b250"
        },
        "item": {
          "id": "97483b1d-8cbf-4b78-b72e-e211d98535bb",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d4e0e245-3cb6-4e4f-8305-789614b02639",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "4d028b15-9b7b-4df4-a690-77cb4337539a",
        "cursor": {
          "ref": "e1232e8d-1a36-4add-8bc3-ff99951e39f1",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f5a77c06-1ddc-4123-be7d-0da7e21b5181"
        },
        "item": {
          "id": "4d028b15-9b7b-4df4-a690-77cb4337539a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a3e44693-cff1-47f5-99f8-6ac2a3cf71cf",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "362c39e1-f8c6-4ce9-9961-42c05d792993",
        "cursor": {
          "ref": "9c418c16-82e5-4ba7-8301-ae7c36e76cdd",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f3cdff55-058b-49c6-9454-7ee7a454533e"
        },
        "item": {
          "id": "362c39e1-f8c6-4ce9-9961-42c05d792993",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4d506bae-5a72-4ef1-9098-ea4f1e35de3b",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "e783c97f-f229-4de0-a2f3-b8fe656cfe0c",
        "cursor": {
          "ref": "522eb1f9-fb5d-4ba7-bbfa-303f673564a3",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a98a5c8e-abc6-49f4-9459-c32cfeafcb09"
        },
        "item": {
          "id": "e783c97f-f229-4de0-a2f3-b8fe656cfe0c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c7cca4dc-2376-4e3a-af46-ad0fd5aefc27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30996443-7670-4627-9082-2ab5f1bef27e",
        "cursor": {
          "ref": "e4ed5b64-6577-43fb-9b04-d21a4ee25391",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9ada8343-a75a-450b-a299-73d1da2c3b1b"
        },
        "item": {
          "id": "30996443-7670-4627-9082-2ab5f1bef27e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7091d68d-8a75-4bf5-be83-010a59e29bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa3f96c-4f87-48c4-89e9-f912656274c8",
        "cursor": {
          "ref": "83397d8f-0dd9-40ea-9204-cf6db497d2f1",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "974f83ff-45e4-4a70-bad2-3a73f22898f0"
        },
        "item": {
          "id": "5aa3f96c-4f87-48c4-89e9-f912656274c8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fd5525e1-3a0c-4166-8d03-94da2a46ed36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719c1989-51d2-4129-8c43-e94dab7784a4",
        "cursor": {
          "ref": "61e08d78-0381-41e2-a77b-af2b5a0c2993",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1a2b9eb0-c50d-43bd-b5a4-a6240d258348"
        },
        "item": {
          "id": "719c1989-51d2-4129-8c43-e94dab7784a4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "95c3e9c4-9c7a-4fd1-9c95-7a7f1149b725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81ea750-e9b6-435e-a4a2-561691e162cd",
        "cursor": {
          "ref": "640c2b48-b57a-4be9-9562-0f02379bb176",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8a00b699-d221-4549-89d0-99199622d166"
        },
        "item": {
          "id": "f81ea750-e9b6-435e-a4a2-561691e162cd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c4e84ea1-f523-44ea-a7e0-bc6ae1eb3227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84d864c-3b59-447a-9d9a-95b67968c1f2",
        "cursor": {
          "ref": "de068ecb-91fc-4a51-8ace-95f0b5ee19f8",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a950aefe-9531-4f77-ba54-b085849fdc94"
        },
        "item": {
          "id": "e84d864c-3b59-447a-9d9a-95b67968c1f2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "050b0839-93f1-4c22-961f-489f4fe9c1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a255d610-957a-4342-995a-3e14e8bffb42",
        "cursor": {
          "ref": "7f08f736-542e-4195-a208-bb16bfecaf89",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "147b61a9-92a4-47e0-8ae8-805941ed5adf"
        },
        "item": {
          "id": "a255d610-957a-4342-995a-3e14e8bffb42",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f98d53fd-ccab-4602-b0bd-7d6f17e4cdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73b62ed-b054-4e24-8519-71a2afb5fd65",
        "cursor": {
          "ref": "14acff20-7a11-4c3d-9ea8-0e8fade5557a",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0a42c742-c33c-40e6-afeb-0bb4efc72815"
        },
        "item": {
          "id": "f73b62ed-b054-4e24-8519-71a2afb5fd65",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0b556a63-9c01-47dd-a035-75dca64260da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4baf86-d9f5-4c5b-9780-9505629c740d",
        "cursor": {
          "ref": "e58b5061-3319-43d1-8961-8e9dd1505743",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "47bc653a-e4eb-478f-8acc-abcd8086bbfa"
        },
        "item": {
          "id": "9f4baf86-d9f5-4c5b-9780-9505629c740d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "81c38cfc-3476-46fa-92cb-a2b143cc2709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a520b9cb-2d16-4b53-b44c-094f9feed61b",
        "cursor": {
          "ref": "b8ad7fed-1021-49d6-986f-9f413daf6e9e",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a37077a8-2f77-49da-89c1-14eefbf6d70b"
        },
        "item": {
          "id": "a520b9cb-2d16-4b53-b44c-094f9feed61b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "86e78d66-53c0-466d-88a8-2abeb22a0f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88dea90a-e129-428c-9470-e2b8c694d31f",
        "cursor": {
          "ref": "63905c6d-c54d-455e-bf27-6ee23174d4af",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4acf4cbd-f63d-4f71-b78d-fb6b8c8b756a"
        },
        "item": {
          "id": "88dea90a-e129-428c-9470-e2b8c694d31f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3877f4e5-ceaa-40a2-b296-aeb404037a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e29e3b-c444-4256-a45d-351588d2e24b",
        "cursor": {
          "ref": "8c24b712-a351-41d6-b6fb-5431882176d8",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "19fb1d74-fb80-4222-8c3c-ad33f2940a6a"
        },
        "item": {
          "id": "33e29e3b-c444-4256-a45d-351588d2e24b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "081b37ca-79c7-4248-bdaf-ed73643d38e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304466e0-ff3a-49ab-b93c-51d1813d2428",
        "cursor": {
          "ref": "bad700d8-9152-4edb-9ead-c502f118afb3",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "162d9934-0c6d-47e2-8881-b13aed861a43"
        },
        "item": {
          "id": "304466e0-ff3a-49ab-b93c-51d1813d2428",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "59fd5f06-1108-4481-9c94-4609ca6bd604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869547e4-9ecd-495a-9857-e4f9141b012b",
        "cursor": {
          "ref": "1735c962-ebb0-45cb-8b8a-10b8fe5b1ca7",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "24a06f51-27da-48ff-9c5d-3cc9f5256fe0"
        },
        "item": {
          "id": "869547e4-9ecd-495a-9857-e4f9141b012b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6ab8c50d-9080-4a69-b6bf-61803e2c74cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b6eb2e-ff8b-45b8-a012-9677041e2767",
        "cursor": {
          "ref": "d808d5ae-c5b6-41b1-b47b-4e8d1a1d8b29",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f906e5c5-b94d-4bfc-8f5d-54f447aa958e"
        },
        "item": {
          "id": "88b6eb2e-ff8b-45b8-a012-9677041e2767",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "13d9e44c-9651-42cf-bf9d-f0b465249086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9a2f59-4467-4da7-acaa-27bb779c525b",
        "cursor": {
          "ref": "951ca536-b1fc-48d8-a3ab-51df5accb296",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a2bf6fb1-9c7a-470a-bfd8-4f7de1f89cf7"
        },
        "item": {
          "id": "db9a2f59-4467-4da7-acaa-27bb779c525b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d8196f58-4fd9-4971-8da8-8e2ee1d9b4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cba9fcb-762a-44ca-9f85-bb1b3d3ae257",
        "cursor": {
          "ref": "2a603419-6eb5-47fb-afe5-17e478cd9530",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f0963031-f85c-447f-b5fd-1f04b08ed8e7"
        },
        "item": {
          "id": "4cba9fcb-762a-44ca-9f85-bb1b3d3ae257",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a4103f00-89c4-4cf2-897c-633b1f1f6458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2ed8f7-8625-4940-aafd-61982ef7c661",
        "cursor": {
          "ref": "3f00e88b-0bd9-458b-81ce-489055a8fe93",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c87a8a85-b4ed-45f3-ac01-c77279ca8314"
        },
        "item": {
          "id": "bc2ed8f7-8625-4940-aafd-61982ef7c661",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a094cc19-0fd0-4875-929e-de5097bbee22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab10a41-a09e-465c-b3f9-5002b10e7038",
        "cursor": {
          "ref": "3e2f147a-2283-4cf5-8367-044776fc1e79",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f5d4fe59-1dfb-4ad2-a3a1-0fb3d499f4be"
        },
        "item": {
          "id": "2ab10a41-a09e-465c-b3f9-5002b10e7038",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "babf0a09-1b7a-4998-806e-a93be6bcea29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f140d3ec-04d9-46bb-a80a-0b3cd01e61d6",
        "cursor": {
          "ref": "472f7ccd-24d9-4e88-995d-b7960cd87976",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e4f0005d-fe63-4ec7-b893-e5441e2fa583"
        },
        "item": {
          "id": "f140d3ec-04d9-46bb-a80a-0b3cd01e61d6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "628f1a83-e38f-4325-a8e2-29532c511268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a3e615-90b8-4870-8907-5fea3adf0e6e",
        "cursor": {
          "ref": "85e7aa16-d38e-4425-82e1-a528ef9ce786",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "878d7eb6-b380-4c69-b2f1-d185eadc7574"
        },
        "item": {
          "id": "40a3e615-90b8-4870-8907-5fea3adf0e6e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c6bb26ea-15b0-4827-8a61-8f0f23a1186c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097f2687-297c-41ec-bed4-e76642e2e697",
        "cursor": {
          "ref": "88a63287-fe49-4d1e-8d8a-69dccc1f0e43",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e533c4b9-3c79-4442-a560-1815ea5dfe74"
        },
        "item": {
          "id": "097f2687-297c-41ec-bed4-e76642e2e697",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7535952d-0a73-4e8e-98d3-eea46054e9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db4da2d4-6d74-4dc5-baec-fa35efd0a9a1",
        "cursor": {
          "ref": "8b37d779-5c3d-471f-b025-0589ac01e3f6",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e9b9ef4b-f0bd-4396-8196-cee0d911a2e2"
        },
        "item": {
          "id": "db4da2d4-6d74-4dc5-baec-fa35efd0a9a1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c50d1781-ba39-4d2b-82a0-e9e71a1bf003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb23cb3-9cde-471f-824a-a01465952a67",
        "cursor": {
          "ref": "99f61b5b-c0b0-42f5-9346-581b140bb61b",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "537a73e8-3f96-4e6f-b6f6-0fa65343c2b4"
        },
        "item": {
          "id": "7cb23cb3-9cde-471f-824a-a01465952a67",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f2307e4a-0a40-4b93-89d5-e17dd41403c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7418b049-7ef3-4642-86ac-2d575e9bfc81",
        "cursor": {
          "ref": "f98bb2d2-e131-4094-9d00-5ad6ee88b5e6",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b03a393d-4eca-49d0-8c45-a4eaa53d9ff8"
        },
        "item": {
          "id": "7418b049-7ef3-4642-86ac-2d575e9bfc81",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d248ca09-3783-4f12-8a64-17175a4162d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3d9230-a616-485c-aede-b2384a549125",
        "cursor": {
          "ref": "54848fd1-86a6-47ad-85e1-6bc02739d6ee",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "aea60f55-ca3b-4cda-becd-bf3e5a5c046b"
        },
        "item": {
          "id": "2f3d9230-a616-485c-aede-b2384a549125",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1f2917a4-5b20-4d36-af78-86142923fa38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5f2a09-1499-49fb-9303-6c1940e56b67",
        "cursor": {
          "ref": "a02081fb-8665-4214-b46a-992bc969f19a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4c5a8a50-af49-42fd-9058-bc735d34b0cf"
        },
        "item": {
          "id": "ec5f2a09-1499-49fb-9303-6c1940e56b67",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5957dd96-e0eb-4442-8578-221c62d27a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb89986-4d80-4165-982f-b88fa367bd83",
        "cursor": {
          "ref": "f61f1b26-7e86-4fd9-8380-d5daaf23e9be",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ba5e97d7-09e2-4bb5-9c2a-49bfada243e3"
        },
        "item": {
          "id": "8fb89986-4d80-4165-982f-b88fa367bd83",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9f3048b8-0966-4272-8957-91b2cd32ccfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec5bb04-4f91-4493-b7f2-e5a4d4c7cfec",
        "cursor": {
          "ref": "0805fb8d-d3ce-4c1c-8c8c-9b2c7c33a9e5",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "eceed105-34ed-4d12-bdfd-5f85cd57df1b"
        },
        "item": {
          "id": "fec5bb04-4f91-4493-b7f2-e5a4d4c7cfec",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5d32758c-b84f-4360-a9f1-ac54559608c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbf2537-3a8d-4105-b7ea-83c95e01eb37",
        "cursor": {
          "ref": "798654d2-7f66-4351-874a-221fa5fe5765",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "45e93121-249f-4f82-8605-4eebc082cc47"
        },
        "item": {
          "id": "5cbf2537-3a8d-4105-b7ea-83c95e01eb37",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0bfdb8e1-ca58-41cb-80e9-7f60510e2351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e242da-139d-41cf-aa43-b69bbafd73d2",
        "cursor": {
          "ref": "14a07b67-0df0-4a1b-b55d-2ce65a9a6bb3",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "bc81d1da-3ab4-4e6d-b347-9726ac9ababf"
        },
        "item": {
          "id": "68e242da-139d-41cf-aa43-b69bbafd73d2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "355dd06e-257e-417f-8360-e0e8a1f00259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2955ac50-6f8a-49c3-9c82-13f2c0af7b86",
        "cursor": {
          "ref": "fe074438-ec0a-4ee8-afe3-88bb2ef86cf0",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2a2c0e88-e3ef-433c-bebe-ea2241260eb4"
        },
        "item": {
          "id": "2955ac50-6f8a-49c3-9c82-13f2c0af7b86",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a8d7610d-b5ff-4c64-b8f6-f257ee917c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca15bab-e248-49ab-a62c-251df3d03502",
        "cursor": {
          "ref": "e9d06cb5-8c6e-4172-913b-995717bef647",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0fb8cacc-6cba-4efd-9447-3a091f9f153c"
        },
        "item": {
          "id": "eca15bab-e248-49ab-a62c-251df3d03502",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7a7045e5-4fd4-48cc-ae17-0a96b193bc08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdde686b-8c3a-4666-8a5d-7299e4c182f8",
        "cursor": {
          "ref": "ee6de3ed-133d-4445-8441-16710244713a",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0852c62d-ae9c-459c-98c1-9d1dc5caadeb"
        },
        "item": {
          "id": "fdde686b-8c3a-4666-8a5d-7299e4c182f8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8270d64c-2360-4ec2-abed-6f63338d6b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dda037-012d-46f0-be47-28cf3f24f9d5",
        "cursor": {
          "ref": "4be9ad00-392c-4770-9a58-2a6b1d044a0f",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "59beae48-3066-4a38-96f0-8b8cdcbd9b2f"
        },
        "item": {
          "id": "f1dda037-012d-46f0-be47-28cf3f24f9d5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "52a02283-1a3c-41b4-ab27-651f6dde2c18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6607004-1377-4ca2-99a4-e5af469ac588",
        "cursor": {
          "ref": "a91a6ad8-56df-4344-a3ea-bfd9ac3f227a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "aafe21fc-921f-4457-85cb-66fd5111199d"
        },
        "item": {
          "id": "e6607004-1377-4ca2-99a4-e5af469ac588",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8a988c25-b56c-494e-bf4b-2a7181ed292c",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "5b400463-f30f-41f8-be3f-f8ff6f899bf1",
        "cursor": {
          "ref": "3400b692-3ea6-4e55-8eb7-f527a02eed40",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ada80627-3250-44bf-b414-18265f5bd257"
        },
        "item": {
          "id": "5b400463-f30f-41f8-be3f-f8ff6f899bf1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "edf3c288-0f23-487d-9ca0-fcfc809298c1",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "462b48ff-445e-4688-a5ff-3bc687639462",
        "cursor": {
          "ref": "b4c9b961-0956-4a07-bb3e-fdf76523da20",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7cd6c835-1fbc-4e58-83a3-583c6f01fd09"
        },
        "item": {
          "id": "462b48ff-445e-4688-a5ff-3bc687639462",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2de8b0c5-cce8-45cb-9486-0e8ab179f97b",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7d6022-d013-4285-9305-8de4df8b316f",
        "cursor": {
          "ref": "7c2ada8b-e822-425d-b1ff-6c5ae0e120fe",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3e5c5887-a4da-4e9c-851f-75cf5b2c0a7b"
        },
        "item": {
          "id": "6e7d6022-d013-4285-9305-8de4df8b316f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c2f2426-7cd6-4684-877f-cf758be3f1fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7d6022-d013-4285-9305-8de4df8b316f",
        "cursor": {
          "ref": "7c2ada8b-e822-425d-b1ff-6c5ae0e120fe",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3e5c5887-a4da-4e9c-851f-75cf5b2c0a7b"
        },
        "item": {
          "id": "6e7d6022-d013-4285-9305-8de4df8b316f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c2f2426-7cd6-4684-877f-cf758be3f1fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2a3cd7-37b0-4a92-9a82-419a1cb85581",
        "cursor": {
          "ref": "ad38878b-8727-4fb2-885f-2713ea3c8422",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e09dc54c-e37b-433e-ad5e-7c4eeb81c04d"
        },
        "item": {
          "id": "fb2a3cd7-37b0-4a92-9a82-419a1cb85581",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4e909f69-daf1-413c-be8a-73935bf447f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9a3caa-89ee-455a-b54b-62a144cfff92",
        "cursor": {
          "ref": "9a8117f8-556e-4eed-9c35-2dc84965c111",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "68b82dcf-2537-42bf-aacf-80bdf7c30968"
        },
        "item": {
          "id": "3b9a3caa-89ee-455a-b54b-62a144cfff92",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ec5c4243-475e-4962-aeb3-ac206170b7b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}