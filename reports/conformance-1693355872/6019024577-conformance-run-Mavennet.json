{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c84c8987-5096-4bf3-88d1-809e349840be",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d39a5771-135d-4509-8b94-fd38bb6aaf58",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b58a09c0-7eeb-49e4-9f68-3b67ed332142",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "15dc354b-31b2-464e-8ddf-a3c7ec59ce87"
                }
              }
            ]
          },
          {
            "id": "64a6f6e5-9fe3-4b38-a088-89b498db72df",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c74ab0af-4769-459d-8da2-f028a3e52436",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3cdd1717-2a3b-4996-bd46-44b51dba508c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1ad43044-78d3-4f81-88da-3a0e62a7dc4b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "fdbcf7a3-0491-41f5-bed9-a437c533b48d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "988aa3a4-984c-4d4d-b65e-0eff1a5c5ee1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a727fcf3-aece-435f-9204-a10b9363e0aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c62c13ed-620c-4db6-b937-7f0d5da251ba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "270bd3bd-dfbc-4d92-8f27-9a3cf69ffa3b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4d2f0f0b-7ccb-4e66-91c9-9480e6b6a30b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1e4a6dc0-e4e1-4aab-b3d6-c46368e904e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c7db8faa-4a02-4652-b443-1b4ab2a62e35"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8faff25-ae22-44b0-8e3e-500e4f0a6d67",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "09408360-9991-4e25-a591-67e2858fd06a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5fa93bf-bda2-471c-9229-e10e6265cc3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "700b2bac-c9a0-4836-a81c-41fe62698731"
            }
          }
        ]
      },
      {
        "id": "3b670d7c-398f-49c9-bb07-827477a1eee4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6626633e-24a4-430a-9c56-b7411b7a6603",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87ab078d-eb1d-4206-bc87-de496f7381d6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4c82af25-3f1d-4f21-b360-1a27daf91015",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45fc67d-5481-42aa-8c7e-aea05fd9a814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc77cb49-4b6a-4f4c-b98f-39aa94473c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612712da-1c6f-4658-84fc-5b7e5bece497",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922dccb2-c088-43ea-9358-f8bfb7a1904d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6112add-c94b-4908-8896-ecadc959c9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626334c1-3f79-4ad8-ba25-eb6654297bff",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0531b32-7793-4b7b-aad3-e911ca6b8d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77c361cf-6156-4eb4-a6c1-2cbee16052b2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5db48cfb-cc77-4e60-b203-7bbf768a8ef7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1aac0ea0-3aed-4d31-bcca-3d09fb09d64c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d93832-b0df-40c3-a432-4b502328501b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0c1876f-4702-4d7b-ba2e-64aa9962328c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e560ef82-471d-479e-94e9-0d4d24959e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1bc4ea-deda-43ae-9dbc-271df9b9f440"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e81b3d87-7f62-4696-9089-ba386d674db5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f663249f-c05c-46e4-890f-18912ef32f07",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b36b4c34-f5fc-44dd-939f-12efb6fd37e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0667cd5d-a031-4407-a122-fd2a4f1be63b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9324089e-ae44-443e-bfb2-3a17007f02b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3a94ccc1-9ab8-4154-9f80-e220fbef4de3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03dcb1bb-c2d3-4240-a248-c53be8f38814",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19d8b52a-4e21-479c-bbed-2668cf4807f6"
            }
          }
        ]
      },
      {
        "id": "4baf6309-1d86-42a9-b5ad-a50006b11e54",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f996f8b9-0d90-45ca-ac59-493a54441b9b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "309c8fc1-3a5e-49ac-9fd3-a9382fdaa612",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e2817cc3-efd6-45a5-a9ce-cb3501ac61b9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92da177-ed36-4aba-8b5a-9d1de208a3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ba438d-4d2d-4bd7-a8bb-dbf29f9a4ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b88bfb4-7789-4377-9d17-6e7e539ea5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "835fbd2c-27d9-4799-b8be-7152ed7d0a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c9a020-3ea6-4f83-83f1-8217a7d60d46",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bac2b94-ba7a-4085-9982-ea0905a882b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af7c972-ea8c-472c-b628-762e997947ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8becdffd-84a9-49af-8c80-11938492a828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f58c1e4a-5ef9-4992-8c42-3e5d2f2244ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5076b33a-4e5a-45ea-99f9-ae2adade74e7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0468c1-03b5-4cfb-bdf4-a05cf3719f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b08257f-4d5f-42a3-b306-6ddf01a619ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988857c6-83a1-42c7-997a-6aa50df349a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67e02a1e-7463-4d16-ad4f-f571dc4c1bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2c1455-0d92-48dc-aa51-ff334c962203",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6280775-7ecb-4abe-8ff6-2f66854441c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295564c5-f690-46c3-8fb1-a87cf486df05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d648444-b432-4979-8e00-2e99fca8d3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fe0007a-0c70-4440-b2f5-48462a167311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f247dd-cb04-4e8e-b86e-081b23344c72",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d121ad-04ec-4d71-aaec-3b1acf241cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109caa0c-b52a-4999-bd18-1fc320a6f493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15b4ecd-21c5-4869-a6c4-b3ef5038c1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95011094-1e98-45f5-b751-a36fefcc0f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08ff822-7cc3-408f-8cbf-7d50147c1cd2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e2ff24-beaf-4e82-a1ff-c8374192bb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119ee140-c11d-4e9c-abc6-9155392a8550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64781cc8-c602-4af1-9ab8-862fe5751143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94e86110-1476-4712-b2f7-39bdb21a44b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cafdbb0-d6fa-42ed-a1a5-099f77b500d4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c9d12f-ed01-409c-baee-8f235a701c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2364898a-d4c4-41d2-bff0-b0ee4e8081b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebaff727-0cb4-4d66-87b8-a151b874a4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "816d42a5-fbe0-47b6-bd34-0f0f1f8c9bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7fff66-c463-4831-bde8-55cf83e8e2b3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378ccab8-c0b8-42ec-b839-0b59390482e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6375740c-f381-4ce7-b632-b36ccde7e16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e3c2c6-424c-40fb-96ad-2c6cb1646fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f32dfed2-069b-4eee-8b4e-054f352f0276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3426ff36-a5f6-4909-8309-e0552b012625",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10aaf95e-ed08-42fd-b954-98c3cf178a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4eaa48f-fd93-4b71-adbe-73b2150a91ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf2e602-e7f9-413f-aac9-5addf2a76fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da5caaef-6645-49ca-ad55-a697396856e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93846c18-783b-4f80-9b18-e1af06a7f952",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad5db27-1704-40a6-a948-f496a4a8667f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497d4365-45b4-4534-a50d-248756d3d4f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1be7f43-7bf5-4fa8-bba3-725d61fe3086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3ff906d-d604-4a33-948a-f31b4d391bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1989a079-4c5d-4e3c-bfdb-80263db75e7c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d52257-58b4-4533-a144-cb8a7e017477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad65745-39f0-4fb4-b038-660c308b4ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936e87d2-bf80-41ae-89bb-7e7b4f130aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19f0a8af-48de-434b-be8c-9d67eef1f659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd62dfe8-369e-4bb4-ae67-255774b9705f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f466a34-d040-48be-bbc9-f8712e83fb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7967ad-fe61-4bdf-8a41-ba20d8bd28c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1d54e1-8b04-42e2-99b9-74cbc4a3c9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "798c67ca-b810-4935-9241-eaff867bc748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1635c475-f6b6-4cfd-963c-6a75ca4ed04c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f2fa63-78ea-481b-be23-1e9dbf52b7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e38f4e-5d49-4d4b-9f83-686c61e3608c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4be34b1-38bf-4379-b0a8-9307e9ce83d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a308546c-8d75-4c17-98b3-69f7778e340d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c66265-53b0-48f4-a00c-04b8d534103e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a990562-2aea-4990-a6c4-e4ea3f26b04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "049cca42-8ea6-4112-937d-5e9df5fd24d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fbe635-69fb-4e88-8b92-709ed27013aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca40bdb7-4257-4de6-8e18-267c2650b995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217ead89-0319-4732-8846-90176eaee9a7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329f1839-b131-4f9e-b6e9-579cb7df8666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e7b2a5-9509-4a1d-9178-c7487fb41f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5330d507-f364-40a4-a6aa-b040d3b9d8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0195285-fb03-41fb-8cab-bdb475dea930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1e296f-34f6-46f7-bd50-767f484e6cce",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cab578-cdde-4afc-a325-27126533d971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8308864e-721f-41f2-8ab6-8806007056c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c48bd19-8ac5-42f7-a8f8-eb8d376bbb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3492178d-6817-4575-8670-b3bcd2bed49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a310dd-c503-4ed1-8efb-4565936c5255",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04e6293-ca53-4fd5-9ad4-c19340b50bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df20d0ca-5cb2-4cd2-a28e-5860d8535d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b858deb4-defc-47ac-b871-422eba96c8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35dbfcf4-4a72-43b9-9db6-d7232910dafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50c7384-1014-4f68-9358-e6e1bdd61bc5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c03e54b-d43e-49d8-970d-8f103bf8a518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60ce442-22e5-4355-a21e-9a0299ec0b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f979be97-3f01-40eb-93da-124936410e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6adcf3-d420-472f-bb39-0b01c2b9a415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d815035e-774a-4a28-b340-71590bc7d046",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb41c71-8425-467f-ae7e-5a650d20e14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e5a0fe-ba3f-4ca3-a06e-f4dcd0a0cde5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24562db-7e4d-4f52-bc3a-9fbe14a6dcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb52442-aa33-4d5c-9135-3e47f922df6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55815e2d-1008-4f00-9d06-c14019a129c9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f317b85-0c16-4657-a1b4-5df20dfe21fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ae9bb0-edeb-4326-a17c-d29c031f9d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336d6e2f-86b9-4db1-9101-b50f3ac21c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac61d07c-06aa-43da-a55a-88c85b146881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1371d35-492d-40e5-9181-3688cfd45d15",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43362a2-bb42-463b-9948-d80539b37ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133fa8a6-bd6c-4e2b-ad9b-d30f443ac646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e281b29f-a8db-4047-a17c-b67c810d104d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eef30a44-bc8b-4468-9e1d-4ab5f5bcf6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348fef96-bf73-4141-93b8-7f194a270d94",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33830b39-02f3-4d70-8494-b1fd38d17ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc21a0dc-e2b4-41a8-8eb3-2bcbacaf9c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53ee776-d277-419b-a31d-d7965cfeb89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e30cfad8-cade-4b9b-b715-03cbfa319eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d3ec9a-5596-4fe5-8b3f-0d7ef732b70a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a381d6-a190-475a-b6eb-d287b74ed1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b059696d-6f43-48e4-abce-9104e3526158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478461e5-308c-405f-bc3c-c2b48c321683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16d4f85f-55c7-4073-b266-1a01d2a6b480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b42bc8f-7f40-4d60-a2dc-05a4ea3aafe9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76d2d26-e101-460a-98f3-f333cdb84ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c13f2c6-e472-43cd-9201-8329d4fdbb37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f495b0d-8f9c-4907-885a-c8609b29aebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e86d570-ca1a-49cc-ac13-4b4af546c1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26b4869-b186-4409-93fd-2171116fe7b6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46b3279-c9c1-4a06-a6e9-4fa97362dbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539be397-e1b2-4f5f-b689-d86f55641e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d0644f-0107-45ac-9ca4-11d63f15d047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ac8c56-431a-4a58-b1f8-d58ac8937866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77aed414-9bc6-4987-875f-92aac2bfc568",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08430025-d84f-46e5-8907-f508026d4247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434ebfba-5ece-4565-b394-0cacb5df4d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724ccd02-e444-451a-8abd-49aaaa202175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6feb28-337a-4811-b041-ee0d77460e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02eeb49-f4d4-476d-834d-ad7dcb8dcfb2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1bc734-a65f-4f79-80e9-85102b248141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df509556-6273-4df9-bdab-1e1b60966eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b3d3a6-7a61-48de-a0d1-1d113473f99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3456825f-3f2f-4780-a782-e85bf0862d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf61c75d-df7f-4250-a4f3-3e60c2fe0c72",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c7447c-0342-4bf6-8ab6-26f1fe99b225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b89d543-4c37-481e-bdfa-7c01fe5c46df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d453a9-34f8-4672-ba29-38bf7af41f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26716b06-986d-40e0-9e0a-ab9e74f683e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8895af8f-1b31-49c9-b2a4-bf9b4ebfc60f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580f4467-ce08-4e2f-9a99-cd5b906d1134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c86056f9-c8ab-4e71-8f8a-e58dab7d6beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9485427-f7ef-4e4c-aa0f-3fb9f1a867f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b57987cd-334e-4a28-b97e-dda8c0580ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db3bf1e-4679-4eef-82ee-0529a83565ce",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6db76d-1a50-4575-98bd-a2dbcf88ee00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e263fdf5-8814-47c1-bff4-6b20a67410c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf725515-2a5c-4096-8c0d-76b603293663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c62c14d1-f412-45da-b9d2-a8f0f5774e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3388f89-b2c8-447d-b198-d39cfc2d675d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d619dbfe-3185-4e8b-a7f7-0cb97cc88f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60dbc66-9256-4871-b74c-c971472b6b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f74cf7-061d-4dee-a1ab-8c5720494229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "efabebd0-cd03-4a7d-9339-d1b0d3d06c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ec8ea5-3844-4086-87b8-f082668980a7",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769b5ff2-90e7-4eff-b420-f74ae4888d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6cc0cc-7a36-4275-860a-0ea37d4ad0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89aa3591-6966-4326-9f93-ed006e6b21e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebfbd3c-9cbb-4fa0-a1f0-ee43af8ed788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6c5848-27ba-49b6-b61c-db8a8422511a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8bc1d1-9dde-483f-9df5-6a0af41a3950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab49992f-7b3f-42ce-aab6-016f1bc1e08e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2730c6-a279-4f8c-bf8e-96ae5eb8453f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a208119a-c28b-4a1e-abff-3ec8790ea00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd429d22-4877-492c-8a86-7410bf02c444",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d291ec98-33c5-4ae2-b0ea-fe94b05836d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659ffcdc-13d8-463f-98d0-57f7b746d913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdaec5f9-5197-4d4e-8c6b-e0129d7b65b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f8659e1-3427-45af-a2a9-77d81c92df8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94539db2-84c5-4306-97bc-09d6d3e258be",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743064bd-f436-4bcb-89eb-5083069b54a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d78102e-dc80-41cf-9200-dcc816261485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2c6238-19d6-4bc9-99e8-068cc3320c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fe8050e4-468f-49a6-b5c5-5ea3ea513921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefd51ee-1f56-4b6e-9edf-848ba6bb9f15",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b17665-36a2-432f-8cff-8e052875ee71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae064217-afb0-4eb0-bc02-61ce8b07c392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ffdb53-7ec6-4539-ab93-afe2f1a36ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "239c21db-491d-4067-91e1-3b57e957d5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85383d9b-973b-4e84-8ebe-f646fe659025",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d133a36-231f-4dea-82a1-82ea5dfad764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4cc56c-4b48-48ec-80ce-a6650537deba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7ccd4d-eec0-423b-9e8a-857ff36a092f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73af22c9-15c4-4265-b1bb-71ab8c804df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659be2ee-7a73-49d2-8f9d-e7d53ffc1007",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3c0933-ac47-49d1-b38b-7abf3cfeac5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0b4737-c433-498b-b060-6cc75523e3fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4484fabc-7a77-4fa5-89c6-84d033f1cf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0be865-e7c2-4027-8231-79408377a8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b72f8c-e6df-406d-a85e-84c78ccb3b4b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea30a58-6888-40f0-bb3e-199e629330ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5783864d-d98b-4a8a-a307-094cc5cc26ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c454fd6-dee4-4efc-b558-f9016e6cf0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "523b8973-02a0-43bf-9399-6180f8b75f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68dfae2f-1494-43cf-b350-7be6da66d78e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9f7245-7932-4f2c-8789-1e82af0ad302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e236df2-be99-4b0c-a628-200279942fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f47021-5091-448a-aff1-f123862a9c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ec3c694-0866-4774-a83f-a4ee2e8df0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9a4515-9bab-4454-bb46-b22845cd1b24",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141848d3-8785-4c3d-8b8f-617a3b12183b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf3aa44-66a2-440b-a1ee-9d68bf6a8f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5449dc-6fcc-482e-931b-740571c4101b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3254b802-785a-476f-a974-87cdedca7cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e4faf3-a088-4460-a8c6-7584d883a3b7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65cb8e6-38d7-469a-a478-eeff5b01fd44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e573a964-02a1-428c-9fde-06dbda81e89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c28016-03af-4950-9378-ddbda6ac7e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "12308f11-5115-4f0d-8d23-482b823cf549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a936ac94-a295-473e-8d23-216e3b8bc3ff",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1173d2d-609b-469b-b79b-d358fc9121c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6915b3-ba66-4944-bd59-0b4f166a6b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e400e93-3e44-4dab-9ead-8fd300859a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "71f7796d-944a-4994-8ed2-af5beec30d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3d43e0-8144-4ae7-a433-1d9e179e8949",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f4521b-438b-4364-bcda-ccd88e4b746b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e00e9d5-7687-4363-9716-7ad51241d420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73816ad-98e8-4dbd-87ad-6d6df2073d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7286a4-5215-4eb2-9572-f4c70ef4896b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adf8c3b-0424-41a0-b66f-0232eb995b66",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358a7ad4-a17b-4f8a-8e56-628f9c9a08a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e2973ad-ad9f-4436-af19-ee9163464e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecdf20d7-528c-424a-8a99-c50e778da1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d078dd1-0a73-4bed-9fd3-c405154eb7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f8af28-6cca-44cb-9d5f-4c40a0109f58",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564161c2-9a83-41cc-9a70-6c140f2ae4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6158e4-4730-494f-b253-dc35deaea0d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6038018-ac5b-451c-9e04-949bbd3bca20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a785c7a-8f67-4e7a-8d00-68f627b34661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca56afaf-5f4f-40c0-9098-fc2b8aaf5129",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e5ec14-794c-4d9a-9e0f-142442f33ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25091b18-5951-4b79-93a6-cc3c1683e1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25176a17-9a34-471e-ad1d-6bef652025c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fee3d236-2409-488a-8720-e76fd7653354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06dd5bd-d34e-4a95-b224-9ac41e999390",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33dfee0-805d-4955-a21c-a73ac9a09679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd787ebe-bff4-4cbf-bf10-74f0b907a525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76c7cb0-6bb7-45d9-8b91-7f25d2bdc7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a61c6a9b-25c1-4f0d-ae02-58bf20d0ae1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fb6ce9-f522-4529-81dc-527a2b152a7b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72f351b-34ba-41ad-b4a1-6fe9eb29b3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b14aa3cf-c77e-453f-93bc-9c4c991f43db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51c17ff-00bd-451b-b952-0f22fca0b17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc2de66c-a9a7-4590-ad74-b69a974db845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f20204-e735-400b-b353-050fd5805c7c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72a9508-071b-4d07-a4bf-198203f22c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b0f94c8-1437-4411-93ad-00dde79b556a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b24d9ef-f8fb-486d-9688-24e219162212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f320f6c0-21f9-4cd3-afe7-f471fe23a248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c1f752-e2e6-4760-81ff-53646ac0cfec",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29393b13-406a-4bd0-ac61-b4fb800f30fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c88039c-946b-4429-91c7-005b7f903dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ff6019-29b3-4e07-9bd2-dd8c30694698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "79d11490-9027-470a-823a-03358047d6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8046b46c-dcb5-4fea-b890-e4c844db306d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138c4d3d-4c75-47ee-9148-4a6246fb52a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3da07c2-a079-4017-b40d-65fa996c9992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69f6c8e-c057-4651-99e7-f70e026836eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2656d5e-a50f-4702-a16d-b33c57129788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8a5f27-5f38-4a8e-8511-90c4b3fc875f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcfe70e-4ccf-483a-8684-2dc875fbfbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7bebb0e-408a-4666-b140-ea8b58946a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d87ae2-79fa-4495-9cfc-1e24229319b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56a5c207-fecf-4e05-8b48-e4468cd13020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a08e15e-bdc6-4a75-ba8a-5bab97344680",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6e81a3-5455-4ad8-b8b8-8a17eba908cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51119490-c6ea-453c-9677-acdb5207552d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8f11d3-c8cd-41ae-a0e1-40eba0338cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e01a16-e326-4cef-b6c6-4822400c4a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c268a0d-40ed-4113-87a9-c64dbb4f8572",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a47e703-46a2-4931-96c5-fdec3dcd10ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca906c33-0524-4793-bb9f-bdf22fdde096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1891d32-ced8-4879-9964-eaff8d42cec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeef7c07-b064-4582-baab-1094f7f1b434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7535a328-3f14-435c-8edb-5cc2209ce769",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228bf2aa-b367-4798-9f0e-5aed5abadb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0aa40fa-09de-477a-8afe-397267c1a458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eceabc64-db3e-4774-b3dd-1a9ede90da7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "64ec1a8c-52cd-488f-8957-2d47e2ab2a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03e360f-6981-4950-977c-0bfb531a237c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7e0f2b-8904-4d8e-9a0d-b3c74ab2a9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b455f58-d636-4fdc-9272-8e5d093740be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af4cf10-48ee-4997-bf9f-7064ca4cc2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b741e25e-23f5-4e99-9b6c-e54c45a51a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1473a45-8d78-4f47-a0bb-2805f3e3e197",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0900a847-b707-4808-a50d-9571c83b8551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63270935-adb2-4c77-ac7b-8f43d15a4ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bdabeb-e098-4d39-860c-c34d216dc269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d665159-0271-40b7-8d30-ba0ee0b14475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02d3ef4-f156-42bf-855e-e52b74a195a1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b695d8-da77-4592-903a-f449120e2a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3213c6d-66f9-42c0-a734-403d86eae87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f6045d-8efc-41bd-b4a6-ee850d8776f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "92a07413-b938-4228-9d23-b8eed93a24ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f1d689-55b3-4d17-a1ed-e720f5a78f1a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0241a91d-1f73-4a96-b767-7c2c34edb19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f58b516-de02-4bc1-919c-ffa08fdad8f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21aaaf7-e24e-49e2-aec5-fed203e47199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbeda9ee-7d64-4601-8ee5-a64442fa850f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee70031-9b16-4c85-8ea4-9030dda91aa5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111737b1-84d3-4536-996f-4ae1e1c42309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3077933d-22eb-4182-8d90-39ae86511a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859b1508-a40a-497e-ac63-e3399706dd00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4dda6b-e2be-43b8-90bb-5478858c2486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca1e5f4-e00c-4ed3-830b-373c2a160cb5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c8277c-faeb-4604-9176-5262274f46ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6883f08-c9dd-4933-80c7-0c6f7ff6b967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a3c7cb-15a0-4d17-a395-9436d7cda3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "eccc3696-d2eb-4d9b-8211-2718079d1c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f64909a-e65a-49bd-bb4b-d8c5ca7c1b41",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f9f59a-446d-49b8-8f13-67428e94311c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00681177-ffa7-4197-9cb7-b9ecb1f9ee46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde8c129-4589-4939-86c7-330bdbd7743d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5edcefae-4331-433f-ae43-998117c8bd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6a9402-ff0e-419c-851d-81be5e6721e4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93261e98-8611-4825-a695-a86a0cec698f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5235840c-5a61-4b69-b43d-701da184c6b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b7cda6-2932-43e9-9129-207f50cd1af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a085ef42-9e91-401b-a6eb-92bc65b79d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa31e37c-f8f5-412a-a95b-f82f0bcb8739",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e538b6b-3e1d-41f2-a184-c0e0e40cc48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36771142-d907-4fb7-a26c-954ab2532e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c48e317-6a51-4543-83ba-d55310123de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31e6e557-41d9-4668-a38a-f48630331e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f215dc-8e51-42d1-9e95-b363f72c8bdc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783ef6b3-1141-4086-b94c-db58257f7677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae6d25d-a23c-4e4a-bc6b-671cff08b525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629dde12-ea14-432f-bc4e-f3f579aa67aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b48f082-4718-4f55-98b5-bf6d3df4d956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084c464c-19d8-4717-9289-bb46552a7517",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d4211c-fb3f-43c2-bfa9-b0e87021bd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1145b3-658f-4c18-a844-34099ff3385e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff3c5a9-3709-44f3-af8c-960c27da5eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "adfb3193-0151-46ca-a4f1-ef026bd338e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11e0047-7cfd-470b-904d-79be0fdcd46a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7e7fb7-5b7e-43f2-aab0-a8fcfb718730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226eff8a-e066-4ce2-8919-dab118fb4474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad2e173-b4b4-4075-b3de-3946286d9dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c3206c-92cc-4965-9a0a-ff245a067d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12125522-41ee-43d7-8d98-278974631eec",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7a523b-46d6-40ce-9029-4aa661fa0c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81f79ce-87ea-4f90-b29a-c8246f2fc64b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ff628f-c909-490e-b4b5-ef09327097b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "71bb487e-ee74-42dc-ae7e-f499fddc195c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf995af7-09f5-4f79-924a-ab4b54316ac2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f6e427-4757-4263-9998-bfe0437d6fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1185db59-85be-4584-9e40-2e3854fcbb92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516a694d-02e1-458e-8585-575fe031deb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98bf0c5f-5afc-44df-82ce-42d6ef6a6a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ba54bd-17c8-40bf-b425-f7f11649613d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7e700c-57ac-429e-91d7-daa926c28752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58594b45-d33f-48f4-88dd-db7ef0338e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea19af76-d3ff-424e-8e15-d8fdb6f85e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1c6aa18-db0e-45f7-8344-d1f1728510ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf9617a-c680-43c9-abc8-de256cc3d095",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec93a94d-4832-43e1-9c87-7694675ec61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c9439d-cf9e-4c93-820d-f1732514f371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a47b62a-9465-4ccf-b7da-a30bbea7b245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb75d1f-4a29-43af-9e83-7ca108da202c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e644204e-9edd-496f-b4b4-b392e36c22a5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa2bcca-ccb3-4aed-a660-35037f3afdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4512752-5cbb-41fb-b51b-7a0a773e2e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e383ac47-a98c-4208-b258-bbc557c17636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a95dd7cb-585f-4256-849c-006eb49de381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c2431c-3434-41f1-83af-f4710a908ca8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd3f5ba-ad17-4172-b4cb-578698c5a77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c4d8e2-864e-4106-9ca9-c633ad9e9f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a784c51-d4a8-4b96-ba1e-5ea0dc15d059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "327a0f5b-ed93-4a83-9ffa-b11e8b386d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4036c9c4-93bb-45b1-9d3f-904e456d4613",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d8eb4a-680b-481c-89e1-d06811027390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9b58bb-4168-462f-93cf-ceb1b25d9ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99047217-7e54-45ce-a1b9-c877bc560355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9d2d07-0d5a-4f3a-aff2-3f2d4cbf0525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133ecbf1-8764-43dd-9231-86f2950a0bea",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebafe42f-b246-4724-9eec-fabf983d61f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f79e853-ba53-4008-acd0-fca0244b02ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332a9bbc-74a9-4206-936e-acef3750d54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e42feff-4de9-4832-9fd6-4e4cd225be3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aaadadd-6765-4846-815e-b5a063148e1c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ba7774-c58a-4eb8-bc0e-13831ecd4b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cdd795-384a-432e-aaf3-5e50a95e10c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2c9bbe-8d4c-4a56-9ec0-af3c41183e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed198501-27ad-4a6a-a3c2-edaebb16fa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b506a955-cee9-4e17-b256-6ac5c9128565",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0686a2-5d5a-425a-a781-1c558b83185f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4190944b-b84c-4ae0-8c15-699c85ed17c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442e88cd-cfe3-4f51-847a-82538ef5d03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "425015a5-d1a8-4756-acbe-a9d76ce29579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a292937-b19b-43aa-826c-4fa1573b9d54",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c334505a-647f-46d8-8d83-e48e66df60d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ea8bf6-7d84-4bd9-aa95-62a3c9977612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347c89d0-d217-417a-9b09-48328b6f6405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3bd258-a6b5-468b-b1e4-ed361d316a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fbe152-90a4-404f-abfd-2e5ecdc59fdc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74841da-1af6-43cd-ae41-464ecdfa4773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916a24c7-93d8-4dd5-95d1-07be7c55bd6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bd7861-13b4-4248-8bd2-7e1e56217f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d93649-70e8-4624-8eb7-6b2afe0b83ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80e5f80-b3c4-40c0-bfe3-2a617d7e3806",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd7383d-ee30-495d-8235-0c651d23ec1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23e1a6e-b446-45e8-a26d-8b6bb32439d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2286b2a-d771-489e-a86f-e6f3670a5371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "09a19ad1-cd66-4ae2-a956-758fee0ff555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07582941-b489-4018-a6a8-ad933997208b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b746df-7856-4b42-91df-8ad4987f24ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8ae562-b898-4ab2-a28b-cb1c5e8dda17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761cee43-a93c-4c3f-b794-fa425f346583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04663224-273d-4112-b12f-c1d2acf228d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2aa3628-9411-47c4-a40a-6e247385a8e5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5b9d37-ad26-4923-a4df-562194408322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f8fbe0-ccc8-4d75-9ccc-31e813f5f2c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b73c9c2-8458-471f-8bc9-daf22c3b83fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29235229-9333-42b3-b4b5-f9122ab9d173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20969236-910a-42cc-879c-af6912710c5b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7229823-e70a-44ee-8abd-fa6f6857a8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1115a9-9b1c-4fb4-857f-c0d186d9af34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f968e0e-4ca6-4a96-92c0-848f925962a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "576f746b-abc6-4ac2-b8db-3e8f13d77823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb5e74b-d181-43df-a794-3295e0c66aa0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd5e1f5-d6ab-4c64-96f2-80f80bd214d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8168c8ff-c087-492c-b11a-7ff78578b01a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d5d114-5528-4f40-bd70-803236c559a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "441e7e98-36f1-4d53-b8f8-1c3e1e8e74b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09b3462-ef6f-4b09-a578-4f7ff0dbe0d8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188c5232-6330-420a-ac12-b87486a79dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ffc7fe-b70c-438b-80db-0b7a77ff69c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486a3a28-4b9b-4644-aaa7-8c31db9e5972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efca476e-272c-42d5-b80a-0812ee5c4840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236c251c-c790-4a2f-b411-938f27a0e3f8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2642a7af-3427-4ec1-95d6-e919c06a8486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08f54ef-01fe-4baf-ae2b-9800028254b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14349bbb-87dc-42ec-9f73-cf46e32bf812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "15e50b97-d258-4691-985d-07ac528c8ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d3a9ad-c0f2-47a4-81ef-2440ef8aa1aa",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7337c0-0c38-4db4-a224-70021da9aab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc82c8a-e771-433b-8d24-c1441f1dcce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8c47a4-b78b-46c3-9a3e-453f5cf8c678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e42058a7-37d1-4fea-9b38-1e59ef85b466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0238a24-29da-47fd-9db2-17e35eb2105d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e02f33-da81-46f3-aa2b-f9ac2b28043e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c47351-88fa-4cf2-bcd3-ba0e274b3d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cd643b-2184-4c64-bb59-02ceb425621b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7cdd070-d20a-4f76-b7ee-608c06e626d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea7d623-9e98-433e-a13c-7c14b49e890a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d839e6-ebf0-4a78-b7b6-3580aab5e35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf49cc0-f2b4-4177-b530-f4c97a2be0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed1dd7a-d36e-4073-9939-72197ee45b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "66131a05-8e60-49a2-816c-bd12c4c93352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a6a910-0a47-47fa-ae2a-d327e7469c83",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5664c5ee-0eb1-4f3e-8227-bd00a35e9fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0278afc9-dd3f-40fa-863e-7e8d4d99563e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b79918-c3f8-4bc6-8ceb-caaee8bd2c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "be5685fc-e5a8-4737-909d-8cb9f5f40bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ba9fde-6a1c-41fd-9372-2a91653a775b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7ae05e-c368-433b-b4a3-c27d118fb623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "eb3751f9-10fb-4e62-8948-bf3576a1509a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ccc63e-f427-41df-bd39-16320a659c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2fd29a-6c57-4f50-9aa3-b6a7f748b7c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f05be959-0970-4a22-a1d4-ad6ead8271b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f30d3c1a-dbd5-4e9c-a73d-c0dfbca261a2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d639a69-1a3f-4827-9c68-0fb04c0878c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50c3e4f7-5728-4d7d-b128-7e516f122214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eaa3d43-950f-42c5-9acf-093214f5cdc4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74d3cd84-9804-47eb-bb2c-60754289a04c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0375f90f-0162-4968-8458-ae4aa2aa5fd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dadc746-5160-4220-8ecd-17365b9fd853"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e2cc7fe-8f4c-4694-a338-311331bef3ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05d30065-0921-4d30-86dd-f025b3799b39"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "849506f7-832e-4960-988a-6b6a2c2f9f1d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89cf9dca-4574-40f8-9af1-43dffd9750d7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6283e2fa-949d-4421-9da8-7e625c13545d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0be1d908-8224-46de-8896-8e19a2df9045"
                }
              }
            ]
          },
          {
            "id": "ee98de73-9922-4062-915c-bafe969fafdf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fe83dfd9-be3a-4a82-b69a-73771052d51e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16e69936-14d3-4209-820f-72f79f12b762",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dba1371a-3aad-4bc0-93d2-c9cd4080d667"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80d91d28-dade-42a3-9b02-b0456cd9dc43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80a60ba7-13aa-47f4-987f-60f7132c0a96"
                    }
                  }
                ]
              },
              {
                "id": "407e2f13-25ec-4397-9d1b-20b7941928a7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1554beca-5537-411e-b794-47fa5e833df4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "874c6465-cfc7-479e-9936-0d76dda545a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "485d22b4-f151-4bd5-ba32-99b80a45aa85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "60b3ad65-9647-4cc3-a6d8-b2ee2562c4fb"
                    }
                  }
                ]
              },
              {
                "id": "468595ce-0fcd-4d71-85a4-d002e4c7b4ff",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b98852e-1f5d-4e2f-a72c-ae674ea70952",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8fd3e5a6-839e-4f7c-8406-0d191378c5ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64c9ab73-7333-45ef-a7c5-401d42455409",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a2d5b3c2-66e5-4272-9f4c-ae864bdc969d"
                    }
                  }
                ]
              },
              {
                "id": "646dffe7-1bb8-47bd-be87-734db0fa9772",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc88a1cc-c75e-4930-a22f-92a44381c449",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd045787-9543-4d4f-b047-70320c981e26"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63dd6715-2650-4850-a7df-915f53e98357",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ee207383-146e-493d-ae7c-9d8fe9d58821"
                    }
                  }
                ]
              },
              {
                "id": "064692d0-73a9-429a-836e-7492f02ff404",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b2add4d-3f2a-40fa-8ced-9db944ba3665",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d636a9f-4a3f-41d2-82b2-33d622fb64f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3072b19a-b5eb-4097-ab69-143728a5c4a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f3d29ac1-05da-4548-83f1-0c8df1774284"
                    }
                  }
                ]
              },
              {
                "id": "6000ff4a-da48-46ad-970b-3a565d2e7707",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bdb6636-3930-4a5d-a143-2a912ec7b067",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1caa584a-6688-4491-aa1b-0fe6c7711f79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5d8e3da-bcaa-4fb1-b0d3-6c7b516c4847",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7cc63fe7-c10f-4485-a717-4023966e9da6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aa2b8fee-9299-41c8-9807-1f37ceaaaa8e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6742510a-cdee-4428-b387-671320ae92ef"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e501f735-4cc2-4141-823f-ac2ec472ea93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8716303d-dcf0-4a90-bb14-1b0392a45588"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8443a7d-4ffa-491c-b2a8-5e5e554c3729",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4804e0a2-d151-437d-b839-4a2b012d65e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b114ec8c-8ccc-46ce-9b41-6ce46e43f7fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c265e998-34c4-42ce-a3a1-e23dacc95df9"
            }
          }
        ]
      },
      {
        "id": "4ca448ee-22c7-487e-98f1-5b32f5b502ca",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "75b5ac54-cfa6-4cc9-9892-383d78c15ac9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae17fadf-9463-4d78-bc2c-8703efb506eb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0c209c02-aeb6-42e4-a54b-b46ae9c2feda",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b9cc25-8287-49af-ac5d-149263f88f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f121f5f-d740-435a-b874-21e4170c37af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8005bd2e-eaa2-4cd1-a3a5-bda6d6773687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c64729d4-5160-46c3-ab76-2ce58f083d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679e904b-8662-413b-9206-d81bb5100ccb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0daf57-5930-48bb-b10f-62d025bed2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf98750-80b7-488c-b616-a4299067aef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3755b8-8446-4958-bf9b-b64dc0a780c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "984ddf63-c786-451d-a13e-24979dc479f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1afa1f-e128-4e6c-aa7f-c919038d782e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bb7e6e-d963-4447-807a-24196f0bb11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf9b24c-69a0-40c6-8a1f-277bd0d4eb18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbe1771-bb04-4e33-b000-07bc23f39a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7de6b58-2b9a-44b9-ab42-fb92bb85880e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c17fee7-ffdf-43e2-b161-33163ee325be",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad780e44-db74-45bc-8d70-49daca87d080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c5b5f7-651a-46c7-837c-e1e036ab70e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1ffc3d-5359-4d4f-be61-1237a47e01f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0edb2a0-83ac-4623-90ca-b31026bbf028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9a509e-70fb-40cb-97cd-b3fb5b990de1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e5f8da-a798-4d37-81b0-bdf0c8677b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ccdfedf-664e-485e-8bd5-6274f65fecd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3cabbd-63fb-4433-8f50-7ea67ac2e831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9360b2e6-6b5f-46b8-a429-7c6f2d5d62d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc3bdec-97cf-4dd9-8ea0-c8e1877b7ec5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2110a76-7670-4a3e-86a0-d25861ada833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7efa9f-c128-42a2-8dea-b03ca162e198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7589c22-a2ca-4847-8f5d-9de10f181345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a20e144-1ea7-4563-9233-95899308ae45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941c2805-64c9-4e77-a406-7ea0d7691c34",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e70d19d-71cb-4005-9a1e-4e62ed08d87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d6b517-bf48-41da-8afe-7fd41bcf8427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d601201-4d85-4f8a-adea-09b3ecdec8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e58026c-a6b7-47b7-9578-0f23f2596c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db361903-58d9-41e9-831f-912407e6cc3a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c8d1ae-8bf6-468c-9f7f-afc07bfc6397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc682cf-0103-4fa2-9113-104671bd0022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af66ae8-e2c6-4992-a151-103285ab5f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66eb91ae-eac9-411a-b779-06357a0589d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe00295-88ea-4fd4-9476-b62c46f1a2b5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe857eda-fe19-46f8-9279-532c1582622d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d837bcf-aa2f-48b7-ab64-13a713d71b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee625bdb-742d-4834-b640-0c5b856248e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f88ddbeb-7c78-4ed5-9896-b3f1d6f097d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8cdbe1-928d-4b80-9332-6e4f5dcae015",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2425611-81c6-462b-8c23-755990dacbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89f5a90-f827-49fc-bb31-afbe766edf2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df2ee91-ce19-4f36-9a2f-0dbef835d906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c8c5efe-3a1f-48ac-9294-ae0997432d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0029d8-46b9-4fc2-88b5-c9de70f72467",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab70b32-827c-4330-802a-7483380581b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1894043-4378-4c63-a641-f17f0eac3be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc74ef5-8410-4904-8241-3bf5de71b488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec8dd71-0e39-498d-87ff-17b455ac4fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37744076-cbb8-4e9b-a941-8987c793e5d6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb45bb1-154b-4397-aef1-62c53904baa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d315ad9-67e7-4b43-ad9c-e5c3871aea16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4651be-43bd-49da-82bb-177825aafc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a9c4f1-f942-487f-8196-1313d6ba770c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd939f6-26d1-4f23-b5a1-f9803eadc5ec",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11fa58a-0603-4a45-9495-7d7aad6b4b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f838a7f8-fd17-4063-b96c-7abe398dfd36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45adc5a6-bc86-423e-ad1a-9fd8a5c2311b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70153770-b4cd-49b3-befe-0a2dc1e40887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06b0e5c-4644-4932-a867-036a5de1d2ba",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d62a6b-7753-4292-8549-8e2097c66a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52560c4e-2375-4407-aa51-255f95c8a5b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00334378-e452-4ef4-a0de-c50785b88c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb1f92ab-948f-4f5a-8c9e-d51e5fe0d3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c07fe1d-ac67-4b58-840d-ccff19482740",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100f9fe6-79a7-4a62-9952-3694d2bcb74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d111db5f-69f3-415f-ad32-9bf30509b295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf202b1e-a1a4-4586-9a8e-9a83e2e6d704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "020df5ed-12d0-4911-a47f-fd32d71357f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da90e42-d48b-44f2-877d-99321d9235b9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e560ae-a158-479b-8d9d-dd1b4105b7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4600b1e4-b66d-4754-beb6-518a57e5dddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94e0848-a42a-4896-9e92-7305a5a2dadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "be059e39-e833-437c-abf8-0ded4a0b9b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42586e26-2f38-417c-a77e-052b3b1c8614",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277cb574-f32f-49d1-9e5a-cfa90a652e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15db0f60-64fd-4249-a471-9757d1d1f82a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ab1715-e128-4117-a3f6-8c6a98f88ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6c60ba-e8d0-4048-983d-f64fe142e75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba39b3d-e21b-464a-a715-bd04ceae279b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ce9927-b420-4944-81df-57a616c92c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0106b7b-d468-48ad-aff9-66222d2d1b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cc0465-1801-4ff1-8700-29c71ababd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8609d25-b98e-489d-856e-1baa9d7db13f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b34c4ba-a335-4ebd-af3c-3217df5f69e9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2003a5-804e-4846-9704-45e756a21b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "167467ae-500e-4875-bafd-7dd8b2049945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae72f11-9daa-467f-8340-7076f6ef0a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24df19de-4713-4f2c-b076-2caad8ab399c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389a84ba-f7aa-40c8-be7f-94d78139e906",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14169ac6-b921-426e-849e-5c0a09f69b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb7b14b6-eb2e-435a-a2d9-2668c0cd2e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75f460d-dbee-4dd3-89fd-65922cc03c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6801f722-de46-44ec-9b0a-00cdbf8d11f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a22a4d-4662-4562-8d53-bfb69f5e6765",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f67e19-aaae-4dbd-849a-65d61967a6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45e8b40-937c-49d6-a932-5331dc888987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9adf7e93-4a01-4bcc-96db-de3d42211d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ec0b20-727a-4d52-a53a-3597d36e1b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10b927a-0702-46c2-84e6-0a7e852f5394",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d504cfb1-7e49-4b77-8ee6-4fa59e91406e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc13ecc-6499-48c9-b4e2-5171014a986b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e22402-0d29-4849-88f6-7c3a54b01bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d708561-190d-4590-b51b-7e69a2ca2827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d6f8b2-ad7a-4f57-8bff-55790ebed929",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec9b5cc-d429-4a6c-86a1-24d7eb95ba84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe46ef7-fa5d-4f6f-bd68-3fc8668fdbcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b15f225-ae6d-4975-93d4-b2c7457b702a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e597b3-e29b-445f-a32d-9dead9327d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556e031f-de64-4840-92f0-8ed53489d391",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f054da0-ee97-4dac-bd4b-91b178b04f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6da0b2b-2845-4ce7-b08c-75687da90c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe0bc01-cee3-41db-b1ca-4c58a90d90e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "824a3948-7896-4a92-8ad0-9f098f832fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab9ae53-1e64-4f61-8aa0-deac85095fc3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21ee2bc-6aac-4d27-9c75-763359559c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9652a6d-6da1-4029-b855-ebd5174a69fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591ca248-2f78-4113-ad8d-2b03c4099deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6502d06-1e0e-4e6e-a2b8-2dc552a73f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb82912-d3af-4e03-afa4-0e866060f3f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f988933a-682e-47ae-8a11-7abfe68d9868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c23842d-ac92-4f59-b41c-c9325f4eb04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e188cdd-afbc-4069-b078-f918eb500dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56f2bad6-53ee-442a-a944-3e2b2658669c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989108e4-1cbc-4a95-9adf-deb518b82ff2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884f714a-a9a7-4481-a330-cdf6e991c44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375db929-3177-4f7e-a04b-4fef579017c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66b1079-e461-4fb8-a283-ddf5d1253505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3966f07-bfa8-446f-b1ae-7b43d68bce35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa157d9-77c5-4041-b982-fa905c7bc054",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae09ac7-aef7-42d3-a3ea-d6c8ae09d267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c73694-2266-4b26-a9a6-f72b5a2167c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72d4546-117c-424a-8fde-fbd5517bdcea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "434581e4-f978-4686-bc0d-650da401f72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c1a4bb-6022-43dc-86d6-aef498aa7d6a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3548b276-66bd-45f4-9866-10fcbbdb9819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eab175c-96c3-49e7-9dea-aa377ab2857c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772117d8-19b2-4796-a78f-459f110a12fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e45faef3-655b-478f-9df5-b89265dbd135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368cba54-9254-4ce0-9588-280a533e4509",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f91738-2e83-4fb2-967e-4b95888e15e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35177d4-deb2-44f2-94ee-6f35126dd8a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ad0618-3602-44bb-b690-0912cb85a1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "039d7dbc-eb0d-469c-b9cc-e2ad647a9ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74a8f19-6edd-48aa-872c-523033480599",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "936e4f08-3692-4b20-8f08-0e18400a9ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b09bc79-1f0b-4528-9437-667eaa0e4b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d30177f-28e4-47bf-86cd-30d8a8b6b258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3fb5d6-5f9e-48e4-ad15-05e1f64c1e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6faf6cb-232b-4a6b-9d4d-5dd64c3a9a74",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90942387-894f-4aac-8cc6-4b7f21c30f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa52a9fd-83ce-46b0-a692-231197aee69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd9a71f-127c-4f08-99b2-c2765e232641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60491bf6-f43c-4463-a6d3-21e0a8fc034b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e5c1e00c-ea7b-453b-ba00-bb76ce80f4d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78e91060-b22e-4859-a7df-eb4a2a03cfd2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb568d75-e155-416e-8aa2-798ce22cb7e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "497367bc-2bfc-41df-8b6a-cb0ca4e7bbc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b8788a-1219-484c-9d58-78f383760087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd05a1a4-18da-462d-8a57-be023f3c80b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5743c54b-1d53-48ec-bd41-0bc24f10a6e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc438110-117f-4779-87a1-bab3eda53036"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fde89c9-acaa-49a8-92f3-2311b918782b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdf29924-7620-44a9-a964-db622f4a02a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67ef9859-2c02-450f-baae-6e5e3f54808b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4cd9fdf2-8375-47da-a174-237b4d852aa5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da5ef613-866f-45c9-bcd8-a8e72e0ab505",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4692098-2688-4091-b07f-36c8d7a8bfbc"
            }
          }
        ]
      },
      {
        "id": "ee08f151-5bfa-4b18-bbc8-91c2fa8bd2cd",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6c0dadd7-c854-43cc-9282-f5ef21c2b1e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d48da7e7-dae6-4851-94cd-b78f81edbc31",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e50ea863-b755-462e-bbb0-53dc6b32892e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1efc86-db89-40c6-ad42-c0343fed842b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c464a1-fa64-462a-98e9-a99e9ff837f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0610feb2-da5e-481f-a118-132edd651772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1258bc-5359-4111-8fa7-5f62fa9d3d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a81656-beec-4b3c-9156-c4f327723472",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48926bb6-0949-4b10-93da-6138cb50ec8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1b4007-245a-4aad-ae75-ef0a016a9891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee3738c-c7d7-490d-bbeb-044ad95f8c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "648fca24-9bff-4e9d-adc4-1a8d21c795ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d14203d-fd04-4648-b7e8-d875fac86cec",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4202cce1-8fb6-4895-8232-5bc96c56e8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0c457c-f698-4dc6-94a1-f3f1db6bda8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e09ee60-0ad3-4693-b3b1-90dea4baee45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0893e6f-3b10-4543-b4d6-0f5b6e406cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e4dc7b-9026-4f2d-a8a3-332d9a3459cb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c7dc7d-a007-45d6-8a4c-1fae6e2c7dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d401045b-9777-4c73-b63a-c7d29283528f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e90981-e3d1-4ad6-8d81-a52e88eb4fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd8b79a2-4644-4fd2-826f-7679fa4c13c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77574259-91c7-44b1-ae31-49a1214be4b1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bed001-a58a-44b2-9815-8b55ba525c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36761b7f-62c3-4e1a-9def-f55f8b88f039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32d3008-0f9f-4c9b-a01a-ace87d61fcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6688e42e-9084-4cd7-b47e-18206b3761ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe8c94d-76e3-4895-9b78-3ad112b62844",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7a62b2-0af7-4738-9bcb-d192e8204276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b6b71a-2bf6-4f6d-ab7f-d31a1e1a5a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7e8050-d9b1-4e81-a11c-bd4aef3c5e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75492e61-9343-482e-b77e-681219ef9a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71832883-e506-4f35-82d0-07d2fd94c50a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7663cfa0-9e39-43b8-b2ba-8767c929026c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f71de70-284a-448a-b242-94eadb7ae3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a4c23a-ce70-4c2c-8b5a-72c840ff059f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "582a32b6-e0f8-4b18-a07e-dc893de7f938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb304ee-c87d-4879-9a57-34136690fee1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e306b705-7af3-4ecb-a27b-5ff18898e3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3b9d92-90ab-4618-8ce6-106ed6ea7d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7d4570-d78b-4780-9380-3ed7edd8e1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "608e52a2-79f0-4a47-815c-50a85ffd5fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3954c128-1a11-4cd6-ac52-ec90b5fbf587",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73d6c88-1d01-4d4e-a108-6ce10480d12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec1eaf1-f2ad-43a1-bf8f-af23f73252c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddda9216-17ae-4b93-b7ba-01a3effc1399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1cfc828-309e-481a-88c2-e3ced46d49f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2ca5b2-8fce-4332-b6de-d7392bac127d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfa7619-e48e-4915-aaa5-7612ed89fa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1460925-11ea-42cf-b3ca-43435fcbdc42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125cda0a-3301-4cad-b725-993058423e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b9e9a4-8c88-4c83-9348-16337f3aa112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5ed182-982f-4550-9b2d-7e9d09d1f258",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79894acf-d043-44cd-ab49-a749c1a5f02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b20b75-7244-4a93-83a1-895de624fb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a39a73-e7e7-4bb6-be5d-bb58b8908429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "45c5e418-d803-4967-81fb-653138390b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2878c81-4062-4a63-b2b0-9c0e6ff79f02",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b55dd53-1125-4b51-a0f4-b70e30abdf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4954d4f8-4d0c-4b30-a0ae-475cc52b96e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8d0de0-bed4-48ac-82ae-178ec6dd8e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "199dfedc-d9e0-4995-b91f-6d57d594a72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2b1b7c-3a7b-4e2f-bd51-a57df13a6952",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0ec6a2-20e6-455a-832f-f0484fb46ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff549cf3-2982-4275-bc87-15a683b9a6ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef08150-8af5-4807-bd21-c5d0f8f3c96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d2163a6-42ba-4e4d-b758-286fed09a3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45441bc-2106-4416-9ed7-42461001e76f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e5706c-fee7-4e32-a36f-b2cd7587923d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5f4182-2d63-408c-b40d-e2c7574b843d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6f004a-769c-4a0d-a5d1-f9f5b916f5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "08386e90-d5d4-418a-8fa5-2745a73f8626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752f9b31-2841-457b-a8ed-1e6be7d03f8b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abfb95d-029d-4df5-94c7-054bdcbb5569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbd3112-d1d8-416a-a31d-f314838c92ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610b186e-3834-451b-8323-d5eee05a1a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce60030d-9d7f-4ff0-8d6a-8cf435e11fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac67597a-bcf6-423b-bafc-e7268a1927cf",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62741bd6-5f77-49f2-b6d3-65b2fa4cdcc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cdbc149-b8e7-4632-8b6c-d10b5e060105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7532614-1b03-422b-8dee-2a72a38ea9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ddfdda0-30ca-4446-bcd5-b34af4a7376b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cdb5bd-7fa0-4279-98b1-b01c63f2ee46",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f9b8a2-13f4-4435-b968-ae89120770cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca32c8e6-766b-4552-a178-4da6b7e777fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b47efc3-761b-4b9c-baeb-ca957f8c4622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "12d778e0-38b7-49b9-8f0e-a47247e3c5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00754dbc-420a-4723-a6ff-2885fa87c246",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d19bf4-d962-45d0-ad83-22201af7a2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7081bad-0813-4439-8be9-e9aed0448b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfc4a96-78b9-439e-b3e6-62408589bc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc535134-9e53-47b8-9b79-8ff14ab6d4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcac2211-abc8-4fb0-a47f-3809883577fd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f4fb9a-59a3-4e43-b833-daba4eace7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51300e13-34db-4392-bb12-f8234987c31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6711c113-9833-42ec-8501-5e8b0eb43f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6f337f-6df2-4f33-b53c-d2da8ca8e49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636ef7ba-d006-4e98-af4e-dd9d7fb82fbb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e49e826-e1df-4840-a77b-8e6022b4ff92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfef078-4719-4a87-a06b-0be16b60ae8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6c5b2c-3011-49e0-9c89-612148885ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36c34973-4c91-43fc-86d0-b9a18650d3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ec1ef1-afa2-4bfe-a844-29d571e5d900",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e217d129-fc29-4069-b52f-30e62b66a86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021f02dc-dd85-47e3-99d2-872705497cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c165d9-c687-4262-957a-e5f06254a3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "571f5dd7-aab0-45f0-8d8c-b1dac1de06be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146810ec-311c-4e77-9853-a6eb5234f8f7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490eee31-8db3-4f1e-b700-4cc03b06cf04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bce862-0fd9-47c1-a570-deecb6b3c75b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99ee039-12d4-46a2-ae00-354ec187ac03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeef9506-933b-4250-8ff9-f2f472f49d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93545363-ccc3-4039-b2b9-17b5132aa7aa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf5505d-45d3-438f-8636-db593d210839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88090c9-09c8-4546-9151-43ef86afcfc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8010569d-5085-43e3-b1ca-72ea779d2ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c10c4a1-01d3-4798-8c46-3d436a4a9389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6627e2d2-a713-401d-95f6-c2e7b2ffa699",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f3cf94-26ad-47d0-b17a-8b410948df0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1c6419-5de1-4a86-a99f-2b1dfa2f1a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5f767a-932a-416e-9647-53a724a963bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd3d5e27-bcb2-4202-bec6-74898519e5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6012c3e-d43e-46fb-8d93-91222ea53277",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8395c5-54ce-436b-8e35-3e969229136b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa1565c-95d1-4a9f-b3d5-d3f2dfbd2112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae7640d-db2d-4118-a1e5-7b84c5717328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32c9bcc4-70c9-441a-8989-1587cf7ff15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d69946-36c6-41ca-9b55-0fbff73e339e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2187989-5e81-462b-9908-b0a512ebc85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4d9139-c11f-4623-ae3a-7a094087111c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce20c6ea-dff3-43c2-abe4-5888c346ec1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c73855d-da25-4ea9-a0d5-49a2e4937e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828f6729-8319-4254-9403-b3e94245d78c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1da1d99-8bc7-4371-9aaf-755142afd37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ac10bb-8fd4-428f-917a-55034737790a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7f9601-cd4c-4509-83a1-5899ee954136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b39ef88-5984-49af-b0cc-74cebf043967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab0a3fb-cfa2-4e73-bbbb-11fc747663aa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f46b6c-4f64-41c6-b8fd-4f42d0cfbd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6fb077-23ac-4671-a8e4-5caaf60de9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d9efa0-a9ea-41ff-b8b7-5dd89adbbb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "998d7fd5-674d-4520-bc92-ee6ad95a691b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9e76e2-eb38-4ad8-b049-2ac66d3ede6c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c830f7-7aa1-41e0-a7a4-4eac7c1b117f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb39af7-7afd-4012-9ff4-452d912aa59f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bee57bf-0a6b-4b24-9d15-7a9dff0631e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e65e42-e80b-4b5f-9db3-83c26b85df94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afbc3d1-f7a0-4caf-8e18-d6854e5d5064",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6b9631-77cd-48ec-942c-479965077871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43037a62-e905-4c2f-a006-f00a8744592b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4117f29b-9cbb-4bcd-908a-62278609a7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0116d59-bcf8-40dd-bb88-e1c5466c3fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18089f1a-9bdc-4d49-98d6-62692c2e6af8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f93b209-f239-405f-8c19-a0efd6a28034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e909b4ca-d2d7-4207-9434-88c19d46931b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a10b266-cdc7-43f0-8c5c-1f1071575c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3b7302-9862-4454-a67a-bbe58c002677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a4adcc-da1e-4517-9cc8-ade136b2bd81",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a04b91-65f6-4c44-af57-5043be9e71e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ef6eaf-b629-4f85-a522-cfb62289544a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9808c832-0476-4fff-a0e0-ccf38620713e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3b679a-9308-4941-95b9-f925328c557f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e31cc3-3243-45a6-b762-8535c97ff9cd",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26ff122-727c-47d8-a259-076cbcb626b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ae9af9-9a81-434c-8e09-f319622abd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b72b7f9-20d6-41dd-a281-3927df77c226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c293d25-c78a-4574-a970-61694d063ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f3a5b5-7fb3-47a9-8a57-b4d6b5b5f45c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fab7a3-3204-41d6-a9d3-72a6548daf82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4ad523-e317-40d3-8f9b-503cc09b387f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49e5def-b2a2-476c-9e2a-cc29d865c716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7980324b-f4e3-402d-8004-3624fbed25df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad71b953-a453-40b6-9d44-decbb2512c27",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda945e4-ba16-44df-8910-241c307c3d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6254a7-cb7d-4983-b655-b2db13c03797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0443086d-c9ef-417c-a429-43723c264e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb984f8-76e0-4b30-be1e-5114aad34765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25106c54-011f-426f-91bd-529b6e8c80c7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46bf5368-4c6c-43bc-9713-90d696eef044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1003d5a7-ee5e-4751-ab94-a7b56b821606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ae9f23-6917-4f27-ad20-036e8e2e9ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83c41e87-c306-4bcd-9a05-ef2c8d7c3aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b683f2e-9c2a-4791-b0fc-9c0f3f879318",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd7ddd3-a305-48e9-83e9-ab87ee33d25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5bcb6c-d6d6-468c-98bc-5043d16c20e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09dcded-c4ff-436b-8750-a1fc5d6b0a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ebba82-6d22-4a94-bccc-ace2f168f297"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3a8fc7c8-8497-4af7-b9b0-281320bb93f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd7843f7-17f8-4c31-8c51-8d6ad654395d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b023eea-e5e9-4ea8-bf1b-f5717d423ca7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "efe1367a-b40b-42c1-9242-5277409ce991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f94ca8-8bbf-4e2a-b184-6f19c4ff1516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2219f69b-f6a5-4d64-a2e6-a944f80906b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bddff2a-fb6b-4537-b713-1de9109f025c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "754b7205-7e23-41b4-886d-6d11c35bc461"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0da2814-b4a2-4ca3-bfbe-f43108441c88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e988414-c810-4089-812b-76e80ddf8dee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffb8558f-e4f0-4a74-90c1-10009451504f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d0b81877-6cc6-438c-8ab7-e6087c05c4a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f59b8e6d-d6c5-4538-a74c-7b23a1b09a2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06fbdfdd-58cf-4774-9120-d8f68c067dfe"
            }
          }
        ]
      },
      {
        "id": "1f8a2106-9cfc-433c-a67c-01234c68caab",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d9378a7f-ea8e-44cc-a1b4-33851be99508",
            "name": "Negative Testing",
            "item": [
              {
                "id": "75581839-1892-4e5c-a767-385a7e55913d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e23dd35c-11d5-41d5-8e34-baa893961ebd",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2a19b9-a521-47d1-884e-6f8295edb80c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2bae4f-8e45-4d05-b286-742ef7478081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7751250c-ca14-487f-8c96-7ac451638c6d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91eba1d3-1fe1-4322-9006-e4ff9608ea65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789d0b3e-019f-40e5-b501-a5c60943a6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145fb85b-27cf-4426-92c8-9e7f036310b3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd4a3a5-001e-4382-b502-cb69530dd842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917e57d4-0dd6-431e-84ca-542ed7131337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b169efb9-55ce-4dcc-a076-7c7c8874ca60",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a9b58d-01d0-4812-b2de-d1d37956222c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d3517f-2521-4616-8bc9-af23cdc1b316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75aad22-73d2-43e1-8de3-e1417a678675",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedc4855-d809-45f7-aedd-6c25e4101f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27bca97f-dec0-49d1-affa-355d259a1560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7a224d-543f-447b-90b5-e16ddb219d59",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e034bda-98e2-4003-9c96-6d53c50dc12f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f32a006-b291-4a2b-818a-ec39ad35f8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb4a10c-5a5f-4eb1-aaf8-1f276b1246f0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264a5f65-b111-46e3-84be-47bd8a517085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8a6444-56ad-4faa-8133-79bf4cb4001c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9674d580-b2b7-47e9-ade2-b9d687433725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dafe1d2-a2fa-4945-bd71-158eee80a35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6741615-a267-4c74-8d68-cb13c5359b4b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f4f111-6460-4484-9ed0-db4234000fc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2ecb47f-b8dc-4f95-bae9-a169c56ac117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9591a4d-685e-4440-8e8b-03c66f7116c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e76893-9b4e-4f49-be4f-3889dcf43894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d131e0-db8b-4427-bf2f-8a83a1d0570e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e2707c-4584-460b-b24e-ebfef4257eba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0f170c7-477f-4a6d-92f1-1e26b5c2714b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc60676-e867-483c-ad74-9cff8a7222d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f81c16-f27f-47f5-bc59-5c760bb8770f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cd7444-92e5-4bfa-b625-638cfe1c303e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8626594d-01e5-4c62-b864-0c6a0b643428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16b6bdcd-9eab-45da-90f8-eab3e9a84783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7e1948-6f8b-4214-88bf-061ba0073229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5b0e27-3329-4590-93ce-135c3751ac76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3e46fd-2b94-46a4-88af-9c0e576719eb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b47bcb-ee29-4e5f-88f4-79f46cccdc8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d59e8e23-6c84-4dab-a660-0c068cbb9adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b70038b-151a-4a29-8498-dfad041621f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9074c398-6c28-4c53-98ad-51a96467e64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11984d18-fc4a-4209-9b32-dd3ee12dba8a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efeb786-fc7c-449f-9a0f-1198be12a33d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e95b22-744c-49dc-b4d4-46434e75a582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072fa49f-4129-45fb-be16-6dafae2e1600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f1310a-ec7b-4e42-9fef-fdba4438a4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720196b5-e615-472f-bdf5-e2c708c94c3c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7350cec-c9c3-465e-9644-ba077cc57759",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "468b7dc6-5bfa-408c-8d3d-d125d2fdcff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9b87a3-20e8-4d84-8cd3-25ba6624ab47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d483bd4d-e01f-4863-b62d-37ad9eeac018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b07d96d-4f36-43f5-a753-9a581fa873d4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e874a86-2cd0-4f4e-987b-5ce4fa47e83f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab55808a-7994-4e99-8ac5-1d0ae0c72c37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a142c699-0d48-4bff-9637-113e7c414b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a579888-8673-4459-8681-617032eb3b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57b7ad6-1521-417f-8749-b9a8b136867f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cdbb61-d04d-46ea-8af1-c1c1d9779a1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94e2d2bf-0cc7-4b60-bc6d-9d8119117587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe56f77-12ba-4bc3-bbad-477f315056b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50128a0-2ebf-4afe-9f65-e78076f9177c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a11d44a-e829-45d7-9a1b-a7ac5641ffd2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae060b11-d021-495b-9309-985ff6befb97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04cdccc2-9de6-42eb-b903-cd83a1de5311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcf5b9f-c471-4f54-953c-6550430ffd08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9423cf82-57fa-4e60-971f-dcd2bade83e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa64b12-4048-414a-984c-cd3e86630f5c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266e36b0-20c1-4f5a-a25a-fc90e5d654bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46037d5e-5a08-48f3-970d-c00e7e5c960f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39681df9-6943-4abd-a318-1afd34f7fe64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25427c4f-c2cb-4347-8f97-872e4453cbc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39db50d6-be32-4373-81da-2769d15c9650",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00658378-fb92-421e-911c-d9a38b39b8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54df901-300e-4bfb-9053-69ecfafda2df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970aa419-e315-493e-8ee8-1394e5bcafcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e077b28-8b9b-4d94-ab6c-fb2ac15bb9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc5a7ea-c8cd-4164-ba58-2afec9be5750",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbf52ea-a3ab-4c92-a35e-5206462dba94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68fed780-b464-4d22-99ab-7a8c9a52216e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e5fe8d-862e-478e-a5b1-0a424d1406a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69356f91-dc1c-448e-ae9f-5eb654bdfde8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22866fcb-add7-4692-937b-58fc9cd00a4b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5227b1-d157-4964-a1b6-2b165b2a7a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7c0cdf-c0a1-4fd1-a06f-c2d8f81f0a89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "320f32a6-7f0a-445e-9c6d-5f370634d775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e4a3f6-f154-4f4e-8643-8e4950adbcbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b51cc40-5299-4cf4-8c3f-ca059d503add",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef0448f-fe41-4aa5-85b4-f5cfab60bee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4e8c4f-c6fd-42e1-9eab-e02a42c3ea9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f59d987-c08e-4135-be5e-2eb893127b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55073855-4c6c-43ed-ac60-a2fd87af8657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d406cc-2842-4374-80e7-e230c7f9a68f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c4ad5b-3de0-43b9-a2b7-2bfcee4fabc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b89a4d-bce4-493b-b836-25c9900c34d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "516b4e30-bce8-4218-b3c6-898f0fe067a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11819555-381f-450d-9d53-1db78305e49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf6208c-84d2-44f7-87ad-1f433add4dce",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0c79f1-2e84-4b44-ace6-317b06a58754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2703016e-3b08-4f0b-9d95-1b8c8f3b21e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f80dd55-8af6-48c7-bd3c-a1470081a017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c0a2f0-bc8e-4c0d-9e4e-e620cffb952a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4164047-7f06-4910-be44-e481878dc110",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2748a087-5579-4275-9c1f-a449984a3c92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a771e7bd-bf62-44f5-a03c-1a644c80d5b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709c9ef3-5bc3-4b85-9c95-91e3742eb9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59801fe6-60bb-4341-96f8-2317654fa1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e193fcc-0809-4b05-a276-89c2bff06782",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea3d9f5-dbfc-465a-b703-d677f6c80f74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42997c67-ed59-4e9f-b5d4-82b360be17c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce84cd76-f0c8-4ab3-92de-214bb2f8d301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e91291ef-c2fc-432b-9835-5f4eff0bd956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7d2344-9910-47da-a3cd-139539540b5a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360692ea-0e18-46e3-b3c3-81d4838c3546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05481085-0248-4e79-a1ad-553ddf570ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82108dc4-5728-4f6a-870d-63588b3961f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fffb38-6437-49c6-8654-e288623f8f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5b7868-34c2-4bf7-a53c-91d629675de0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a869586c-6242-4316-a4e5-169792eb0d54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a670a029-c725-4999-9de7-a29346c9d477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a07ff5-3d96-4cf7-a0c2-9a076cb4fee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a351cca-64d6-4dca-a737-350f40e6824c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299051c7-f5b9-41b6-9334-15f4b0ef7d2b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55374163-6ad7-4809-9bcc-bf54eb820ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397bcc22-dea9-4fdd-a761-dba3b089d687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d33801-c6b2-4184-860a-d31e05fb3edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8696b8e8-6757-414f-9d45-6f9ed054df6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f19021f-e6f7-4532-b02b-d62dab2300f5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9924bdb-ba7f-4ab3-8658-70b60170d9c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "161e543c-f202-4652-914a-4c6c16744985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c0bb20-d0d2-421b-b8c4-7551de032964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecee54af-e5ae-49a0-98d9-93da87e58df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826328a7-a325-4998-8aa1-e2e2eabd35d9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97affdc-aa66-4e9f-8022-7a249a501b05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40a27b8e-161f-489f-8eb8-3769fa584ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e77966-4d1d-47fb-b884-8d14c3a2a277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b518d925-2a07-4394-9beb-7abc0f45d628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c7c2ec-3718-4832-bdff-a91ebaf63abb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777ddf15-0118-40f0-92a6-72f296fb3081",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a8cff9b-8a97-4d4b-8f2d-77f40d55792d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7740df96-adaf-4f13-be7f-317584d3cb81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c5225d-cf4e-4966-bbc1-f426389c04d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7106d338-a5fa-4493-a68c-428c77c955ad",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b45a04-3111-4643-b10d-84d08bc429bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43e3a09c-0b0e-43fa-9fa3-df8a67dd2fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd26e6d-501d-4b38-a44d-69774b8b459b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed5677eb-e563-4482-b7f6-f51a686ee018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce6711f-e5ec-4470-a06a-94ae99e21c5c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b774402-cec3-453a-bbb4-d8e4edd7ea78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6b87109-fc6f-4caf-b4f8-18e6e06b1efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f405ae-5ee7-411a-a626-365113fcab4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d289c9-5587-4e7e-aa33-f16da899ecaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f7df58-58c5-46d8-95dd-ec79f137e5cd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7b1924-bcb5-4e2a-9c35-c944e3964308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "233e1464-603d-49bb-ba6a-fef7325f8492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f226fa72-8a17-4d18-8f09-f5f6703ac095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e3c5407-37ca-47af-a4d9-ed8e4854a46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968d3579-a7e8-4f93-8eb1-4d173f17126c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b0aa79-dbc1-43af-aa98-69463437aae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6426134a-adeb-4202-b61c-fcf65def63e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c46198-f210-4d29-9955-77dd6a2fa767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "928eeda0-f3e3-4320-9bd9-4f0e4e92aa9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2912b0-639b-4892-9ffc-9ee7a3fdbb39",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8b4b12-f215-41bc-8e13-35e1539479c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d771a7-bb6b-4e11-a488-d78e6bc8ec02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfaa4d68-cc9a-4e6f-a7ba-4a468e442ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53af0527-e241-4028-8489-69c4c5bfc480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38123dc5-9627-410d-b1a6-8f4b27fbc6d1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73dbd43-6c03-4d65-aa50-7e531accff41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9cff06-e6d8-4716-b655-8512aab5c56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7402dba-c459-4c31-8b65-66ed69a7c2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c3f2ed-db06-446d-a9b3-72af316ce405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d148fd-791b-4b4f-8c2e-fadb7d3f97b9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c6d53c-3da9-474f-8796-a69e89c36e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9166653c-731d-43b4-92de-32e92d7246ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639b544c-d71c-4f78-9c52-dbaaf3e52720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7951817-4f00-41d9-a91f-863f8b1521b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9150aad3-7e6b-42d5-b4bc-df10a3da87d0",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703b9276-bb6f-42bc-9f94-6bae9ca0f5ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3059bc0e-06dd-4af3-9cef-d2f9877cf5d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dcbc89b-1c44-4bfc-9246-4dbe46ed6f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2703ab81-e0b9-4f90-be33-27715e8d8278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfe5e6c-b479-4bfe-8a4e-32e5fad63e42",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6029144-bad0-4b40-87ce-59e2ae20808f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aacf79a-8f46-4f2a-8590-af4205ed8ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3f3000-70cc-4db3-8033-472cbf6cc8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f903c20c-6c78-4c91-ad87-46781bf1eac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c851770-fb1b-4127-ae2d-171b5f1d4bbe",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577f659c-a0c1-451a-a56e-d5ea76d298e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49b398b-9d59-47d8-8a54-7c2d3ad05e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b24f869-c9c8-4583-b997-29f099d6b69f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e6e36e-f7b8-4eee-95fb-4d159262847a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde1f122-02d1-4076-9698-812d5692a563",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3f3474-f369-46ff-aa09-d16f440bff24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528cc219-9a03-4a63-8796-ae3cd2d17858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e13e7a-39ba-4160-9cf8-e63224827350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a77e83e-0ec4-4522-beb6-b94d208bfde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51124d8d-710d-4107-a912-1d86695947c4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70dae61-3214-4128-aed9-95a34a42928d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba627b52-f3ca-4022-be2e-ef1f68ba5e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02855bdc-a2ee-45f3-a3da-4dda23baa8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0376dd-7c27-41b5-83a1-0128dac103aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0340ebb5-d0bb-4ef7-a60c-4f896b091ed3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f92f5d8-e94e-49f6-b69e-96fae955944d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4abff5ed-7690-478d-85ba-95054980ae84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1430e599-60dc-4f11-ae36-b3bc554ede0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1acece49-57d1-4dbc-9ec7-dbd936e2e080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b10476d-9797-44d8-801e-3ee8db238ccb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d58c976-0d03-4647-814e-d2093bd2639c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e6d8a5-41a3-44a3-969f-98d431a11e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "862161c8-685f-4bb8-b176-b51d87aa4b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3376ecf9-d4aa-43aa-9d46-6b3d122cfdeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b3684b-3d89-4d86-97df-62ea5436ee65",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b50458-9249-4adf-ad92-68be8ae13c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab11c02-2119-4df6-b1c2-6ed669d2764d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98cdfb73-bc5f-441e-9768-4073bac83c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e12a47-7cc0-4882-aeb1-eb61774d681f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3976e127-64db-4496-a1ea-144c5007dc04",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09ce65b-2369-4619-9bf6-46065d2efbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "798455e1-d2cf-4c50-9e12-33dabbf31202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aefb469-4ce1-4688-886e-1f0fda0a5a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7daf7d-a755-47df-aa66-0e8704497b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682227ca-3c46-4da6-8991-4a11429eec8d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c51ec2-307f-4ceb-8a48-1752dc03b33e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9367893-dcee-4a8d-8c5b-e49ca1924ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "502b7b35-58dc-4ce0-940c-8cb41f207bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e677d09-424c-45cd-a1ce-32ccde28a00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ec6091-7e8d-478f-994b-59e76a16f1d5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7f935f-702a-4193-b4c5-5737d09c68d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e522e89a-9ccf-4bd6-adbd-1499fc846c48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0ae847-7442-4435-9c43-94145e5bc323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3f5f82-9bff-466d-a8b2-6fc6018a685c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc099bf-7eeb-4dde-bb33-dca8f82d0377",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cfb3e3-a911-45eb-a80d-c1256380e21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc8ff5d-dbab-4d9c-af4f-e151de754853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d7ceb5-c49a-4101-b811-cd007f15b422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b166b35-2b3d-4daa-b852-908570510cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a775f4-833e-4980-a5c2-b4a0fae9f4cf",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a75cd1-feee-4af1-b468-01a9fe9ab665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1232b68-336c-456c-a214-4a07a8084c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecb38f3-f077-43c1-9d7d-f433ef3adb14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb2178e-f796-4135-913f-09de293da5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9cb87d-7690-4f5f-8dcd-cad85b512d08",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f83260-2ce4-4713-ad10-26f480b3a4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c0c0c1-8067-4549-ba9a-f62016d33158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85e226e-a341-4e46-a7e8-f4f2651317f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b91ccd-6315-4a14-b451-45da351f910d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498c72f3-dc44-43b1-bd06-644fb6d4629b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e1144a-8267-4419-81a4-d60de325a223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2cb7e1f-3562-448c-be9a-05de209a3a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdef5bcb-8c3b-409c-9ce3-b155d5769850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ce2408-e8be-4181-8d6a-02736126ed37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3675740d-7b6e-4981-bbf3-9090b522dcaf",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe4836a-1b88-4585-93c5-d16147cd5db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69861a29-a5ef-4262-a05f-a087818ee654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6691a8e8-a403-46bd-b9d8-f58fcac9e931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd5b338-0f44-47a9-9cc5-a553fe8676bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9178babc-a519-44e8-815b-20b57b0b7b79",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4799e2e-a913-432b-bc81-7dee6a05bd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71045b97-94b8-4802-841d-15d4e1e1fe20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "121a295c-935d-4cd5-9923-cdfcd8f55d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1010846-655d-46a0-b13a-1a30e99e3ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3732185a-7581-4ee6-b1b4-09f8cc286622",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfadc14-0038-434b-b508-dce5b34a992e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ccbfe52-34a9-4c7d-a985-141901dd0ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b659daee-4073-4d8e-997b-7db27b367d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e34b3d-2080-477a-99df-af95112fb13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d2a2e3-dc16-4268-ba63-33a0717fe7e1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173f6e09-013e-46c0-baaa-a16fd3aa0b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e1fdfa-5489-42e2-973c-ee38b1f4fe8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a046b7d6-eecf-4ec5-a04a-ccd1e5c46acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ae82e5-a1ba-4164-b724-d18e7a05222c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ac5c53-6ea2-47f9-bd4a-657b3d384ad4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7aea8c5-0ee8-4417-a664-0b1fd52267de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94925203-460d-4596-a470-bfabef61138a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58a2068-007d-41ee-a403-92baf4a4a5f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fee86a0-a627-4a97-b3ca-48356f6c4fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb9cd6c-8a82-4f13-9202-12a84d5b1da5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5692b64-8362-4fe8-801e-ca358cc9e955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e850a690-6252-4ad0-b1a9-28d99ba194e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1c22f2-ee92-4832-bf85-5fbbf5b110db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02de1540-54d1-448f-8cfc-0c69c39607d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146bdcfb-66b4-42a4-83b9-e88773be2bf2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829309dc-18e8-42b7-99cf-33ea59d80d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ccfde92-306e-4c8f-9c3c-f4ea241e1fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c57a6b6-c599-4b28-9991-b3e2d62cceb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9bc807-a054-4cce-b621-71be1f0ab8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0da4a03-681e-4d30-8647-1b3c926ae257",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6b6818-42da-4468-9e6e-200586036423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab2e1d7-5d2c-4a37-9ed3-6f3f8cf789e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5321c9-cbdb-466a-b018-d4926803be54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4e80e9-50e8-4960-974b-34befc93d323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c328ea7f-d4ad-4fd9-b5c6-8142d7e2a52a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629f3ab4-62d1-4035-aca6-19de734d6cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb16f26e-6699-44c2-84da-976152b1f7a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0987277-4325-4b74-9987-07c7249bacc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabca743-01f6-4143-b97b-e29932a018f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a308a6-d8ca-4fec-aab4-aa8827c9b6f5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f182a0ac-9e8f-4bd9-babc-f51ed60a1681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e079dcfb-1eea-4e6f-8d3c-ac0771957406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95959bf-182f-493f-be28-94face869d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79cb608f-f77a-4796-8727-3c3c51a4a9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea31a816-059e-4066-a49f-1b44db52f1a1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5d147f-3985-4e34-bbb7-913517489e9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "787fc429-5407-4529-9d0d-68606771b9bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "857abee6-34e1-445a-9e5f-35c01ec0a23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c19335c-df9b-4368-890e-5f743fcdab5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04239753-4ffb-4694-b9b9-9a3625e7f7f3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5edc8b-1a7f-4d23-b22e-03cee5495832",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3abc3887-964d-4721-bd04-3772aa4d058e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e576aa-ad20-4052-8dfe-7e7cd1b57ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "031e4d12-4ec2-4ca4-b9d1-e3e9a370f3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c009289d-51f7-44a3-9cef-caa056c9c9eb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4f5157-9919-4308-83ad-2187ec7d93dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c58a7262-9dc1-44eb-83e0-4192755ed8e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de03ecd3-6d7d-4e70-83a1-d55e97164478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4909ebfe-29d6-4ad3-875e-98550ee6b7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65c0b78-4edf-421f-8270-f46520e5fa3f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b88c3c-8fde-420a-ba8b-49201de2b6ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f81acdae-5b94-4979-b403-b8031c0c6818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6ce475-a818-4a28-96a6-3fce493df679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc13a5e5-8d31-4a1d-ae72-20564e229385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f386b7-7c0c-48f9-9250-18618a7d088a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16454fcb-59e6-4485-a722-c699b9d8ac34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c996db5-a543-43ec-a7bb-f343995e2c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a5d269-cf1f-444b-b1fe-70ef5b021945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5254efd0-4c94-4c1e-930d-06bf457d1151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eded4ec0-e6c1-43ee-99d6-6f61d9691b08",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4fe43f-7a75-4470-8ccd-659a43e9c49d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2c20e7b-d91c-4c99-8715-776c4705871e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d649c9-f76d-49ea-bdd8-a3958ae7136f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699ffd85-eef9-47d3-a95b-1ff77d38c622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8036db-fe12-4093-88f7-ab574ead63b3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2031bd05-8ec7-44b0-84d1-f1758c52ffc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b84ac02-5e50-4415-a0b1-6e292ef3780c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae9e872-a652-4020-81e5-7c433e1dfdfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ad6f83-3e44-4d1f-ae4c-bed586a890a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af466449-af7a-4cf6-a881-9ef8e960313a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e3f2d4-4841-4445-a436-b4c90fe287c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19cbe10e-6094-4c64-a7eb-1d218eeecc5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df79b9bd-b197-477f-a5d6-63e303f28368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f00c3e3-051b-4d72-93e2-93bebae20f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87978dd-daae-473b-91ba-35d0cbed35fd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b11e2a-e907-466d-9ecf-4185062b57bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e828fe11-7a96-4242-bb49-82de6ed74054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85aaca7e-9004-494e-aeb3-04a57622f5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b7c003-5128-4807-bf5b-d2a07fdffc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379d09c8-d36c-4f48-888e-207ed2785e18",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4967a6ef-bc3e-4e0e-8b42-865fb55add44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba618d82-5263-49fc-b3c3-1be792349848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b943ba6-c79d-4ccb-9242-b058b31db765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f2cc78-8dd6-40d7-80a8-262f25d1af8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11cf62eb-7ec8-4f87-bea5-5a9d646fdc27",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1247b20c-7dd1-4f86-9bf5-1881006d344d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de61b52-15e1-47c9-8c65-3ac6516b011a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4646ff19-1e36-4f08-9c6f-2ab9973d2f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5341666-936e-406c-a2ae-7ba1118cc857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c836826-0acd-42e4-a5be-760a4b1e4d2c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e033ad2-5277-492c-91e2-c6761b75782d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93ea86a5-f39a-4210-baf0-771f20bfbcbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00cf0c8-ae60-429b-acff-155b4d98139d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9d0518-c9bd-4728-acb8-3082b6f6ee0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c7e35a-4877-43cb-b38d-8f7bee9754cd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11441588-b812-4b21-8467-81ee19458f05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a85a252-b7dd-4938-b499-802b6c1b6e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b791b9c6-a54a-40b6-a6fa-1696ef070444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfae38a1-0843-4296-9f5a-b17f0742dd6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902bd980-43d3-4775-bb7a-d3d09f7c8ab4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f3fa0c-332f-4785-8960-0cb71a9d2ae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71012fa7-847d-4cde-b984-c6761be03a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fae7d20-b22a-4d3d-b31f-fe17c409bc71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4284754-e9ca-4a00-9883-28c3c39e6fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecaaab09-65e1-4974-8829-a54a513b8615",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2689011-8b54-4826-aadc-cd076c0f686d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c01265aa-bfe3-4e1e-b6f9-8190f2600128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdb04f5-a21e-47d5-8bc3-0ce16f63d83d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef480262-5a78-44de-9951-f2f02c914e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9612d8a7-31b1-4695-beee-08470565b283",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2935a050-3af0-4a7f-9f47-178706fc665e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fca7c1cf-5321-4b70-9275-80ed163a1dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d9f3c1-45be-4bf7-81d1-db93b784dde0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80583d42-5130-404d-b550-7b56ab4bd6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba2c0bb-4e14-4321-b39b-15f2c6443605",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d672e5d-cf5a-49ee-88bb-55953800f818",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef94fa9c-2288-45d7-96ac-02335d366d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c2f355-91db-4149-be7a-a7334c4e8336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3cbf0c-967b-4f02-9a95-64c9aeacfc7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4de23b-08b1-43a8-9339-043b1dbda83d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681faeb7-25bb-46ed-abeb-1b1dd473f4ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5248ea8b-bcae-4cd8-9223-635c85ab4af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4927c66-c7bd-47fe-a90c-e5f56a52870f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f02a161-4c80-4455-9589-e062f024f2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c695aad-4d3e-4efc-a6b9-5abb025099d7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5005d1dd-b2ea-4eae-93ee-e356427bf737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b92650b-055e-427f-ade7-80ab39c272b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8105f516-8461-44ca-bc56-726e237d4961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8795c165-b2ab-4c07-a910-53d9c3b1e8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a9a4b2-3918-4c9f-803d-4a97cdcf9f69",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c261b46-13ff-4974-91cb-5cedacd2be3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "897d9477-26e2-4160-9207-3d379fa97fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e406ae1-40b5-4223-af9c-a67293637de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21cc1345-7485-4cc7-b7c0-39aa2ef1b822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26089948-efff-4c08-8753-e8a722168ecb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012a2488-2ec0-436c-8fec-44548cd6e556",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29139fa1-1ed4-4dee-9761-bf6d2092ac4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede9bc56-cacd-44cd-9266-ffbc147e1928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8385f11f-b434-47ac-ab6f-83109024d28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f5d9cd-3a7d-4d82-ad10-0ee668af2ab5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e236a6ae-92a2-4cc7-b701-377a011e174b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c60ab42-997b-43af-8e6c-f947b6223881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00973b00-898b-41a8-8d5f-b0d3c744081c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e02d97-dbcb-4b21-b0bb-1c8d1befe23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ecfea3-7034-4df1-96dd-fbde522d929b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b95d3f3-1fd5-4d4d-a7a6-ccecdbfaf475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8154486d-a39b-4766-9094-edf3b09c50ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39dd1263-1627-4560-a21f-6fdde7f2c439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb9a5df-c8de-4e83-8fe9-995fbfae860d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1933dd-6d4c-48c6-88dd-001f8ba9fee4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aaff3ca-16a5-45f6-b690-3176c3ff9db4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3fe1378-6e53-423b-8d46-752c93da5875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2078c281-303e-48d8-a10f-3a799dc83e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474334ab-4341-428e-8df8-b568fdb916a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83899173-77f6-4448-93cf-1cf1af586010",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efc1143-9b01-45e2-a748-e18c63e758a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bec46f8-86bf-41b6-ac98-1dcef167212b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2678113d-dcee-45f2-bc82-3e329c1566c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a59880-3d38-4e27-9c18-479cb4e74abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88154386-8288-40c4-90ef-3cabad5598cd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d96566d-b009-4679-9d8a-814e89528ab0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "483cb0c1-18cf-4738-91fc-0dcf27d2b2eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ce0a29-088d-4d09-9c9c-e968b1c8271b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af4c1f7-5c32-41ef-b5e1-446506c1c30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9bcb38-fe0f-4493-ab2b-3986167be919",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a262ba-fe38-4ba0-9f65-d6e42aac0061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c86af4b-5b1d-4a06-b66f-2fc294719935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3fd3d4-ffd9-478c-8159-9e3918beb90b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a62ba3-7465-4e75-a9c7-6368e38081e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27546f45-8e93-47a6-9282-4eb570810bfc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9820c0-a7cd-4dab-9161-8268bdd1717f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a70dc61-eaa4-49e0-aece-43c01ae24012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71948e7c-30ae-43e6-aa64-b1c002304e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b84280-74cb-4500-9c0b-488ccd1672a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b783f26-aca1-4651-8529-3be691ce59f2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa9e111-1947-46af-87d4-b5a31699a60d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d80a695-17b9-4bcc-818d-588be4d57ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad936ada-d3ec-41d5-8196-07c35317c259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85928bfd-e9d7-456e-a242-b1c6407b1271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d335b4-258a-4aae-bdba-870f59644538",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fae07c7-d67d-4f46-8511-64cb8e89fb94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb636d30-d4a4-46f4-ad06-c20b62afc570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdff797-2d76-4c1c-9aec-932d38bc6246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c91405-b4bd-42bf-9ec8-48e7c8d73e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573f65a1-e642-4efd-b655-5745bbaf9e06",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ded154-5f43-4d41-931c-08dbf844e258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec311cef-d47b-453b-86dc-59ce5075baf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fc2154-ca06-46c7-8499-f25dec5a98a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb18c33a-1664-4698-84ed-fe739c76ddf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e8d7e2-bbdd-4937-8d65-8937be4989e3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f735223-3dec-4844-8c80-253c0ce9a152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad6059d2-cb7a-4ef6-8158-659518be3f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a6a4a1-a98e-4985-8e43-bbea9106d5b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8203487d-8b18-4478-93a7-bc5de6aeccb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df965e6d-3e0e-4dae-bba5-e50ed4a65b61",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46bd03f-ba79-4793-b821-b7628f4b6a57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3746f03-fc86-4a69-96e2-4c82bd7c810b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfa7d99-6697-43a8-8beb-7b6cf12dd17e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d66e134-c9cf-47ad-80c6-1bd9c69840b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a89a2b-407e-4665-9ffa-012595e73caf",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b7eac5-cb85-444a-bf13-3c40303e8133",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "763392d0-5093-49d3-969f-fcc5d99ca510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f56230-ce48-4d33-9f25-d287d89b0235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45da994-35d3-44a9-954d-1675e0f59d41"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "928f7d9b-eff2-4922-93c8-9157ac3e226e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ec6c7a4-0cd8-43c9-8736-f0e4aee52769"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "623b9863-f900-455c-a601-0c8376e0149f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "301c2583-4c4d-472f-bdbd-4441ec557558"
                    }
                  }
                ]
              },
              {
                "id": "6d492fd9-886f-4a27-87e8-5eb6f32ce3ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6feba13c-8747-40f3-9397-cb130d769b2c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a28e375-3626-48f3-aaff-f8c9c942fbab",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ec8bb7d9-964e-47fc-b18c-7fb85fa9f192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b8e455-4375-4d19-a865-7a0f8a35438b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f66d74c-b050-4380-aff5-40d662740b75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32a08b1c-b2fb-4e5c-bdcc-9e5c01ab7a23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca1c6950-b152-4a20-acd5-1108a55e6ae3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e36e5b28-6109-4987-b7fc-f57af5872ff1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ffb413e-13a0-45d0-9d16-5bbfeaea1cf2"
                    }
                  }
                ]
              },
              {
                "id": "be217647-4d25-4d55-a6d3-b47431cba54c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "096d4beb-718d-431a-891e-bdefdbd86b17",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21229096-eb3c-4024-9d08-172222618a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "db34f99c-78ab-4879-b7c2-2f2a676f56b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4358ed-5144-4179-9b7d-5c7e922de172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8871acf3-a37f-4cb9-91fd-a16d4fa61263"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e8594150-58a1-42cd-8944-5f713f5e2d0b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "83dd8a9b-df69-487e-beca-028aed6ba453",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e3f31a3-55d4-4c0c-a417-f0ff6c59b5ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ce50555b-54fd-4318-8cbe-2ae4b97a6f83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08d21682-308e-4de1-bbcd-ccc8bb5f760f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fed460e7-9968-4dcf-b954-bc52736be83a"
                    }
                  }
                ]
              },
              {
                "id": "99d8e8a1-f757-42b3-a462-be0766b77607",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1534a7b-7e86-43bd-a447-6a83b262ea94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dea3cc28-c08c-48a0-925e-4352e5ad13c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60df6ccc-b484-4f5e-ac2e-75ee4be0d072",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d75e0fba-cb73-4e33-a11f-511e6e56a3a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44acc162-4486-43a7-a896-93e2fd0a3313",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0a323415-6832-4b0e-9138-e9f1dbfd4e23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "939a0ffd-4c6e-48d6-894e-7ed8556e24eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da3b61d0-62d4-4067-a6c4-b23ffe6938a6"
            }
          }
        ]
      },
      {
        "id": "a2657c05-ed23-4e71-8bc3-b9d8daad2f20",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f5cab33a-a300-4285-a77c-a7862a61ec1c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f402a1d-d295-47b5-922d-d707893d91f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0db5702b-bc49-4aaa-aaf7-bd3c7b77f5be",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42087ea6-1a14-4b6f-abac-3c966d2ecfd1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "57400ef7-0eae-4d68-87dc-e65818e6cc44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c7e09f-064e-48f5-8bd4-98b23c973e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "892a55f6-fbd0-4c03-ae4e-408df0527892"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73f43a0d-77ea-4d59-b54a-b9937712d593",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb9c3f3c-7af6-4485-8635-80f63caeecf5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "255f45d9-fabb-4375-b503-cea26bb54a51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d29a4484-360a-4b0e-a5c7-b2d382066915"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0dcb78c-1f04-4612-bd71-ab3ae6cab778",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "05a1c775-e20f-4bd2-a2d6-dcc61bfd424c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57b8ba39-4f01-4030-a9d4-a49c447c3fec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b95a40a6-acf2-488b-82dc-a41eb1b31dda"
            }
          }
        ]
      },
      {
        "id": "3997a145-3efc-4073-b74d-63186ba66aea",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d1b3f438-49d2-4dd0-969e-b63312047d42",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb4f7170-1f0d-42cf-ae9a-b928199f0815",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "979f29bd-7ec8-4667-9e3d-a5f7f9ccdf89",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781afd92-293e-447e-8762-6c2936eead0b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67afaaf6-5536-4840-8694-f150c4afd426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49c9707-4664-438d-862d-f1915f1bd228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b180e6c-d40d-4b48-af02-f588e6ed2867"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b40a9f9-c111-440a-b557-7accfe36b842",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f910d2c3-202b-45d7-80d4-c595c2452d36"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b56a933-57ed-4854-81cd-7f4785a8c2de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da143992-0dc9-4b90-9268-b96c90e6f4d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0f06403-36fc-44d4-8374-8318e0fbf3dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9b6a0970-f302-48c2-9ec8-678812169b40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc3de20a-d526-4ecb-bea1-1b8b5e528068",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68a5da6e-af61-4c35-a27b-cb22beb3b385"
            }
          }
        ]
      },
      {
        "id": "3fb907f4-7eda-47f4-83b4-323f05c5e886",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "12776c37-9a48-45e5-aa2d-40ebdfd1e04b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ede9292b-2f5d-438c-aeec-fa6705a4e9dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4e1b7ee-2f7f-4b88-a457-f6a1c96afaea",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d51ddc4-7026-48ba-adf4-600fe1e59394",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2540e4e3-24d4-476a-b47f-8a25a2b06701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6195efd9-f676-49c4-8034-c50ea4384cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10e035ee-9f29-45ac-ab72-985d3684e639"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6aab606-2406-486f-8831-eaf6e03951ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d243fb3f-f222-450e-a9b2-03fae2e173f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e73df17-b3a0-4586-aaeb-4a6734d5e75c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "476dea40-eeeb-4ffa-8568-d9867f2ff009"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd27dcc8-e1c3-4592-a078-a2808f136217",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "130cd19f-1b33-4bae-833b-a21c92c36ca1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7f0d1b3-9b98-4f1d-a24f-0b22aea46a03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b884e7a6-12f7-4880-a72f-de53144bd122"
            }
          }
        ]
      },
      {
        "id": "69a0af31-8a9f-40fb-860c-5940cc76aa92",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be8a4d7b-8af7-4d3e-af9d-76a7dece4fe3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0a07eed-e338-450a-9f7a-431d549af564",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b7ab2b6d-7cae-45ce-8d5d-7c6ed40d0753",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15e755ef-9360-4367-979d-328227ffc109",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f72cb6eb-b8af-4b1b-939a-98b147a1b2fe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 90.61267605633802,
      "responseMin": 8,
      "responseMax": 2188,
      "responseSd": 243.504196354261,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693355549929,
      "completed": 1693355588530
    },
    "executions": [
      {
        "id": "d39a5771-135d-4509-8b94-fd38bb6aaf58",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4eea5418-07f0-4682-b063-c39ad1b3dcd3",
          "httpRequestId": "3476b234-5493-46d0-a58a-f243745c89d7"
        },
        "item": {
          "id": "d39a5771-135d-4509-8b94-fd38bb6aaf58",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3b238ecf-2a9a-4e2e-849b-df972a90ee48",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "64a6f6e5-9fe3-4b38-a088-89b498db72df",
        "cursor": {
          "ref": "b9e1a971-b60b-4968-bc4b-94a9ff0f68b3",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f8f18949-abd5-4efc-bb04-1db699156fe5"
        },
        "item": {
          "id": "64a6f6e5-9fe3-4b38-a088-89b498db72df",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8441d33d-428f-44cf-bdca-7892d402bd2c",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "988aa3a4-984c-4d4d-b65e-0eff1a5c5ee1",
        "cursor": {
          "ref": "2e9059d0-6b46-4306-8421-6ed70b67d118",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "23aa4b2f-70e1-44c0-b1ca-715e0e2082bb"
        },
        "item": {
          "id": "988aa3a4-984c-4d4d-b65e-0eff1a5c5ee1",
          "name": "did_json"
        },
        "response": {
          "id": "cb365d88-2f09-4cae-85dc-ce0628fd7292",
          "status": "OK",
          "code": 200,
          "responseTime": 337,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c82af25-3f1d-4f21-b360-1a27daf91015",
        "cursor": {
          "ref": "166f346f-e150-47be-bbd7-a17a70e331e8",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a670701-1b01-4b97-ba3f-3f254f83ccd8"
        },
        "item": {
          "id": "4c82af25-3f1d-4f21-b360-1a27daf91015",
          "name": "did:invalid"
        },
        "response": {
          "id": "71552703-b24d-4e17-8af8-7373af793c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c82af25-3f1d-4f21-b360-1a27daf91015",
        "cursor": {
          "ref": "166f346f-e150-47be-bbd7-a17a70e331e8",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a670701-1b01-4b97-ba3f-3f254f83ccd8"
        },
        "item": {
          "id": "4c82af25-3f1d-4f21-b360-1a27daf91015",
          "name": "did:invalid"
        },
        "response": {
          "id": "71552703-b24d-4e17-8af8-7373af793c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612712da-1c6f-4658-84fc-5b7e5bece497",
        "cursor": {
          "ref": "4f464a74-7645-409e-8fe1-72ea34d9ade3",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a5ebfb60-b7d8-42bb-b01e-ae91ac612742"
        },
        "item": {
          "id": "612712da-1c6f-4658-84fc-5b7e5bece497",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "079b2719-17af-4296-9dd6-6a212bc5ec5b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626334c1-3f79-4ad8-ba25-eb6654297bff",
        "cursor": {
          "ref": "8bdc6d83-d28c-4964-b481-0b81f8e9e711",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dd3a5257-672e-47c3-9508-64aa16570d9c"
        },
        "item": {
          "id": "626334c1-3f79-4ad8-ba25-eb6654297bff",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bfb98366-6a0a-40cc-b250-5c5c73e7212a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aac0ea0-3aed-4d31-bcca-3d09fb09d64c",
        "cursor": {
          "ref": "91bb6750-063f-4e1a-8169-4b69bf55d3ff",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "29101f35-8e29-4e3b-8aa9-87623b539e84"
        },
        "item": {
          "id": "1aac0ea0-3aed-4d31-bcca-3d09fb09d64c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d1c54eef-3565-4277-b2ad-ee4843cdb484",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f663249f-c05c-46e4-890f-18912ef32f07",
        "cursor": {
          "ref": "30c147c3-8388-4c27-8e38-fcd87413f1ba",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b3870b58-bd3d-4bac-8934-fb72081656f7"
        },
        "item": {
          "id": "f663249f-c05c-46e4-890f-18912ef32f07",
          "name": "identifiers"
        },
        "response": {
          "id": "0da0054f-c0d7-41f0-af3a-47075bc62ca6",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2817cc3-efd6-45a5-a9ce-cb3501ac61b9",
        "cursor": {
          "ref": "67a796a8-fb58-4d66-9dac-8142d768d1a3",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "30d3ba75-98d2-4fa3-beca-a18179f4b9a3"
        },
        "item": {
          "id": "e2817cc3-efd6-45a5-a9ce-cb3501ac61b9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "937597ec-d70d-4fd2-babe-f7c9bc906d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c9a020-3ea6-4f83-83f1-8217a7d60d46",
        "cursor": {
          "ref": "24076680-308a-41ca-809f-df568065cd14",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "458536d6-fecc-457d-b605-fc4cb7316c36"
        },
        "item": {
          "id": "b3c9a020-3ea6-4f83-83f1-8217a7d60d46",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f3a42e5c-6ca4-4449-a520-87f7564a295d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5076b33a-4e5a-45ea-99f9-ae2adade74e7",
        "cursor": {
          "ref": "210026a9-a788-4ca3-a2b4-f95b5ac53f56",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b359d576-f981-48dd-8463-c9d5f05d70d0"
        },
        "item": {
          "id": "5076b33a-4e5a-45ea-99f9-ae2adade74e7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ac7979ec-cec3-4b82-aadc-28da8eebdc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2c1455-0d92-48dc-aa51-ff334c962203",
        "cursor": {
          "ref": "3ad39a15-3f4e-495e-a7ee-508df3beb34d",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ec9e49f7-d57e-4aad-820c-ba5730453a07"
        },
        "item": {
          "id": "ed2c1455-0d92-48dc-aa51-ff334c962203",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7d000124-3ddf-4f76-a2dc-ab556b66ebab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f247dd-cb04-4e8e-b86e-081b23344c72",
        "cursor": {
          "ref": "44d76bf3-4723-4f33-a446-192d8accd176",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1349c697-eb69-4f9d-b60b-a37813364ef1"
        },
        "item": {
          "id": "70f247dd-cb04-4e8e-b86e-081b23344c72",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3561770a-0a90-47f2-9540-8baba16c6974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08ff822-7cc3-408f-8cbf-7d50147c1cd2",
        "cursor": {
          "ref": "1477fcd0-8c12-45b3-b13c-8fc4510d7bd8",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a97c5450-a7d4-4773-9bff-e536e9fc14e5"
        },
        "item": {
          "id": "f08ff822-7cc3-408f-8cbf-7d50147c1cd2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "82858b65-0a9e-4904-bbf5-2e44c2605c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cafdbb0-d6fa-42ed-a1a5-099f77b500d4",
        "cursor": {
          "ref": "149850d0-8115-4edf-8db5-f8bc552b57d9",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "07edb16a-8ac4-421c-a26b-003b7e1b61e3"
        },
        "item": {
          "id": "6cafdbb0-d6fa-42ed-a1a5-099f77b500d4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5b64e2df-7ca1-49c5-b993-2e94b3a443b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7fff66-c463-4831-bde8-55cf83e8e2b3",
        "cursor": {
          "ref": "439f9700-2a1d-4904-a423-80b5fd2b9b11",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0bd47bef-9610-46a4-a457-0d96f5641e6a"
        },
        "item": {
          "id": "9a7fff66-c463-4831-bde8-55cf83e8e2b3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5dd63406-fb95-4aa5-a044-9bca418d739e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3426ff36-a5f6-4909-8309-e0552b012625",
        "cursor": {
          "ref": "9bc8a6b2-5af3-4020-bf42-c3315c1eb7d2",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "90c6494f-8fb1-4a7b-8739-ba8f9578113e"
        },
        "item": {
          "id": "3426ff36-a5f6-4909-8309-e0552b012625",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "08f56130-e05e-4837-8f35-7c8c6a403801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93846c18-783b-4f80-9b18-e1af06a7f952",
        "cursor": {
          "ref": "e4322e6b-2277-4868-8790-6449742806d2",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a70e42b8-2a48-407e-a0ff-a220da963d83"
        },
        "item": {
          "id": "93846c18-783b-4f80-9b18-e1af06a7f952",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f18bf272-c916-4d0c-a04b-edfad3fb21e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1989a079-4c5d-4e3c-bfdb-80263db75e7c",
        "cursor": {
          "ref": "cdaa2986-e01e-4a33-be88-d628c7d790b7",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "386d135b-82bc-4118-a811-95235fc07be9"
        },
        "item": {
          "id": "1989a079-4c5d-4e3c-bfdb-80263db75e7c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "47da7b6a-ae78-4070-9d77-6a3a1d077bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd62dfe8-369e-4bb4-ae67-255774b9705f",
        "cursor": {
          "ref": "7e325b3c-283b-4f34-8f14-17472714891e",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1ae7a611-91e6-4fd4-8eb3-c181487360dd"
        },
        "item": {
          "id": "dd62dfe8-369e-4bb4-ae67-255774b9705f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "28514a3c-254f-4889-a713-b0b37de07c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1635c475-f6b6-4cfd-963c-6a75ca4ed04c",
        "cursor": {
          "ref": "8ac5b556-a14f-447b-84a1-59eb031fff95",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "858e6e52-2380-451c-9280-e121c94d76f9"
        },
        "item": {
          "id": "1635c475-f6b6-4cfd-963c-6a75ca4ed04c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ce378c33-de53-4c8a-8d37-ce3c85686491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c66265-53b0-48f4-a00c-04b8d534103e",
        "cursor": {
          "ref": "fc292605-aa07-4a33-a24a-02825150f38e",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4656c01f-4ea5-43f9-aec3-d445782e98a5"
        },
        "item": {
          "id": "09c66265-53b0-48f4-a00c-04b8d534103e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0c1c7713-e128-4c39-bec5-c25f32daeb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217ead89-0319-4732-8846-90176eaee9a7",
        "cursor": {
          "ref": "0cb41e79-29ca-432e-a137-9853763067fb",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "185497f8-cb3d-4d62-8913-afe4e7418167"
        },
        "item": {
          "id": "217ead89-0319-4732-8846-90176eaee9a7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "39f6a3da-162b-4ddc-aa18-b4b65002280d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1e296f-34f6-46f7-bd50-767f484e6cce",
        "cursor": {
          "ref": "c43edce9-0f36-4943-af19-d05c4af598ae",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "be718d6d-74c3-4741-9998-fda42a56f51c"
        },
        "item": {
          "id": "0c1e296f-34f6-46f7-bd50-767f484e6cce",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "04187284-561d-4371-9307-2c5257c5943d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a310dd-c503-4ed1-8efb-4565936c5255",
        "cursor": {
          "ref": "6386b4c3-04e4-4be4-a7e8-04197f1a7b01",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ae0a3a05-9cf6-4a05-b0da-c9d1a93b385a"
        },
        "item": {
          "id": "38a310dd-c503-4ed1-8efb-4565936c5255",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ae4f8719-676e-41e5-bb0a-fed4329b2961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50c7384-1014-4f68-9358-e6e1bdd61bc5",
        "cursor": {
          "ref": "42070683-3235-43d0-8e50-b63845e8c034",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1376c056-d235-4965-b30a-e3cd56ae46a2"
        },
        "item": {
          "id": "f50c7384-1014-4f68-9358-e6e1bdd61bc5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e8ea4030-0c87-43c7-86b2-a433f50a174c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d815035e-774a-4a28-b340-71590bc7d046",
        "cursor": {
          "ref": "2b7012c6-b90c-44a0-a6f5-248a7ad5a982",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9556abbb-d097-401f-bae9-930147c6d930"
        },
        "item": {
          "id": "d815035e-774a-4a28-b340-71590bc7d046",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "04a3e653-c9db-494a-a224-a1a2e7504251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55815e2d-1008-4f00-9d06-c14019a129c9",
        "cursor": {
          "ref": "54dbe120-c4b8-4568-8645-649c0e70740b",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e82e0fca-3d71-4b2b-96ad-c069ec8612f5"
        },
        "item": {
          "id": "55815e2d-1008-4f00-9d06-c14019a129c9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "85c67464-9e30-454c-8fa4-f706284a73e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1371d35-492d-40e5-9181-3688cfd45d15",
        "cursor": {
          "ref": "9a7a8a90-b8dc-4d07-9d30-64eaad9b950a",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e24e24f0-5e68-40ad-b3c4-c0d3bad38bb0"
        },
        "item": {
          "id": "f1371d35-492d-40e5-9181-3688cfd45d15",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "82ee7270-bb44-426f-9d4b-b5c0e79e91fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348fef96-bf73-4141-93b8-7f194a270d94",
        "cursor": {
          "ref": "ddb7de2f-1467-4b25-b42c-91d780d29b63",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4d05f7f8-7316-4419-8bf5-750a4bbd312f"
        },
        "item": {
          "id": "348fef96-bf73-4141-93b8-7f194a270d94",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c5a80fae-6a74-4262-8f9f-da11477df194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d3ec9a-5596-4fe5-8b3f-0d7ef732b70a",
        "cursor": {
          "ref": "a4452a49-2848-4f57-9001-fe94df0685eb",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bd6c4b12-58c8-4041-8446-f330d8186b80"
        },
        "item": {
          "id": "d6d3ec9a-5596-4fe5-8b3f-0d7ef732b70a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "97aea58e-31f3-4d1b-acd3-131cd2f67124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b42bc8f-7f40-4d60-a2dc-05a4ea3aafe9",
        "cursor": {
          "ref": "ee95df73-56fd-4b0c-a9bf-225cd72e858d",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0f651767-b757-4fdf-9fce-4ceb5921df6b"
        },
        "item": {
          "id": "9b42bc8f-7f40-4d60-a2dc-05a4ea3aafe9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9666c5d7-0c02-446d-b6a6-29ee1d08f19c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26b4869-b186-4409-93fd-2171116fe7b6",
        "cursor": {
          "ref": "21e84f5c-e4c4-4609-a8b8-851d755aaec9",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "420f7d88-8a9f-4bd5-af4b-101a77555a54"
        },
        "item": {
          "id": "f26b4869-b186-4409-93fd-2171116fe7b6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9175c6d5-e126-440e-a0d5-dc0eb39ca700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77aed414-9bc6-4987-875f-92aac2bfc568",
        "cursor": {
          "ref": "756c9705-7cb8-4f4f-b5ca-d3e29685cfa8",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "adfdd07b-8ada-4a78-8af0-468561151e95"
        },
        "item": {
          "id": "77aed414-9bc6-4987-875f-92aac2bfc568",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "25656a41-a961-48ce-ad9f-2f010f62ab1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02eeb49-f4d4-476d-834d-ad7dcb8dcfb2",
        "cursor": {
          "ref": "ef3c1013-8a6f-4045-9f25-5bd50ef3e98d",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9b4edbb4-687c-4a3b-a0c8-b4e2f6306fff"
        },
        "item": {
          "id": "b02eeb49-f4d4-476d-834d-ad7dcb8dcfb2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "145fa662-1d77-4750-a240-3a3ed729fc12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf61c75d-df7f-4250-a4f3-3e60c2fe0c72",
        "cursor": {
          "ref": "e4635ded-0760-42ec-bf3e-2253522da486",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "aef3f6d3-2ae3-49e6-86b4-aafce88ea199"
        },
        "item": {
          "id": "cf61c75d-df7f-4250-a4f3-3e60c2fe0c72",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e4faab97-b231-4260-ba91-429d6c9a091c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8895af8f-1b31-49c9-b2a4-bf9b4ebfc60f",
        "cursor": {
          "ref": "e73b6080-9503-4e20-a538-d9b17480386d",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f328eccc-b383-4f66-8c93-e2a8690ade33"
        },
        "item": {
          "id": "8895af8f-1b31-49c9-b2a4-bf9b4ebfc60f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c17661b2-052f-4a4a-9132-1a86e0d21e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db3bf1e-4679-4eef-82ee-0529a83565ce",
        "cursor": {
          "ref": "73ff0319-af3d-4ae1-9a0b-ac77f5326fc8",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f99fc5a6-8dff-47f1-96cc-bb19c4931035"
        },
        "item": {
          "id": "1db3bf1e-4679-4eef-82ee-0529a83565ce",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5e0928a2-da0b-4321-aa66-ab85e4494b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3388f89-b2c8-447d-b198-d39cfc2d675d",
        "cursor": {
          "ref": "4fcfb868-d626-4b4a-8752-6ff5901e2185",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "08c86c83-d3c5-4b9d-9b31-3efa3b57afae"
        },
        "item": {
          "id": "d3388f89-b2c8-447d-b198-d39cfc2d675d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2757528e-a3e3-43ef-a219-9418c1f60fa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e5ec8ea5-3844-4086-87b8-f082668980a7",
        "cursor": {
          "ref": "e9882703-00f4-4062-bc5f-bc4e56ca2182",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "52f22c91-7514-4cf3-b9b8-3e6d9f9d5367"
        },
        "item": {
          "id": "e5ec8ea5-3844-4086-87b8-f082668980a7",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a5ac335b-a34e-4f0a-b499-b7d3afa32e01",
          "status": "Created",
          "code": 201,
          "responseTime": 2188,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "bb6c5848-27ba-49b6-b61c-db8a8422511a",
        "cursor": {
          "ref": "3e575ba2-f719-44fa-916e-52a5c40d7521",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f74e5933-7f8c-4a23-b4c8-6d42c2bd1508"
        },
        "item": {
          "id": "bb6c5848-27ba-49b6-b61c-db8a8422511a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f7dcdb44-f658-4fb7-b618-111ded4beae2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "bd429d22-4877-492c-8a86-7410bf02c444",
        "cursor": {
          "ref": "5d23cb1e-6530-4c44-9d3c-796327392587",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f0b2d627-a59c-49fb-8fae-c346958b3e32"
        },
        "item": {
          "id": "bd429d22-4877-492c-8a86-7410bf02c444",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3a64c88a-f6fd-4c76-b0dd-50b14aa86b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94539db2-84c5-4306-97bc-09d6d3e258be",
        "cursor": {
          "ref": "f19f8d8e-d761-4c49-ae11-5f9780ab3e4a",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d4c3a395-9e17-4316-a8d0-f93c654e6b8b"
        },
        "item": {
          "id": "94539db2-84c5-4306-97bc-09d6d3e258be",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8a6cb959-66a3-4d33-bdff-be7243cb4a0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "fefd51ee-1f56-4b6e-9edf-848ba6bb9f15",
        "cursor": {
          "ref": "0f3dc2a6-5c9d-4c9b-979f-d2c65263b611",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c92798bc-3352-4db2-9132-84e48bca557b"
        },
        "item": {
          "id": "fefd51ee-1f56-4b6e-9edf-848ba6bb9f15",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c756f58d-3f6e-4593-a7e9-ef7619a73d21",
          "status": "Created",
          "code": 201,
          "responseTime": 1573,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "85383d9b-973b-4e84-8ebe-f646fe659025",
        "cursor": {
          "ref": "a7378e16-2a88-4654-96fa-3b8c599872f1",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fd906842-b629-45b0-ac5b-20d6613f3604"
        },
        "item": {
          "id": "85383d9b-973b-4e84-8ebe-f646fe659025",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "512a7209-43d2-45d9-a172-8723f51179cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "659be2ee-7a73-49d2-8f9d-e7d53ffc1007",
        "cursor": {
          "ref": "d514d44b-fe30-40ed-9eb6-6befbbe66d54",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c7d468c6-b7c6-410b-bbcc-5b48e1b1ec3f"
        },
        "item": {
          "id": "659be2ee-7a73-49d2-8f9d-e7d53ffc1007",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "522cb1aa-dd9d-4c57-87a8-60874108b044",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 804,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "26b72f8c-e6df-406d-a85e-84c78ccb3b4b",
        "cursor": {
          "ref": "f5c893eb-892e-4a35-a9e0-ed9bd439cc6b",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bb40f21a-7c0c-475c-8526-6f8e7bd85559"
        },
        "item": {
          "id": "26b72f8c-e6df-406d-a85e-84c78ccb3b4b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "04774d2c-9c34-4299-8ad3-cafb8ad9ba8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "68dfae2f-1494-43cf-b350-7be6da66d78e",
        "cursor": {
          "ref": "3c878fbb-7ee9-4c2d-8330-77203438ab61",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "24323101-2b8b-4c5b-902b-be165c38fc1d"
        },
        "item": {
          "id": "68dfae2f-1494-43cf-b350-7be6da66d78e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1c2510eb-4166-4100-9bb3-c897e7fb6938",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8f9a4515-9bab-4454-bb46-b22845cd1b24",
        "cursor": {
          "ref": "d718d98e-b27c-4ef4-9067-3b77eed26bb5",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "38f60cce-89fb-4676-a24f-8c846d282a69"
        },
        "item": {
          "id": "8f9a4515-9bab-4454-bb46-b22845cd1b24",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "482d3234-a812-4808-8fcf-cefead1e8917",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "71e4faf3-a088-4460-a8c6-7584d883a3b7",
        "cursor": {
          "ref": "8662e36e-907c-42d9-b8bd-5b9784798672",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "da027ba9-3495-4417-8787-85f1e3ac5a46"
        },
        "item": {
          "id": "71e4faf3-a088-4460-a8c6-7584d883a3b7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1058c589-38ad-4116-96e2-db7ef74f0d5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a936ac94-a295-473e-8d23-216e3b8bc3ff",
        "cursor": {
          "ref": "048eea55-9556-4863-a2be-dbf4c146492f",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b2fa500b-e219-4d04-a055-a55552a117e8"
        },
        "item": {
          "id": "a936ac94-a295-473e-8d23-216e3b8bc3ff",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1ffaf9f2-9cb5-4653-99f8-f6ea0ab27a6c",
          "status": "Created",
          "code": 201,
          "responseTime": 1096,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2c3d43e0-8144-4ae7-a433-1d9e179e8949",
        "cursor": {
          "ref": "50fff926-317c-4d72-b7d9-af217b4a5a2a",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f5bf5d6e-0872-46eb-a35d-3dd930eef5bf"
        },
        "item": {
          "id": "2c3d43e0-8144-4ae7-a433-1d9e179e8949",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9e57a88e-8d56-4f25-a785-148892093461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6adf8c3b-0424-41a0-b66f-0232eb995b66",
        "cursor": {
          "ref": "0fa67154-c90e-42e3-ac3f-6bb488228b13",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5eb7f299-c24b-477c-b102-545683f798e8"
        },
        "item": {
          "id": "6adf8c3b-0424-41a0-b66f-0232eb995b66",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "78bb7c5b-821a-420c-abd4-c7d60eb3e683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f8af28-6cca-44cb-9d5f-4c40a0109f58",
        "cursor": {
          "ref": "9fd7932e-9a8d-4163-80fa-55254a0a96d2",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f9ff2e06-325e-41b0-a5d1-a57cd5d1c6d2"
        },
        "item": {
          "id": "c8f8af28-6cca-44cb-9d5f-4c40a0109f58",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "689fe831-9271-46c0-8bb9-4ef997845a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca56afaf-5f4f-40c0-9098-fc2b8aaf5129",
        "cursor": {
          "ref": "e854b220-814a-4271-9914-89bd867a305e",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "10eba430-897b-4576-95ec-f68d9aee4720"
        },
        "item": {
          "id": "ca56afaf-5f4f-40c0-9098-fc2b8aaf5129",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "152c3dcc-6f29-4acf-8e6a-116de4ea2393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06dd5bd-d34e-4a95-b224-9ac41e999390",
        "cursor": {
          "ref": "e36b88a0-056b-4cf1-828d-31c876b29ac3",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4cf8c43e-a0d1-4138-8daf-d8cad4c56cac"
        },
        "item": {
          "id": "c06dd5bd-d34e-4a95-b224-9ac41e999390",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8d80a177-1126-48d1-a55d-248fa482554b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fb6ce9-f522-4529-81dc-527a2b152a7b",
        "cursor": {
          "ref": "601e7b82-3392-4c8d-89cd-a0c9e29390b7",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "57ae403e-f7d6-4908-8c25-cd0f37c9d5b8"
        },
        "item": {
          "id": "e7fb6ce9-f522-4529-81dc-527a2b152a7b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "76b97338-dc0b-4a9c-b77b-c602e68f59cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f20204-e735-400b-b353-050fd5805c7c",
        "cursor": {
          "ref": "e16ed01d-6502-46f4-a81c-178fd659a70b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d6d781d0-c598-4f48-aa08-1aa8fff8f2db"
        },
        "item": {
          "id": "e0f20204-e735-400b-b353-050fd5805c7c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3e4ea5d9-195f-4d30-9042-7210b983771d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c1f752-e2e6-4760-81ff-53646ac0cfec",
        "cursor": {
          "ref": "67081066-ce67-45fa-aab6-9a14d34d85b7",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "95fc1e79-2b2f-4859-b94c-dcf697969bbd"
        },
        "item": {
          "id": "b2c1f752-e2e6-4760-81ff-53646ac0cfec",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "14fd0b55-cc70-42fd-9a03-e63ab7afe68f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8046b46c-dcb5-4fea-b890-e4c844db306d",
        "cursor": {
          "ref": "9cef77f9-60d9-4377-8cb6-0adff5a23413",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "356e7556-df80-48b6-bce4-170d141c9221"
        },
        "item": {
          "id": "8046b46c-dcb5-4fea-b890-e4c844db306d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b9bca59d-828c-423a-825f-c45659dfabc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8a5f27-5f38-4a8e-8511-90c4b3fc875f",
        "cursor": {
          "ref": "e6e418aa-f332-4b0e-ae7e-21d59b112eae",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7c6b614f-5bb6-4984-a60c-617a0ce3f750"
        },
        "item": {
          "id": "1a8a5f27-5f38-4a8e-8511-90c4b3fc875f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ead1693e-81b6-4dc9-abad-bb2424bacc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a08e15e-bdc6-4a75-ba8a-5bab97344680",
        "cursor": {
          "ref": "e8e55a7e-b7c5-448e-a98e-d1c93b237a49",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "824fcfa9-2c9d-465d-9feb-671e2d1cbe50"
        },
        "item": {
          "id": "9a08e15e-bdc6-4a75-ba8a-5bab97344680",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2bdecca6-d3a0-4f3b-9843-2f2a4e0d9968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c268a0d-40ed-4113-87a9-c64dbb4f8572",
        "cursor": {
          "ref": "c8faec6d-6a92-47cf-a29c-9310277728c6",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "dc7af8db-61af-45dc-9d4e-bec43a96c803"
        },
        "item": {
          "id": "9c268a0d-40ed-4113-87a9-c64dbb4f8572",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "21823828-47fe-44b3-98ec-857c5eb2adcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7535a328-3f14-435c-8edb-5cc2209ce769",
        "cursor": {
          "ref": "c30ebc74-6067-4fa6-a667-dd8f0f3f6537",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f877721b-a5ef-47da-b17f-0872965c0e3f"
        },
        "item": {
          "id": "7535a328-3f14-435c-8edb-5cc2209ce769",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7b78a6ea-45c8-4fc7-b43e-297e3975c7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03e360f-6981-4950-977c-0bfb531a237c",
        "cursor": {
          "ref": "6e3b5ce5-5858-46d5-910f-fe5ddc7c1b42",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f3c26fbd-4987-41a6-bb3c-74cba4e3c43d"
        },
        "item": {
          "id": "d03e360f-6981-4950-977c-0bfb531a237c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8dd1a459-9a97-4912-a715-fa14e3efa862",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 747,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b1473a45-8d78-4f47-a0bb-2805f3e3e197",
        "cursor": {
          "ref": "e37adc08-774f-4bc0-a83c-5fe36c219c42",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7cea5768-f109-42d4-83ef-b9da017bcd2e"
        },
        "item": {
          "id": "b1473a45-8d78-4f47-a0bb-2805f3e3e197",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ff97e875-6a64-4528-b692-c403122766c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 755,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a02d3ef4-f156-42bf-855e-e52b74a195a1",
        "cursor": {
          "ref": "453e9c11-4d24-4f61-94c8-03a6811ea888",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2e4191a5-8f20-4077-946c-e2714bcbd9a3"
        },
        "item": {
          "id": "a02d3ef4-f156-42bf-855e-e52b74a195a1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "af055acb-baad-42f9-8c54-4e939b8855df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "74f1d689-55b3-4d17-a1ed-e720f5a78f1a",
        "cursor": {
          "ref": "8610a344-cc4f-48bb-8400-9c4e4ceb9acc",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8c456d0c-322b-4094-9432-a248884d3edd"
        },
        "item": {
          "id": "74f1d689-55b3-4d17-a1ed-e720f5a78f1a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "96209f26-99b1-412c-9c19-5250e75bb2d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 759,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9ee70031-9b16-4c85-8ea4-9030dda91aa5",
        "cursor": {
          "ref": "f0832895-5a41-4ffc-b85f-18f29f4b92e1",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1c219520-342a-4b01-a568-827031d3769f"
        },
        "item": {
          "id": "9ee70031-9b16-4c85-8ea4-9030dda91aa5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a25ffdd7-dd77-48c7-b49c-cd7ffbdcf18c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1ca1e5f4-e00c-4ed3-830b-373c2a160cb5",
        "cursor": {
          "ref": "b3375de9-e15a-4562-93df-2c7531e24e66",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0b7c346a-2b58-4b92-af8f-51ae75fd3d63"
        },
        "item": {
          "id": "1ca1e5f4-e00c-4ed3-830b-373c2a160cb5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ff3780f7-6267-4888-b7b8-4e2ea7f67dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f64909a-e65a-49bd-bb4b-d8c5ca7c1b41",
        "cursor": {
          "ref": "af7e0b4b-95bb-4e97-b596-80d1ddd0c718",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "749c9b59-abe5-4ebf-a34d-22d1fac90a5a"
        },
        "item": {
          "id": "6f64909a-e65a-49bd-bb4b-d8c5ca7c1b41",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d27bd20a-6514-4fd3-a2f8-51e9ae36e592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6a9402-ff0e-419c-851d-81be5e6721e4",
        "cursor": {
          "ref": "aeeb92a8-cd29-49cc-a6da-16fd143f85a1",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f379b448-98d8-4a4c-9d81-461f927c46b1"
        },
        "item": {
          "id": "6c6a9402-ff0e-419c-851d-81be5e6721e4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4b22497b-9d7e-4bec-9be5-a488285240a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa31e37c-f8f5-412a-a95b-f82f0bcb8739",
        "cursor": {
          "ref": "6881556d-76d4-43e7-93f3-9b9f3c869678",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "612c547e-6027-4d8e-970c-3107671b6577"
        },
        "item": {
          "id": "aa31e37c-f8f5-412a-a95b-f82f0bcb8739",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a5ec7748-0a24-4900-99a7-e0e7175f9a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f215dc-8e51-42d1-9e95-b363f72c8bdc",
        "cursor": {
          "ref": "e9547ca7-2b2f-4f9b-91db-cce4975cc1bc",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2dd60fd5-0734-43c0-bab7-a7eb3f82cad3"
        },
        "item": {
          "id": "34f215dc-8e51-42d1-9e95-b363f72c8bdc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "02568d24-7870-4415-9031-ac0da902e963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084c464c-19d8-4717-9289-bb46552a7517",
        "cursor": {
          "ref": "8e4c63b5-485a-4100-b496-3dc9efcce28e",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "433b44de-0a6d-4cdc-8fd9-a6e4598c5c74"
        },
        "item": {
          "id": "084c464c-19d8-4717-9289-bb46552a7517",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "88ffd8af-b2ca-435c-b1aa-cf564be89023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11e0047-7cfd-470b-904d-79be0fdcd46a",
        "cursor": {
          "ref": "9480ad06-523e-4c1b-8608-67a4b1556e5e",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ea5b666b-9292-4094-9a09-3ac94b642ab2"
        },
        "item": {
          "id": "a11e0047-7cfd-470b-904d-79be0fdcd46a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "05675246-3bfb-4d6a-8e00-70ded43540a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12125522-41ee-43d7-8d98-278974631eec",
        "cursor": {
          "ref": "6bf668f1-1ef7-46f2-a5e7-734d5b939e40",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d39c89ee-1369-4e01-8d05-05718091f3ad"
        },
        "item": {
          "id": "12125522-41ee-43d7-8d98-278974631eec",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a5d7274a-ff37-4231-b466-63baf67778e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf995af7-09f5-4f79-924a-ab4b54316ac2",
        "cursor": {
          "ref": "971a68b4-ee03-44a9-b01b-38040c35044f",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5bbe74bd-3d80-4be9-a644-4a01c4e835c3"
        },
        "item": {
          "id": "cf995af7-09f5-4f79-924a-ab4b54316ac2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "25c3425e-fffc-4ac7-8c9c-79cb64813c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ba54bd-17c8-40bf-b425-f7f11649613d",
        "cursor": {
          "ref": "19d3dde8-b630-4f9d-a7e3-419873b1be5b",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cc40cb0f-61a2-4e46-af66-55de6063d3df"
        },
        "item": {
          "id": "c0ba54bd-17c8-40bf-b425-f7f11649613d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d7fe4fdb-a2ac-4616-94ed-8e800b9c8f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf9617a-c680-43c9-abc8-de256cc3d095",
        "cursor": {
          "ref": "0b460085-c096-4a09-a727-f8f52545dcf8",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "86bd16e8-a1cd-4647-ac81-1fdea7d55084"
        },
        "item": {
          "id": "daf9617a-c680-43c9-abc8-de256cc3d095",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "349fdc83-e6dd-43d6-93e9-208e565c5bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e644204e-9edd-496f-b4b4-b392e36c22a5",
        "cursor": {
          "ref": "a262fcad-b3ee-4504-b13c-19f4b0164201",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3d7595c7-b435-4364-8a09-bbf13fa734f0"
        },
        "item": {
          "id": "e644204e-9edd-496f-b4b4-b392e36c22a5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "dd4fe31e-2375-4835-817e-9546314b3ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c2431c-3434-41f1-83af-f4710a908ca8",
        "cursor": {
          "ref": "02147adc-e789-48f0-bad5-ec0682255dd3",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "45f3b882-1c76-411a-9024-26b7d9befc58"
        },
        "item": {
          "id": "b0c2431c-3434-41f1-83af-f4710a908ca8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "567dfd9d-1669-49f2-809e-3f84d6664375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4036c9c4-93bb-45b1-9d3f-904e456d4613",
        "cursor": {
          "ref": "07b67873-8fce-4e17-9e6a-785d35021ca0",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5fad7278-eecc-45d4-8835-853bad3b5426"
        },
        "item": {
          "id": "4036c9c4-93bb-45b1-9d3f-904e456d4613",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1052850d-65d6-4781-95cc-b9ec8a33ca1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133ecbf1-8764-43dd-9231-86f2950a0bea",
        "cursor": {
          "ref": "5bbb9586-ed67-4951-a4d4-c803d5a3d3b2",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7870ffc8-02fb-476a-8868-fa3c25e02a41"
        },
        "item": {
          "id": "133ecbf1-8764-43dd-9231-86f2950a0bea",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cfddfd94-7a90-4465-84ce-339008c411fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aaadadd-6765-4846-815e-b5a063148e1c",
        "cursor": {
          "ref": "265705de-7fe6-4709-a45d-1301d8a5ad6a",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "935b7fff-bdef-4cc0-b4b0-85d126ff5ec6"
        },
        "item": {
          "id": "0aaadadd-6765-4846-815e-b5a063148e1c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2c27153b-f91d-47fa-9618-da2149e695bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b506a955-cee9-4e17-b256-6ac5c9128565",
        "cursor": {
          "ref": "6b3cfd5a-176d-4c28-b1d4-f63ce56f4b5e",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4f94f930-3c6e-4677-a06b-4c1555a3ab7e"
        },
        "item": {
          "id": "b506a955-cee9-4e17-b256-6ac5c9128565",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8862e054-f6bd-41c0-8259-6aa3769c4104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a292937-b19b-43aa-826c-4fa1573b9d54",
        "cursor": {
          "ref": "f4221d10-0c86-4d8c-97d2-eefbc8fd0ca5",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9e34f83e-fb40-4a68-8ece-2c2d3348b4ea"
        },
        "item": {
          "id": "4a292937-b19b-43aa-826c-4fa1573b9d54",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a9d60ae8-9eaa-45d3-80ad-b98877df656e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fbe152-90a4-404f-abfd-2e5ecdc59fdc",
        "cursor": {
          "ref": "f651b1f9-7aab-45f2-8009-675ff92283d3",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "985d23ee-e3b2-4be0-8ec1-88535779c70f"
        },
        "item": {
          "id": "23fbe152-90a4-404f-abfd-2e5ecdc59fdc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6a3c6196-83b5-4589-9f00-d1d7580374e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80e5f80-b3c4-40c0-bfe3-2a617d7e3806",
        "cursor": {
          "ref": "3b68e418-808a-42bc-a5a6-470b4f39b3a8",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ebce80a0-a8f6-4a4b-ad91-5a8b2e6733d2"
        },
        "item": {
          "id": "d80e5f80-b3c4-40c0-bfe3-2a617d7e3806",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "306cea28-5761-480d-a1ca-11c3a6da3b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07582941-b489-4018-a6a8-ad933997208b",
        "cursor": {
          "ref": "84d9fe0c-3338-45a9-b6f4-367ee0d16890",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1586117e-13dd-4afd-883e-775565ff7653"
        },
        "item": {
          "id": "07582941-b489-4018-a6a8-ad933997208b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b11e3588-65ac-437f-8573-cc6c592482cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2aa3628-9411-47c4-a40a-6e247385a8e5",
        "cursor": {
          "ref": "37fbe56d-2ddc-4b2c-a22e-2a7a7a21c8cc",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "899c6e04-3284-4782-abf6-90bcdb54170c"
        },
        "item": {
          "id": "a2aa3628-9411-47c4-a40a-6e247385a8e5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2a7109a5-41cd-4c1b-8317-fd250cdcb446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20969236-910a-42cc-879c-af6912710c5b",
        "cursor": {
          "ref": "9d686ea8-580d-407a-9e6e-67c9010965ba",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8666f281-291d-44d2-8783-647cea7b2f1c"
        },
        "item": {
          "id": "20969236-910a-42cc-879c-af6912710c5b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cba46e76-e43e-4943-9351-f1fd8fb42f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb5e74b-d181-43df-a794-3295e0c66aa0",
        "cursor": {
          "ref": "d9b64f3f-170d-4845-8c87-9f07277258db",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e983f998-ad72-4493-a25d-43f728c5e3a1"
        },
        "item": {
          "id": "fdb5e74b-d181-43df-a794-3295e0c66aa0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bcc8811c-7dc8-4cc6-af6f-bea0f0d3476f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09b3462-ef6f-4b09-a578-4f7ff0dbe0d8",
        "cursor": {
          "ref": "22f538ad-6e89-408a-bc3a-0fa56dbef091",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "235841c1-4e23-4bdd-bb22-0344b7897b66"
        },
        "item": {
          "id": "f09b3462-ef6f-4b09-a578-4f7ff0dbe0d8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "da1ccb6f-fccb-45ad-ac18-b8bac56130ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236c251c-c790-4a2f-b411-938f27a0e3f8",
        "cursor": {
          "ref": "628307a1-f5d1-454e-bfec-0e73feecbea2",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "aa932d5c-4a09-4382-bf17-63c76aa28ac9"
        },
        "item": {
          "id": "236c251c-c790-4a2f-b411-938f27a0e3f8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "addd9f79-f4a4-4c2e-8e50-c753ce3a2d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d3a9ad-c0f2-47a4-81ef-2440ef8aa1aa",
        "cursor": {
          "ref": "846ea491-39e5-401a-afaa-f22187d5ea7b",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4aa4c5e0-935e-4330-8fe9-3a020baf3c6e"
        },
        "item": {
          "id": "63d3a9ad-c0f2-47a4-81ef-2440ef8aa1aa",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f10ca841-c33a-4b57-b2af-8de7e5c0ce13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0238a24-29da-47fd-9db2-17e35eb2105d",
        "cursor": {
          "ref": "0f4840d5-b4a1-48cb-adb1-a546c5978245",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7ab61783-a3a3-4139-9775-e3c13177ef26"
        },
        "item": {
          "id": "b0238a24-29da-47fd-9db2-17e35eb2105d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "32125cf6-ba84-445c-bad4-9aa5f965b1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea7d623-9e98-433e-a13c-7c14b49e890a",
        "cursor": {
          "ref": "4ab7722d-0148-4791-8cef-a7e3a279b3d3",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3222cf7e-15cc-44d0-b371-0b778b2ca21d"
        },
        "item": {
          "id": "aea7d623-9e98-433e-a13c-7c14b49e890a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "75819b75-6b99-4a76-9429-5c58326d6998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a6a910-0a47-47fa-ae2a-d327e7469c83",
        "cursor": {
          "ref": "2bb1734b-ad45-4969-9b0f-664d465bd180",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cc9cd704-f502-4ed2-ad46-2bb530edb9e0"
        },
        "item": {
          "id": "24a6a910-0a47-47fa-ae2a-d327e7469c83",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "90ff9493-d0f7-4416-a7f2-afba9ff5e5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ba9fde-6a1c-41fd-9372-2a91653a775b",
        "cursor": {
          "ref": "fa56b5d1-ff8a-492b-812f-018a342802b9",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "079e80c2-4b73-40a9-a9f0-1b69a14d2cb8"
        },
        "item": {
          "id": "c7ba9fde-6a1c-41fd-9372-2a91653a775b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e0e5c46f-f487-4420-b5a0-6fe1fa703a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30d3c1a-dbd5-4e9c-a73d-c0dfbca261a2",
        "cursor": {
          "ref": "35ea0cac-fac5-4dbd-9433-3ae185a3373d",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "93676082-a526-4a5f-a1f0-ed670e508a6e"
        },
        "item": {
          "id": "f30d3c1a-dbd5-4e9c-a73d-c0dfbca261a2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b8de25ea-9505-4664-a984-759fae703219",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe83dfd9-be3a-4a82-b69a-73771052d51e",
        "cursor": {
          "ref": "93a97074-11d7-45d5-a103-c88153c38a8f",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "77356be6-7203-4926-8ee7-4f7de2da3c22"
        },
        "item": {
          "id": "fe83dfd9-be3a-4a82-b69a-73771052d51e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7b24864d-12ec-4440-bee3-59ee0f4a2cde",
          "status": "Created",
          "code": 201,
          "responseTime": 1294,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "407e2f13-25ec-4397-9d1b-20b7941928a7",
        "cursor": {
          "ref": "7d763329-1514-4d25-ab03-4b842764470e",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2065dcae-89fc-4c24-b45d-75d1ca33e80f"
        },
        "item": {
          "id": "407e2f13-25ec-4397-9d1b-20b7941928a7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d8921e5e-73b2-41db-be54-e43f6055510e",
          "status": "Created",
          "code": 201,
          "responseTime": 997,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "468595ce-0fcd-4d71-85a4-d002e4c7b4ff",
        "cursor": {
          "ref": "7c0b5764-5a14-4f30-a4bb-300c8e108a26",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "02302686-8dd0-48a9-9118-1adca5d2193c"
        },
        "item": {
          "id": "468595ce-0fcd-4d71-85a4-d002e4c7b4ff",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e950b4ae-071b-4d98-8d06-586d89f657e7",
          "status": "Created",
          "code": 201,
          "responseTime": 1065,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "646dffe7-1bb8-47bd-be87-734db0fa9772",
        "cursor": {
          "ref": "f0a6f674-a90f-4c74-933d-ee1fd6c78fb7",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a3bf79a0-bf5e-4b87-b843-bb26c5faf871"
        },
        "item": {
          "id": "646dffe7-1bb8-47bd-be87-734db0fa9772",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "383b9663-6aef-4b84-b4dd-277b35100596",
          "status": "Created",
          "code": 201,
          "responseTime": 1086,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "064692d0-73a9-429a-836e-7492f02ff404",
        "cursor": {
          "ref": "51069e5e-2174-48fb-9373-d552f3aab6d6",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4b647a01-15fe-4707-b1b0-5c9f1b5ee637"
        },
        "item": {
          "id": "064692d0-73a9-429a-836e-7492f02ff404",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f3ac1855-1a54-4290-9e30-cd1f9ea85604",
          "status": "Created",
          "code": 201,
          "responseTime": 1154,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "6000ff4a-da48-46ad-970b-3a565d2e7707",
        "cursor": {
          "ref": "3b01eae5-0cd9-4def-8067-c6213d80a49f",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "79124506-70a6-41f7-8b3d-84045c802bfb"
        },
        "item": {
          "id": "6000ff4a-da48-46ad-970b-3a565d2e7707",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "81dd451c-9954-4965-89db-78a22daaa0bd",
          "status": "Created",
          "code": 201,
          "responseTime": 1202,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c209c02-aeb6-42e4-a54b-b46ae9c2feda",
        "cursor": {
          "ref": "68fa98fa-4c39-4e05-a5a8-f48bb95024b4",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a454c4fd-0a89-43e2-9ef0-b2f24e6656c1"
        },
        "item": {
          "id": "0c209c02-aeb6-42e4-a54b-b46ae9c2feda",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c8bba36f-0ccc-4895-8302-e4c40126c09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679e904b-8662-413b-9206-d81bb5100ccb",
        "cursor": {
          "ref": "ebfa1d01-09b6-42b9-9f5b-969626c4f2ba",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "10b63a69-f745-423b-9eb8-3bafa3c698cd"
        },
        "item": {
          "id": "679e904b-8662-413b-9206-d81bb5100ccb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fd97d41c-a1ed-4294-b979-bdd6d91a87b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1afa1f-e128-4e6c-aa7f-c919038d782e",
        "cursor": {
          "ref": "f35c4caf-707c-49dd-bf5b-61295c2a6bbd",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a46f1a2b-9a13-4243-9ca7-5c255f1b97ef"
        },
        "item": {
          "id": "2f1afa1f-e128-4e6c-aa7f-c919038d782e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "da8ac109-02e2-4e0d-a6cd-ab8254b01f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c17fee7-ffdf-43e2-b161-33163ee325be",
        "cursor": {
          "ref": "e38e45bf-359f-40b9-989b-eb7e31d34f0f",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "51be12b7-5a3d-4db6-94f4-887a445fa6d2"
        },
        "item": {
          "id": "0c17fee7-ffdf-43e2-b161-33163ee325be",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ae8a3e70-16bb-4346-b7d9-6016bffd9419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9a509e-70fb-40cb-97cd-b3fb5b990de1",
        "cursor": {
          "ref": "011b3e54-0ee7-4662-9cee-f7b842942533",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c96ffc9c-09af-488f-9dee-7aa6d4766bdb"
        },
        "item": {
          "id": "aa9a509e-70fb-40cb-97cd-b3fb5b990de1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9aacc2a7-a8a5-4e9d-9d3b-98c85dbccf6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc3bdec-97cf-4dd9-8ea0-c8e1877b7ec5",
        "cursor": {
          "ref": "67257a8e-d723-449a-94d2-9891e6b5fb59",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c0865cd5-6107-4214-97e3-ed5c89d1a474"
        },
        "item": {
          "id": "dfc3bdec-97cf-4dd9-8ea0-c8e1877b7ec5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9db59eb5-5966-4157-9956-3f56f2138be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941c2805-64c9-4e77-a406-7ea0d7691c34",
        "cursor": {
          "ref": "f4725f1c-c81b-4028-a867-4cecc770a027",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "06ed61a0-13db-4027-8915-5c3effca2e2e"
        },
        "item": {
          "id": "941c2805-64c9-4e77-a406-7ea0d7691c34",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fb197b03-c288-4c6a-9a8a-27a52424559e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db361903-58d9-41e9-831f-912407e6cc3a",
        "cursor": {
          "ref": "f9bdcbca-52a1-4295-921e-63af4a0b7067",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e1c428ea-96d4-44a8-9392-95508e454305"
        },
        "item": {
          "id": "db361903-58d9-41e9-831f-912407e6cc3a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e7f87b55-e702-496b-99dc-ee55c29b03ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe00295-88ea-4fd4-9476-b62c46f1a2b5",
        "cursor": {
          "ref": "85abd334-db58-476d-974a-ccddd0caed9b",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "abcc0a86-8fa0-4d67-b190-98becfd8f3d2"
        },
        "item": {
          "id": "abe00295-88ea-4fd4-9476-b62c46f1a2b5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2c1c0350-5f05-4859-aefb-8818957798ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8cdbe1-928d-4b80-9332-6e4f5dcae015",
        "cursor": {
          "ref": "67a75dc6-ce18-477c-8ace-627b363636f6",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8e6b4032-7e5b-4a3b-9382-791fbae3b4e2"
        },
        "item": {
          "id": "fe8cdbe1-928d-4b80-9332-6e4f5dcae015",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7be96de9-2543-4820-8ddb-00275e37dec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0029d8-46b9-4fc2-88b5-c9de70f72467",
        "cursor": {
          "ref": "a9081b82-bae6-4afe-a90f-37063b94caae",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6126f96d-8492-435d-95b7-814730af091b"
        },
        "item": {
          "id": "4c0029d8-46b9-4fc2-88b5-c9de70f72467",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "af015fdf-22f2-4fba-b55d-d6d871701f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37744076-cbb8-4e9b-a941-8987c793e5d6",
        "cursor": {
          "ref": "13ada0db-7799-49c2-b173-4abec36de7b1",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "13a6496e-edb6-4ec3-998b-f516564e362d"
        },
        "item": {
          "id": "37744076-cbb8-4e9b-a941-8987c793e5d6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4ebe973b-97cb-4f67-b2d9-2cb4d64199f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd939f6-26d1-4f23-b5a1-f9803eadc5ec",
        "cursor": {
          "ref": "494bb4ee-a0f3-4e7b-9028-333888f461ef",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ea6c841b-34c0-4f73-8349-17f0c312f083"
        },
        "item": {
          "id": "5fd939f6-26d1-4f23-b5a1-f9803eadc5ec",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "58cf0e26-7fce-4305-9be3-751c8c9093ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06b0e5c-4644-4932-a867-036a5de1d2ba",
        "cursor": {
          "ref": "335968e9-6200-44b8-8821-649321604520",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "636c36fc-6a6a-4adc-b30a-f3521cbbdfe7"
        },
        "item": {
          "id": "e06b0e5c-4644-4932-a867-036a5de1d2ba",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "17a39e9e-2e73-4103-879f-4cbdf87c1308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c07fe1d-ac67-4b58-840d-ccff19482740",
        "cursor": {
          "ref": "2d4d9270-201a-43d6-8b3a-ded07403b3da",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "fca6b697-4c6a-4ab0-8bd2-37c254610e49"
        },
        "item": {
          "id": "2c07fe1d-ac67-4b58-840d-ccff19482740",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c7503c1b-32b3-4897-8105-87f803fab1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da90e42-d48b-44f2-877d-99321d9235b9",
        "cursor": {
          "ref": "6d28dcaf-24b4-4219-83c8-81432cff5dc7",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "416103d8-72c1-40cd-b3c8-9890b37b507c"
        },
        "item": {
          "id": "8da90e42-d48b-44f2-877d-99321d9235b9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "acdb2fe6-42e2-49ec-be0d-ebf31afec0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42586e26-2f38-417c-a77e-052b3b1c8614",
        "cursor": {
          "ref": "2408affa-79b6-4232-87fe-980014399b76",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cbae1952-ef5a-4deb-abbf-f12a31bc591b"
        },
        "item": {
          "id": "42586e26-2f38-417c-a77e-052b3b1c8614",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "af0e2c8e-5f08-4b5f-95b5-24ba49d9165e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba39b3d-e21b-464a-a715-bd04ceae279b",
        "cursor": {
          "ref": "56ea4356-e7fe-410a-92f2-ebe28a1cc870",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6facf182-4e5f-42dc-a63c-5f7a08f35454"
        },
        "item": {
          "id": "8ba39b3d-e21b-464a-a715-bd04ceae279b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1bb18930-129e-4d96-a707-c7f18eeed53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b34c4ba-a335-4ebd-af3c-3217df5f69e9",
        "cursor": {
          "ref": "3edf6c7f-f049-406c-a877-473ea2501667",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "26396e00-20dc-4948-b257-cfbb7aa01228"
        },
        "item": {
          "id": "3b34c4ba-a335-4ebd-af3c-3217df5f69e9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "765372c9-f982-4226-9de8-70857df242d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389a84ba-f7aa-40c8-be7f-94d78139e906",
        "cursor": {
          "ref": "d47d75bb-7af9-4b20-b399-70475d5e0d33",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1db31e1a-bfd9-46a3-81a2-1bddd7ac7d57"
        },
        "item": {
          "id": "389a84ba-f7aa-40c8-be7f-94d78139e906",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c2632598-aa51-4804-ba8c-d01d4fe610d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a22a4d-4662-4562-8d53-bfb69f5e6765",
        "cursor": {
          "ref": "addc6235-c814-4fc1-bb6b-072cba092f10",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a18a1716-9b17-4cfb-b4d9-f5342b9daf0f"
        },
        "item": {
          "id": "48a22a4d-4662-4562-8d53-bfb69f5e6765",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cf657d6b-eeca-4d2c-bd86-37501dcefdcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10b927a-0702-46c2-84e6-0a7e852f5394",
        "cursor": {
          "ref": "e35a10dc-1121-4b0c-9f61-c2ea7b6a5ad4",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "84c3c0db-a3b6-4a47-b9d1-7e28d62edba3"
        },
        "item": {
          "id": "e10b927a-0702-46c2-84e6-0a7e852f5394",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "23f38f89-7c1f-43d6-9cd1-c4fce7d1789d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d6f8b2-ad7a-4f57-8bff-55790ebed929",
        "cursor": {
          "ref": "e89fbfc8-d3b1-40dd-92a4-b3ccd2485215",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "019ed89c-53fe-4ed8-a9a8-2556e32afae6"
        },
        "item": {
          "id": "c2d6f8b2-ad7a-4f57-8bff-55790ebed929",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7bbc81f0-cf9a-49cc-ae02-940e98e5c6a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556e031f-de64-4840-92f0-8ed53489d391",
        "cursor": {
          "ref": "6d277126-e733-4839-a7b7-06b3f3f6bc2d",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "16e11180-f798-47b5-b16c-8133824726d6"
        },
        "item": {
          "id": "556e031f-de64-4840-92f0-8ed53489d391",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d4b768dd-84f6-420b-8fe0-885cd5661a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab9ae53-1e64-4f61-8aa0-deac85095fc3",
        "cursor": {
          "ref": "24e7a124-8ef7-4e15-b338-08ba4b9d6459",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "86c9d7ed-d261-45be-b951-44d3a3b6c221"
        },
        "item": {
          "id": "aab9ae53-1e64-4f61-8aa0-deac85095fc3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e5f4022d-ae30-4b7d-b6da-e6a95fa01a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb82912-d3af-4e03-afa4-0e866060f3f8",
        "cursor": {
          "ref": "b26c9474-d912-4ee0-8855-caf65d7da420",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "22709de1-fc3b-4c60-9d59-6543a2eb8489"
        },
        "item": {
          "id": "6fb82912-d3af-4e03-afa4-0e866060f3f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1d5853be-39d5-49b8-9625-3a45760d3963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989108e4-1cbc-4a95-9adf-deb518b82ff2",
        "cursor": {
          "ref": "c17ecbc5-4ec0-4068-b01c-33608cdf0ce5",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0c1756b0-0b45-4bcf-8fd9-249ced261c03"
        },
        "item": {
          "id": "989108e4-1cbc-4a95-9adf-deb518b82ff2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "27cf1766-dacb-4217-b32d-2729fbf78420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa157d9-77c5-4041-b982-fa905c7bc054",
        "cursor": {
          "ref": "194c3703-a5ba-402e-b3f2-b0e47336f091",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c35ab799-40e9-4066-9c8a-b091e283cf48"
        },
        "item": {
          "id": "aaa157d9-77c5-4041-b982-fa905c7bc054",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ec02b7c6-66a0-4901-b51c-d7f679c110cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c1a4bb-6022-43dc-86d6-aef498aa7d6a",
        "cursor": {
          "ref": "3fe84770-6c6b-4917-aeeb-8f866d6c37f9",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1dad082a-c629-4364-82a1-867883ba6b53"
        },
        "item": {
          "id": "62c1a4bb-6022-43dc-86d6-aef498aa7d6a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "89c151ae-f1a5-486b-90c7-88179f71f236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368cba54-9254-4ce0-9588-280a533e4509",
        "cursor": {
          "ref": "8ac9e9b1-8da5-4dec-90a8-2b7ea1acc0b8",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "561d9475-2fa1-4300-9db2-51c0454b3928"
        },
        "item": {
          "id": "368cba54-9254-4ce0-9588-280a533e4509",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "42d54370-2dd2-41bb-ac42-6e5837310336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74a8f19-6edd-48aa-872c-523033480599",
        "cursor": {
          "ref": "c9dc60f6-3646-4b0c-b947-13de44729c9f",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b97a9d15-cd09-45e3-8c2d-a22f83dcbb32"
        },
        "item": {
          "id": "a74a8f19-6edd-48aa-872c-523033480599",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8461433e-c73d-45ae-8f6f-c64fc0ce9f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6faf6cb-232b-4a6b-9d4d-5dd64c3a9a74",
        "cursor": {
          "ref": "f9e671c5-6d7e-4196-9c6e-0da120bf1a02",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "db9587f2-56d7-4e45-822f-b2ba9e36600a"
        },
        "item": {
          "id": "b6faf6cb-232b-4a6b-9d4d-5dd64c3a9a74",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1ef91940-c832-4ae2-b535-1508682515bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e91060-b22e-4859-a7df-eb4a2a03cfd2",
        "cursor": {
          "ref": "0ae33329-c988-419f-a854-c81f77e9a0d1",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6348c55c-8ed7-491e-a4db-03a9f7473306"
        },
        "item": {
          "id": "78e91060-b22e-4859-a7df-eb4a2a03cfd2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5ad8b057-ab3b-4f93-9697-ca690549b004",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50ea863-b755-462e-bbb0-53dc6b32892e",
        "cursor": {
          "ref": "730caa4e-5d75-48b3-88d1-2c3e6c19ea5a",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "93e90b23-f48d-4f6f-9d57-90353d0996b1"
        },
        "item": {
          "id": "e50ea863-b755-462e-bbb0-53dc6b32892e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5dc00b12-c2dc-4c58-968d-b0225bada34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a81656-beec-4b3c-9156-c4f327723472",
        "cursor": {
          "ref": "52683654-1fb4-4d04-8ac9-7be9bc81d48d",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e5b8497a-9704-4c1c-8c1e-050e564bed91"
        },
        "item": {
          "id": "99a81656-beec-4b3c-9156-c4f327723472",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "07b1cf55-8e4f-4196-8148-346164b3cd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d14203d-fd04-4648-b7e8-d875fac86cec",
        "cursor": {
          "ref": "368ad5ea-9f22-4dbc-8314-1d8d775d038b",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e9ac1eda-5620-48ba-8f80-1668fda16c85"
        },
        "item": {
          "id": "2d14203d-fd04-4648-b7e8-d875fac86cec",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f7670493-2173-40cb-a433-4fa76ff1c30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e4dc7b-9026-4f2d-a8a3-332d9a3459cb",
        "cursor": {
          "ref": "6b9337e6-1d1d-4110-8b55-034d10018fa6",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8467b180-5dd7-41e7-876a-cd9a54414e31"
        },
        "item": {
          "id": "13e4dc7b-9026-4f2d-a8a3-332d9a3459cb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "128f3c3b-654c-4682-a825-6c2749710a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77574259-91c7-44b1-ae31-49a1214be4b1",
        "cursor": {
          "ref": "aa05aabe-11bf-414d-9d3f-3172bfb947d5",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "92157523-6ca4-4849-b151-8d2df3f7da72"
        },
        "item": {
          "id": "77574259-91c7-44b1-ae31-49a1214be4b1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "daa96d8e-3ed4-4c6d-b9b3-a906ff855759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe8c94d-76e3-4895-9b78-3ad112b62844",
        "cursor": {
          "ref": "5fb187a1-68d5-4c05-87d1-cd93a30fd34f",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "dca0f112-21d2-4bb4-94f1-36a75fc6887c"
        },
        "item": {
          "id": "7fe8c94d-76e3-4895-9b78-3ad112b62844",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9d5880bd-cde9-435b-9f61-bf287d8a35fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71832883-e506-4f35-82d0-07d2fd94c50a",
        "cursor": {
          "ref": "e45a0d81-e509-4f31-a8c5-8f72985ddaef",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "88115353-8aa4-44e0-b67f-1223a8ddf28c"
        },
        "item": {
          "id": "71832883-e506-4f35-82d0-07d2fd94c50a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d96d5c7c-a53d-48ef-a371-bc8a3e9dc3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb304ee-c87d-4879-9a57-34136690fee1",
        "cursor": {
          "ref": "fa7b6523-e98a-494c-9d57-056b8e7b7f7e",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "20928972-a806-4985-83c2-97e5609384bf"
        },
        "item": {
          "id": "9fb304ee-c87d-4879-9a57-34136690fee1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c581dc33-acb2-4117-876c-b465d7e383ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3954c128-1a11-4cd6-ac52-ec90b5fbf587",
        "cursor": {
          "ref": "67e8def8-6303-4424-b1df-96af59441f5e",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b9880aa4-cc1b-4feb-88b3-45ff11b6a0ed"
        },
        "item": {
          "id": "3954c128-1a11-4cd6-ac52-ec90b5fbf587",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "92eb5e7c-7742-4e69-892a-ac22edff08a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2ca5b2-8fce-4332-b6de-d7392bac127d",
        "cursor": {
          "ref": "593be432-40b9-4cd8-bf3e-16b62e59da24",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cf00a91f-4b2e-4ac7-ba40-90650005a3dc"
        },
        "item": {
          "id": "2a2ca5b2-8fce-4332-b6de-d7392bac127d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5e7de083-c3c7-4b74-9198-03084735cf4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5ed182-982f-4550-9b2d-7e9d09d1f258",
        "cursor": {
          "ref": "d1c45407-308b-48b7-8377-1daa9d9621e0",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "63a64789-f937-4c44-81df-48d8d54ccb0d"
        },
        "item": {
          "id": "3b5ed182-982f-4550-9b2d-7e9d09d1f258",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7b88b1dc-07d4-41f4-bcb6-b64a5ac07a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2878c81-4062-4a63-b2b0-9c0e6ff79f02",
        "cursor": {
          "ref": "a151d976-f45c-4fa6-873f-1c4c20c3918f",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a7a852da-97e8-4eda-bd73-9d4505fed1ab"
        },
        "item": {
          "id": "e2878c81-4062-4a63-b2b0-9c0e6ff79f02",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "edccb63a-d105-412b-bd50-1423923ea5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2b1b7c-3a7b-4e2f-bd51-a57df13a6952",
        "cursor": {
          "ref": "f7f9b4ef-a2bd-4ca6-8395-4d7f909877ee",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "261b6eff-bd6c-45d2-ad55-437522086750"
        },
        "item": {
          "id": "fb2b1b7c-3a7b-4e2f-bd51-a57df13a6952",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9ee28c66-eab4-48a3-b3b4-c5c1a6212715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45441bc-2106-4416-9ed7-42461001e76f",
        "cursor": {
          "ref": "8a5c4e70-a2a2-4c3d-9a55-e5ba46773e4e",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "539da98c-b04e-4aaf-9e51-408bb71c6738"
        },
        "item": {
          "id": "b45441bc-2106-4416-9ed7-42461001e76f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "146fcd29-a936-4028-ae27-41d3a38593a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752f9b31-2841-457b-a8ed-1e6be7d03f8b",
        "cursor": {
          "ref": "a42f810d-ef73-4554-a73a-e7c39eb56a30",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "026dca10-cfa5-4176-9acd-285334a5f1a4"
        },
        "item": {
          "id": "752f9b31-2841-457b-a8ed-1e6be7d03f8b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1f7952fd-29f7-4f43-9247-ea33a6a01750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac67597a-bcf6-423b-bafc-e7268a1927cf",
        "cursor": {
          "ref": "73a15bcf-4c57-4ce9-aa3c-936cb0795f53",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "08c01bd7-b3f1-46d0-86f4-988c548bb412"
        },
        "item": {
          "id": "ac67597a-bcf6-423b-bafc-e7268a1927cf",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b2caabfd-b6c4-4eaa-afa5-91757804aaef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cdb5bd-7fa0-4279-98b1-b01c63f2ee46",
        "cursor": {
          "ref": "fa52842f-0469-4b35-b2d6-7ed9b591fb5e",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5aa0eb0a-86e4-48b0-8491-36428c656e79"
        },
        "item": {
          "id": "49cdb5bd-7fa0-4279-98b1-b01c63f2ee46",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "07bc67c0-9648-45d9-8c57-53afdaf9e90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00754dbc-420a-4723-a6ff-2885fa87c246",
        "cursor": {
          "ref": "6eda0685-04e5-433e-9cbb-523bb6eedd66",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "096218e2-9a88-4068-91e7-117157dfe65e"
        },
        "item": {
          "id": "00754dbc-420a-4723-a6ff-2885fa87c246",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b6415eaa-5a35-4bc2-b628-6dba6646bc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcac2211-abc8-4fb0-a47f-3809883577fd",
        "cursor": {
          "ref": "13782176-f4d2-4d0c-9ed6-be19ce655a3e",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f6733588-c843-4b08-abe7-7ad9a806e008"
        },
        "item": {
          "id": "fcac2211-abc8-4fb0-a47f-3809883577fd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d9a81117-a411-4262-b4dd-b50836ba5455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636ef7ba-d006-4e98-af4e-dd9d7fb82fbb",
        "cursor": {
          "ref": "c82054fa-7eaa-4714-93d3-eaa908ec4d64",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ae5326e4-6a1a-46ae-9f8d-13757282b2cf"
        },
        "item": {
          "id": "636ef7ba-d006-4e98-af4e-dd9d7fb82fbb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c6e4789b-fd8e-49df-99d4-4d037790cef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ec1ef1-afa2-4bfe-a844-29d571e5d900",
        "cursor": {
          "ref": "5dd46e5b-bc75-4c7f-9a5c-367af4d40aee",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dff48028-00ba-4365-a790-9dcbcc605ba8"
        },
        "item": {
          "id": "f2ec1ef1-afa2-4bfe-a844-29d571e5d900",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ee8012b8-ce28-4503-a41e-469c06249c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146810ec-311c-4e77-9853-a6eb5234f8f7",
        "cursor": {
          "ref": "29ddef22-0a8d-42cb-8ba2-a80a73ad4af9",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a0af1af1-3fd9-4eec-925b-6233be09306b"
        },
        "item": {
          "id": "146810ec-311c-4e77-9853-a6eb5234f8f7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0deb85aa-be38-4ce5-bf16-40d9cf9ef747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93545363-ccc3-4039-b2b9-17b5132aa7aa",
        "cursor": {
          "ref": "1e6f80fc-5dd3-471f-9264-97bfea3825b0",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1888d495-002b-4b19-9970-8ca2e52e6e71"
        },
        "item": {
          "id": "93545363-ccc3-4039-b2b9-17b5132aa7aa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fe5834ef-2aeb-4efd-98fc-67e1176d2a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6627e2d2-a713-401d-95f6-c2e7b2ffa699",
        "cursor": {
          "ref": "565bed20-7661-4a13-be7a-bc0782d62db5",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "aa3af129-bb49-42ba-b9ae-e420f1d8bb57"
        },
        "item": {
          "id": "6627e2d2-a713-401d-95f6-c2e7b2ffa699",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0f6414a0-2290-48af-ac4e-c8322febe748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6012c3e-d43e-46fb-8d93-91222ea53277",
        "cursor": {
          "ref": "766cd030-8cf5-4979-82f1-5fd6c4174fa7",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9deac958-2e6b-4b25-b40c-f7ddb9a44650"
        },
        "item": {
          "id": "b6012c3e-d43e-46fb-8d93-91222ea53277",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f1965cc3-55bb-4d5e-a4ca-6c53250cb482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d69946-36c6-41ca-9b55-0fbff73e339e",
        "cursor": {
          "ref": "c55442ed-652b-4e2c-9568-eb0a80ac7f86",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f2b0a256-9ac4-40d2-af85-aa3e0bb8ef8f"
        },
        "item": {
          "id": "55d69946-36c6-41ca-9b55-0fbff73e339e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "faec242f-d398-4103-954f-683ed28a6e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828f6729-8319-4254-9403-b3e94245d78c",
        "cursor": {
          "ref": "82ebb748-01d1-48bb-a307-83b61d0e5e1f",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a0ab9e3c-3da9-46e8-8e09-ff6ee15b1928"
        },
        "item": {
          "id": "828f6729-8319-4254-9403-b3e94245d78c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "066a4317-9e37-41a0-bcbe-701d7fd24ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab0a3fb-cfa2-4e73-bbbb-11fc747663aa",
        "cursor": {
          "ref": "a4b115f5-353e-4052-ae8b-ad561dcb6557",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ec1e5fe7-f1fa-4885-b7b7-6d984630a21f"
        },
        "item": {
          "id": "6ab0a3fb-cfa2-4e73-bbbb-11fc747663aa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "39525f7c-cd5f-4638-834f-e68bb17f2f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9e76e2-eb38-4ad8-b049-2ac66d3ede6c",
        "cursor": {
          "ref": "a082da3c-3548-4763-8009-097d42fd17d5",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "43e6d9d1-5060-4b90-a266-4dcf601166c7"
        },
        "item": {
          "id": "bd9e76e2-eb38-4ad8-b049-2ac66d3ede6c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fed35841-9981-4582-a54e-73d09f6df649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afbc3d1-f7a0-4caf-8e18-d6854e5d5064",
        "cursor": {
          "ref": "42269fb2-ab9e-44ab-9314-ea82fa93a20c",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "841e635a-5399-4d40-9ecd-6ea505a18ea5"
        },
        "item": {
          "id": "8afbc3d1-f7a0-4caf-8e18-d6854e5d5064",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a7e40e03-b823-4427-9442-47ea7f19adb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18089f1a-9bdc-4d49-98d6-62692c2e6af8",
        "cursor": {
          "ref": "507700ff-cd0b-491a-9d8b-f5d6eb3bc212",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "45c04c7f-70ee-4b8d-b86f-6ea074685a7e"
        },
        "item": {
          "id": "18089f1a-9bdc-4d49-98d6-62692c2e6af8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4ce51dbc-bf54-4712-826d-f9f38b728156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a4adcc-da1e-4517-9cc8-ade136b2bd81",
        "cursor": {
          "ref": "1125f06c-586d-4043-91d0-2be0001a842b",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "60ea98ba-1189-48ec-a034-a3ffcfabf774"
        },
        "item": {
          "id": "80a4adcc-da1e-4517-9cc8-ade136b2bd81",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "58aa962e-1d2d-40b8-ad65-b02c911876a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e31cc3-3243-45a6-b762-8535c97ff9cd",
        "cursor": {
          "ref": "435d2765-45f6-4323-a422-74a825dff651",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8a4eaf49-3c96-4585-aeee-2b55df19802d"
        },
        "item": {
          "id": "d5e31cc3-3243-45a6-b762-8535c97ff9cd",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "29aa384c-fd04-4d72-94cd-9066d1215647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f3a5b5-7fb3-47a9-8a57-b4d6b5b5f45c",
        "cursor": {
          "ref": "5dea8c6f-1129-42d8-84f0-e5e13eae673c",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "46972e89-3db9-4338-a3fd-ec12456dbd3e"
        },
        "item": {
          "id": "20f3a5b5-7fb3-47a9-8a57-b4d6b5b5f45c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3808d299-3616-4164-a4d4-068415c679da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad71b953-a453-40b6-9d44-decbb2512c27",
        "cursor": {
          "ref": "50f80170-5da2-4001-ace3-6802807cfa30",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8f6a58b6-d1ae-470c-8004-0b9333fa9174"
        },
        "item": {
          "id": "ad71b953-a453-40b6-9d44-decbb2512c27",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7f5a6bbd-ea51-47d7-95ee-c2a2efa7e4d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25106c54-011f-426f-91bd-529b6e8c80c7",
        "cursor": {
          "ref": "6c91fdfc-c0cf-4752-950b-0d02cfcd3e51",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a9d9039a-db08-4b23-be9d-38f6e04e8deb"
        },
        "item": {
          "id": "25106c54-011f-426f-91bd-529b6e8c80c7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "826820bf-e492-4a96-9e19-79942f8f755b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b683f2e-9c2a-4791-b0fc-9c0f3f879318",
        "cursor": {
          "ref": "b76d4c43-81de-4371-9e46-34c151842f97",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c20d5ead-6c7f-4814-bd20-c74f6302c076"
        },
        "item": {
          "id": "9b683f2e-9c2a-4791-b0fc-9c0f3f879318",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6295f6ca-0c67-4bfa-b1d5-ae8a554f89cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7843f7-17f8-4c31-8c51-8d6ad654395d",
        "cursor": {
          "ref": "3e46091d-6eeb-4107-83d0-138024e9d6a5",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "101e2fff-bc7b-428e-b9f4-4d73c57ab1fc"
        },
        "item": {
          "id": "dd7843f7-17f8-4c31-8c51-8d6ad654395d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a4678cde-3956-4e74-a17b-47ca1b4e99c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23dd35c-11d5-41d5-8e34-baa893961ebd",
        "cursor": {
          "ref": "2ef02885-c50e-4433-9ed0-42a747ded7d1",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2745400e-120d-4703-a370-4956738c5a1a"
        },
        "item": {
          "id": "e23dd35c-11d5-41d5-8e34-baa893961ebd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1c73e14b-508e-47fb-959b-a4efb0b6fb05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7751250c-ca14-487f-8c96-7ac451638c6d",
        "cursor": {
          "ref": "4e2f597b-b85c-4d3a-b565-90f06dfd810e",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8a9451ac-8da9-4500-8427-4d874a131b11"
        },
        "item": {
          "id": "7751250c-ca14-487f-8c96-7ac451638c6d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "125bf441-75b2-4ad2-8122-1dae7f89114f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145fb85b-27cf-4426-92c8-9e7f036310b3",
        "cursor": {
          "ref": "75412682-f47d-43a4-b101-f2cc4e6bb6f2",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0966cecb-10d9-43f4-9963-a8280a116796"
        },
        "item": {
          "id": "145fb85b-27cf-4426-92c8-9e7f036310b3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "37f0126b-8bdc-4faa-8645-390adfa8b823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b169efb9-55ce-4dcc-a076-7c7c8874ca60",
        "cursor": {
          "ref": "b7e2a886-4a62-44d8-8e34-20925b0569e9",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7e581bcc-5673-474d-ae1b-8c8d2918345a"
        },
        "item": {
          "id": "b169efb9-55ce-4dcc-a076-7c7c8874ca60",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "95a74f5b-3931-4e4a-b9e6-98307058b6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75aad22-73d2-43e1-8de3-e1417a678675",
        "cursor": {
          "ref": "fd71fad2-ea27-4a77-9ddb-8b96f7830cdb",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c100c8e0-06ea-425b-a4a8-5f50ef777012"
        },
        "item": {
          "id": "c75aad22-73d2-43e1-8de3-e1417a678675",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "17a6edc9-4622-4b87-8e64-23bcb1e5e20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7a224d-543f-447b-90b5-e16ddb219d59",
        "cursor": {
          "ref": "9c7fc15c-c00f-4abf-b98a-8cd108cb19b7",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9f6d1a24-068b-47ce-9722-1c2a14b39911"
        },
        "item": {
          "id": "3b7a224d-543f-447b-90b5-e16ddb219d59",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fbbaa05a-d5f6-4caf-9905-836c0c2561c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6fb4a10c-5a5f-4eb1-aaf8-1f276b1246f0",
        "cursor": {
          "ref": "87088be6-4d4e-4046-9c32-b43239416351",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bb93e4bf-3bed-4fb6-a457-fa876dd233c5"
        },
        "item": {
          "id": "6fb4a10c-5a5f-4eb1-aaf8-1f276b1246f0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "721a779e-0b14-443b-8015-044d5716352d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6741615-a267-4c74-8d68-cb13c5359b4b",
        "cursor": {
          "ref": "f8fb0c68-6146-4bdd-8589-35092cb26d37",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ad1979f0-d095-48e5-ae22-7884e54d31e2"
        },
        "item": {
          "id": "d6741615-a267-4c74-8d68-cb13c5359b4b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1b614afd-3401-4bdd-aa65-09376ca21885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d131e0-db8b-4427-bf2f-8a83a1d0570e",
        "cursor": {
          "ref": "b7e4c4ac-df81-4297-88cc-5ff3abdf415a",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5bb38e5c-49c7-4672-8548-c778f47fdf23"
        },
        "item": {
          "id": "e3d131e0-db8b-4427-bf2f-8a83a1d0570e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4b6f8640-e23e-423c-9c9d-199a77267541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1cd7444-92e5-4bfa-b625-638cfe1c303e",
        "cursor": {
          "ref": "c1d9f656-f75f-499b-8910-dc9d72e20744",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ed45ca0e-93cc-4e45-83c6-0f9268f38a72"
        },
        "item": {
          "id": "e1cd7444-92e5-4bfa-b625-638cfe1c303e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c1e294fd-e2ac-4d02-a685-378b1b029d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3e46fd-2b94-46a4-88af-9c0e576719eb",
        "cursor": {
          "ref": "4a2249ea-0b0f-4e94-9faf-a595026fac3d",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "addade39-0058-4d1c-a322-8dcc35786501"
        },
        "item": {
          "id": "de3e46fd-2b94-46a4-88af-9c0e576719eb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "20dea4d3-1a2f-4b23-b63d-490d772c3e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11984d18-fc4a-4209-9b32-dd3ee12dba8a",
        "cursor": {
          "ref": "e6194764-4af9-49ab-86a2-f7074fb3bc3a",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6e98263f-d4a8-4a03-8b56-cc1100a10a6a"
        },
        "item": {
          "id": "11984d18-fc4a-4209-9b32-dd3ee12dba8a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "82e77d80-facc-47fe-a4b3-c582c8fe5611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720196b5-e615-472f-bdf5-e2c708c94c3c",
        "cursor": {
          "ref": "ea7aab68-a754-4bf5-9268-3d15ff4ccf5c",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a8e5cf58-7a32-4606-93c6-43adc6515d19"
        },
        "item": {
          "id": "720196b5-e615-472f-bdf5-e2c708c94c3c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "125fe858-6f9a-447e-beb9-9a40c279193b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b07d96d-4f36-43f5-a753-9a581fa873d4",
        "cursor": {
          "ref": "943824b4-dab0-4d98-b9c0-478bd63abe5b",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0c9cc035-38d8-4ddd-80fa-85d019233d17"
        },
        "item": {
          "id": "8b07d96d-4f36-43f5-a753-9a581fa873d4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "78782f3f-4241-4af3-b2a6-c6d5ccd2af4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57b7ad6-1521-417f-8749-b9a8b136867f",
        "cursor": {
          "ref": "2980204f-6d73-43c9-afbe-8362774e847a",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0c877f8a-f225-44a1-85ac-c0a0ac290e82"
        },
        "item": {
          "id": "f57b7ad6-1521-417f-8749-b9a8b136867f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "cfb4b916-299a-4328-b766-6d1ab5dfbfc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a11d44a-e829-45d7-9a1b-a7ac5641ffd2",
        "cursor": {
          "ref": "ef302d1a-524b-493a-a576-acb5fb102ad7",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4ce717db-99f7-41f6-a07f-27f0cdfde8ba"
        },
        "item": {
          "id": "5a11d44a-e829-45d7-9a1b-a7ac5641ffd2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c08a1193-7394-45d2-bfd0-bbca050f659b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa64b12-4048-414a-984c-cd3e86630f5c",
        "cursor": {
          "ref": "33533282-37cd-4a00-965a-6f9d9dac791e",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6a2ca0b2-fe86-4f07-98aa-78d3deb76803"
        },
        "item": {
          "id": "7fa64b12-4048-414a-984c-cd3e86630f5c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8659ded1-d709-4e3c-9f74-71331868f6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39db50d6-be32-4373-81da-2769d15c9650",
        "cursor": {
          "ref": "527d5079-420d-4e36-941f-fa2bbdcee355",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "648a17be-e70a-42df-802e-1352fc52e5d3"
        },
        "item": {
          "id": "39db50d6-be32-4373-81da-2769d15c9650",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "86e2ce8d-c748-47b0-a277-9057cffc0f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc5a7ea-c8cd-4164-ba58-2afec9be5750",
        "cursor": {
          "ref": "4179d5e9-e894-42c3-9fe2-8326db82c97b",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e58dfc85-fa6e-4c76-9adc-a9584d2fb0ce"
        },
        "item": {
          "id": "8fc5a7ea-c8cd-4164-ba58-2afec9be5750",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "300839a1-050b-4fc3-b16c-8ab12c1bafec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22866fcb-add7-4692-937b-58fc9cd00a4b",
        "cursor": {
          "ref": "f7d77a96-f8c4-40a6-a62f-beb898a5349c",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "66c9f81d-83c9-4865-8186-c15382d43a13"
        },
        "item": {
          "id": "22866fcb-add7-4692-937b-58fc9cd00a4b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d17cc5b9-ca78-49df-ad81-2990d3f70324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b51cc40-5299-4cf4-8c3f-ca059d503add",
        "cursor": {
          "ref": "29f55051-86cd-48f6-aeff-3602e626d5cc",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1d7d2d7e-87f6-4ff7-ae1b-6e9c09153d19"
        },
        "item": {
          "id": "4b51cc40-5299-4cf4-8c3f-ca059d503add",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8beca4ce-b685-4fc9-994b-c4f9eb338b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d406cc-2842-4374-80e7-e230c7f9a68f",
        "cursor": {
          "ref": "14539b84-1460-4bf7-93d7-d20aeecf1828",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "498f4ed6-067b-4120-8834-de5a86ca60ef"
        },
        "item": {
          "id": "96d406cc-2842-4374-80e7-e230c7f9a68f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9253b91d-f508-42dd-afd8-f903b35711a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf6208c-84d2-44f7-87ad-1f433add4dce",
        "cursor": {
          "ref": "a1935d4f-8317-4b16-87d8-adc58f72bba4",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "704cc8df-3809-4209-b598-66b22be3aebd"
        },
        "item": {
          "id": "acf6208c-84d2-44f7-87ad-1f433add4dce",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "36a67acf-1048-48f6-895f-ecfc013b6868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4164047-7f06-4910-be44-e481878dc110",
        "cursor": {
          "ref": "3efbf0e4-3010-46e1-bece-57ebfead2a25",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "21d49460-c872-4aff-bdbc-bb2ac4fa9696"
        },
        "item": {
          "id": "b4164047-7f06-4910-be44-e481878dc110",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "544f0b59-d00d-4856-9b7d-b31500b9f5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e193fcc-0809-4b05-a276-89c2bff06782",
        "cursor": {
          "ref": "e6b351d8-adf9-4d6c-848c-432b765ff775",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "86ac1a1d-0609-4be9-a3c2-24ba9de63667"
        },
        "item": {
          "id": "2e193fcc-0809-4b05-a276-89c2bff06782",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4ee1c9fc-fc8b-49ac-ac48-30713b4ae657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7d2344-9910-47da-a3cd-139539540b5a",
        "cursor": {
          "ref": "06bbe3d9-ff60-43dc-8330-81cc4c5f7229",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "592ae7fb-c8fd-4c02-96da-521032a61307"
        },
        "item": {
          "id": "8f7d2344-9910-47da-a3cd-139539540b5a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c4425501-bd7a-4fca-ac92-81f693037f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5b7868-34c2-4bf7-a53c-91d629675de0",
        "cursor": {
          "ref": "f5e2ab37-0d8b-445a-98ee-0f96658b9508",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "96c4e929-f1f6-4f88-ba1e-fe6f9d05f0c3"
        },
        "item": {
          "id": "0e5b7868-34c2-4bf7-a53c-91d629675de0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dcaea402-57a7-4905-aa4d-c091ca6a6fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "299051c7-f5b9-41b6-9334-15f4b0ef7d2b",
        "cursor": {
          "ref": "a0ea8b7a-f404-41b2-9c55-944028490fe1",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6ce57261-965c-4907-a933-2c4bf5b6e50f"
        },
        "item": {
          "id": "299051c7-f5b9-41b6-9334-15f4b0ef7d2b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "acda7aaf-3e72-4b0d-8855-e84b333f918f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f19021f-e6f7-4532-b02b-d62dab2300f5",
        "cursor": {
          "ref": "f3ac74dc-00ab-4e46-901c-b141f57d6b4b",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "34a88ebb-a2cf-4562-941f-0298e9e13756"
        },
        "item": {
          "id": "0f19021f-e6f7-4532-b02b-d62dab2300f5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6f0a1424-71ac-4c61-add8-cff85a36cbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826328a7-a325-4998-8aa1-e2e2eabd35d9",
        "cursor": {
          "ref": "755cb9e8-46aa-41d2-a9f1-bb733304c3c3",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a0e67928-d6df-47e7-9781-ef4f2ed24508"
        },
        "item": {
          "id": "826328a7-a325-4998-8aa1-e2e2eabd35d9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0c55e440-2e7c-4f3e-b254-60f4978a99e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c7c2ec-3718-4832-bdff-a91ebaf63abb",
        "cursor": {
          "ref": "21ac6ad7-137b-4846-920a-c918729e62f3",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e3d4a8f7-221a-4290-a9a1-47ce742ef05e"
        },
        "item": {
          "id": "69c7c2ec-3718-4832-bdff-a91ebaf63abb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "89a64bd0-5c9e-4804-8aa1-c9c3a8ff7d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7106d338-a5fa-4493-a68c-428c77c955ad",
        "cursor": {
          "ref": "8ee61e47-93b2-441d-a04f-51f74665af11",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8fdd17dc-5b4b-4506-ac3c-3f976b5aa7c7"
        },
        "item": {
          "id": "7106d338-a5fa-4493-a68c-428c77c955ad",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "976d111b-399b-4042-85ec-af0895e7e511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce6711f-e5ec-4470-a06a-94ae99e21c5c",
        "cursor": {
          "ref": "f27b41e8-045a-43e9-87cc-f31d0e54e677",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d7df96af-80b6-4f9b-84d3-1a0b520fa9c3"
        },
        "item": {
          "id": "3ce6711f-e5ec-4470-a06a-94ae99e21c5c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "75a25b52-754a-49b1-8a31-ca24a8aeb0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f7df58-58c5-46d8-95dd-ec79f137e5cd",
        "cursor": {
          "ref": "1f39dd2e-24bd-4705-af43-415ba438d7b2",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "de658c3f-b70c-45bf-9c19-e4458f5304fe"
        },
        "item": {
          "id": "60f7df58-58c5-46d8-95dd-ec79f137e5cd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "02759bd5-be8a-4794-a2ae-48dc31edbefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968d3579-a7e8-4f93-8eb1-4d173f17126c",
        "cursor": {
          "ref": "096435c8-319e-478d-8c9c-32c98fb83a2b",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9e05ead0-48cf-4225-b2c8-789dd3438351"
        },
        "item": {
          "id": "968d3579-a7e8-4f93-8eb1-4d173f17126c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ed86c3af-d159-46e0-a988-abd1c49938a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2912b0-639b-4892-9ffc-9ee7a3fdbb39",
        "cursor": {
          "ref": "827fa958-2185-406b-90c8-9d15f6aac8fb",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1f74c67c-896b-4106-b9f0-1a39c4060589"
        },
        "item": {
          "id": "1f2912b0-639b-4892-9ffc-9ee7a3fdbb39",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3081b6e0-1a8f-4d50-bd48-b569dd0ad627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38123dc5-9627-410d-b1a6-8f4b27fbc6d1",
        "cursor": {
          "ref": "ff6c1e3e-37f1-4dc1-91c2-7a34c0934629",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "856fd4bf-85a6-4198-b887-43ba988fed57"
        },
        "item": {
          "id": "38123dc5-9627-410d-b1a6-8f4b27fbc6d1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "427f2605-950d-43f2-a9dc-4583db31c32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d148fd-791b-4b4f-8c2e-fadb7d3f97b9",
        "cursor": {
          "ref": "1552d048-4107-4679-998a-0eb8b74a5311",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e55ff966-f160-499f-a4a4-da16173b0eed"
        },
        "item": {
          "id": "81d148fd-791b-4b4f-8c2e-fadb7d3f97b9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cc59da8b-74f6-49e2-94ff-0d189c8b87d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9150aad3-7e6b-42d5-b4bc-df10a3da87d0",
        "cursor": {
          "ref": "b0810953-5367-438d-9cba-42aeaacf771b",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "40528bcc-88a1-48c2-a5e4-51917ded13c5"
        },
        "item": {
          "id": "9150aad3-7e6b-42d5-b4bc-df10a3da87d0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "18546af1-7c32-4e5c-b3da-c0c295112f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfe5e6c-b479-4bfe-8a4e-32e5fad63e42",
        "cursor": {
          "ref": "1ee976ac-3668-4f88-9d11-20fdb50e090f",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "86e33df8-3a69-4ba7-bcda-5aa040d68eab"
        },
        "item": {
          "id": "dbfe5e6c-b479-4bfe-8a4e-32e5fad63e42",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "79795bb8-17f1-4779-ac6d-c518d44500a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c851770-fb1b-4127-ae2d-171b5f1d4bbe",
        "cursor": {
          "ref": "0835513a-5795-432f-b159-86a97d1f1d53",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "994cd485-1077-4679-a59a-d7705481b6c5"
        },
        "item": {
          "id": "0c851770-fb1b-4127-ae2d-171b5f1d4bbe",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8720d1b8-f7ac-4e2b-a715-71c0260974db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde1f122-02d1-4076-9698-812d5692a563",
        "cursor": {
          "ref": "49a4c517-6a77-4086-ac3f-22f6a193a825",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2d55f0e2-e551-4e5c-bcc0-a69f3314e720"
        },
        "item": {
          "id": "dde1f122-02d1-4076-9698-812d5692a563",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9667e291-b85b-4f0d-93d6-7de9962990d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51124d8d-710d-4107-a912-1d86695947c4",
        "cursor": {
          "ref": "b2a74aee-79b4-4fa8-a6bb-f7af97a673d0",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "79f172b1-4977-4a92-a5cf-df4490a0f1ce"
        },
        "item": {
          "id": "51124d8d-710d-4107-a912-1d86695947c4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9c89e3f3-e96f-4dda-a72d-bae781078a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0340ebb5-d0bb-4ef7-a60c-4f896b091ed3",
        "cursor": {
          "ref": "692a914a-239d-424c-8966-f5a5113bdf86",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f553187f-29d0-4c66-8ca1-89b0cde233e5"
        },
        "item": {
          "id": "0340ebb5-d0bb-4ef7-a60c-4f896b091ed3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "efd844f4-4def-4534-a292-532c23f143b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b10476d-9797-44d8-801e-3ee8db238ccb",
        "cursor": {
          "ref": "e694f5a9-cb33-4871-a962-5d7b2293efdc",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a640e852-f9a9-40bf-85e6-3d32598cc1c7"
        },
        "item": {
          "id": "8b10476d-9797-44d8-801e-3ee8db238ccb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "424a048d-3a50-48eb-b951-6ccc7ee98f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b3684b-3d89-4d86-97df-62ea5436ee65",
        "cursor": {
          "ref": "836fab39-3461-446d-9de9-0d4967a2f683",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "daa32887-8b3b-49ab-874b-3bdc4d6cfb4b"
        },
        "item": {
          "id": "13b3684b-3d89-4d86-97df-62ea5436ee65",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e54ff83b-bf03-49e3-ba8c-866b39177eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3976e127-64db-4496-a1ea-144c5007dc04",
        "cursor": {
          "ref": "bc6f9f14-7be2-454e-a2af-c883ff1115a7",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d03a3a25-d225-47bb-8db3-bad98e14f1a9"
        },
        "item": {
          "id": "3976e127-64db-4496-a1ea-144c5007dc04",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6373f008-43b9-422f-a9fc-5b204c05aa55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682227ca-3c46-4da6-8991-4a11429eec8d",
        "cursor": {
          "ref": "82890fb9-119d-4225-97ae-c475003f4d31",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ea7f242c-17cf-4ca5-9a3b-9e507f53c358"
        },
        "item": {
          "id": "682227ca-3c46-4da6-8991-4a11429eec8d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "604cbaa3-dea5-467b-88af-c92a21faa2c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ec6091-7e8d-478f-994b-59e76a16f1d5",
        "cursor": {
          "ref": "9b96acac-4aed-48be-b912-39080ee06176",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "978a7c37-b819-4e87-88d1-8f1d85e07e78"
        },
        "item": {
          "id": "e6ec6091-7e8d-478f-994b-59e76a16f1d5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "98eaa7df-6821-4e8c-8936-ef4c3f202175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc099bf-7eeb-4dde-bb33-dca8f82d0377",
        "cursor": {
          "ref": "93b85881-3fe8-4f19-84c1-e97ad3593493",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "56d09b76-2de2-4867-980d-163adb252908"
        },
        "item": {
          "id": "ddc099bf-7eeb-4dde-bb33-dca8f82d0377",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0c3fd66f-b4e7-46f6-b5e0-82d38a3b369f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a775f4-833e-4980-a5c2-b4a0fae9f4cf",
        "cursor": {
          "ref": "c059103b-f279-4847-8004-6d936799bef8",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "db2d3326-b49d-4dd2-a8c0-f1c475053eb0"
        },
        "item": {
          "id": "10a775f4-833e-4980-a5c2-b4a0fae9f4cf",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "291337aa-12eb-4515-98db-fcaf6a6a6096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9cb87d-7690-4f5f-8dcd-cad85b512d08",
        "cursor": {
          "ref": "b8142940-0816-4efd-b12f-2b0c0c241f04",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e658d2ba-abc9-459c-b9f0-f9179c077541"
        },
        "item": {
          "id": "bd9cb87d-7690-4f5f-8dcd-cad85b512d08",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7cb5bd33-bcb0-4dbe-a046-bcbed9e3957d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498c72f3-dc44-43b1-bd06-644fb6d4629b",
        "cursor": {
          "ref": "30f3b268-8346-4342-adec-978e8408fbf6",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c9bfcbe3-20db-48f7-95f0-35a441054871"
        },
        "item": {
          "id": "498c72f3-dc44-43b1-bd06-644fb6d4629b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "71a8c26d-d430-4de4-9de6-7d4d84c7b95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3675740d-7b6e-4981-bbf3-9090b522dcaf",
        "cursor": {
          "ref": "fa5adebd-247b-455c-84c0-0326fe4522d1",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "83db8a58-6894-4f22-80c4-06f3816a375f"
        },
        "item": {
          "id": "3675740d-7b6e-4981-bbf3-9090b522dcaf",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4c56c8c2-74a3-48dc-b950-3d0f1ac14ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9178babc-a519-44e8-815b-20b57b0b7b79",
        "cursor": {
          "ref": "f478a3d6-451f-480e-a5c9-1fc9b45514f3",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "844fc181-7c0f-4134-b7f5-1e0791319175"
        },
        "item": {
          "id": "9178babc-a519-44e8-815b-20b57b0b7b79",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9feb10a3-b2d5-4b1a-8b40-4c1ee90cb8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3732185a-7581-4ee6-b1b4-09f8cc286622",
        "cursor": {
          "ref": "dfa2c87c-4e38-469b-957e-dd358b5af04a",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3c39a259-7e87-4569-8f16-0a4b4e3b1897"
        },
        "item": {
          "id": "3732185a-7581-4ee6-b1b4-09f8cc286622",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a91b4a64-2be4-47b3-8623-228c3d8b97a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d2a2e3-dc16-4268-ba63-33a0717fe7e1",
        "cursor": {
          "ref": "f5430c7f-0a77-49a7-8ac6-116d569d57d5",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "34901bac-f564-41a7-bb71-2bc5dfc0d6ee"
        },
        "item": {
          "id": "38d2a2e3-dc16-4268-ba63-33a0717fe7e1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b134ba08-74fd-48b9-8bbf-ba1865bce112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ac5c53-6ea2-47f9-bd4a-657b3d384ad4",
        "cursor": {
          "ref": "2cf9a5fa-fa0b-4271-af83-d7889c099e17",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3c37cbf8-d419-4fa3-929f-2127f7f73b06"
        },
        "item": {
          "id": "f2ac5c53-6ea2-47f9-bd4a-657b3d384ad4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0c30485d-6603-4558-9de7-9a55e8e2b8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb9cd6c-8a82-4f13-9202-12a84d5b1da5",
        "cursor": {
          "ref": "08fcaa7e-d9d8-4edd-b270-da898c4713c5",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cb470ec6-fd01-4895-9568-6d8167856e8c"
        },
        "item": {
          "id": "4fb9cd6c-8a82-4f13-9202-12a84d5b1da5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e632d0ba-3ad9-4b4a-9e1d-bff540925724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146bdcfb-66b4-42a4-83b9-e88773be2bf2",
        "cursor": {
          "ref": "8556c102-43b7-4452-a103-c38f88a6008e",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4a5aeb57-d9aa-410f-9aa5-a2ae2efc461a"
        },
        "item": {
          "id": "146bdcfb-66b4-42a4-83b9-e88773be2bf2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8d52713d-e83f-45df-8187-2b945bafea30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0da4a03-681e-4d30-8647-1b3c926ae257",
        "cursor": {
          "ref": "3caee758-f701-4b02-a592-068e21a41dcb",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d6afa120-2358-4f45-82cc-7a00166349d5"
        },
        "item": {
          "id": "c0da4a03-681e-4d30-8647-1b3c926ae257",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "99b6a4af-a474-4076-b24f-ab5d70c31744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c328ea7f-d4ad-4fd9-b5c6-8142d7e2a52a",
        "cursor": {
          "ref": "c85ea389-8c90-42ed-b310-43d8d93771dc",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cd21246f-727f-477c-8cd2-ae69108354ae"
        },
        "item": {
          "id": "c328ea7f-d4ad-4fd9-b5c6-8142d7e2a52a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f2d84ed5-4da4-49b0-9cfc-c0cfcc715511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a308a6-d8ca-4fec-aab4-aa8827c9b6f5",
        "cursor": {
          "ref": "01edac4a-5463-4141-8ec4-8d187c95f369",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b4c8975f-b5a7-492f-b8dd-49c94f1aecc9"
        },
        "item": {
          "id": "80a308a6-d8ca-4fec-aab4-aa8827c9b6f5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "552ae1e9-0cd6-4d01-a578-5ef085526eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea31a816-059e-4066-a49f-1b44db52f1a1",
        "cursor": {
          "ref": "e74920da-d566-41ab-8b16-f8a4d660f945",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "58e1da25-45eb-47f0-ab4e-fbcf0c2da340"
        },
        "item": {
          "id": "ea31a816-059e-4066-a49f-1b44db52f1a1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0619dd3f-949c-45bd-9caa-6b61e213e02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04239753-4ffb-4694-b9b9-9a3625e7f7f3",
        "cursor": {
          "ref": "2baa22ea-83e4-426d-a9e4-033072f97056",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "61a6d138-80a1-4fef-8084-f9c359dd25bd"
        },
        "item": {
          "id": "04239753-4ffb-4694-b9b9-9a3625e7f7f3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6787cef8-a6d0-4cd3-8b00-c8ef6172ee45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c009289d-51f7-44a3-9cef-caa056c9c9eb",
        "cursor": {
          "ref": "061b76cf-6f03-4f9e-ac53-3cb0b045e3fa",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4b528bef-1a96-4821-992e-fad555e49a0f"
        },
        "item": {
          "id": "c009289d-51f7-44a3-9cef-caa056c9c9eb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7c87c17d-dfdb-43a9-b88f-45edd9237f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65c0b78-4edf-421f-8270-f46520e5fa3f",
        "cursor": {
          "ref": "eef14208-8ea3-4475-b6bf-9d43433ff34e",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e4c88a96-401b-446a-8b9c-85781f05dbd1"
        },
        "item": {
          "id": "b65c0b78-4edf-421f-8270-f46520e5fa3f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "072e666b-5ac8-4aa2-be60-e377cf48176c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f386b7-7c0c-48f9-9250-18618a7d088a",
        "cursor": {
          "ref": "766a585f-a32b-4a8c-b6ec-07813c6929d3",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f9520992-5d76-4a8e-b166-cc8c8306e971"
        },
        "item": {
          "id": "a6f386b7-7c0c-48f9-9250-18618a7d088a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4bf1769a-0aff-4ba0-b506-5e29043ce641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eded4ec0-e6c1-43ee-99d6-6f61d9691b08",
        "cursor": {
          "ref": "7056985c-c281-4477-a586-974d6c6ed61f",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3872dce3-b299-4320-87d9-5a5b0d62cfd7"
        },
        "item": {
          "id": "eded4ec0-e6c1-43ee-99d6-6f61d9691b08",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cad0a324-6438-46e2-936b-90e08deb909d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8036db-fe12-4093-88f7-ab574ead63b3",
        "cursor": {
          "ref": "4de18f95-4593-424b-a00d-c8a131b31e2b",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "70e433b5-18dd-48e6-9087-186e8698ad2a"
        },
        "item": {
          "id": "0c8036db-fe12-4093-88f7-ab574ead63b3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ae27010d-d7c0-4040-a6c7-bd22d2211e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af466449-af7a-4cf6-a881-9ef8e960313a",
        "cursor": {
          "ref": "98628157-ad73-445a-ae25-fe8f163c9e79",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "449c48b3-a4d3-4795-8f6a-24bef27c9a6f"
        },
        "item": {
          "id": "af466449-af7a-4cf6-a881-9ef8e960313a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a93d0ea8-8c87-4a10-afcd-935e1a241ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87978dd-daae-473b-91ba-35d0cbed35fd",
        "cursor": {
          "ref": "a83f1fa1-f376-45e2-aeea-d563f635be71",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "df59399f-d132-4fa6-99e1-4e2b6d65b70d"
        },
        "item": {
          "id": "b87978dd-daae-473b-91ba-35d0cbed35fd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "28015677-08f2-434b-b963-4d8e059806dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379d09c8-d36c-4f48-888e-207ed2785e18",
        "cursor": {
          "ref": "b5259ee9-208f-4ad7-aabe-80a34d752883",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4b8a2cfc-d5ff-41fc-9bba-187fa37650d4"
        },
        "item": {
          "id": "379d09c8-d36c-4f48-888e-207ed2785e18",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "33690527-e682-48c5-968d-0480e581aa22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11cf62eb-7ec8-4f87-bea5-5a9d646fdc27",
        "cursor": {
          "ref": "f7b50723-b0ce-417e-a1f1-cca7e71f1461",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "86789c31-3151-4067-a71a-a0c74ac817af"
        },
        "item": {
          "id": "11cf62eb-7ec8-4f87-bea5-5a9d646fdc27",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "81de8a13-555e-4604-8389-473f046a8425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c836826-0acd-42e4-a5be-760a4b1e4d2c",
        "cursor": {
          "ref": "01ee6d6b-1885-4671-8936-1bdc9068e7e9",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9db649f1-48fe-4a78-8eb5-65b47d9fc60a"
        },
        "item": {
          "id": "0c836826-0acd-42e4-a5be-760a4b1e4d2c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b1b0b34a-c52d-4ade-b9af-3312e2aa7419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c7e35a-4877-43cb-b38d-8f7bee9754cd",
        "cursor": {
          "ref": "e54ee837-9520-4a3b-88ac-bc610ebb4be2",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "63bce2d0-40f4-45a7-ae57-9d0002142252"
        },
        "item": {
          "id": "d1c7e35a-4877-43cb-b38d-8f7bee9754cd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c8781cd7-28a3-404c-b033-3b06359fe186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902bd980-43d3-4775-bb7a-d3d09f7c8ab4",
        "cursor": {
          "ref": "6ce6a57d-2cb2-4039-a593-634ce3dd04bf",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "096840e5-22e5-43be-b128-d8f05d2d9f9b"
        },
        "item": {
          "id": "902bd980-43d3-4775-bb7a-d3d09f7c8ab4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7cbf2e82-cc08-42f7-9cd9-1122da614877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecaaab09-65e1-4974-8829-a54a513b8615",
        "cursor": {
          "ref": "97946a1d-4cff-4304-953e-c79fb655ffde",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "12a342f1-2ddd-4e85-ba8b-2b25e9d484fa"
        },
        "item": {
          "id": "ecaaab09-65e1-4974-8829-a54a513b8615",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cf3692bb-cc3f-45e0-baa4-7b0d2f3c3358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9612d8a7-31b1-4695-beee-08470565b283",
        "cursor": {
          "ref": "1bea8a22-c953-49fe-baca-0ebb7fa6473a",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "0f5f3f5d-aaf6-4d08-8958-bc63f129eeeb"
        },
        "item": {
          "id": "9612d8a7-31b1-4695-beee-08470565b283",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "04c7bed4-a7ca-440a-8dd3-c630347f03bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba2c0bb-4e14-4321-b39b-15f2c6443605",
        "cursor": {
          "ref": "33cfdb8e-588a-4964-8524-2dcb40fffb63",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "90dbea78-7796-46b6-8ee4-b18c96f182ed"
        },
        "item": {
          "id": "5ba2c0bb-4e14-4321-b39b-15f2c6443605",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b7412e4e-c4ab-439e-9055-046e3b4e701c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4de23b-08b1-43a8-9339-043b1dbda83d",
        "cursor": {
          "ref": "3a31d762-1302-4039-a88b-e5dc97e9fe86",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ba7dd8e9-75e0-4675-a714-9aa97941b096"
        },
        "item": {
          "id": "9c4de23b-08b1-43a8-9339-043b1dbda83d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fb0f791c-aa31-46b1-88db-e8b968db5fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c695aad-4d3e-4efc-a6b9-5abb025099d7",
        "cursor": {
          "ref": "d02fe21d-c9bf-4a51-91fd-c187e5069387",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "7337a8a6-0379-40b8-9d6a-3188f096a250"
        },
        "item": {
          "id": "7c695aad-4d3e-4efc-a6b9-5abb025099d7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "34ad10b3-b774-4627-8b0b-c5dff77d0a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a9a4b2-3918-4c9f-803d-4a97cdcf9f69",
        "cursor": {
          "ref": "deb59a52-66b9-430a-bd50-dd799ab32664",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f94c77c9-16d6-428d-829a-c8874c434a7e"
        },
        "item": {
          "id": "c2a9a4b2-3918-4c9f-803d-4a97cdcf9f69",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2033bb06-cfae-4a78-9f6b-28af669e8016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26089948-efff-4c08-8753-e8a722168ecb",
        "cursor": {
          "ref": "ac8840cc-aa47-42dc-8669-794144f436d5",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d1dba35e-189d-44b5-b69c-23bf6d117262"
        },
        "item": {
          "id": "26089948-efff-4c08-8753-e8a722168ecb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "280beb7c-98b0-4fa5-b6b1-07841ee7623a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f5d9cd-3a7d-4d82-ad10-0ee668af2ab5",
        "cursor": {
          "ref": "340f6546-8a63-4124-9766-2f18b694a681",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "47c17426-0929-435d-b0a9-018ecbfacc7a"
        },
        "item": {
          "id": "93f5d9cd-3a7d-4d82-ad10-0ee668af2ab5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4c03c251-f030-4e76-9e4a-abb8ab105884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ecfea3-7034-4df1-96dd-fbde522d929b",
        "cursor": {
          "ref": "acce24c1-e8dd-4e2a-ae2a-c02868e64ed8",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3e03128f-1616-4147-bfae-b4acba4fbce7"
        },
        "item": {
          "id": "50ecfea3-7034-4df1-96dd-fbde522d929b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "408576b0-3407-4017-bbfe-bd377401597f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1933dd-6d4c-48c6-88dd-001f8ba9fee4",
        "cursor": {
          "ref": "39765828-2c48-4ecb-91e3-35b21b63af9f",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "eaa5c49f-1945-451a-9a47-5183a00d34e6"
        },
        "item": {
          "id": "cd1933dd-6d4c-48c6-88dd-001f8ba9fee4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "99fdce38-ef40-4449-97ec-84736130a38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83899173-77f6-4448-93cf-1cf1af586010",
        "cursor": {
          "ref": "e5e9f624-835b-4f39-a90a-69c043088ddc",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "89963438-01fc-4af0-8741-5bc1e8401230"
        },
        "item": {
          "id": "83899173-77f6-4448-93cf-1cf1af586010",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b79d6e45-e219-4ac5-9c86-765645d0cf5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88154386-8288-40c4-90ef-3cabad5598cd",
        "cursor": {
          "ref": "291d673e-ddcc-4943-919a-ed3228a24c92",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1ba917c6-9cfb-4a50-b8a2-4a93f8f58b3a"
        },
        "item": {
          "id": "88154386-8288-40c4-90ef-3cabad5598cd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0a69f577-8770-4391-af52-cb7fd1b20fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9bcb38-fe0f-4493-ab2b-3986167be919",
        "cursor": {
          "ref": "4737e9f6-4db8-49c5-b81b-18387afc8673",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b983d696-0436-4c57-89d5-07756a4e27e0"
        },
        "item": {
          "id": "6d9bcb38-fe0f-4493-ab2b-3986167be919",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "32352b81-8028-4b35-8f74-f77f66ec281d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27546f45-8e93-47a6-9282-4eb570810bfc",
        "cursor": {
          "ref": "9258dc18-43aa-4749-82c5-556cc9f2adf0",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "9498bfe0-8bb3-4cf1-8e97-0bd9bcc8a393"
        },
        "item": {
          "id": "27546f45-8e93-47a6-9282-4eb570810bfc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d048a199-447b-4abf-b0e6-c804b53dc2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b783f26-aca1-4651-8529-3be691ce59f2",
        "cursor": {
          "ref": "c6bd7d7c-b3ce-4916-a0e1-016296fa6fa7",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c996033d-b148-4245-8646-ea50ae9591c7"
        },
        "item": {
          "id": "2b783f26-aca1-4651-8529-3be691ce59f2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c70ee6fa-64df-41cc-91b2-03d0544f56fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d335b4-258a-4aae-bdba-870f59644538",
        "cursor": {
          "ref": "feb1b109-4fee-4052-913e-9f058c77bbec",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6bd4f357-0406-4a17-9987-f5750e999d36"
        },
        "item": {
          "id": "24d335b4-258a-4aae-bdba-870f59644538",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "56584ff7-58e8-4fd9-b4cb-1a8cee5a9039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573f65a1-e642-4efd-b655-5745bbaf9e06",
        "cursor": {
          "ref": "a63a410a-a527-4dc3-9a4a-de9883566710",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f883763e-224f-4246-99d4-2d77ebd1c581"
        },
        "item": {
          "id": "573f65a1-e642-4efd-b655-5745bbaf9e06",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "099d1bcf-54db-41f1-a289-67d681d1c224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e8d7e2-bbdd-4937-8d65-8937be4989e3",
        "cursor": {
          "ref": "80fd5bbb-9dad-4fd3-9c00-6d30c6102722",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c79196a0-b6dd-4d45-8dbc-080dae9ca8b9"
        },
        "item": {
          "id": "b1e8d7e2-bbdd-4937-8d65-8937be4989e3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d27bbc89-97c4-4a7a-8cc6-847034f5771a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df965e6d-3e0e-4dae-bba5-e50ed4a65b61",
        "cursor": {
          "ref": "e2ae0673-ed55-43da-8fd4-705a3eb16baf",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7646c079-1fa8-4eae-9d8d-93fd478e1b66"
        },
        "item": {
          "id": "df965e6d-3e0e-4dae-bba5-e50ed4a65b61",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5d1daed0-cead-4073-ad50-9cf29fbcd149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a89a2b-407e-4665-9ffa-012595e73caf",
        "cursor": {
          "ref": "ea718502-d38a-4e60-9231-8d5697fd7223",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d34a8546-84a9-4458-93e8-82efbe2273b3"
        },
        "item": {
          "id": "07a89a2b-407e-4665-9ffa-012595e73caf",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "23c26fa2-ff23-4e6a-b467-c0a22c5176f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6feba13c-8747-40f3-9397-cb130d769b2c",
        "cursor": {
          "ref": "09b13051-ebed-4d16-b13a-ccc240ad6576",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3c3475a6-1fe7-4219-9939-aefd0100e4b0"
        },
        "item": {
          "id": "6feba13c-8747-40f3-9397-cb130d769b2c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bc9f59e5-2a81-4a05-92d9-d7c721919180",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096d4beb-718d-431a-891e-bdefdbd86b17",
        "cursor": {
          "ref": "944dca4c-a406-47c3-bf5f-aa1ba4fafddd",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c6297419-61e7-46a5-8e66-5ce502e5c06d"
        },
        "item": {
          "id": "096d4beb-718d-431a-891e-bdefdbd86b17",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6039bf0c-887b-45f0-bbe6-18f1c9a43bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "83dd8a9b-df69-487e-beca-028aed6ba453",
        "cursor": {
          "ref": "8d967ca2-1a0f-4d81-ab25-dc3be8c93996",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c2992590-b2dd-4676-8547-f51815e0072f"
        },
        "item": {
          "id": "83dd8a9b-df69-487e-beca-028aed6ba453",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cb27a5ad-3ff0-499e-88de-106bdb9b0a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "99d8e8a1-f757-42b3-a462-be0766b77607",
        "cursor": {
          "ref": "80e3c90b-63c7-44a0-bd08-6c7c25c5d4c6",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "5134dff2-b6e5-4d99-9494-f70b74f1085a"
        },
        "item": {
          "id": "99d8e8a1-f757-42b3-a462-be0766b77607",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a485142c-3c6f-4af1-a6e7-bedbc012a0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "0db5702b-bc49-4aaa-aaf7-bd3c7b77f5be",
        "cursor": {
          "ref": "404855f8-b9d5-4e8d-9e9a-585f7361fa8b",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8c1be766-620f-4443-9a9b-a2efdb6bfbc9"
        },
        "item": {
          "id": "0db5702b-bc49-4aaa-aaf7-bd3c7b77f5be",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "edbad117-8d5d-4cf1-9243-6c822d2ad02a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db5702b-bc49-4aaa-aaf7-bd3c7b77f5be",
        "cursor": {
          "ref": "404855f8-b9d5-4e8d-9e9a-585f7361fa8b",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8c1be766-620f-4443-9a9b-a2efdb6bfbc9"
        },
        "item": {
          "id": "0db5702b-bc49-4aaa-aaf7-bd3c7b77f5be",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "edbad117-8d5d-4cf1-9243-6c822d2ad02a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979f29bd-7ec8-4667-9e3d-a5f7f9ccdf89",
        "cursor": {
          "ref": "f23cfc43-d642-46b0-a2bf-2fa7ec04e1c3",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "043198fe-996b-47bd-b55d-9435c2c7f061"
        },
        "item": {
          "id": "979f29bd-7ec8-4667-9e3d-a5f7f9ccdf89",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "df6c3683-75c8-47d8-8309-6358925094b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e1b7ee-2f7f-4b88-a457-f6a1c96afaea",
        "cursor": {
          "ref": "75d29d28-a0d3-41fe-8fdc-c3193a66d788",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "24157b1f-1855-48f6-b8a4-c15af9afe334"
        },
        "item": {
          "id": "f4e1b7ee-2f7f-4b88-a457-f6a1c96afaea",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2e884c14-1d73-4930-9a7b-11ab06bf2c1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}