{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4b5fc3fb-a1a0-4ceb-b2ec-d067fde58eb8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fa61ebb8-4413-4046-ac31-977088bdc76e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6ca2bfe0-e3ea-4114-982a-be60ad4f34dd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5675dc87-3433-4c6c-85c2-b17b90016fcd"
                }
              }
            ]
          },
          {
            "id": "e98e732c-8343-4809-9368-a98741293840",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6e749d11-8c33-4079-bf87-562950c13cc0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1f683eb2-0798-4bfe-a353-3e65ff9d959b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fa16631e-13cf-4aec-869a-be2c1b397b1d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "44f8e14f-4d1e-45f9-ae6b-496460e94399",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2b031a90-4f2e-446d-aa2a-2bf2b1c6ead6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20ccf12a-1967-4eec-b5ac-5a495695b87a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0f216dd-8d81-4b01-9775-dc9dd8eb106b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "655b4654-96d1-445c-9335-3f1297ef4d7d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d5cbc42d-cc84-45bf-b807-cc44b4069276"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4aeb2693-b877-4f9c-ab9c-1da1990d1a7f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be45781b-8962-4413-b9d8-e1503b84571c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8969076-e5ec-4acd-a5c8-59b55c51dfb3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3de07118-0fc8-4390-8f48-708669015c36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "618c6239-90ef-4e90-b5a7-f360183440e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "afcd3c5c-5bab-4d38-b669-46e484c4e2fc"
            }
          }
        ]
      },
      {
        "id": "08a1bb75-966c-46d3-9c34-6b47c9be189c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0bb784d8-6dcc-40f4-9cb2-150cf5e764ac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c24304d0-c5c9-4fb9-93c1-9485c3a7e21a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "05b4872e-89bb-47a6-a0f7-53b41a228eb5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dcda34-4a24-4920-9f2b-65f5595c7634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db973538-d169-4e6d-acfc-c6ab03bf2afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb49a8e-81d7-436b-a631-b0a00272cb71",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af255850-2e87-4ef5-a24c-bed0c2795e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "169ab7db-894b-4e98-a350-f792472de94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b50e7a-2f06-41bb-8544-4b85fd8d578c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0137c8-2130-496c-ae97-493c886b70cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0928ca6c-d0f8-4f7f-a823-42d1a21eb339"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db0d7043-b16c-4fc0-bc22-111b00bad340",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95816cbe-569f-46ff-98ff-1d2e279c66d0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3f7c16-ed60-4e61-b7cb-02701c222f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69334b0c-cf4e-4fc5-9b79-69d9d671457d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f600d82-b3de-4776-a889-6ff6be4e8b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2252682b-440c-4651-8dd3-c8364d5d9e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd902a3-9faf-4fe9-b2e0-c6be29111555",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d153f5f-4152-4c0c-a7ab-8eadd2a348d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38c49b1e-1826-4ef5-bdae-87384e37b35f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde9ff03-c389-4ec5-a81d-dbe0a8cc97c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "21ce1789-9c3e-4fb4-8bbc-2349ddaa074a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6d5e951c-291b-4958-aa22-1b79966e405c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f906cc96-1a10-4417-b763-0370e99b50d4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7506bad9-02ac-450b-ae44-e09b40f1c519",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "89b59fbf-09a1-41e2-8402-489c293969df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae64d48e-45ec-46f6-9b1e-4ef38da40ad7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e34f1da1-d559-4782-b3f7-180badadfb40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ba5ae86-7635-4c1c-a98c-a4574e82a470",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5d3b1c7-b134-46c1-b84d-b29937f89a30"
            }
          }
        ]
      },
      {
        "id": "e5872062-186a-4f22-b32e-15c53f2ab19a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f0ad1174-9bfc-425c-990b-3cdf4accc1bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d50f94a-a9a7-42df-ac21-21a4a4e503a7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "77594c31-82d4-4f0c-9a9c-51d25b45e2e6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8361e585-afdb-4811-afa5-85a26f00433e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bdaef9-3eb1-4523-995a-f06cca9bea27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c51aaa3-5336-409a-8ffb-a22c4451f398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64bfbee7-e67c-467c-b48e-d0e195aafe02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c8ffde-147e-4bb9-b8df-129a21be7e1b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101c7363-c1c0-48b8-9586-06205b89555a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7c8757-c4fe-4424-9a20-626a889e4f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594bdeb8-2d69-4afc-9385-31833a817c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6f6856e-91e4-431a-8311-8ac4438f1a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c743c0-816f-425f-9546-b1053c76f43c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a83758a-453a-4b71-9033-8202580acb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4009a29a-7469-44b3-99eb-e4f79659b81f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623acccc-805e-435d-9f56-5228ee3fba9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36581c36-9520-4711-a52d-dd955130256c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea6add5-3a98-46a6-8afd-d53e03b3c5b7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ef7e74-a873-4fa0-97e7-971a77d8bad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137b179e-b649-418a-bc3d-94abd8e9127a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c08028c-7a4e-45b0-aa4d-65d8b1c34864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7b76d94-6eb1-43ec-8b81-389b60c5c346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d537bbda-9230-4a62-9bbe-68f6c1ec96c1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d632d0b6-7297-4ff5-925e-da17a74521dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d3ed6d-a5cf-4855-adf6-a062bf3377db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfcfb8b-88ce-4c8b-b615-19ba12d31007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4b03eb4-b228-45ed-a478-2d860cdad0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bf04bf-abd8-4a83-8f27-5414a27d5722",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31533303-6f5f-4bfc-ae3c-e869eb253f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb7790b-0abb-40c1-b193-8571ef5b34af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb85e054-4deb-4115-9448-4d76b9a3412e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7d038a4-e520-48fb-b398-0b3ba9902d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f850c0-a8bc-41f9-ba8f-4292a86c8e97",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bdbf8c-7a2b-402c-81d6-a47749b73f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80dce1c1-e482-4bcf-b711-7c82aaa21af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f279a76f-3520-4939-94a3-a3f9f491dc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f7f050d-6723-4705-9e38-9bbddd2d2695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f350632-d681-4de3-8f31-31b14d8e2ec0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a485270-81d5-4906-9cc1-d5b8a4e33edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f440d7-2ff5-4dc8-ba7e-b7f9810fde3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9cd5c16-2e68-4e63-8b0a-d1de139d8f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12daafff-e6e8-468b-a73c-c6c38c03922c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aca2447-dede-413b-833f-1d69481cadf9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24d70aa-19dd-45dd-9806-d19eceb096dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9db180-8466-444c-a840-4eae718e4bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f7c0ae-5232-4a23-a8df-30e31be604a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "466b9fb6-d7d2-41a5-a0ab-e49df31b8d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b5f907-e97b-4e72-a58c-1775cae79bef",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bc56f1-0224-47ca-bbdc-7df0322c1405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fe67cd-dda4-49a0-9a30-8b2bab7aac0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6cb15e-1361-4a30-869f-905a6d1a5c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f71c0fd-a12b-41c3-af53-8dd32cba6e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f8c977-e2e7-4942-a05d-a59ad2e38a71",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3716c6e5-12eb-4088-85ac-97b2a1b1a3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e974e171-d984-4b74-92ee-210cd0ab6260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04c59a5-1054-4b17-bacd-8d353f805056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db9a6a73-a6ab-4508-896c-d37020740c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afe62da-2744-48fc-bd23-8b1ca5d00643",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813577bb-fbca-4d3e-b14c-4810090a91e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc3b65a-675c-42d3-9e6a-97deb22ad4d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2b9423-5cd9-488a-a44b-a201f413278a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "397348a9-9475-4f9e-848a-2d3303bcc7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483a7943-3c70-4537-8fe4-4620e2491979",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b12125-cef6-4934-a413-f9f681bbe100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2714a9-4bf4-4c1c-b4cc-d9c8ab8c52c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844e7aa9-f5d2-40ce-a35a-d0513f43354e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6da2c067-63fa-4abb-823d-278cfb61d884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d81d0e-2718-4bd2-b3fa-1206f8b2601e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55c5462-1512-4fd0-b37e-3515bc876b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6397cfd-e654-49fb-a5e0-01a03972d366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35dd66ec-3e26-4ba2-a27f-b2ac99ffbfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d32007f0-c5a3-47ba-8511-d92fdd8bd47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b507aa-ccbd-416d-8bd4-f66f01366ecc",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed16145e-adea-4e77-a72e-a3bac2f94b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6afa6ab5-435a-4b38-b5b6-6aaca977bfdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d74466-ac31-412f-a7fd-2e4e82686da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef7fc28c-b00b-4c0b-8204-f0ed0446a1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e6188f-665d-4d40-a8e4-0a1da320d6a2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4013d8f7-7a32-4383-bb72-4768d1fae7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304eb3e5-da22-4bcc-ad3c-176b0e6d060d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbee6a1-6d83-4f69-aaa3-3459595ee88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b3cd494-e2ad-4886-806b-de156f7cf9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abf5294-8ea5-4b9e-ac76-854f2929faf2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802f24fd-7b89-4052-8bd9-a6aa8e0442ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56bd50f5-d4ab-400b-b3fa-56a89667aed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc7eab0-9d2f-4cf4-a436-e2d71968bd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d8a924f-c840-4d94-bb9e-1c4b101bb1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff43eb9-7f48-4e25-977a-17dfe4eacaec",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18469ed-21f9-4621-ba54-c363e37825b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b4e91b-ab12-4755-8376-56d98b2d0fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89821bc3-a957-47cf-b0b4-58903c09c703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2325fc1b-73aa-4a86-bf10-08fe0a56dcd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dae995-9a15-4a28-93c7-a8b1b01eae1d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2a4165-fabc-4bd5-9d4c-6f768ef606cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b119b4-4f2c-4381-89dc-e5537307e07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d73020f-7fd5-4999-9e60-53673c0aed93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ba3174-4381-4796-b680-c7fb25ec06ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8648af-d268-4b11-b7c3-7df9ce78df87",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09110990-90bd-47d1-ae77-4c9af44ad266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52b72ccd-90d9-4081-950b-caa06661dbe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b324b5-4bac-4413-80fe-59b1e74dbbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52543688-9a7a-4323-9a04-a0f2277b92cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d18635f-1e92-43a3-b8cc-5f2079ab0a42",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97c2ec6-e287-401d-86aa-8bde975c5d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7476c391-ef8e-4969-8a84-9105e4e2883e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5969a92-25ef-44e2-b93e-d333e9bf9b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a036459-24fd-4c85-a87b-2eac048ea49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975b1780-edaf-4cdd-89be-ce5f6980913d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e26528-1e5d-4bf2-9338-83c81fc2bac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3628948-b15d-4e40-895d-c4a4e696d027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f4bc8d-595c-46fa-8881-e3f98246d856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06ef30e2-79e6-4543-bfc7-1efd8a5f8d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6485efc7-7195-4d83-89da-dc2a02facbc9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a0f0f6-c24b-47df-a5f4-4b318b8ac673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f1520e-e276-42de-a2b8-c321b3d1b192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f1fe5a-5b70-4d86-a5d2-4143ad64473c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c722f76-8d8a-42b7-af7b-bd4bde751e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbde2888-e5f6-4a04-a452-43ed8fe4ece1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9554089c-1eab-4aa8-b294-f431b89a1762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca4bd92-bb5b-4148-b54e-8bfb8b61d73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03d5a04-925f-40a7-aa39-9f8748d5b429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "64af7df5-04b7-44e1-bbcb-4d140e662b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92aa897c-0fbc-4f0f-8f25-3399ad0617df",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2723d799-db86-4bf9-b3b8-a40b5986b5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85d20dd-8890-48a3-b038-c9df641c8fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08982e08-b80a-4090-835b-efb85b0543cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "27fb5f38-a97f-458e-978e-f3cd4719f9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ddd1fe-1cfa-4975-97db-32d84b11586c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb267ec-0ca8-4399-8d3e-362081fb9d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5a0979-c31f-4a28-8f53-cdc5e8bd74ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef3f8a5-307b-43fb-aae9-1bd9e82c3fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc7ef4bb-5d6e-453e-91f9-e07f99e40cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00989fe-5fed-4496-a6ad-235e5a580470",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52cb8a9-8fe5-4316-b592-14c9f81b573b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05029237-6751-4f38-9dcb-50148ccaac57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013b2984-c0ef-4984-bc88-f7cdadb103b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "58db15d8-e94a-4939-a680-79a125d25f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2635f3d5-d8e9-4c13-9a23-d03d4091644e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf611c7-72b7-4e55-9293-7b5c4f828b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628816a6-be33-4750-82ff-954e8ea79547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31aae902-a0ab-4323-8d90-ba7d2dccf2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af5e7f39-9715-4b33-9319-e581cc6a3f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2568ea99-b866-4226-a04a-79b0fb07fb72",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffca37b-f514-473f-994f-408adc9553b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbace047-d3bc-4532-a847-8489f5c9be79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e599452-3e72-492e-841d-48e7d24cddb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "46161df4-ce0c-44c1-8907-8770fd9aeb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bb4cab-4131-4bd9-8262-15fdb1bbbd51",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618f7f25-7042-4250-acfc-065e74bb0166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39aa982d-616d-4e46-9650-3e5fa60a9ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695d98b6-0020-4935-af8b-b14170365d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a046a7e-84de-46b0-a32d-a6177d6a0607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ba06bd-1c6a-4f32-a2ff-c5cc8be0f286",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239842c4-9e4b-467c-a3a8-96a43c629c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30bf7a42-b36f-4f91-982d-4ea7946fbec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e95bd4-20f9-4cdd-bd68-6dab49d2dcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "75746633-697a-40ac-9d5b-2214e06514ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e274be-ecfe-4632-97be-e2454f6b3508",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9150671-c9af-4af8-b870-72d1aa3afd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5232245-7ebe-4440-a5ce-5db8f955fab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e68abd8-0b11-4329-a373-17e36823d571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2f885c-7d64-4c0e-9631-822924af99bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8131c6fd-c329-47b1-8075-bde924d64e8e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d1d07b-94b2-4e9c-846e-1d21de354980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce407e0a-fb8b-42e5-bf8d-72442c8c2be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e85f79-0f7f-41fb-af0d-3e59317f3110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "533decda-de2a-443b-a399-1739e5b31487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e48aedb-391c-4417-8cf3-d33b6b45e816",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2472c4-39bc-42de-bd1c-421f954fb47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b566efb-2e8a-480e-914f-b86ff08447c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d030e01-7336-465e-a0b8-02868ce1031f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "558a039b-1b9f-4723-9e20-0c58e9359f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04b1977-5aac-437c-9fa0-1e2647209fcf",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0fe43e-91bf-4b64-9263-3f99549fd12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc4441d-3aee-493b-ab5a-afae861de2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0c5313-f32d-4318-84e8-5626b803f7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "00360e63-29c9-47f1-bc13-dc3fe46e3d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f41eb0e-f579-4440-aacd-8a9a5a4919ee",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91068e39-20da-45a5-bdea-1801a7c1ad60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac841425-fdac-4030-9ac8-ddf029dd4a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d6bab4-46fb-4cb4-aea1-f12ef66f0413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5416a26-9bb2-4b2f-bcd2-4a83156454cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9421d1-3d6b-428d-ac10-a1004a7ad445",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33195693-c187-48ea-9658-95d4198a19ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9f2f80-6822-4889-8d4a-2380e426999e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a09314-855c-4941-b310-041180fe9853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "45caa405-bfea-4ad4-804d-f806802bc1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141773cc-25fa-4a40-962e-2a85117b7b5a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b1d987-c218-4120-9483-f627239263e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4494912d-42e9-48a0-b4a6-8c1cafc8f666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d52d61c-fa06-48e9-8c7a-13accfa97b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6be9021e-f47d-4a73-9dcf-40132487dc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf857b93-5e17-4d79-853a-2102ab7ddbba",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ff1318-7e83-4349-8fd4-c555b5ebe769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7239999-0f11-421c-8366-0b23722a4e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c95442-0a95-427f-b2fc-e78bfb73bd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a2743d-5fdb-438a-a97a-ba43e34ba77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb34ceb-6875-4a00-a470-1363d9bdd720",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8045c7cc-7b4f-4fba-b9a4-2ffb13b88d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3844173e-5a93-4bd9-9292-dd65a9125ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b688a0-48cf-4f57-bb75-74da4536ac9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a55071fb-5983-4c21-9962-d09d5ca50795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f11c256-ac78-4184-a875-bfeed063d868",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cca36f8-95cf-4092-a554-826dd29057d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f656274c-27ac-454d-b1fc-6ebad2ab7a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f6e201-ef3a-4921-b7b7-fba04c80b68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f2b677-c9fb-4a0d-8265-9005317664b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef5bcae-19dc-4b35-a948-0e3352bb68ad",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83b5014-c2a8-4ef6-9338-fa2b6d4f2cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f7ffb5-a75d-4273-8062-5851f86a1cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfb451b-fd63-44fe-ab5a-e1d5f5230099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "85db6513-bb0c-4113-a1c3-fe7742eb5b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aae379d-05f7-45b7-bf50-1aac15c18c0f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09613376-9da4-4321-97cf-3af354e9caa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b507715-d314-45be-9195-da95a962134b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27922603-fac1-4977-8f08-e7aa06196071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "95dccbd8-3c8a-4b53-9ee3-240c92b25aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdaafea1-7b75-492e-b6bb-70891f72784d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f254d04-e3bb-4802-bdf1-68764d03c623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb245f6-3526-407a-a183-48ce0d1a67c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d289fb-987c-49d8-abc0-5b808742fd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c8d1449-f9ae-4033-84fe-e2ae7cb55f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd52f8f0-2990-4668-bc84-3d3fc6d6e5aa",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1693ea73-2d3c-4a9f-8a25-cfb2ad158aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6fae707-72b1-4ae6-b93a-36d59330b51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd13bb7d-63f3-4215-b5bf-e62ebd327420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd1993a-ea44-4ce7-a873-09187db57b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea81441-e20b-456c-a949-e378b8be2316",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c962b9-5f39-4f2f-bde8-6b06c6b62289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be9a140f-e694-4ab3-b997-70e584b8c19e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191d008b-5040-41d6-b363-48461d17e314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "808bbfc4-3f9d-4bac-a0e5-4353a44a0b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b01b9ea-9b99-46e8-84ea-e1d15e1ab62a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53623460-f7cb-47b6-abd5-0e79037b1c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb5e04e9-e05a-4626-9575-f6f9bcbbbc5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7926354d-a2d6-4c04-bb5a-7dc21b779e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa4b5d7-2d9f-4279-9864-62bfdbd64c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c3e628-1a52-4d2d-ae53-18af5d372af4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bd96c6-a0c3-4773-9d6f-3fd9f6f93203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5fa1ecd-ba82-4359-91f2-aaf807600627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6bd278-6950-45bf-b883-99918d8d1000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee52136-d6d4-46ca-82ff-5833a47c2be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fc8744-57cd-4624-b7a1-ebedb2f412c8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e87e2f1-9326-4185-abe2-a57a61ba58e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d1c9ff-64a5-477a-bda7-5e022d1cb565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c978467-98f2-4d5d-b66a-56c8143f549c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "67eb6489-834c-426b-bd4b-0bf4bf0fff6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96503e0-bac2-48ef-9b4d-2c4b293c1dfd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a8e2c7-0a15-4c42-b36e-a8946f5de6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd7ca612-076c-4713-810d-7ad391ca8930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed50ae75-5710-4589-8dc1-77ff74fe82f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69d9adc7-8829-4340-af86-4087d6e54f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6f67f8-b00e-4561-895a-0f4bc3ae21c6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdab552e-10a3-4204-a896-7b567124c420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788e3b6b-09ee-4254-9879-0110c82d0f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7ccee6-7fdf-4899-b931-f3c4782c42ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "86ce1b17-e62b-45e7-85cc-92207dee70b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263ea1cf-2b8a-4f94-aa9c-4fc1c1ef2025",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661b486b-579c-4140-968a-5cc7f1eb4dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1db42cf-3580-43ba-aff1-b38f0aa98821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4369849-b789-4a76-a6af-5dd73f7eacef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d06ea35-e1e0-4936-9b28-84c0a4389915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a9ff83-c3f3-4725-a064-fa7c3323349f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93703018-e5e4-44c5-99d9-81f8bfbbe775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf95a3e-5ef4-466b-8556-76cafc32c6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0975679c-3f1a-4bf8-a232-9da879ca4684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "efa3c3c7-9306-4308-a81d-5a56af9cdaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843935d9-c36a-4ebe-bde3-619202b4d379",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e82dc39-250f-4446-9164-75d8cb41153e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9543dd6f-c238-4f7a-92c7-f5385af79dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b3cb3d-9d76-49e2-9d75-fb346d9e1fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0be0de-fa0a-467e-ae0d-abbdbfcf1a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c778fd76-6cae-44e7-af5f-04383f6a85fc",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9286d26-e6f7-448d-b02e-066217d69ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83172fb4-3bd5-4902-b3bb-9cc45e9a4a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26653f2-ac8d-4e5e-b2b5-0c64d3766959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4516516-e222-43e7-af81-f42d0de295e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4640e764-ab23-494a-b885-998f5b418572",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5829a978-767c-4fd7-86f4-51de38cd850e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5e7d10-ebf4-46e6-b724-af08c9ad693f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559e8996-9f29-4305-ab89-d3efd076a8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f90f0154-4e81-4095-8b17-2190f8ea277d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b638d0-0641-41cd-a11d-7f1bc54536af",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ece151a-be64-452e-9b32-d894033ea235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81223150-804a-4161-abe7-0869043a39ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199016f8-62ef-4e18-8c7a-11a7a860900d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "03cf56f6-5d2e-4e22-90d7-981b4cf26e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6818d06e-7e24-473b-bc2a-7b8ccb82b35a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e635199c-b640-452f-8a4a-c2f1ff653fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e92bd794-08b1-48c7-a547-dda3cfb6e52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584858b8-8e08-4783-8224-a9356976914d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6dfafeb2-ff7d-4b70-a495-0cc75892efd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bf5e52-c4d2-457d-b7f9-d17764492ca0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49390ac0-ed64-4986-94f5-9a95ff1ae2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c412c19e-fb1f-401b-9509-78f39b2e17cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6dc900-e7a0-4c9e-a71c-cd089d781aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "14b0b3eb-856c-4ee7-b3f6-b02bf7965891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33be39f-4a64-49c3-b939-90e9ce517daa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbc1fef-d461-4cdc-ab2e-d88b9d38a155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46623485-743d-41eb-b1e4-0023d8b9abe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbe04d4-e212-4719-9ea2-7ab7d3aa8240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0af21cd4-143d-43d2-aa22-a76606b7b7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accd87cd-1c0e-4093-94b2-d9be2c7ddb34",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e942b277-ae14-430d-9efb-c955d9c84451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055cf8fd-300f-40c3-ac37-8f90ed94c39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018fae94-8a06-4685-9b82-78f04923fd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6755db82-bdd3-4ddd-b446-bad9df8ec0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762c6745-4320-4380-80ed-ee8094c9e505",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956e5baa-0f6d-400f-ad17-ac83d6b0817b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e75e5da-b874-4fd1-98d1-25054ab03f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9aeea5-8392-445f-b17f-5da9ab87c669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eaa8d28-8cc9-48d5-9a38-789bd70d1f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dabcc6e-11b4-479a-9b99-7ac1b598068b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f4751b-3832-4561-bb8d-7b2e665b5d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547a01b1-8dce-4225-ad33-020830c2aee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ae4cff-dbcf-4c56-afd9-99dec429051e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf08b2e0-da09-4695-b2a3-c9de730a7efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca933cf-4a70-4c3b-b12c-cf4a09c68d35",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b381309e-80d4-4e11-be4b-2d23c0f7ecfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac7b82c-fe95-4514-a719-522ec6056878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee70ffaf-d0f0-412a-bd04-3e13ddab07e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce052af-c6f4-44fc-8a1d-29e31d31a297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d083468-3168-4bcd-9db9-6b27563c8500",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585e52b8-8125-4877-90ad-9fdcc5c5c7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5988ef3-8785-4fd9-b702-e2dcf54e8fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daecf610-c0c5-40e0-b53c-b846a9828a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee4c248f-57ea-4982-af63-f1ac1dd492de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50468c6-b75f-4e44-acbb-85118655fee3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8140a914-e49f-4866-a0bf-da3557c55621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb6ef46-7a8e-4612-b467-bc4987a5c367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adaa30e-b619-4ad6-a86b-963d5e8e6f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d49965-9298-4c1f-9ce2-cc483d216546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09b5077-2990-4884-8ea7-fdd1caa66bcb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c460e0f6-97a6-4d71-9923-a0a8c97e4958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e65a017-c9af-4b59-999e-bab8844ffd37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a174c517-b3a5-453f-be60-553ccf4c486d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02e74db1-4d1c-4cf8-a46f-003c6b67b7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d207af50-12b0-4d37-8d17-5368b2e5fa92",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b76dbc-2439-420c-978d-2bf18e3c44e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee600932-9706-42f7-9b82-ad124f5f5d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c300f474-891a-49ce-9c60-0013dc25c78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c525e18-d501-475f-9206-5562f0e804ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676e2cf1-adcb-4262-9503-252cf3af6b5a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7967d55-8796-4d89-bf25-6b262ed51e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb94d1f-a908-4045-b2e7-080c25e2c857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a16800-7059-4455-98f2-3c2f90c99d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e54201-a7ac-4f62-a175-7b5e53e5e583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51633424-7efa-4058-b8d9-ce094bd5bdb0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3087c99e-aacb-4fbc-b092-409ff9b87501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef14282d-6abc-4937-b435-b725375bc39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cf1810-5721-49ac-b11b-352e2b4eb531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfcf425f-dc77-4836-b65b-19829bafe53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d0c77d-2200-44a8-ba8e-3331e12494ad",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca42f4f7-39a4-4971-baa6-64bd88030065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3c4d79-5c28-43c2-bd8d-62998295c746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3f606c-e943-4601-93e5-e1bcabf8192a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea799647-8261-4ad4-86e3-22c00bdf5fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52bc341-2581-4a50-995e-9288948fb8db",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa3e721-ca82-4aeb-acc4-d50ec82b39b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c85a5d2-f461-4495-86c2-61736d43b9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6732d05c-7f85-4471-87e1-98aa708bad12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1362b3-db20-49f1-a2a5-a9f3f2322af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173644dd-ca1f-4df3-8726-f9ff7f0899d4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c3ea79-173a-449b-a73f-3153af3f5f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8b66e9-1670-405d-98aa-b7f1f6530588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9584ad-a42b-462b-b3a0-ea0634eb1af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "122f073e-d29b-4b4d-af33-e6acc5d447e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85925b92-cf57-43d4-86d5-2fa24edf5fc5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f48c2cf-4106-48a7-9bc7-7fbbd89d66be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e209bf3-3c00-4624-b60f-4d147520c89a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878b1187-0325-4dec-8553-ba7b5f2ef881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c06baffc-745f-4c45-b839-f36efbf6416b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2dfd99-fae6-4dc0-a135-d46848e393b0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4939d25e-7c41-4af7-9f89-45b8188a784b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df908ede-f454-444d-900a-83058bf6599c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6524b91-0ccc-4eee-bb84-746515f1257c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8fce61b-0589-464f-bfc7-6f0bc49b11d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7426b93-4ebc-4dfd-8a5b-3e0ea74c8120",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a555b32-9853-41bc-9bd2-0f012804eeed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51e78e2-3ef5-42a9-947c-8320278726a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e470ef-23f5-46f5-94f4-0110ee179f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff42382-792a-4504-961b-8e40a80112b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21580db0-9bda-46e3-9a1b-aaed61e0d822",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8a5d8a-7378-4b67-bff8-61bf95c71de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eea6f32-708b-4c22-b7fa-801fe1c5039c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa215f8-a20c-43b0-8e66-aff3547c9ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59fcffbd-d667-419e-b2da-86adcdfa0c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45aa602-5d9f-4d62-9af4-fd356a276674",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473cb360-ce33-4d40-9173-2b673ee88cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc52d9a-f4d6-48ce-a2e3-40bc4952bb61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c6d034-6012-4965-92d3-3ae194a2ca68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51939115-c96e-44ae-af52-62ee5afeec60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4b1673-8aee-4548-96ed-cc04481f302e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370c594e-5b01-440a-9491-0931479956a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f045652-37d2-4f5f-9bfe-fb249ef69ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ae791e-d632-4125-917a-dd9f7990ee28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4ea9cc-bec2-4129-b752-6bcf9b8258b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2049e0-c508-42cf-9c50-100f95f4b5dd",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80293fb6-1f88-4eca-a7cf-a0d5d91af08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a933cb-ab4c-4bf8-893a-fde5278d90ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad350c2-55b6-41f4-b9de-42d4a28e5a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "860983c7-57b1-4656-9993-8321a42f99ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b298ea8-9892-4009-910b-c1798036b7fc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e75bf9-2708-4b83-ac2d-46432690ed6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5497877-417b-4c3f-b2e5-a3f7c6e48300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5678a5a-5926-4472-92c1-3bcba80a1448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "076f666b-2839-4edb-914d-8095afc69ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7688db-2c38-4741-8937-0297c6af5a12",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1597539f-4781-4716-a8a2-2cd42e49a6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9489c74-7c01-4f43-acfb-f7987cbaf7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6027930d-23f1-41ef-8bcd-d7ebcf4b6d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9afc5b56-0a51-418f-9216-bfdd38c7758d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964c6cdc-2ee3-457a-8ac4-9d856cc62036",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1741b602-1e63-4bfb-a6e4-aa0259abdc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acd9b3e2-9fd6-4229-9051-332e5fc52ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ac3b84-feea-4320-9669-c202a3a1f46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd95db4-ee86-4911-b8eb-92efec071b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c05fcd-1da8-47ad-8d7f-3470a5949e2d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ad92aa-5eaf-4744-afff-7b4284e7335f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c8983c-7d98-4d97-a05a-323bd8b39094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce1d850-866b-4704-8ffd-75a1cb324643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67221ae9-36ef-4bac-8829-ad588f6b9584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6684b78c-1a89-45fd-888d-ac427c521c32",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b26f42-fce6-4d5b-9969-13a6e1e84905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0948c9c-f112-475a-a307-37f3bc7edb16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f0a41d-ee5b-4d92-bd86-95535e82af92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dfcb60e0-18c6-4ad5-b33d-7337aad778f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c8c5ea-326d-49b4-b1ea-7c51f558f3fb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19718519-f601-4b1c-b23b-89ee925605f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f3bea7-d548-4215-a951-119e4be876de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1655f9c7-0214-4a70-95d1-f0c0408a3ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6953af53-53a0-436a-95d7-ed5a065c21e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be9c8f3-864b-4631-adae-0e49e500cedf",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e88b76b-eb2e-4552-9802-4cd309de530f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c51ec85-da0d-440e-9e40-942d1f3e39fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5817a33e-efe4-49c8-a415-4f45d22c6e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "15a9a943-89af-4552-b8b9-ebd198515a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79122b05-fdf3-4546-a884-1a7b0c768f3c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd44c551-0d58-40c4-9ffb-08176500800f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f3e358-36f8-4edd-9101-404bc2be2180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773b75d9-c7a4-4a47-a464-040cae26d70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dffb2f92-19e3-4ff3-9362-3db50c0698d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8385e036-62c6-4b50-9a28-a24bb20ccd15",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac770c67-4009-4332-a105-d5d438554a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e511fa82-7820-4dfa-b195-7cd8be4e5294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76aee9d8-0b92-4798-80e2-d116910f0c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "94495a7f-56aa-4ba6-9606-ae964abfd000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a80a46-4085-4583-ab4d-3c7a24b3b110",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f215597b-80f4-49d2-8997-15f9aa337c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12fb7078-76d4-4394-b9d9-6228c40cb12b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f323614-53d4-4dd8-bbde-a4868567eb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c406e362-8e69-4808-9443-60050e0a2519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbb6a6a-f566-426b-80d1-5ff3e451491a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9fc52b-dbff-4e57-8564-e2a84b63527f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4408693-7de0-4c2e-8f6d-a5ab2ac19130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cae2c62-1f4d-43b6-835a-dc9f2c0497b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d04f80d-adef-46cb-b26d-a8e50675fccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fe974c-4580-48f5-8ad7-b01b84ef8264",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8616de6f-a52a-4786-ab38-0a65fdcc018a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "687f8b52-9413-4e1e-9399-c59c551ebcd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b528fa0-43ef-481e-b5e8-b471d8969d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8999098d-28d4-4143-bd7b-834b02cf2042"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "df77d6c2-a944-4731-975a-18d64c2835f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35c2cd50-c8b3-42fb-9305-fd56dd73a9c0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb10a65-a988-4700-923d-50e26f5ef366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57e928ca-a5e3-4214-bbb9-a28b4c5de187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643db375-dfec-4ec8-8f00-4d711082e831",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ba83edf-241f-4e02-9613-456ac0c823ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b331c439-fd0b-468c-a81f-9500b8b971b8",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c099bcf1-28ed-47f0-b688-fc326603fe82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adc0c3c0-523b-4c85-9bd1-0456b4cef32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35518989-78c4-49c0-9cdc-ab2a6c044656",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f017fe7-7255-4cb1-9200-572dc0df3a8f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36b2844e-ed03-48b1-833b-9cc828d9d135",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3d2f256-b596-4386-bf0b-f17673f837bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "130b224d-3c1b-4ab4-9c64-f1f008f2449b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a391dc6-12a1-4dce-a448-876f42ad3640"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6bd74047-a666-4376-bd23-9c134655ffcd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7f5bb76-34ff-47aa-a673-50a23291cd27"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "96e14650-7fd4-41b5-b7e5-6f15bd7b3fe2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98ac4be5-4d36-41b1-bd63-ce88bf5d42b5"
                }
              }
            ]
          },
          {
            "id": "6e6db1df-44b5-462d-a2cc-d2cd1558a71a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "431805fb-22fc-49db-8478-5f8b19f3f701",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3c6f82a-389d-4cda-9b95-3df7aaffd15c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7fe6857d-892c-42cc-bc8d-8a56ae738dbc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3183dc69-1922-4957-b2a7-69aad8fc624f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "96931097-0d8c-4df9-896a-65ee1259a98a"
                    }
                  }
                ]
              },
              {
                "id": "5c60c861-611a-4684-9c90-a9a614bdf8c9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5eafa15a-36b5-4911-a210-f08f0d7746e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78c6d26b-355c-401e-afd6-812e112cc4a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d04593e9-7e91-4346-802f-1cd424c4b405",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eae8421d-4255-41cb-9b19-1f1371149b5f"
                    }
                  }
                ]
              },
              {
                "id": "8e153684-36ef-4454-a47c-9ccbcfbc8521",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a8e6d7d-310f-46d8-8c9c-a6dd1ca85860",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "404d0a45-08c6-47db-b6b1-e94bd95f8e77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7421cebc-c033-4dd2-a366-c98c3ff454cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4bab7a63-421a-4eba-a632-3f63167fb59a"
                    }
                  }
                ]
              },
              {
                "id": "b1f0a33f-a105-45d3-b462-3dcded388390",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37bcfee8-b42d-43e8-9369-868a10a8c4a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5514da4-3979-4d06-9c3e-07aaad355329"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4ef3167-d194-4661-9628-656a4ffaa36f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8eaacade-d5b2-475c-8653-bb1351f5d8ae"
                    }
                  }
                ]
              },
              {
                "id": "59445441-aadf-4fa6-85d7-3dc4c6d85e5b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10e5c46c-f1c0-4284-a853-b40d276703e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78e19667-187c-4e91-835e-c690d8b77586"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b9b1e33-3e50-4fab-a979-3fda91a7ba25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "be00356a-d1f1-4d4c-84fa-8c72f353f5d9"
                    }
                  }
                ]
              },
              {
                "id": "ee15ad58-0e14-4e0e-b9a5-db4b0bb0cd47",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89829d5d-f6af-45a4-9133-cfbafeeb27f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2931fe4-10a9-40ce-89cf-1682c1115152"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5e2d25c-dd24-48b6-854c-a907e1f2c0a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "06f2b52a-12c4-40e6-aa3f-6343b9231d9b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5d79f89-545a-4106-a05e-cdda5f889ffd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "70622df5-e645-4fd7-9000-a7a29491b9fa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2f2853b2-c8d0-4ea3-ade1-36638dc605e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "141b6870-31d0-4483-8555-6221e6537303"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f58d5a52-4e96-4003-bff3-3e2a4f4a5fa0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "44a71185-e07b-460e-8cfe-fb61ddde7874"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa8da808-66e6-4d58-93ea-a056d8398b22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebe1443f-1902-47cc-93f1-972d9925386a"
            }
          }
        ]
      },
      {
        "id": "5854d490-f309-49a9-ae72-c52cdcdfc202",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4cd38792-c37e-437a-921d-0b7ae33ff04f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0184c36-17eb-4621-8982-130513ec797e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "43656f44-4882-491e-8574-9444b35d3cf4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8b698c-dd41-4b09-8602-cef8d4217902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c0bb07-3da5-4112-a961-ba9568288d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c7260d-812b-4fe2-8133-d9ce28b1e15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "93308e34-930a-4c84-9314-1eea61d7b9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2be769-7fa3-4717-9eda-efe124fa0d16",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce219f8-0d80-4dc3-86c8-2ccca10cce0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0ac8ca-8400-40bf-be3e-10e49a1132c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78664d6d-2104-48e2-b293-ac54a1106a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf09a006-513e-4925-bbbb-1a92a2d46c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445fe6f3-d136-4c6e-8e7f-3ff84261cb7d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dc946f-34af-48e5-91c8-cf696a916cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05511475-496c-44bb-b72d-ed33e08226f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6efdf2-5cde-4a59-9db2-5baae31ef7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c397203-1096-43b1-a274-30f03f42a930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4446464f-2b8b-45f5-b91e-ed9431d3e736",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb0f730-40d6-41c1-9cb6-b573ea5a3920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "685e7dea-5ce5-4e59-a3a3-8db137c5fb4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cf818c-0f63-4578-8ef5-25d873b19e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7996a9ad-4a06-4315-b5bd-f4a6b4ec74b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346eb03d-3f93-4b4f-a87e-9b7a4813fa1d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1949f115-0f2a-49f7-a9d8-3684746ee928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ec7e54-4095-47e2-9b53-075aa0de6689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61bc57a7-597c-4091-badd-c36f631d111c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "677e7276-5de8-4dc3-ab36-21c7f90f46b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4abe2b-2ab4-4d90-abb4-6b41f2d6d188",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db95b2d-d94b-447a-8fcf-ddc0b9b5fece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0369d1-8448-4c08-9913-4e26098b7eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c3bc16-c3fd-4756-a51c-ea80fdcff6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13a3b7b7-55ad-4e25-9f40-de600b3b8d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446f7313-9a8b-49d2-89c0-d7884f2ee1a1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f935adb1-0322-4f8d-a9dc-3a2c2f811b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c8b876-c301-40d0-b5a5-a8d04c336001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c00a7c-83db-4c60-bbad-6a2be1c095a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1367b8-2039-40c7-8ec4-b08049b946f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47517a8a-275b-4015-8857-dcc6f8753c4e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cd51c7-e120-4364-8fee-fa8ac3ada301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277dae30-912e-46c2-b1d9-35c3078d82b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abcb918-22c8-4cc2-9b57-c502c6a7c04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24a0a594-8189-4c55-bc89-430b2c4c9ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7f3dbc-b033-448f-a912-55a8b4033609",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8aee963-ff6f-4a95-9afc-710119a58dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d8015ff-fd8b-4789-8e63-8b5f1263d06f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54aefbd5-fa40-4d2f-964e-e7522ba0b4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0297b0d-29ac-4b2c-a98a-822326fcf467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d236c3-e4bc-4fff-8c3c-d6578e376650",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2b3bfd-aafe-4872-9ebc-e28e864b3f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6de409-ae82-48ef-8b90-92623d215946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb6b6c0-9f0f-40c2-87bf-507a507d1296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5049ad-42cb-4453-933e-3ad609b5bdaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f359ecc-6b93-4b37-93fb-5aec9d16b4cd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467e1a84-5a59-4149-88fa-a8e1e6b01857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc14af0-a8a8-4409-82a0-c643d8532911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87799fe3-63c9-4701-8ee2-fb1c23017b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e341cdbe-441d-427b-aa1b-4a40fbb359f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7974f7a9-bdc0-4493-8bdc-5c84f279725e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041f2bd1-8709-497f-b5ac-0b70c4602469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e8564ce-56a0-4d7a-8c3a-55acdc0dfe8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86da4d5-2eb9-48f5-8c27-da431941bf18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "adc29de4-e430-4062-828e-1f57aa69b471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11582768-72d7-461f-ab25-c18734dd2840",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4fdee6-739d-4236-aa91-75ebf7a02bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db57b42-1476-41aa-bf1e-89b1e8ae8dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde65726-359f-4c50-9eda-cf20d72d10a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc76ca33-ccea-42ea-8a74-92a6f04abbe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1c5e93-c44e-4a5a-a7d1-49f2fb0ef70e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c663a59d-5b51-4a03-98b4-a4ab9556dd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d12f456-86b5-4316-994b-3d9daf99f69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0755b4b2-d90c-4d0e-a73c-fa60fbd70a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfba9d96-f3e5-4449-89b5-a95687a47bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a6f642-944e-407d-a60c-4a9069c3eb14",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42f6ac1-f425-4683-82b6-4a93fdf17a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd11646d-93ec-47bc-96be-f8ae94893e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466dc0e0-4680-40b3-8c84-e49924f8cd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f05bea9b-dfc4-46ee-8eb5-842630d7da54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9384adc7-b853-4773-be20-4b5ab23add75",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6e343b-0aa5-4370-ac62-cce67ec98a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88d3292-07ea-45b0-967c-f1a07c567cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ad295f-294b-40de-b074-0a9e6f9499b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1122b37d-a182-4744-8cf6-7cdfa2fd3a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f922a443-7584-438b-8e56-e1e9a5954310",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bd603c-4780-4216-adbf-4c0c3581f84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa038ceb-1af6-41dc-b0fc-c34a7a2f5f88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6833d508-c7cb-4f20-a36d-0cf46e4a7821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4afad03-b207-49a8-a66d-824822ef674e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd53775-396c-4117-8e0e-c845fbc77110",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec16de2e-872a-46e3-8112-5c9613d26ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953d1e8a-8e29-40bd-b632-b2f5185ee069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0146f2-5d6f-4985-843b-f2730a35a08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2190021-aa4a-46f1-ab4b-a5331c33a9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3e9c8e-27e6-43b0-8446-429bc88a5a95",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85451f9-7b7f-46ef-99f2-865b1f48df02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7bd3ca-c6cd-4484-b338-ef9be409a369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b910b5f-515f-46e0-bbac-bb261a5aeca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0445964-ba36-40ae-920d-44b4f48112a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff26e5ff-e851-44ca-93c6-7ab98314dde7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f4017f-4d97-49cc-8141-ca509d6dbaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e94607-5716-40b9-bc32-e754fdc213fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94633341-9219-4b74-91da-4835a9ec64d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "029dc454-be31-4536-ab2e-0c62d2652e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea36b55b-af97-48f0-b34d-6fba99df042b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653b223f-831c-4e4f-9711-728929895883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a9675a6-9f22-4c74-b292-c42c4246fa88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c051fa-4bcf-4ea6-b82d-cbfacbdda19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea7c130-a139-418b-971d-0948b869e0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3be7ba-df14-486c-a351-607709297abf",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9fd2b4-a678-4024-83f6-ba0fc6167810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0f4af3-2dca-4efc-ae2c-9dec6d185158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f51b5d9-611d-47fb-a570-59c114f46f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55d801cc-5834-440e-bdb3-e45b4caf0593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba9b546-2e3d-4272-ba27-9bf79d1ace97",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b9b363-6c17-4ea0-a5cc-211c5d9680d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91c65af-40dc-4d1f-a436-da9474c5b0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c33b09-40f9-4d90-b491-a351e80b6ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72fff1c5-d552-4c40-8598-bce770c42b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f81caa9-98fd-4ba2-8581-79ee117bb1a8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084a5310-7a6d-4998-b067-a83084e2739d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5024492-5d62-40ef-a281-47da41fb4398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fb8c9f-f24a-4359-9d59-85c37b6ecc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b996232b-9665-4c05-9dd7-5d86655b72a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe29afe9-0046-4faf-b0fe-4161206907a8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0121c1-2c75-496d-95a4-c9de5c1e77dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f2cd09-c74e-4699-9732-bc77f2682007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed53833-8140-462d-b0f8-d779d8596a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f225c657-96ad-4040-995d-7c561e598fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a560785f-8508-44bf-ad2b-3d98b6165969",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e1df32-6c81-4d62-bb1b-dc8501796e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884bde7e-75ba-4b83-8723-2b9d23314ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b75fdb4-9884-4467-b811-75e4f3fef004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a911cbb1-0b56-41f6-8ade-4c4302511a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770ba7f1-21cf-4deb-aff8-ea3141132e5c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c10dc79-49af-4aba-ae99-d05d68a9d58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fe0c3c-9ac2-4de8-b1ef-90eabecc1d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4485f72c-fbb3-47ff-9f7c-4511b736e58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a047c85b-e38e-4194-92c0-a968a49af038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0023f80-9d9f-487e-a934-bdea95f048ca",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3447f2cc-bd8a-4505-9d30-9ed65be7cced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7095cc7-26e4-4708-a9f2-f78c7115d2c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e86a64c-2ee3-476d-9520-7c2197275644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04116fd2-17d9-45b3-a77e-412628bd2279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314498d5-a0f3-4380-99b5-cacc9a1dd5aa",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc36f42-db3c-4bdb-beaa-26a95834e11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a4caef-2051-49a0-9b31-d6cf3f758bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993cb463-adaa-4bb6-b98b-305c68bdbb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6191428-4b64-4125-8f8b-77805bf1d234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59c1033-7a83-40d7-bccf-ba0032d9e111",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a398b9d9-1ed2-4703-8cc3-d77f0e8cd6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6555500-a267-463e-808f-db7d6229a587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cb3d04-1e5e-45fe-9495-b90a01eafd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "205793cd-f3d5-4c67-bbc0-3bbcc696e752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2ea8f2-2cf5-4c34-94e8-ed6053a54b73",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfdf46d-9940-42c7-9bfd-b17e5d636e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d304187-a637-4301-919c-493dedfa477d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9ea364-64f3-476b-a10e-258389c725c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b30255e6-f304-4b8d-8167-7cb63bbcb0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adff5712-e410-451a-a8c4-5b9a4d342f62",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afa1533-dd42-4c02-88ef-38dc37090087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3726dd53-ebc1-4b9f-995d-e2016df3c4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cb3e26-5049-47ee-9e3e-d4a37f946a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe38a803-b221-41ee-8f90-8e2075f6c1c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ecae4fc9-315b-4093-b8b8-7fde4afdebee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bcbfc766-5761-4756-ba0d-be6dbab72e65",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4375b1-2dcc-4fcb-9634-5fc9848895a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bb870a82-980b-4b8f-bd7a-c6997fd1430e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc068ca-d387-409c-b229-d23eeeaefe1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59f205aa-907e-47ab-a60b-8caa58919b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d97c9df-8889-44d4-b575-4e35c8ae45d9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f6c753-501c-49ff-b4cf-95ff57f1ee65",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9ede947d-bc7c-41e7-b821-d8b254b07f23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a27bf0-9f35-48a6-9409-75b1ec03359f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe72e5bf-b04c-4ebe-9d87-89ac2fa97cbb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f5b7c72-aff7-4bf8-b61f-e70a4de781fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94214e3c-8449-40b2-be87-85f176909216"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "faa1ce01-4546-4846-8331-ea522523caf0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0937079-79b9-461d-bcf3-a23d572e6237"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0006e06e-ceb2-4afc-bd96-987b6b414753",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f7671aec-637d-4cfb-9746-3d2c34637587"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65fccee0-26e3-433a-8545-d7e974529cbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9232de9f-ae6c-42b0-a9f4-c2c356a7d4ac"
            }
          }
        ]
      },
      {
        "id": "dbd0161a-8c58-4d32-a6e4-1ca7118633d4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d7e4dfef-04a5-4884-b542-51a8805ec000",
            "name": "Negative Testing",
            "item": [
              {
                "id": "203d1a93-cd3e-4d85-b604-e9d6c9fe0e95",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "299552fe-1c04-4e51-8ca2-a2ecc3247467",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2a1b5c-d059-490d-86a7-e330d7c6bd3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f576f7-c537-437e-896a-8ab2c454917f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd089eb-448f-4622-b1da-63003f1edd10",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660d4a68-9daf-4afd-9503-790959ec9411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "032d5470-b5d1-43df-9471-3ec34e82e4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb161a3-8fc1-4fb4-b5f6-3efea6d908ba",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128051b0-4add-45d2-b380-ee6115551ef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ed8773-0dc3-4143-8eff-b2922549142b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf3f8d5-69f8-46f7-a58e-6cc216816ca0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c858f614-964f-4b0c-ae2c-4dfa939b61e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b27287-60c9-4159-860a-29e0cb97ca5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a98873-c1d3-4d2f-a7f1-cb74a642866c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95d0a10-211b-4a74-ade6-c51a07d0633d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a1fe21-edd4-49b0-a859-6988d83314f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ed913b-c76b-4bb1-8cd4-4f1e450c3596",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ecddeb-21f7-4743-99aa-750ffa3c8e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "519cf38e-7b00-44c6-9d55-0d85b1bcde4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec631dc-858e-405f-b5cd-2f386b1dc8d7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3fa499-7522-458e-b9ff-acc08f0a0897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9729d03-5686-4dbe-a47b-7c747b1fb6cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d681b010-0f88-41f4-b075-68ee0d64ead3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58b8a90-ce4d-425e-9ab1-b9e82483e293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8aa559-e605-481c-aeb4-42e8aeb09b4c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffa3ec8-5a2d-4dd3-8067-f56e79805dcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bae9529-a169-4c7b-b496-1f12254be024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c44084-e31c-4aa5-a5a2-165c046c416a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914d6307-d63c-4447-8ac0-50493504a67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e485680-5637-404b-b6bb-72bf76407918",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cb88f2-c9ba-4a40-8633-a91e626a336d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2365f9c-593c-4f97-a8e5-adebe8a870e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0eda01-7b9e-472d-a1e7-be56533c1556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3402a0b5-ed3d-4218-9cbf-2f34af20d5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69eb4bec-43bd-4b69-bfc5-f56696274cff",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccf55cf-f5cd-4dd8-9aba-473b48ecbe36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "472c2dbb-d010-4b84-a652-7b2cdd6e37ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd8639f-b0ad-4ca5-afaf-11b0870fa251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224d7867-9972-4605-94f4-0a5daed2ff70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f45477c-2eb0-4f8c-b17b-d64a5f375e87",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a043b87d-24ad-4216-9476-e2c2cd07c7b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb0d5b1-6828-4852-bee6-42ac152b5117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9868bd-671f-4c2e-b38b-4d38b84bd22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6caf0b2a-7e19-49b1-8910-bd7cb59ed225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749792cf-6915-43a3-87e2-0f31c13df647",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4178cb10-6ffd-43d2-9087-ab34b728cecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7830f7-6597-4921-98f5-605bda31c685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7b9ed0-a5f9-4df7-9bbf-cb04995b4e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eda0a44-8e86-4e44-bbe7-e3dacde52225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d83f55-1e6b-4b05-aca0-d2fc6b97bcc4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b4a10e-45bd-4b34-b616-520ccd7fe020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a5c7add-c9c3-4a3e-9ed0-57c9306d82bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c48481c-6d62-4b8e-b1b7-5b740ea22437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51efae57-9f0f-4f7b-9031-9c55de15bbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c27c001-06c5-4af1-bfce-40ad82ce3b59",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60eba6f6-38f8-4c6b-85ac-d28836559a13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d886219d-08bc-4e32-a652-9a8f58ebe1d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9719e6a-296f-434b-aa6d-02702a7da6a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2f63ce-d956-4c28-8bd1-9037e9c12fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee11d7f-4737-4429-b884-c5ed2c9131cf",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe6002d-8467-4242-9c6c-c001079d9c48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93fd5e1b-a6df-4244-8a77-40300ed14638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08935eae-d167-4d20-909f-282701cd84da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b6ad282-852a-4f95-8281-70b6ff13d59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328c4b75-27a7-47bd-9c1b-ee969cbf8bb3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc67c51-8543-4dd2-a7dc-ed365a4d19e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1bea94e-9032-475c-8724-61e06e536571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f4caf2-73ad-40ae-a338-53ce756c22ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14701c55-3ead-4268-aa32-1a2f3d44f56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff77639c-5037-45b9-924f-dd374cca1376",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797f2506-5011-4a28-9f5a-ee49f34da038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731e54a9-da5d-4b97-8761-3d40a6397f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd552577-a7ab-43ce-811a-b62d7a698962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8a09d2-3fe6-4f3e-9763-9bdfbaae2bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c26343-e31a-4b82-bb41-94f66f87893a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66cc1e0-45d9-4034-ab9d-4e2d12ef1bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a932525-1d15-4863-83a5-d57170b5fe6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23efb5e-cd71-467a-a38f-9ca6756d8216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d593a04d-a5c2-41de-8b47-d104b31d3297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0758d030-dcb0-475a-9626-b4857283a948",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b1c9a4-5ae4-4c01-b7e8-510eac48f380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36737831-8203-4409-a876-1b71e3206db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b0761b-1cc7-482b-bb47-1b8fb2e5392e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483df4de-2090-4463-9749-20a5f47dfcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a70c33-b268-471c-b11f-bf3f1c60d1d0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c90065-30de-4d07-ab03-a2f6ae83dba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf46fc5-b1d2-40ec-8d96-dd8123550bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e399a845-7a68-4aa9-96ba-6eb8bf57b6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7989c9-b7eb-41dc-bbef-ba087d892873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90d68d1-40f9-4721-85dc-38d03a5ed320",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b863e5-4375-43dd-87c3-fbb04c2db2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afea9cca-cbfa-4f05-a323-8fed6ec89106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ad91dd-4e61-4026-93b3-2b4f1203a1e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0650792f-5363-47eb-ac72-e0706fcaa52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7fd5a3-972e-4071-8ceb-a2a15a4e5190",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd115d33-b8e0-4a65-850c-fd8687afb0ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a28bad94-8a5e-4277-ad9d-507145a65f1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f62c402-7079-4f72-919e-fe02ad510ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0b5701-c913-427c-9f3a-fb43a63112b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5771051a-2768-44ef-b7f1-209c2b23b36a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac88ca9-a850-49d7-88bd-d4a294150c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69354cf2-236c-43c0-ae22-828c4699523f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d871ff9-9a01-4fa8-8a9d-9a467a90e8f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8a672a-8175-4425-a280-442e6b6147ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1002ab45-3ee7-40a0-bc80-8ce9ee57c435",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3085fa2-4484-4a25-af24-69d90e181a19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91634907-d557-405a-8c36-f12854764c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a5d4d2-41c6-4392-83ad-61443aae25bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b417b40f-0e98-4934-8d41-56b585665947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a32388b-751f-4a7f-84ec-fe58aee07a3a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cab8a38-a309-494a-8555-2332b3663421",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd2e2449-be3e-4c6a-8e67-b5a29bc226ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ce01e5-3d2a-4ec4-9b50-3a06c721f2ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c11988d-8d2e-40c9-9ecb-e7316f3163de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d95581b-d26b-48ab-b53b-2aef76f1e0c7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f88e6d-84f8-41b7-8184-7bf483c7f0be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "582a75ee-a50e-4fa5-ab5b-e05a36bd69ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553b5cbf-50d7-4c07-81a0-794a97f615ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb41f8bf-a2e0-4d7c-b4a8-5cd6f0b914ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15df420-2ce5-480e-a021-d5991689aa8f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d89d840-7bf6-4782-9a6d-42e581633bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0482c51-9ee3-47f7-a491-009c868601e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c84a6aa-ce0e-46ff-8919-42df653bc8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d1076c-9b3c-47ed-8216-b8326357d966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bdf97a-40d8-497e-80d7-974e43677915",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633ec60c-8edb-4b37-898e-eb9d6d531f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9177de98-ab6d-48aa-bfd9-4eee15bf18f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14785490-2655-4d96-9299-48425a5f678e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c283fc6-1c7e-4745-938b-2d7579381278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e284da-3e11-4bcb-baa3-3c2fdda12b60",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd97aa3-aa4a-4f24-9c0e-f1c769fa3231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12f8a877-ecc6-4d24-9ceb-eb9646e757ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a509d100-87b2-4f0f-9b3e-83958b8af5dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a9aac0-0fe3-4f91-bb93-288b5e1117c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f3d686-aa95-4bdb-92f5-d866e4eab7b2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316d9af8-6dac-4186-92f0-217ebe91a763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd3aadee-cd01-4345-9c24-d84b5f72b6ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cf76a4-72ef-44b0-ab00-79246a9b0413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24ad12a-6e75-4b39-9f34-8b5f2cc035e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058722b4-4b1c-4b29-88e2-889ceeb8da66",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ce70c7-b435-43ac-9b95-9cbb0c341df8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a303f99e-1bf2-4d5a-aaa1-772e10c11a39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "380681ef-08be-440a-937b-3e2199126a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c57fa01-88c7-47be-ac21-9cc71088cee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8287be2c-deb5-407c-9f7c-601dc60ce264",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ea1482-fa7d-4d81-b559-9f94f065a2eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae1ba671-1021-4a20-ae72-e106b3fa77aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b6f7a0-4068-488b-88a6-338800e08ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123e6649-f292-402b-8c27-e70148f2aefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed42e777-e0af-4b86-a5ea-0dd98c47685c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4fba1ed-e994-4e51-a460-b004c8f4e25c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d83975d5-b3b7-4977-bd00-be131254dde2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa6cc8b-1118-404f-81ab-2975c6709165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9edd9c91-4c86-4fdb-b325-217f0ab8c1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9aff695-bd8a-4f86-8326-63e7012744fd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea39e5b-29a6-4440-b7a8-aba771f03c80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee331b95-9fa4-48a5-905b-076a8d0d6931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecf3642-54b5-4e3d-9237-f7db8590aa32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499d28cd-74d2-4487-95f4-142876c349c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e20c8d-25aa-4def-8d10-be541f5b090b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc511f32-4a75-487d-9624-227478a01f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272ba0c2-9ac1-4753-9bcb-51d26288244f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a120f1a9-419f-4af4-a28e-4552957bb33e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215a0056-23e5-4ed4-b2a7-bddf275a2b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9916f660-9f11-4f78-ac1a-cc75a5dba7c3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d38f45-3289-4bc2-996d-6c992db5e2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18da10eb-33bb-40cb-90f9-967194a38294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31558df-ca93-4c63-9500-92b4a5217177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28af8422-a407-4435-8047-cfe7ec6a0b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a0f593-d525-4768-b058-c73664e35a1a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c571abf6-fa67-4bcc-926e-0fca0a37ce1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4628fab-cab0-4870-a0c1-62a77ce46514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de946bb7-02af-427c-a187-2614a0e26d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0657014d-543e-4dd1-af60-aa0895aa34b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8803501-8bd0-4864-9bcd-202f8e334f2d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf611df-a73f-441e-bbb2-0b455c14386c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a805d0-7fad-41b5-abd3-29211d21667d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af230e2a-fb59-41ea-98c4-cd08a441a697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9ca238-de58-4461-9e65-f25e5a1c1582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37afe864-9d11-4c97-a12b-e085348a98c9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e249be1-74d5-41b0-be6c-d32297110c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a898dc-6e2f-4769-8cc1-aebafa42ff50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed89391-9623-409c-8671-b4af20114144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95bfe820-6a7b-4ba2-83ae-e9a9796dde98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ad6a8f-2707-4c99-9ac5-365a874d48d8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27c82da-b05b-404b-89be-708a87324771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c83a48-f517-4779-bde5-43815e996f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fda6a2-fb23-44d3-ad10-a1f95b515269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89cbf488-aa30-4f2c-89a8-663ec17a2fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbc5bb6-ee40-4cf3-8f12-85d9d210c825",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6e46e6-b11a-4960-a0d6-90daa528ae66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25832fde-20e6-4dda-bb87-83f6e1256d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0003be5b-5ec9-4cc4-8b45-60def5bee7f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51cec02-737d-4d42-9e8f-6c3360a2edf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27ce0af-4676-40c7-90df-acaf2a954e64",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f33b9a4-f412-49fb-9dd4-7379c0a5206f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b12ee0-0807-4eb9-aca3-fbaa5b97e411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1557e483-dbd2-4a76-b197-af190050b494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38edec4b-eadb-44e2-ad46-6c7c9e89edfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbfbfd2-9553-45ad-9967-298887f5e7ca",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da2cbcc-04db-4512-8ca8-2fe76d8cb61f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862eb957-4662-4fc2-8f62-8102c96081c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb442c69-4ee9-4c96-b1a2-a0cafeda615f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de6309a-18fd-4e4c-be7a-d666fc0bdd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78cd387-0e04-49ca-9adc-e06865eb9bb8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8812fcb4-caff-4799-b538-3aed7600175a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347c7dff-ad40-465e-8f5f-ba86a6c3128f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbcba13-a3f5-4b74-9f16-9c79af47c17a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe538334-3e03-4871-a01d-343c12977fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd05141-8a34-4f99-98c1-f09ade0d0762",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299a9880-1fe2-4957-8f7a-329ec52043c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bac4bf9-020e-4854-adfb-012ec8e970bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b152bf35-ba56-4bda-8345-a0b9acf43538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72384157-b2d0-49e5-9c64-7674b4a7b772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adb5b44-23aa-4ee2-bb53-612fcc7609dd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b6e3f9-4fe1-4ad1-ae7e-e8ec9368ec98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4093eb-5d94-47d5-9f15-13073752dc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d82303-72c2-414a-a290-b2c5a3ea408a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222d967b-8ef8-4947-b2e2-187d31c61b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864dac39-ebd0-4ba6-b6cd-cb8ddf7f54ad",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b998cbf7-1bbd-4cab-adfe-1bef823a03f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2492140f-90e6-4ffd-b7e5-b2cc1142a585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad8e2b1-b740-490e-b6bc-146a351bd24d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b7ec7e-ccb8-48e5-b837-570ee64cb1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5bbb2b-4bd3-4d75-88d7-ba9218f4076a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6064703-2db6-4a47-8c5d-f94b594db1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70450d31-9717-4899-9623-ff09215576e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2332329c-4d14-4d9b-b7c3-06ad17464ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a8bd41-0786-4f15-8724-5458b3b90077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcd1cf6-ac9d-439a-8b6f-48d0451c5754",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39733831-32f9-4b65-92b1-e73b55c791c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739f93dd-da39-49d1-b011-4a7a560eb744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ae6553-106e-4113-9c7d-48706ae2e711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a4ee6d-b4f8-4cf1-a46e-7c37234dde0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be971b28-4bfd-4fdd-808d-6d72dd66a026",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80571fa0-063a-4504-8a8b-16fa58bee1bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b533c0-94f6-431c-af00-655db378df5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef367b28-71d3-4414-b3a0-08f10cd2b054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deebcb2a-f1ab-42d6-8fe5-de4cdda38308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551be68c-7afc-40a9-a3e6-caa3daaa73d7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58290eac-0788-48c5-abcb-28e6609caaee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65af973-e1c5-4897-9f65-0b963a6b36c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075010dd-d8c1-4ba1-928b-e10cb9c24ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd6023a-c024-4457-ac17-55855e154d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3545d3e9-8929-4afa-9546-724e233140ab",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aabd380-d1c0-4def-ab7d-449bf5ab011b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2f15af-e663-4360-9b51-a4bb77dd9448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76dcf71-240a-459d-8a75-eb62b5b6ce37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0313d3e5-e568-4fc9-a35e-f1ab20d2558a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed84275-9290-4974-9557-540f1f014dd1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2769700-c70b-46d8-bd8a-bff11ea94f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d50eba-59ed-44e2-aaa9-876ddb16f476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1983d1e-6e09-4cd4-b42b-1d7394ee2b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787bcfc3-5cdf-4876-aba2-4151acba27dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cf7bd3-d34f-49f3-be76-f7a38c3f13b6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bf7b22-5bd3-49bb-89b3-a996a4de868a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71dc87e-cee6-4162-8837-0e481a18c950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed486737-9954-4bb3-be0a-8c8c370ccb67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a7923d-347c-484f-9b4b-461a8e8548ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af35157-fe42-4022-9f2d-9dac1cb4f814",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb93808a-61eb-45dd-9187-d4ffb949acd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac8b8eb-d1d3-41d8-9e05-b639c1f28572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a32ef6-33e9-4abe-bf02-537e55c7e4ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744965ab-a397-43b1-95b7-22554dc38d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37c3fc8-a891-4304-80d0-776bed500c80",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da26e48b-07b2-461b-8d94-83b1645dbfac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f194f1c5-310c-4a0b-a68a-c458a8c15d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01264882-94b5-49f6-9689-964b23428b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd6f52b-176a-4874-bdbd-1d1466d444a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b11218-947f-4563-b021-82f036f88432",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cea522b-6979-4970-816f-84c4a32cca47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb606432-0dd5-47b4-8e0c-98844417968d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8a83b6-f3b2-41bc-8488-7a0b3d8ddf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a0e3d5-dec7-41a1-ad66-57812c80ccf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d267e93-3e68-404f-adc6-b6b15114c961",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c19e4f-15dd-4570-ad02-dcd5621ed7ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a10ab8-4e39-4dd5-b0b4-e612410814f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c807de5d-8149-4e03-ad05-9ee473ea34c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94351afa-dbdd-4e3f-9783-a5232009eefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c3914c-9b09-4a4c-aefe-8575400d14ed",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88816dfa-8956-4da4-ad77-755eb7950008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6f83c13-7c84-462f-9928-6b03df659465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa5a2dc-4897-4f7c-9e72-f9729a802527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eda5539-6e4d-4a62-ab5e-093ce1d02b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2694eb81-2712-4cac-b1d6-29dfdef09437",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e71c0a8-65a0-4f95-bae0-0641ad3aac7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82591336-5f76-465f-8d63-06b872138069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde18c30-4aed-418c-aafc-34d5b37dd987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01f19a3-6780-41b6-ac70-1307ec754540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf068978-2968-4719-b340-81abe4c4996e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecac16c-c6a2-4211-888f-658a6bda9788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4df027-6b2e-4f5b-b5bc-907a2dbee267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "576aec35-78c3-45dc-952a-1bfa73a616c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3432e3-c8f2-48f2-8dde-3fc54acb1a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ff8baa-bc4f-4344-9826-5cbdec959d38",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72230467-4644-4d68-896e-f04da93ac194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba515cc7-ec06-4abb-b3a0-e2d6e3a6414e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a928a85-63dc-4b3d-bebe-615fe6823a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e465b5-9854-4b07-811a-04e7393cc3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49dc2bc3-7420-4451-83b9-e3bec583ff92",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b2c501-f3fc-4aa9-87c3-ded5146be95e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc70dbe-f745-4b20-b577-e8a44cc7ae52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfb3c38-81f2-4789-b612-0ab72c5fad9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da1e7a3-30a4-4723-a8ed-0cf0c203cf5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd758c9c-fd27-49ce-b669-e6c597d6c392",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8ecebb-c295-4c66-a406-0e11ea08efd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c955752-f258-47bf-9ff3-4f79afcbd78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "705a7943-0cb1-4a9f-a19d-72f0651c8005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eba901c-240f-4303-9dab-e7b2214c2d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433edde6-c8b2-468d-82f0-8e56ee6352d6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f13b49-25aa-4333-9cb0-2594cd1a9810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35a360b0-32d8-41ca-a559-7765f0c0fccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b4698b-47de-499b-b168-186a7ecb4103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae486da4-3125-4a82-9b88-bb5e29b5f976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06791c41-3dd6-467f-933d-8407e3f96da1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91494bf6-c072-44c4-b89d-a8bbdf03d4b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7002a7-408d-47e7-b932-89be2834888b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b47bda-beb1-480e-b048-80f1f8cf1430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d8493a-8268-40af-a4e3-8bf17c0d6d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bb9199-99c5-4c7a-a247-2cf167a4ad32",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59680d1-4bb9-47ca-b7af-b5cabfa8f401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "053b13cc-ec15-423a-9874-cd6f1260e4fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5203785-bcc7-4c09-8205-6389c21c84ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60120f77-55c8-49b1-8eeb-1773b486f1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d857d566-5646-4a8b-8871-a253a8f230e5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896b6026-6bbf-40da-9109-4a0c7b936231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d902dcf8-00bc-4a2b-aaba-d03e87647e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d99ec5-b17c-492a-9068-5b2cba504919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d32f1b-e2f1-4097-a7ce-4c3ee9044a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9776ac5d-e3d2-4e52-b69a-c976e739c97b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba020a35-cba3-4f2c-997b-578c00cd10e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32a3b26a-7e67-444c-aea1-95252aa3f185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e6c4cc-9539-48cd-a85f-e80450bcb72b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda781c9-9323-407e-adb1-4465f26249d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7ce96a-76e5-4e15-9386-5b541bd84a01",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b21c74-7cbd-4306-8872-9891f616f2c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb6e9839-5e7a-4cd0-a925-1e9df960c4ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85aeea10-eebf-401f-829d-a14b1bbcde65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212ef551-432b-49e5-b415-e1592fc777e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa04db3-a567-47f7-878e-4b887ae3faef",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b2b832-ae2d-4ad3-a173-699465d7c7ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a119657a-8b39-40ac-b06c-43d9d0585132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be99a3a6-5a17-403b-8d02-65c09fff6794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e46991-d5b8-4d46-81fe-2c1a9fa82633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4179d2b-a230-4bf2-ba5a-b8391cbb01c4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a6c17d-0352-4f3a-836f-84438956df49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a64dab15-eb25-4e31-9f8a-4e045e1e3cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852caecc-698e-4583-ac54-de75eb7746b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c7e9af-9a1d-412e-ad43-a0fc88a2a512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f7e758-f3ab-4a73-aa79-9db254e781a4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d9785a-c069-4b6a-b217-44ad86a18963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91436a12-156a-4f12-aadf-54aa1527dfd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7415ee-3ebc-4bcd-a868-66eaae5976a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce29b09f-a04c-468b-af54-f0250708f443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d211fd98-79f5-4ed5-9790-7a52127bd2e3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e3bb2e-6a4f-4d5d-8865-5f3b534da8c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94fbe106-a9e2-4559-8d7c-f0656bd4ab43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb7345f-4463-481a-879e-2d51d4086969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a83f9e-8a44-45f2-adc9-8fb85bec9032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a630abcf-3ca7-4a5b-82f6-afb33010b5fe",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e5293b-0233-4b1b-bc38-c9e35a864344",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "094a1ee9-8540-4048-8364-01bdbb3dab10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf249ae-a967-4ab3-8051-edba4616cb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce917ce-57e5-464d-bfe0-d5f98d7f379d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6998ddc1-8d98-4b15-a58a-bb2166cfb574",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11e4eda-879a-4cb7-81e5-4b9d4b8e5c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8218f247-487a-418b-a57b-b338014023a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae993a2e-170e-4ca2-b63c-7bf362ba2c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9c081a-286e-41d5-8111-8d911cec7fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deebcf69-9b78-428e-9d91-8832608ab6fc",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b57a374-2e38-43dd-a2c4-798ae62adea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c848032-0255-4ddb-ba69-b517c06fcd79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d732b7f3-8784-4a67-b26a-1475d8a16ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ceb30b5-441f-4534-b479-a9c0c360c49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56625ece-b79e-4b13-9466-956454722e79",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bf6c6a-ec4d-4838-88c3-6ebe4cf84682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "000e6dea-243a-4938-b4ee-4882df55e966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a4c0aa-06f0-478c-94cd-981e7bb56ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc7b3ad-6a7c-4159-809a-555e36e98476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a682766-a71e-4975-baaa-21ae265c515f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5988508a-45e0-4288-8034-f87506dab3f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2439ed2-1bb8-4386-ba5b-14e18e0cf45b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d7e357-86c2-4e31-a06f-e8f64426df1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7e5c48-4221-4877-9dc0-74dacbda5d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da61c99-377d-4673-877f-1da7988c2ab1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87d12ff-fe81-44fa-be46-12a9aa41d729",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63c5a591-02de-4792-959f-f7f240d4710e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1790de50-666b-42e2-b42b-1f4239773ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d8011e-0157-4952-8da9-2412bd2f6bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc48a09-b2d5-4728-a825-d8ffd9ed5812",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9084ea27-e14a-4b3f-9b97-c1b5b3024daf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "886b0b10-e89f-475a-8fb6-93ed734a4c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9f6f28-b867-419b-86ef-63311533ac06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795bfbfd-9496-49d9-86df-e35254ca37b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39e4e25-3bb4-4093-b073-30c934225933",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4439fe5b-2ac2-4ed7-be9a-a258df9b1dab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cf9da7d-80e7-4d01-a630-5414ecb4a412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6677e497-6c56-446a-883d-2c47cf3b6f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34e4da4-2948-4faf-ae5c-991a3471db1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc78a0ce-ee3c-4973-a915-9d0cd9d35d31",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e160f9-65dd-436d-b279-26e62e1c8b80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc6e69b4-8107-4d6b-9ee2-96e1eed9c45c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a49f3b3-8e91-4b98-be0c-7dfbbc6ec10e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08aa0800-1c3b-40ff-ac29-d03d7482f059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23292fa-7866-4bce-972f-d971e3d499fe",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8eaf10-1019-4001-99af-6e5a814960d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5231790d-1f02-4336-bd7f-cf882213a90e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075793ee-b33d-4d35-8a3f-61ef238786d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11bd4b46-32aa-4cf5-92e2-f450b0c09ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc848f34-ccdb-41ee-8463-41a890c60ba8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a83f25f-2f8a-470e-a002-a2d61ad7342a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a839d77-b80c-493a-9402-2ec0abc8e8e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f5ae94-52ae-4d1e-aeab-a52e5d6b7727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac555152-2ad5-415c-bed3-047c01dc59bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de65c25-ccb2-4a6c-9a7d-235854ec4826",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972a9f12-5a83-4287-8e1b-08b9bb474306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9b569c1-295e-4448-ae75-bfd2c9a38fdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfe92ce-3909-49a5-9f8a-6295ef1ccf6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874bec0b-ee64-4c68-ac07-c49a334590f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c92ec9-6e0d-4a69-a834-b0701913907b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ea7634-ce56-4b73-9b26-d6c9a0dbb332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "655b8ddd-f68f-4914-a40d-6a3e0abcd978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d505ee3-e28f-4021-83f9-871a5778887f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5f17d1-09c7-4487-a9bd-ae79802f2163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487ad284-d1f2-4708-969c-a37e2c9d87ec",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e5c696-6810-44eb-a97c-f36eaa5f4205",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45745bd9-028f-4daf-821d-d81eda2de248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6bcd9a-5fe4-4207-b342-bac9200607f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0a003d-2e0d-4069-8e47-93f67c25ad61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6186713d-e4b2-4a48-913c-d9bdf7447634",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad74cd61-0a8d-4c71-9411-8d560c25f35f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb76bb85-f42e-4519-ab7f-a2b7aa25a5d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a311a1e-663f-4025-aa1f-b86a74dcc04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8fbf68-c1ff-4cb3-a600-8846cf9022a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81ce603-552e-43a6-9764-61f1f767a18b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f4be4a-8eeb-4fa7-b904-424f38dc8a5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe8accb3-0ee5-489d-ae6e-47e53d9ec23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b31e043-1702-468a-8ed8-782bd30bb451",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69a89b7-efa7-4dd5-bc5f-d15eab412a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10172cc4-4535-4e89-89fc-c8a2650e8684",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49564bb1-b171-46d2-b18f-a0ad2caefe21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "620013ff-f10f-450e-bc8d-6392fc079f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b4055a-1c3e-46e2-9d40-6d7550e38311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec1f23a5-e8b7-47d1-829b-49e44a2bdaf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37eb503-4aa4-424d-b98e-1d147cca1f08",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f064f70b-bc29-4d09-8932-1b641571135c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b52fb756-d801-49d1-b67a-5a0d25c33288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7232b6f-5898-47f4-81d0-4d320a5f82fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c140168-f7c7-4c6a-ae02-afc33824f07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b690ed2a-92f1-4443-a9c5-ba86877071df",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e76140a-a1c2-4214-a090-2cb2c94db612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d37d75d-463f-445d-8d1c-4a0a7c917385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27953a31-37a7-470f-affa-77b7c3866e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403a0b5b-d2a4-4d6b-8317-9d6c942a8561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94db0cf-995a-4714-8e66-b45127389797",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4445fcee-22ff-4c5f-b201-641570086495",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "270c9340-b5fb-40c6-a483-41df4f13514c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83af0c9-72c7-4df4-b167-161d28b033ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7dfe539-fb25-4a1b-9b57-3a3a4609a75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a723d8-92b4-4d8c-99c2-290354fad8bc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c4ccdf-7c73-48f4-9287-b0f7f8c77b7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b86ab16-9f02-438b-92c5-913b90ff60c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32c4036-c00b-4a19-9112-8798ce0b5701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffb1ade6-624e-408a-8b47-738b41389564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7563763-3aa9-490f-8a33-d2ec082e2535",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bac05d-c40d-4739-9c1f-f9474385cb84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75ed2275-d8bb-499a-84be-4d506538dc36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "497ea83b-a389-4914-bebe-b16af129fd0a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f66ba983-9d68-4089-a2e0-e8057ce54864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf82492-0cd9-4327-93e5-acaf80bb1501",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26dbc5d8-5496-4213-8fcd-4e87a4f5c2f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8f29561-00c9-40f6-bd8b-bcf675798f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2aa4645-8bc1-404e-aa68-dd0341ee5e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6ae573-7050-4497-919f-8fb47e88703e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20965133-82f7-4449-acf5-b7eff5e88e02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32558244-b456-49a3-959b-07ed2cd25024"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "619ecb99-78d1-4071-bc3f-849e03ce4881",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b32551a5-5b2c-4818-896f-68a465e9a7f6"
                    }
                  }
                ]
              },
              {
                "id": "aff49356-b57d-44aa-874d-2e4bdcbf33a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45b05c31-4904-47f5-b41c-6dc1258e7888",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44955c0b-43ff-4f04-aca0-ccecbf25af00",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c1490635-7882-4434-9853-9d59b34b79f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f533f1-6a20-49e8-9d2a-4592e36291df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e93c2f00-ddf0-423e-b2c8-ba078ebd5642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcd1380-5eea-4c0b-a799-62c83eed0b01",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13db3d92-91ad-42d1-b1b5-be92890ff8b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "421d78fc-6523-4f36-9806-0268795b044b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f47bae-7a46-4317-857d-81c3afb87cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee5a9cf9-004a-426a-93e0-916796785cd0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5937c9d-c62d-4a23-9a1b-4a56c61f0796",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad880917-df7b-4a72-9770-cb20a0cd5733"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9788f40a-18fb-49ab-ad37-1376176c84b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98b932f5-4480-4b06-bdb9-6de4b641352e"
                    }
                  }
                ]
              },
              {
                "id": "397943d0-fe7a-49ff-8965-6bfa770a17c0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "51600d91-e5d6-4d61-ba08-d3a7109199a8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e1f082-0ed9-45da-9973-cd413f009e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "85813adb-d0f8-4598-a293-019ce123dee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2481e0-ce25-4c00-865c-3fb53bcf4a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247bbf03-2345-42e1-8a9d-78bcddd1d43f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4094dd87-a8d9-446f-87b1-123d1dd25c49",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f5c214d2-713c-4704-a79a-4ca1a2f9da0c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3663035-109e-4a27-9032-f1e3bef2848b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6606d361-d743-4084-a84c-65f21f491339"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3517faa4-4795-47e1-a67f-27cd54e4c65d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f643c84f-f73a-4359-8c9a-84eb6362d123"
                    }
                  }
                ]
              },
              {
                "id": "3bff83dd-1133-4748-b5b7-704a388b06a4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52dafa77-1374-43e6-9429-5159c2428335",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fa47059c-8a38-4741-b66d-ae73940d2b52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aeb32ee3-62a6-4733-97b3-b5c91fb85eec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35af3d8f-3aee-46b6-9847-775277a5801f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed8d7790-6937-47a5-9cb4-c4bb021f5686",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "72d219d8-7bd9-44c0-9bcb-be8301615086"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2dde787-debf-488e-9c54-23eb9d20d9ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "542a689f-c613-4ec3-a8f2-1642a9901a80"
            }
          }
        ]
      },
      {
        "id": "ab65ba8c-467e-4ff0-bbf7-a7df43784865",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "37765dd7-a0ca-47e1-8bc7-14fa36017843",
            "name": "Negative Testing",
            "item": [
              {
                "id": "959f427c-8329-4f3d-b2dc-9aa73ce4f704",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ef11766-ef5e-4edb-ab71-68bbc1c3422e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23807b65-d428-4b4c-9245-eaa6c1cd272d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1881e4c2-1652-45ad-83b9-1072c25c1d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278922b9-1559-4545-bb1f-e4710f0cef70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dffdb52a-fc55-486e-9cf7-f3410f14a992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d3afe7-aec2-4ccf-9932-d131a498b537",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce297d7e-aa37-4c28-ba21-255e800ce939",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b5e08b4a-9138-424a-9899-8b5ecf46f408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f232551-abd2-4182-917c-9861cd51154c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aea5a83c-7b2a-4a47-bfd6-7e1b9f9449a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60730fbb-fa15-4304-b3f8-f5d85d6fc716",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3575b01e-1b80-4d42-b6be-7ca28ae107c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5463f2bf-7732-4d4d-b8a2-ffd79a8db758",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "897ce765-ae8c-4d9e-afbf-91cb23d64e33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f71e7d6c-90c5-4065-8c50-b22616438b11",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "99fa6bc8-2a7b-45ac-ac12-95f3f066bc4a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a37ae9d-acc3-40ba-9d39-5105167c65d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0203c6a-62c2-4cb9-a355-8a2bb71c1de3"
            }
          }
        ]
      },
      {
        "id": "6ca8fac0-b1ad-4327-9d00-db346ac8ddf6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "140d452e-f400-4faa-ba46-30e854912e8a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0686cee9-31e5-4259-8f5e-5fd9535df198",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d04dc28-6fcd-49bf-937a-6290b6431c45",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb09808-8323-4fc7-a1ac-f507e52af075",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d8f4b1a-593c-4880-bef0-c1f3ba35e20b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93df2ff6-0f80-4069-8444-ca7798e6ab75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f12fdfc7-df33-42f0-a605-a3f13dafaa79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053d0b4c-35b6-45a5-bcae-3deba2bbbd98",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d79b0f7-8ce1-4307-bfbb-bc28bf799cd8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ec87b2fb-8fb2-44cb-a0fd-9f6dfea903f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7196a6ef-efb7-4b7f-b2b9-f1520b2d6f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "147501c8-f9af-4302-bff7-13175c22f06e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a32272b-5e81-44ea-8b32-54f53a00de32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cff68aa-40ed-4637-b2ce-480f001d5e48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2281231e-2029-492c-b422-312a10769891",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ef3e794-80a7-4338-8d54-5e8d17350e81"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6eb0619d-6882-4998-abe5-bd9fb139a0d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d701e05e-72d0-40d3-8e32-f31563394abf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b83383a0-7733-4314-81bb-e60ca9e6e15e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13a4163b-abcf-4051-8b57-f8c282325b16"
            }
          }
        ]
      },
      {
        "id": "463d8817-a901-4b91-81e9-b10815b3cad8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "56ff7b79-ccf0-46d4-9fa2-814be9b380bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c0afeb0-c9a9-4eda-9969-d15464228644",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b300a94b-ef06-48ac-9159-68b62315b1a1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf209a7-7721-49bf-be6a-46fb112d081a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de24b8e8-3f7c-475c-82d9-ad6a11fcd1f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66ae759-c79e-471a-93d1-902c4099ef3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00d21c52-f09d-49f1-938c-94c1d42b55f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199f9f64-3418-4af4-8b9b-92cef16ce8bf",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160d3b6f-b052-437d-98d8-97646714bcf2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "518d349f-337e-4963-a574-fd424a9ccdf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c332636c-0fc4-4c38-9f3f-9d60f8253a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5bab88c-b742-41e8-b030-61854f9e3e8a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80d56200-3ee4-49e5-bfd1-b4ff092eb206",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f3f46f5-8b9a-4fb8-8eba-76c609782f21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41ce2fc6-862e-4650-aede-504a9b28605a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4781963-b5ea-4757-ab0b-d1ee7e890d2b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be07e166-aa5e-4533-8492-4d35dc741311",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dd6ce8c3-5374-4964-99f9-e9f2b76c0e6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b3b5373-1fde-4a5d-a198-efcc834b733e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31b0801d-3794-44b5-9bed-85f40f67493f"
            }
          }
        ]
      },
      {
        "id": "6fb5a93a-5103-4f93-a8bb-22cb2a2add16",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09063b61-5c21-4083-b32d-4a3be9bdf7fb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30cc32d0-00f6-4b01-9bfe-8e17c27b593a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9bb06deb-be45-446c-9acb-57d22cfa28a5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52a482e5-f2b7-4aa1-ae88-2b4d3e4aa74b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2af95879-6839-49aa-94b9-53cfd20d0fc8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 353.1653846153844,
      "responseMin": 7,
      "responseMax": 12929,
      "responseSd": 1207.6694145980593,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682469424969,
      "completed": 1682469529710
    },
    "executions": [
      {
        "id": "fa61ebb8-4413-4046-ac31-977088bdc76e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dcf3610d-1b1b-4dc2-92d1-b62cc76f0ea4",
          "httpRequestId": "62d9c0c9-e30f-40fd-9205-41dc9088a6fb"
        },
        "item": {
          "id": "fa61ebb8-4413-4046-ac31-977088bdc76e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "40e0c80e-08aa-40f0-ab22-6140d812fdc6",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "e98e732c-8343-4809-9368-a98741293840",
        "cursor": {
          "ref": "ae6ffc7a-e477-414f-b945-34d9d27976a8",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6de7dbc5-b8db-4693-a77b-9c571e69698a"
        },
        "item": {
          "id": "e98e732c-8343-4809-9368-a98741293840",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "29587401-e48e-4e3c-9698-0f401fc9c6fd",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "2b031a90-4f2e-446d-aa2a-2bf2b1c6ead6",
        "cursor": {
          "ref": "2d71a5c0-90ce-4b4c-b6b9-df4ee5aea015",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e970aac4-0803-41f5-a11a-874a5e5bd6f4"
        },
        "item": {
          "id": "2b031a90-4f2e-446d-aa2a-2bf2b1c6ead6",
          "name": "did_json"
        },
        "response": {
          "id": "12b1b422-e192-4f68-800e-32847e60fbff",
          "status": "OK",
          "code": 200,
          "responseTime": 355,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b4872e-89bb-47a6-a0f7-53b41a228eb5",
        "cursor": {
          "ref": "13594923-fdc9-4394-8842-4728361ac9e6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ca9920d3-7c8d-4719-9e5e-474bbd855c2e"
        },
        "item": {
          "id": "05b4872e-89bb-47a6-a0f7-53b41a228eb5",
          "name": "did:invalid"
        },
        "response": {
          "id": "29d9fbe0-73ff-4ba8-8a9b-d94aec357194",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1376,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "05b4872e-89bb-47a6-a0f7-53b41a228eb5",
        "cursor": {
          "ref": "13594923-fdc9-4394-8842-4728361ac9e6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ca9920d3-7c8d-4719-9e5e-474bbd855c2e"
        },
        "item": {
          "id": "05b4872e-89bb-47a6-a0f7-53b41a228eb5",
          "name": "did:invalid"
        },
        "response": {
          "id": "29d9fbe0-73ff-4ba8-8a9b-d94aec357194",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1376,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0fb49a8e-81d7-436b-a631-b0a00272cb71",
        "cursor": {
          "ref": "a4f0bcaf-01dd-4a6e-a16c-b0d5ca9045da",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f4bc340d-3c09-4f45-9cb3-b1926b91564d"
        },
        "item": {
          "id": "0fb49a8e-81d7-436b-a631-b0a00272cb71",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ddf4ecc0-2166-4ce4-a525-e7a12a024a6c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 79,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b50e7a-2f06-41bb-8544-4b85fd8d578c",
        "cursor": {
          "ref": "baf5a244-357f-43fc-9551-2f62cb5ccd77",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d21d4065-e4a2-4006-a894-d01c16bcc0d9"
        },
        "item": {
          "id": "57b50e7a-2f06-41bb-8544-4b85fd8d578c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ab3dd1db-07b4-4f11-a9e6-e5e84660456c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 81,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95816cbe-569f-46ff-98ff-1d2e279c66d0",
        "cursor": {
          "ref": "ac04f98b-138f-4fcc-8af3-0b78e9282277",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "361b1f9b-3b39-4da2-a618-8164715e76da"
        },
        "item": {
          "id": "95816cbe-569f-46ff-98ff-1d2e279c66d0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "56d9f477-dfef-4d2e-9848-e14e30aa91e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 131,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "4bd902a3-9faf-4fe9-b2e0-c6be29111555",
        "cursor": {
          "ref": "6e0403c4-ab91-4183-834a-843b1a7971c2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f2c9ae5b-eeb1-487e-99eb-d43e94ef6522"
        },
        "item": {
          "id": "4bd902a3-9faf-4fe9-b2e0-c6be29111555",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c31c6cb5-427c-4a85-ad3b-c73fbd2c4e14",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4bd902a3-9faf-4fe9-b2e0-c6be29111555",
        "cursor": {
          "ref": "6e0403c4-ab91-4183-834a-843b1a7971c2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f2c9ae5b-eeb1-487e-99eb-d43e94ef6522"
        },
        "item": {
          "id": "4bd902a3-9faf-4fe9-b2e0-c6be29111555",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c31c6cb5-427c-4a85-ad3b-c73fbd2c4e14",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f906cc96-1a10-4417-b763-0370e99b50d4",
        "cursor": {
          "ref": "c8496352-1ab5-4684-9a9a-b229fd0f6ffb",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "69e53baf-a935-4567-a61f-774297a0dfd3"
        },
        "item": {
          "id": "f906cc96-1a10-4417-b763-0370e99b50d4",
          "name": "identifiers"
        },
        "response": {
          "id": "86c80638-81e4-4e73-910f-07e3e3e93b8c",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77594c31-82d4-4f0c-9a9c-51d25b45e2e6",
        "cursor": {
          "ref": "59061a80-3250-49b1-9e8b-cefc7de74227",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0e33b57d-09b2-4dec-a420-4e6cee405982"
        },
        "item": {
          "id": "77594c31-82d4-4f0c-9a9c-51d25b45e2e6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e3f36e3c-d1ad-49d1-b5a6-d537d1636d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77594c31-82d4-4f0c-9a9c-51d25b45e2e6",
        "cursor": {
          "ref": "59061a80-3250-49b1-9e8b-cefc7de74227",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0e33b57d-09b2-4dec-a420-4e6cee405982"
        },
        "item": {
          "id": "77594c31-82d4-4f0c-9a9c-51d25b45e2e6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e3f36e3c-d1ad-49d1-b5a6-d537d1636d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c8ffde-147e-4bb9-b8df-129a21be7e1b",
        "cursor": {
          "ref": "d1fbc2e3-7637-43a9-8e6e-9cd89d094feb",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1ec57f29-dafa-4f37-b5a4-91ace49c2c67"
        },
        "item": {
          "id": "f1c8ffde-147e-4bb9-b8df-129a21be7e1b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "279019c4-d47d-4d97-a751-16809ec56c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c743c0-816f-425f-9546-b1053c76f43c",
        "cursor": {
          "ref": "9d39b50c-889e-427a-884f-dd54961ce339",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "181f5667-d603-4a46-bc1c-699d357597b4"
        },
        "item": {
          "id": "b5c743c0-816f-425f-9546-b1053c76f43c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b95ab5e9-9912-4dae-bedf-e52760072fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea6add5-3a98-46a6-8afd-d53e03b3c5b7",
        "cursor": {
          "ref": "7eb0dd10-bc4e-4477-a5fe-f23383279249",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b7861f29-ccb0-4a8e-92a0-6c7ff0568305"
        },
        "item": {
          "id": "8ea6add5-3a98-46a6-8afd-d53e03b3c5b7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "06704d0e-f978-475f-9c90-036976f7b2d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d537bbda-9230-4a62-9bbe-68f6c1ec96c1",
        "cursor": {
          "ref": "8ef779f5-afc3-45c2-ad3a-df180a3a9d28",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "00ac2ae3-5328-4303-816a-7c9a272d00e4"
        },
        "item": {
          "id": "d537bbda-9230-4a62-9bbe-68f6c1ec96c1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e5e7e283-79cd-43c0-90f0-2ae3be1713bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bf04bf-abd8-4a83-8f27-5414a27d5722",
        "cursor": {
          "ref": "38c40434-ee81-4ed2-8cc1-d4044b969780",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2f3a800c-0bc6-4936-810f-67f065210f4a"
        },
        "item": {
          "id": "f6bf04bf-abd8-4a83-8f27-5414a27d5722",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "79f2c479-d311-4494-a070-52340b0737d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f850c0-a8bc-41f9-ba8f-4292a86c8e97",
        "cursor": {
          "ref": "5bd485fb-0cee-49ee-a711-7095a32f9e05",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8c9d352e-1b18-48c0-bab2-8022997805b1"
        },
        "item": {
          "id": "70f850c0-a8bc-41f9-ba8f-4292a86c8e97",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f381fd45-6b01-4d14-8819-964b50499651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f350632-d681-4de3-8f31-31b14d8e2ec0",
        "cursor": {
          "ref": "9d37417e-7a57-4b9f-92c6-f7172f1b6792",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bab5d8b7-b4a1-44f5-b7d9-54543e97c1f9"
        },
        "item": {
          "id": "8f350632-d681-4de3-8f31-31b14d8e2ec0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d861852e-5930-4c2b-bd2d-7aa3939909af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aca2447-dede-413b-833f-1d69481cadf9",
        "cursor": {
          "ref": "531711b8-80e1-434b-b3c8-2f1a687fa80a",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "72a8ec5f-eba6-4bd6-9919-67234edcaf6d"
        },
        "item": {
          "id": "2aca2447-dede-413b-833f-1d69481cadf9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4d692d2f-e91e-44ca-ab74-a66fedd98864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b5f907-e97b-4e72-a58c-1775cae79bef",
        "cursor": {
          "ref": "c979364b-b99e-4069-b467-cd294857291c",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "660da23d-283e-4829-8078-e13d1cd7e8b5"
        },
        "item": {
          "id": "e0b5f907-e97b-4e72-a58c-1775cae79bef",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2028504b-baa8-48bc-b566-758e7c21332b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f8c977-e2e7-4942-a05d-a59ad2e38a71",
        "cursor": {
          "ref": "870f062b-6bc5-4ffa-bba5-b4ddca5499a6",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "bbbbd165-eaa2-404d-9862-8ce6efd41805"
        },
        "item": {
          "id": "81f8c977-e2e7-4942-a05d-a59ad2e38a71",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a4f3f102-4bbc-4782-8b45-cae79831d884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5afe62da-2744-48fc-bd23-8b1ca5d00643",
        "cursor": {
          "ref": "fddf4275-4cc7-418f-b161-aa476d8fbb5d",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "649d1934-e335-4a91-b227-a582a79f81ac"
        },
        "item": {
          "id": "5afe62da-2744-48fc-bd23-8b1ca5d00643",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "432f1ad8-8ddf-4d36-aaab-837bf12d56e0",
          "status": "Created",
          "code": 201,
          "responseTime": 12929,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "483a7943-3c70-4537-8fe4-4620e2491979",
        "cursor": {
          "ref": "bfd82f8a-9f52-43d9-9c44-01a91946fc2b",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "55f5276b-ae14-4b54-8667-50367e1b113e"
        },
        "item": {
          "id": "483a7943-3c70-4537-8fe4-4620e2491979",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d8eea32c-4702-4009-9200-06416995b512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d81d0e-2718-4bd2-b3fa-1206f8b2601e",
        "cursor": {
          "ref": "057ef1ab-d806-40e7-8b90-45624900d44a",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fd88bfaf-7244-4719-90a3-e7c0cadd0175"
        },
        "item": {
          "id": "71d81d0e-2718-4bd2-b3fa-1206f8b2601e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5378d8ca-1ab6-42e1-bd69-219eb1dfccf6",
          "status": "Created",
          "code": 201,
          "responseTime": 9941,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d4b507aa-ccbd-416d-8bd4-f66f01366ecc",
        "cursor": {
          "ref": "e4cb0d15-fb23-4297-9646-61cf084bcbc8",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "24df6abd-ffa6-42ec-bec5-6f436e479d4c"
        },
        "item": {
          "id": "d4b507aa-ccbd-416d-8bd4-f66f01366ecc",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3a2a3de1-c000-4ddf-a6cc-82c3310c1d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e6188f-665d-4d40-a8e4-0a1da320d6a2",
        "cursor": {
          "ref": "66909b03-91ae-4a86-8f34-bd7f70c9e677",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c5b4f6cf-caff-4e85-9a71-3809ac2aeba2"
        },
        "item": {
          "id": "e1e6188f-665d-4d40-a8e4-0a1da320d6a2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d87c6ad2-65c2-4d3a-a350-05834ce7c3d6",
          "status": "Created",
          "code": 201,
          "responseTime": 3974,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9abf5294-8ea5-4b9e-ac76-854f2929faf2",
        "cursor": {
          "ref": "d8af07d7-649b-404f-ac55-2ddbb0b81647",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "21f9cedf-8e9e-4bfc-a5ce-ff317140a0a8"
        },
        "item": {
          "id": "9abf5294-8ea5-4b9e-ac76-854f2929faf2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1af80322-c673-414e-8f4c-03e166527b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff43eb9-7f48-4e25-977a-17dfe4eacaec",
        "cursor": {
          "ref": "767a1e51-ce1e-40a9-8eae-9534aec85108",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c9055538-c747-42bf-b35d-be78fda86649"
        },
        "item": {
          "id": "bff43eb9-7f48-4e25-977a-17dfe4eacaec",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9ef9bcfb-d104-4b6a-bd0e-e2c73856ce28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dae995-9a15-4a28-93c7-a8b1b01eae1d",
        "cursor": {
          "ref": "a4c22796-3868-4f32-9555-32800a269dde",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e5b68575-146e-44e3-9c27-52e4fb8991e6"
        },
        "item": {
          "id": "08dae995-9a15-4a28-93c7-a8b1b01eae1d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "078029eb-57d3-4b89-96c5-37753c1e1d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8648af-d268-4b11-b7c3-7df9ce78df87",
        "cursor": {
          "ref": "9c658bb8-de44-43b3-b842-fffc99bcfbcf",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cca3e74f-5e30-4f81-832a-307d15e984d7"
        },
        "item": {
          "id": "ff8648af-d268-4b11-b7c3-7df9ce78df87",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cb7e6781-384e-4e17-8954-68cfd3090b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d18635f-1e92-43a3-b8cc-5f2079ab0a42",
        "cursor": {
          "ref": "b8216064-a508-4a97-8ab2-187f80f2c556",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a2b72a37-5ae2-4e7c-a8d4-b77b8e29e24c"
        },
        "item": {
          "id": "3d18635f-1e92-43a3-b8cc-5f2079ab0a42",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "80958c02-eef0-47e0-8567-956c87898fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975b1780-edaf-4cdd-89be-ce5f6980913d",
        "cursor": {
          "ref": "424d8428-c20a-4925-98ab-be038858b33a",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "11032b19-154c-4208-a60b-1b1d753619a1"
        },
        "item": {
          "id": "975b1780-edaf-4cdd-89be-ce5f6980913d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f5963cef-a53f-461b-bac2-5eba4f7d9ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6485efc7-7195-4d83-89da-dc2a02facbc9",
        "cursor": {
          "ref": "2e106cce-53dc-4f3e-8d9f-d299a8344fb7",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "dbdc4700-bac9-4a16-bb00-93d1f1649ed3"
        },
        "item": {
          "id": "6485efc7-7195-4d83-89da-dc2a02facbc9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "337b8bc9-6452-4ab1-a840-9a22d95c4db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbde2888-e5f6-4a04-a452-43ed8fe4ece1",
        "cursor": {
          "ref": "7bf66d34-e289-449b-97b7-db797dbaaa9b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cc93843a-c6c3-4a93-b29a-068cfff42d8d"
        },
        "item": {
          "id": "bbde2888-e5f6-4a04-a452-43ed8fe4ece1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1ee163b5-8159-4b72-8f59-55d20e00c50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92aa897c-0fbc-4f0f-8f25-3399ad0617df",
        "cursor": {
          "ref": "26ace07d-0e5b-4834-9537-ff2b5c9fcdf6",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b5c2b421-5eea-4430-a4c7-49928346e6f3"
        },
        "item": {
          "id": "92aa897c-0fbc-4f0f-8f25-3399ad0617df",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "aaf0656b-d24d-4774-b3e8-dd82a2ad443d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ddd1fe-1cfa-4975-97db-32d84b11586c",
        "cursor": {
          "ref": "860eb538-3b13-4dd0-bfee-a6adc9ae0d4f",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "20e3dbe9-b77d-4a43-8ac8-9ef7a4d346cf"
        },
        "item": {
          "id": "a3ddd1fe-1cfa-4975-97db-32d84b11586c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "155cffbe-359f-4caf-9190-fb360f88ed22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00989fe-5fed-4496-a6ad-235e5a580470",
        "cursor": {
          "ref": "471d7009-120b-4c5e-b7ec-102025b3fb02",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fa6e2764-67ec-49ad-98b7-e36219c58f1a"
        },
        "item": {
          "id": "b00989fe-5fed-4496-a6ad-235e5a580470",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "317039ea-fc00-416e-9cb8-bf84243fa2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2635f3d5-d8e9-4c13-9a23-d03d4091644e",
        "cursor": {
          "ref": "91f5c16b-087d-418f-824a-09b2a6f67616",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0c17a90f-d5c4-44e2-81cd-0962b191201c"
        },
        "item": {
          "id": "2635f3d5-d8e9-4c13-9a23-d03d4091644e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ca57365a-4dab-4672-8ef1-c0f9ec3983e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2568ea99-b866-4226-a04a-79b0fb07fb72",
        "cursor": {
          "ref": "a3e452a1-0f29-4863-bbab-5d44e712790e",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "93bbb869-6d3e-4b48-9f89-fddd7836bab6"
        },
        "item": {
          "id": "2568ea99-b866-4226-a04a-79b0fb07fb72",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f15f6d6d-37f1-4f8a-ac97-9cf9219d8448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81bb4cab-4131-4bd9-8262-15fdb1bbbd51",
        "cursor": {
          "ref": "9b443480-3dbc-41f0-9ddf-816d4b9fdd81",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0b310b5f-6b04-4d7e-953b-543de7649728"
        },
        "item": {
          "id": "81bb4cab-4131-4bd9-8262-15fdb1bbbd51",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2ac91b5f-5725-4fe3-b45e-fc97f35ec411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ba06bd-1c6a-4f32-a2ff-c5cc8be0f286",
        "cursor": {
          "ref": "8cc51239-81ba-401c-adc7-f719ac571618",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ab51cceb-f708-4e7f-a7d4-2b9087f6b020"
        },
        "item": {
          "id": "c6ba06bd-1c6a-4f32-a2ff-c5cc8be0f286",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "83090e1d-8f56-4e8d-ae69-3dd28d765e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e274be-ecfe-4632-97be-e2454f6b3508",
        "cursor": {
          "ref": "f67cfb95-31a6-451c-80a1-8c7a5b8868d0",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a5688993-4a5c-498c-84f3-6e39cf361410"
        },
        "item": {
          "id": "08e274be-ecfe-4632-97be-e2454f6b3508",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bc536a17-f8c6-4338-a719-6821ecc601f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8131c6fd-c329-47b1-8075-bde924d64e8e",
        "cursor": {
          "ref": "9ffc1619-f05a-44f2-a433-8ee052cc2b2b",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4843259e-81b1-4b1f-bfb9-3be85a8f769e"
        },
        "item": {
          "id": "8131c6fd-c329-47b1-8075-bde924d64e8e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "69c8baec-64a2-4929-9228-970a3efc01ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e48aedb-391c-4417-8cf3-d33b6b45e816",
        "cursor": {
          "ref": "07a8ffbe-77a2-4b5b-a2b7-e2dc8ce4a0a2",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a14bb1bf-96b1-4e02-8d2d-3fd73f3688ab"
        },
        "item": {
          "id": "5e48aedb-391c-4417-8cf3-d33b6b45e816",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9a2799d2-c905-4eaf-bfb1-1e7918290a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04b1977-5aac-437c-9fa0-1e2647209fcf",
        "cursor": {
          "ref": "4518f018-7974-4ff6-8d53-e9cddf8593b2",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ffa399e9-11c5-4c73-a075-4c44c6282c6e"
        },
        "item": {
          "id": "a04b1977-5aac-437c-9fa0-1e2647209fcf",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a018378d-56e2-42e5-9378-b7107825543c",
          "status": "Created",
          "code": 201,
          "responseTime": 2609,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9f41eb0e-f579-4440-aacd-8a9a5a4919ee",
        "cursor": {
          "ref": "db2f218c-ac89-4c08-bf9b-a0cc3b267c02",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6f057de4-f073-48bc-8db1-394b2c50e7ca"
        },
        "item": {
          "id": "9f41eb0e-f579-4440-aacd-8a9a5a4919ee",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e5ecea05-d195-4033-b7ee-470ad831816d",
          "status": "Created",
          "code": 201,
          "responseTime": 2365,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0f9421d1-3d6b-428d-ac10-a1004a7ad445",
        "cursor": {
          "ref": "bf128c34-0042-455b-8254-99be8d7009ce",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6b605d65-670d-4278-b030-41873b4249e6"
        },
        "item": {
          "id": "0f9421d1-3d6b-428d-ac10-a1004a7ad445",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "78c3fd4f-4475-4b0d-a330-2a3398fd2926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141773cc-25fa-4a40-962e-2a85117b7b5a",
        "cursor": {
          "ref": "e483b4d2-c7df-4112-8112-be73efee67dc",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "eb471d74-a51e-4e31-a6ba-74198eeea4c2"
        },
        "item": {
          "id": "141773cc-25fa-4a40-962e-2a85117b7b5a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7cde236d-48e4-4485-978c-9d2428ee15bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf857b93-5e17-4d79-853a-2102ab7ddbba",
        "cursor": {
          "ref": "1917b827-f4f2-4d3f-9896-683daccedd28",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cea2b8da-3697-4dc3-a204-ec7e4820d767"
        },
        "item": {
          "id": "bf857b93-5e17-4d79-853a-2102ab7ddbba",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9f3c2e82-cd91-4732-be38-0aa320a3a586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 573,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb34ceb-6875-4a00-a470-1363d9bdd720",
        "cursor": {
          "ref": "228ddc93-1461-4c3b-8177-53a1b4e35294",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f99e4e23-3e5d-44ea-9099-6663cc71ecab"
        },
        "item": {
          "id": "1fb34ceb-6875-4a00-a470-1363d9bdd720",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "61516d0b-f2e9-4456-841d-177afefcb5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f11c256-ac78-4184-a875-bfeed063d868",
        "cursor": {
          "ref": "8ee261d3-0a8a-4a11-88db-68366f62d968",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2a0ce94d-f5e3-4376-b266-8d831d55bb90"
        },
        "item": {
          "id": "3f11c256-ac78-4184-a875-bfeed063d868",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9a9bde4d-1751-4571-8c32-ccc4fba18694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef5bcae-19dc-4b35-a948-0e3352bb68ad",
        "cursor": {
          "ref": "e3c27a1a-d4dd-453b-96a0-390f5fbcf210",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6e4110b5-a2eb-4e6e-97b4-92ef8b3e0329"
        },
        "item": {
          "id": "1ef5bcae-19dc-4b35-a948-0e3352bb68ad",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "df776e30-4408-4a49-86ce-bfe857ccaa06",
          "status": "Created",
          "code": 201,
          "responseTime": 2565,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0aae379d-05f7-45b7-bf50-1aac15c18c0f",
        "cursor": {
          "ref": "569aafc6-7187-4126-a973-3e628edd284a",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "95764520-1f8b-4c8c-98d8-345f59cdf374"
        },
        "item": {
          "id": "0aae379d-05f7-45b7-bf50-1aac15c18c0f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dd361281-59ea-4849-8a20-1df2f09a3dba",
          "status": "Created",
          "code": 201,
          "responseTime": 3065,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "bdaafea1-7b75-492e-b6bb-70891f72784d",
        "cursor": {
          "ref": "fb948592-83c1-409b-8b43-163bc362cfc8",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "116b7137-48d9-4c5b-b937-d9c3b3e833f5"
        },
        "item": {
          "id": "bdaafea1-7b75-492e-b6bb-70891f72784d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ea3b6df2-ba1a-4ed2-8e5b-48235536b2af",
          "status": "Created",
          "code": 201,
          "responseTime": 3952,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "cd52f8f0-2990-4668-bc84-3d3fc6d6e5aa",
        "cursor": {
          "ref": "8ae1b569-bffd-4758-94d9-c7fc2163bbb5",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e9901973-cf4e-4527-a084-325c063d83a5"
        },
        "item": {
          "id": "cd52f8f0-2990-4668-bc84-3d3fc6d6e5aa",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "cca38c80-a91d-4cb6-981d-4cab72a37f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea81441-e20b-456c-a949-e378b8be2316",
        "cursor": {
          "ref": "ae40113f-d7f1-4dba-8484-751016370585",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e4090f36-2b32-438a-9608-404902893583"
        },
        "item": {
          "id": "2ea81441-e20b-456c-a949-e378b8be2316",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "38c15507-4fb5-4735-956f-6494fd87f2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b01b9ea-9b99-46e8-84ea-e1d15e1ab62a",
        "cursor": {
          "ref": "6e18f6ca-0b1a-4a42-aced-ff9fedd6b68c",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b14d24bd-1106-4abf-9ea7-22517723486d"
        },
        "item": {
          "id": "6b01b9ea-9b99-46e8-84ea-e1d15e1ab62a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "99b2fe89-77e8-4b95-ad6a-1be9bb570c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c3e628-1a52-4d2d-ae53-18af5d372af4",
        "cursor": {
          "ref": "471001a5-496a-426a-92b1-28fbdee50335",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3fa843a4-aa81-4d7a-a2b6-96f9248f8310"
        },
        "item": {
          "id": "92c3e628-1a52-4d2d-ae53-18af5d372af4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1f2fdae2-67aa-49af-b185-c78ac9a84018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95fc8744-57cd-4624-b7a1-ebedb2f412c8",
        "cursor": {
          "ref": "a1112d5c-da39-4608-80c2-07f9b37cf66c",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "80f6d4e2-b2e6-4b5e-8d99-684340962f38"
        },
        "item": {
          "id": "95fc8744-57cd-4624-b7a1-ebedb2f412c8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "167c1b87-0fd8-4572-abb6-23c855cbcce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96503e0-bac2-48ef-9b4d-2c4b293c1dfd",
        "cursor": {
          "ref": "3b0386ab-a127-42a9-8e96-1a6ba2ce230e",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fe2281fc-362b-4cef-8c20-f2e718c6d0d5"
        },
        "item": {
          "id": "a96503e0-bac2-48ef-9b4d-2c4b293c1dfd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c984b523-bd79-4872-afbd-05b5eeb54f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6f67f8-b00e-4561-895a-0f4bc3ae21c6",
        "cursor": {
          "ref": "a2e9a737-88b3-413f-96f7-6ab43c2d03da",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c412e354-5a83-4a85-afc1-bfd25b5cf46d"
        },
        "item": {
          "id": "7b6f67f8-b00e-4561-895a-0f4bc3ae21c6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a2cd5ee5-661e-49d8-af8c-29f18cd5b7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263ea1cf-2b8a-4f94-aa9c-4fc1c1ef2025",
        "cursor": {
          "ref": "ddc7ac3b-b029-47df-9dac-6cd774c9be80",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b163b65e-eaa3-4cc4-b206-f072140c061e"
        },
        "item": {
          "id": "263ea1cf-2b8a-4f94-aa9c-4fc1c1ef2025",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "eec3b524-4fc0-4668-ae46-b4cdb3d66f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a9ff83-c3f3-4725-a064-fa7c3323349f",
        "cursor": {
          "ref": "129e6528-4260-452c-9577-9c38d5f1a606",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "987461cd-639d-49c2-9d55-feae68c11f4b"
        },
        "item": {
          "id": "43a9ff83-c3f3-4725-a064-fa7c3323349f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8f5c4be3-7d6f-401a-b38a-08325d58fc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843935d9-c36a-4ebe-bde3-619202b4d379",
        "cursor": {
          "ref": "58a0dc5f-2151-42ca-9d4b-f4fac2661fab",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3069ea06-a4e3-4f27-b430-55afac7cf1cb"
        },
        "item": {
          "id": "843935d9-c36a-4ebe-bde3-619202b4d379",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6379e974-1460-4721-8d9e-ad2ea346a075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c778fd76-6cae-44e7-af5f-04383f6a85fc",
        "cursor": {
          "ref": "3dfc5319-aee2-4d2c-a133-c5be92701f7c",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c407134f-33b2-4f9d-a18c-eb2f4ad3e301"
        },
        "item": {
          "id": "c778fd76-6cae-44e7-af5f-04383f6a85fc",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c1f96af0-5335-42fe-b746-5a3d3a25bc0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4640e764-ab23-494a-b885-998f5b418572",
        "cursor": {
          "ref": "120c0b06-7678-4d4d-9ade-f9a81f17f6fc",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4ecc6ce4-3bbf-49bf-8bbd-a30f85ca7b29"
        },
        "item": {
          "id": "4640e764-ab23-494a-b885-998f5b418572",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "41442ca5-d99d-4013-9182-e1b394d861cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b638d0-0641-41cd-a11d-7f1bc54536af",
        "cursor": {
          "ref": "cb6d1e71-bae5-4192-9b48-3758ce350778",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "998400e0-fdf3-4d10-8d7e-f7a8808bd23c"
        },
        "item": {
          "id": "80b638d0-0641-41cd-a11d-7f1bc54536af",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "74688758-4935-428c-aac6-936d71208028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6818d06e-7e24-473b-bc2a-7b8ccb82b35a",
        "cursor": {
          "ref": "14d5ab43-1eb6-4ff2-8b04-283648f4d968",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4f31b8f6-3939-417f-b36b-7416ec4e4aed"
        },
        "item": {
          "id": "6818d06e-7e24-473b-bc2a-7b8ccb82b35a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "76713434-11e0-4a88-84a4-990169d6afdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bf5e52-c4d2-457d-b7f9-d17764492ca0",
        "cursor": {
          "ref": "b1fc1d2c-8b5f-48c0-8555-0e041df14f8d",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "040d8aad-480a-449e-84f9-2ee6802da9ca"
        },
        "item": {
          "id": "f9bf5e52-c4d2-457d-b7f9-d17764492ca0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4d0a6e13-eac4-4453-b158-5b56c8a6f346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33be39f-4a64-49c3-b939-90e9ce517daa",
        "cursor": {
          "ref": "9c5c7333-229a-439e-92a0-21e238dbff91",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cff2ec79-604a-4932-986d-d35dd543fe82"
        },
        "item": {
          "id": "d33be39f-4a64-49c3-b939-90e9ce517daa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b4d3b8fa-e498-4834-8e92-1980071ad252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accd87cd-1c0e-4093-94b2-d9be2c7ddb34",
        "cursor": {
          "ref": "bd889471-d874-4631-82b6-199a9dd7751c",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d9203d12-291e-468f-9351-a0d208a0f1ff"
        },
        "item": {
          "id": "accd87cd-1c0e-4093-94b2-d9be2c7ddb34",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "af654767-5028-41cd-bea4-2f17ceed7b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762c6745-4320-4380-80ed-ee8094c9e505",
        "cursor": {
          "ref": "ff2b2c8c-7426-4493-8545-5a0661e68b47",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7844a4ed-158a-4410-99ec-e3b9372b8135"
        },
        "item": {
          "id": "762c6745-4320-4380-80ed-ee8094c9e505",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "624958dc-5cc1-4651-b13d-8656d2fc4f28",
          "status": "Created",
          "code": 201,
          "responseTime": 4898,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "9dabcc6e-11b4-479a-9b99-7ac1b598068b",
        "cursor": {
          "ref": "2a4fff4a-10fd-45ae-96fb-334ff8002a7c",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a2ff3cf2-7c12-429b-b946-1955e80fbee5"
        },
        "item": {
          "id": "9dabcc6e-11b4-479a-9b99-7ac1b598068b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1956fbfc-8aab-48a3-acec-2238cfa6e0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca933cf-4a70-4c3b-b12c-cf4a09c68d35",
        "cursor": {
          "ref": "506e7442-de1b-4823-a715-b778d4c8cad9",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "88f0bbdb-c958-421b-8197-a2924865ce8d"
        },
        "item": {
          "id": "7ca933cf-4a70-4c3b-b12c-cf4a09c68d35",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "48b2bf44-21c7-490a-a918-8ad01a7e3e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d083468-3168-4bcd-9db9-6b27563c8500",
        "cursor": {
          "ref": "ebd15323-e85e-44e7-81dc-de1800786491",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "27a40796-b26b-4315-b8b2-c74100a96cb6"
        },
        "item": {
          "id": "2d083468-3168-4bcd-9db9-6b27563c8500",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0a1f3767-7f67-432c-8498-89a6d4e12410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50468c6-b75f-4e44-acbb-85118655fee3",
        "cursor": {
          "ref": "2976548e-3136-402c-85fd-b2c3c8ed891f",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6b909676-c874-4945-a2e3-c42df3688045"
        },
        "item": {
          "id": "e50468c6-b75f-4e44-acbb-85118655fee3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e55fa1b5-7037-4b13-8579-951f723bc266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09b5077-2990-4884-8ea7-fdd1caa66bcb",
        "cursor": {
          "ref": "abbdbd05-4be6-4d34-80ed-d9fa9d877c25",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2a089c40-b1eb-4132-acc6-d2af2618fdf2"
        },
        "item": {
          "id": "a09b5077-2990-4884-8ea7-fdd1caa66bcb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e3bb4036-63f8-4751-9f3e-8019e5465814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d207af50-12b0-4d37-8d17-5368b2e5fa92",
        "cursor": {
          "ref": "ed9eceeb-3467-4112-98a3-b111732a7728",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3a3b6995-5dae-4977-b1c8-fbb12b92a887"
        },
        "item": {
          "id": "d207af50-12b0-4d37-8d17-5368b2e5fa92",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "60427563-694e-4ede-870f-5752d9b049eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676e2cf1-adcb-4262-9503-252cf3af6b5a",
        "cursor": {
          "ref": "67b2a9d8-51f6-4b40-9a96-6d07cec05a46",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d9e024d7-0d1b-4b4c-a2d4-6c298dcf8e91"
        },
        "item": {
          "id": "676e2cf1-adcb-4262-9503-252cf3af6b5a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "68801a89-2b7c-4b80-94b9-b82210a24a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51633424-7efa-4058-b8d9-ce094bd5bdb0",
        "cursor": {
          "ref": "2eec1f51-7125-458a-9bf7-153d9d0cf1c9",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8f864b07-4c3b-4a0e-abbd-449aa64d2de3"
        },
        "item": {
          "id": "51633424-7efa-4058-b8d9-ce094bd5bdb0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9cb2cc6d-7f87-4f81-937d-11996bf3c5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d0c77d-2200-44a8-ba8e-3331e12494ad",
        "cursor": {
          "ref": "801f4757-70eb-4b48-a5b2-a949b2b7d997",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b1c3b033-399f-4cbd-934d-6ce833604b82"
        },
        "item": {
          "id": "a2d0c77d-2200-44a8-ba8e-3331e12494ad",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fc4c7e5b-73e5-40cb-b773-1dfee110c7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52bc341-2581-4a50-995e-9288948fb8db",
        "cursor": {
          "ref": "d150dc66-dc89-4067-80d9-51860367c97b",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "23a39391-1894-4239-853b-861345226f44"
        },
        "item": {
          "id": "a52bc341-2581-4a50-995e-9288948fb8db",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "870bcca5-3c3a-49a2-8540-88d470c95e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173644dd-ca1f-4df3-8726-f9ff7f0899d4",
        "cursor": {
          "ref": "cd1f72ec-be9b-4e20-9d78-47cc1cd619a3",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "41caf487-ff15-43a7-92a5-3e03281c7129"
        },
        "item": {
          "id": "173644dd-ca1f-4df3-8726-f9ff7f0899d4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0fc7e34f-1f58-4eaf-ac16-5b6e98664f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85925b92-cf57-43d4-86d5-2fa24edf5fc5",
        "cursor": {
          "ref": "71e96a15-3d0a-4301-9968-8953e243e133",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ff21a26f-8275-4b68-94a6-20595bc96cfd"
        },
        "item": {
          "id": "85925b92-cf57-43d4-86d5-2fa24edf5fc5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9a44d9e7-26e6-41d9-a944-c995f0cb6622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2dfd99-fae6-4dc0-a135-d46848e393b0",
        "cursor": {
          "ref": "419891ba-395e-4240-95b3-3605d71cf06f",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "19861fa3-0c6e-4815-9c0f-92157151f55e"
        },
        "item": {
          "id": "5b2dfd99-fae6-4dc0-a135-d46848e393b0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1762fee2-539d-476b-8176-9cc9c106aeed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7426b93-4ebc-4dfd-8a5b-3e0ea74c8120",
        "cursor": {
          "ref": "13718344-f888-4cf5-ae41-0073ee883e08",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c4ff6584-d15f-4732-aa56-6bf755739758"
        },
        "item": {
          "id": "d7426b93-4ebc-4dfd-8a5b-3e0ea74c8120",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c21f101c-4264-4dc6-ad96-2744e8118a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21580db0-9bda-46e3-9a1b-aaed61e0d822",
        "cursor": {
          "ref": "31444973-ca65-4f41-b676-e5de242ccfe9",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "74d33e31-5e87-437d-ac9c-a8d30eea7330"
        },
        "item": {
          "id": "21580db0-9bda-46e3-9a1b-aaed61e0d822",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "dd580a03-d4db-41e4-b5eb-40ce5f52c46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45aa602-5d9f-4d62-9af4-fd356a276674",
        "cursor": {
          "ref": "7404b845-487d-44d5-bf65-483f3f960566",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d2c1c2e6-a232-428c-9106-6e091bc61923"
        },
        "item": {
          "id": "d45aa602-5d9f-4d62-9af4-fd356a276674",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4d53b0f8-3f1e-450f-a0bf-acbb068552f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4b1673-8aee-4548-96ed-cc04481f302e",
        "cursor": {
          "ref": "c9997d98-01fa-40ae-9fd5-1a1526f40516",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cc0aae6a-5d9e-4445-b7c4-34f865b8c8db"
        },
        "item": {
          "id": "ff4b1673-8aee-4548-96ed-cc04481f302e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0561db97-8850-4750-8fa5-f5ae0baba455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2049e0-c508-42cf-9c50-100f95f4b5dd",
        "cursor": {
          "ref": "332ad087-6577-44c2-b630-00c7d8addb40",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "41fe10f6-b00a-4a1c-96b1-b18890fffa34"
        },
        "item": {
          "id": "7a2049e0-c508-42cf-9c50-100f95f4b5dd",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "581b6c7b-9b5e-4301-bcc0-e34ba5665670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b298ea8-9892-4009-910b-c1798036b7fc",
        "cursor": {
          "ref": "34a78b2d-2637-40ed-998a-c5e6250d2bb5",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a5983cff-6f94-482c-9e60-8c86482604ae"
        },
        "item": {
          "id": "5b298ea8-9892-4009-910b-c1798036b7fc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "698c1efe-6158-4995-8207-68f43ee1c9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7688db-2c38-4741-8937-0297c6af5a12",
        "cursor": {
          "ref": "b009afd5-4008-4804-8d98-a67a81fc54f8",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cca97837-4862-426a-be56-4f3ebb833eb9"
        },
        "item": {
          "id": "5d7688db-2c38-4741-8937-0297c6af5a12",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bc9c0a7e-fe32-4127-a2ae-83443f30c759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964c6cdc-2ee3-457a-8ac4-9d856cc62036",
        "cursor": {
          "ref": "5e82e2d0-dc84-4e64-90bb-c4f151623dc6",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a8daaa64-c680-48cb-b5bb-54f5c3b16a63"
        },
        "item": {
          "id": "964c6cdc-2ee3-457a-8ac4-9d856cc62036",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9c9e51c5-d269-47d5-b50e-30fcca629ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c05fcd-1da8-47ad-8d7f-3470a5949e2d",
        "cursor": {
          "ref": "9ab95588-d695-4b53-96ed-bf9f307f367d",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e927790f-60ab-4ee5-8524-20630ae9dfd5"
        },
        "item": {
          "id": "b9c05fcd-1da8-47ad-8d7f-3470a5949e2d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f8133f6d-516e-48df-8a88-88e92f00c1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6684b78c-1a89-45fd-888d-ac427c521c32",
        "cursor": {
          "ref": "e07b6431-8030-44c0-b209-34a8ad46b68f",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6e4db7fe-7119-4e7f-a3f4-2e2ce0841370"
        },
        "item": {
          "id": "6684b78c-1a89-45fd-888d-ac427c521c32",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1f48ae7b-8d15-4ffa-9f40-4077b21debd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c8c5ea-326d-49b4-b1ea-7c51f558f3fb",
        "cursor": {
          "ref": "f07d6e13-0ec3-46bf-8d36-a5d585031387",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "37480e81-ea98-4bff-9922-113af2f5f741"
        },
        "item": {
          "id": "c9c8c5ea-326d-49b4-b1ea-7c51f558f3fb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ed3086dd-152d-4fe1-8d42-2de1288fb73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be9c8f3-864b-4631-adae-0e49e500cedf",
        "cursor": {
          "ref": "f6083a76-344d-4bec-838c-2b9c4adbe823",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "272a63ee-1cf6-4383-b38d-7851fb0f44ac"
        },
        "item": {
          "id": "8be9c8f3-864b-4631-adae-0e49e500cedf",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "71a24ff9-f9a3-4233-b783-5a7243170208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79122b05-fdf3-4546-a884-1a7b0c768f3c",
        "cursor": {
          "ref": "dfb82c3c-c4ce-4178-a507-b7c500784438",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ffd2324a-a0c9-4807-a91b-802da8ee0ed8"
        },
        "item": {
          "id": "79122b05-fdf3-4546-a884-1a7b0c768f3c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cacab0dd-98ac-4fa2-8c79-448562e5704f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8385e036-62c6-4b50-9a28-a24bb20ccd15",
        "cursor": {
          "ref": "e287564d-8c1f-47d9-9933-6845f99fbb0a",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "aec97695-ab09-4446-ba61-e8469b4bf3d7"
        },
        "item": {
          "id": "8385e036-62c6-4b50-9a28-a24bb20ccd15",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "02d1da8b-80e5-49c7-af87-b779703fd900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a80a46-4085-4583-ab4d-3c7a24b3b110",
        "cursor": {
          "ref": "6d4a31f5-24a9-41b5-b091-617c1c9a06c5",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "39ccb39c-daa7-4820-8bed-d5a653d3ac4f"
        },
        "item": {
          "id": "87a80a46-4085-4583-ab4d-3c7a24b3b110",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d5fef913-f613-4b45-9c81-317d9239f826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbb6a6a-f566-426b-80d1-5ff3e451491a",
        "cursor": {
          "ref": "8775f6dd-bcf1-4a6e-a74c-2cb6d9f94865",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "02136e99-0550-45e4-9689-f6350401730a"
        },
        "item": {
          "id": "edbb6a6a-f566-426b-80d1-5ff3e451491a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b687d00b-d405-488b-ab3a-82ebd2e54c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fe974c-4580-48f5-8ad7-b01b84ef8264",
        "cursor": {
          "ref": "7a83953a-af19-454d-875c-0020ffda3e7c",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2210ecdc-d78a-4285-87ff-b7040464060b"
        },
        "item": {
          "id": "80fe974c-4580-48f5-8ad7-b01b84ef8264",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2eb1db9a-a1f7-4517-a90f-e814fb250095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c2cd50-c8b3-42fb-9305-fd56dd73a9c0",
        "cursor": {
          "ref": "d5ce8f9a-c327-4df4-b8b4-4eefb2a0a013",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f9c7d8e9-f724-4729-8b82-09b72c37836b"
        },
        "item": {
          "id": "35c2cd50-c8b3-42fb-9305-fd56dd73a9c0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d90bb2b6-f754-4ec7-86ec-fe7f65c15fb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "b331c439-fd0b-468c-a81f-9500b8b971b8",
        "cursor": {
          "ref": "0940ab90-56fb-488d-9be7-20fd16c9b174",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "aa2c2345-b497-4b69-89ef-8376a37e870c"
        },
        "item": {
          "id": "b331c439-fd0b-468c-a81f-9500b8b971b8",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1d3a9150-f140-4211-b1b2-5a27adec438a",
          "status": "Created",
          "code": 201,
          "responseTime": 1884,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "431805fb-22fc-49db-8478-5f8b19f3f701",
        "cursor": {
          "ref": "abfb6eda-baa7-459f-a4bd-b367db9f7ade",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "355bf190-abf2-408f-803f-fb71dc563a67"
        },
        "item": {
          "id": "431805fb-22fc-49db-8478-5f8b19f3f701",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cb20bade-42ec-4b77-bc62-001dfa4be56c",
          "status": "Created",
          "code": 201,
          "responseTime": 2764,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c60c861-611a-4684-9c90-a9a614bdf8c9",
        "cursor": {
          "ref": "43772438-c228-43d3-be6c-c7d45d4edeb0",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4ed72923-0a2e-433d-911e-c9e31a3aa71c"
        },
        "item": {
          "id": "5c60c861-611a-4684-9c90-a9a614bdf8c9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d2489a82-60a1-4b5d-af90-a2f2f0423e75",
          "status": "Created",
          "code": 201,
          "responseTime": 2578,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e153684-36ef-4454-a47c-9ccbcfbc8521",
        "cursor": {
          "ref": "2ef927f0-9d3c-48d7-8d7a-ac48368f4ce4",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "504fc683-e1b8-4e03-9e4a-52281509fff2"
        },
        "item": {
          "id": "8e153684-36ef-4454-a47c-9ccbcfbc8521",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b45eb289-0771-4014-bf81-dda5c56d949a",
          "status": "Created",
          "code": 201,
          "responseTime": 2863,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f0a33f-a105-45d3-b462-3dcded388390",
        "cursor": {
          "ref": "0532d1f8-dc23-4b70-ae72-634ff8b5d6e7",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "61fd45fd-0588-4c23-ad6d-d94b9ecb8196"
        },
        "item": {
          "id": "b1f0a33f-a105-45d3-b462-3dcded388390",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "053861e9-5635-45f2-86d3-a7dfc30ea12a",
          "status": "Created",
          "code": 201,
          "responseTime": 2417,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "59445441-aadf-4fa6-85d7-3dc4c6d85e5b",
        "cursor": {
          "ref": "48a46b4a-bc0e-43b4-bd05-0abc53c1f616",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1e654c02-5856-4332-bc93-4d8c4f359450"
        },
        "item": {
          "id": "59445441-aadf-4fa6-85d7-3dc4c6d85e5b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "83fd0ca8-d952-4a84-ad5a-afbf7f419d75",
          "status": "Created",
          "code": 201,
          "responseTime": 2739,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-26T00:38:21Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-26T00:38:21Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "ee15ad58-0e14-4e0e-b9a5-db4b0bb0cd47",
        "cursor": {
          "ref": "08f08dff-6c37-45e1-bd8b-15af0f3573a9",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1f6916e0-0e30-4972-9cb1-e69e7489b3da"
        },
        "item": {
          "id": "ee15ad58-0e14-4e0e-b9a5-db4b0bb0cd47",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a95cb0aa-f61f-4bd0-8741-0355f2901630",
          "status": "Created",
          "code": 201,
          "responseTime": 2064,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43656f44-4882-491e-8574-9444b35d3cf4",
        "cursor": {
          "ref": "100c1a0b-5f81-4f71-8da0-273874fa0783",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "57484f64-32ce-4cea-b3b4-bc2ef7164f48"
        },
        "item": {
          "id": "43656f44-4882-491e-8574-9444b35d3cf4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c8d1801a-0761-4797-9e92-7e971fc0564a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43656f44-4882-491e-8574-9444b35d3cf4",
        "cursor": {
          "ref": "100c1a0b-5f81-4f71-8da0-273874fa0783",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "57484f64-32ce-4cea-b3b4-bc2ef7164f48"
        },
        "item": {
          "id": "43656f44-4882-491e-8574-9444b35d3cf4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c8d1801a-0761-4797-9e92-7e971fc0564a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2be769-7fa3-4717-9eda-efe124fa0d16",
        "cursor": {
          "ref": "420c2ebc-347c-4991-beb8-34c49250cfb0",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a44889f4-57f0-4cc9-a609-3ab28a30cf4f"
        },
        "item": {
          "id": "1e2be769-7fa3-4717-9eda-efe124fa0d16",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1852a8fe-99f2-44e6-8bbe-aa10986be76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445fe6f3-d136-4c6e-8e7f-3ff84261cb7d",
        "cursor": {
          "ref": "496b34aa-4abe-4baa-81f0-3bf5e2d9f8df",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ba52d720-2add-4ca3-a661-76a76bb29e86"
        },
        "item": {
          "id": "445fe6f3-d136-4c6e-8e7f-3ff84261cb7d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2996b8aa-7027-4ce9-b8c5-376be4d698b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4446464f-2b8b-45f5-b91e-ed9431d3e736",
        "cursor": {
          "ref": "9334edd4-e780-4696-b78a-9b6fab764a93",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3a45c6b9-66b1-460f-922c-6fa1dd3641a4"
        },
        "item": {
          "id": "4446464f-2b8b-45f5-b91e-ed9431d3e736",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7e2c562b-1cfb-4d8c-9e42-1f3f94f84d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346eb03d-3f93-4b4f-a87e-9b7a4813fa1d",
        "cursor": {
          "ref": "cb9b7c13-e23f-40ae-b2d6-c33ac5d28b88",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f244438a-5cfe-44a2-8acb-a906dd4b5461"
        },
        "item": {
          "id": "346eb03d-3f93-4b4f-a87e-9b7a4813fa1d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "03458a92-676a-47fc-81b7-d1da15392151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4abe2b-2ab4-4d90-abb4-6b41f2d6d188",
        "cursor": {
          "ref": "93d25817-16bd-49ee-be0f-d3375d2d0e7a",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0946abe0-1f1c-4b04-95b3-52c04cb04b65"
        },
        "item": {
          "id": "4a4abe2b-2ab4-4d90-abb4-6b41f2d6d188",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "eeab5b8d-78ac-4baa-a13c-267a8138bac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446f7313-9a8b-49d2-89c0-d7884f2ee1a1",
        "cursor": {
          "ref": "44966ab8-7c04-4463-8e41-3cc7984f80f0",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6b489247-19fa-4c97-87e0-84515f922f4f"
        },
        "item": {
          "id": "446f7313-9a8b-49d2-89c0-d7884f2ee1a1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7eb6f71b-c01f-49cd-bca2-e404f94d81c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47517a8a-275b-4015-8857-dcc6f8753c4e",
        "cursor": {
          "ref": "68c827a3-9459-404d-97f5-dc44c08b884b",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b5329235-5284-4f95-a76e-292d88ace0d4"
        },
        "item": {
          "id": "47517a8a-275b-4015-8857-dcc6f8753c4e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ec9f86e6-fde7-4c48-96ca-25f5f8a82c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7f3dbc-b033-448f-a912-55a8b4033609",
        "cursor": {
          "ref": "6f409d32-7b78-46ff-ae85-cfbd6478cc27",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "698b9dbc-8388-4a5a-add0-375b79bc27e3"
        },
        "item": {
          "id": "9b7f3dbc-b033-448f-a912-55a8b4033609",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "45927a4e-46f9-4438-92c7-a29d3f2c4095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d236c3-e4bc-4fff-8c3c-d6578e376650",
        "cursor": {
          "ref": "eb0c0592-8af1-49ee-aeb5-9fa1ff384b85",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "59c6e5b3-ca9a-4176-bb9d-8454d58b7e38"
        },
        "item": {
          "id": "47d236c3-e4bc-4fff-8c3c-d6578e376650",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "64a666c1-913d-4e85-bd90-a649067224f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f359ecc-6b93-4b37-93fb-5aec9d16b4cd",
        "cursor": {
          "ref": "ae17f243-22aa-456a-bd90-58ddfd258e04",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9793dc47-d3d8-41f6-b1c2-087bc4d64e5e"
        },
        "item": {
          "id": "6f359ecc-6b93-4b37-93fb-5aec9d16b4cd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3bd3f6f3-ad7e-4fd2-b557-074603d9ab70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7974f7a9-bdc0-4493-8bdc-5c84f279725e",
        "cursor": {
          "ref": "03e4b5d4-355a-4136-8834-94cb52f83019",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "19d8f717-8cc9-46d0-95f7-c3428c96564c"
        },
        "item": {
          "id": "7974f7a9-bdc0-4493-8bdc-5c84f279725e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2a76bc82-1e28-4620-bf3b-3516b89a9d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11582768-72d7-461f-ab25-c18734dd2840",
        "cursor": {
          "ref": "774ea009-c4ce-41b3-94b3-615dc065ad26",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0ecf96db-719a-4d82-9780-d2112fec0658"
        },
        "item": {
          "id": "11582768-72d7-461f-ab25-c18734dd2840",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4e59a2a0-8657-4deb-858a-2de9c82408fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1c5e93-c44e-4a5a-a7d1-49f2fb0ef70e",
        "cursor": {
          "ref": "7b13c140-0e8d-4892-9ae6-486ff884a49f",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ca6d4f1e-862f-4248-bf19-1a9ddcaf10d0"
        },
        "item": {
          "id": "3b1c5e93-c44e-4a5a-a7d1-49f2fb0ef70e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5b84657b-7aed-4504-8d22-13e0202c59df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a6f642-944e-407d-a60c-4a9069c3eb14",
        "cursor": {
          "ref": "0fe8185d-1c84-48af-9de9-f626c43163f6",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "af952b61-1fe5-4e35-a23e-dfe949ef3f8c"
        },
        "item": {
          "id": "83a6f642-944e-407d-a60c-4a9069c3eb14",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dc705614-0d3b-4c0d-acdf-072785fd82a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9384adc7-b853-4773-be20-4b5ab23add75",
        "cursor": {
          "ref": "c8d85443-4b66-4a88-9f8e-af453fbce41e",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "96bc6181-2ef4-4b84-9b65-6f6cda58ddaf"
        },
        "item": {
          "id": "9384adc7-b853-4773-be20-4b5ab23add75",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b732a238-e77a-4689-b05f-3d31754dafff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f922a443-7584-438b-8e56-e1e9a5954310",
        "cursor": {
          "ref": "a47b3d37-5e1b-4210-83c1-d2d76a67fc8b",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "fe206652-9b5c-44aa-8d65-0ab7d4ac21d6"
        },
        "item": {
          "id": "f922a443-7584-438b-8e56-e1e9a5954310",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5d97f275-a100-45ff-b5b6-dec932a3b090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd53775-396c-4117-8e0e-c845fbc77110",
        "cursor": {
          "ref": "f497ec8a-b3c8-45ab-8ca4-0d30bd7ad9c3",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "74921223-bf4f-44f3-96f5-eaff21b76bc7"
        },
        "item": {
          "id": "bdd53775-396c-4117-8e0e-c845fbc77110",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "187af30d-c42a-42b9-84f0-1aa368404a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3e9c8e-27e6-43b0-8446-429bc88a5a95",
        "cursor": {
          "ref": "f0d0f397-8b05-482a-9366-5eaaf420ab47",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b36ceb00-73d6-41fd-82fd-46d43eee83b9"
        },
        "item": {
          "id": "bf3e9c8e-27e6-43b0-8446-429bc88a5a95",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "93ac9d21-8027-46a6-b5ca-52cfd8f1ef93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff26e5ff-e851-44ca-93c6-7ab98314dde7",
        "cursor": {
          "ref": "2437bd06-0e2a-4ada-8f57-1c739524f64a",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4daee84c-c2c7-4d4f-b8d6-d451fa1b2175"
        },
        "item": {
          "id": "ff26e5ff-e851-44ca-93c6-7ab98314dde7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "10ae939d-f04a-4833-b7f3-e6275226a811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea36b55b-af97-48f0-b34d-6fba99df042b",
        "cursor": {
          "ref": "7339a6a9-f75d-4130-a15c-ede4c1d9e86f",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "26a3e660-97a9-42e1-bdb3-69463c86ae04"
        },
        "item": {
          "id": "ea36b55b-af97-48f0-b34d-6fba99df042b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dae22516-5846-4fd8-85ca-86c2e61c0aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3be7ba-df14-486c-a351-607709297abf",
        "cursor": {
          "ref": "de85ab0c-1ae1-48de-ae37-9c04db36cd6a",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8b67f10b-6ff7-43ea-a716-02d9edc4e4ec"
        },
        "item": {
          "id": "1d3be7ba-df14-486c-a351-607709297abf",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2b054986-839d-4afd-b49c-15056eda41ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba9b546-2e3d-4272-ba27-9bf79d1ace97",
        "cursor": {
          "ref": "fa10ed97-e69c-460d-a5b2-ee0329109e78",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5a9ab9c8-908e-41e3-970e-ff6b6cd7b9c6"
        },
        "item": {
          "id": "5ba9b546-2e3d-4272-ba27-9bf79d1ace97",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ecde89da-0018-4b43-93af-f7b8a08ab745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f81caa9-98fd-4ba2-8581-79ee117bb1a8",
        "cursor": {
          "ref": "38ed44d5-4046-42c3-8cb7-e97f1ed966bc",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "dd68efb9-3748-474f-a33c-073de854f749"
        },
        "item": {
          "id": "3f81caa9-98fd-4ba2-8581-79ee117bb1a8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1a575ccc-56e7-46d4-adfa-46ff6463ddac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe29afe9-0046-4faf-b0fe-4161206907a8",
        "cursor": {
          "ref": "3fedfebf-0f52-425c-8f1e-b8755c2caff9",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "92b489c7-0857-4b9b-9add-98a77aa9d4a0"
        },
        "item": {
          "id": "fe29afe9-0046-4faf-b0fe-4161206907a8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "38e13332-e9e6-4759-adb2-a66ab41a816c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a560785f-8508-44bf-ad2b-3d98b6165969",
        "cursor": {
          "ref": "210d2d06-461b-4189-923f-74a22428f932",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "10301558-4a4a-4522-9fa0-95268fa62f03"
        },
        "item": {
          "id": "a560785f-8508-44bf-ad2b-3d98b6165969",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "aaa5c791-0935-4438-bc6b-0abdd28fa49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770ba7f1-21cf-4deb-aff8-ea3141132e5c",
        "cursor": {
          "ref": "283d8600-9f09-4456-8d55-7242c7fb162f",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "721d7a42-f141-4176-a5ce-6feb83c17761"
        },
        "item": {
          "id": "770ba7f1-21cf-4deb-aff8-ea3141132e5c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "749f7a0a-f146-4cc8-8320-30710ed548e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0023f80-9d9f-487e-a934-bdea95f048ca",
        "cursor": {
          "ref": "66fa8b93-5dad-4f26-bd7f-7e024715c1fc",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d91dc566-9c08-4155-82e1-90d8bb1f0234"
        },
        "item": {
          "id": "d0023f80-9d9f-487e-a934-bdea95f048ca",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3a1ba99e-0d64-433e-9279-a16734dfb5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314498d5-a0f3-4380-99b5-cacc9a1dd5aa",
        "cursor": {
          "ref": "56d880f4-88b0-4538-be96-5ae31de430a6",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "142a30cc-f43c-4906-a132-66d8aeb12241"
        },
        "item": {
          "id": "314498d5-a0f3-4380-99b5-cacc9a1dd5aa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6ba75565-9997-4465-a209-19dc339106bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59c1033-7a83-40d7-bccf-ba0032d9e111",
        "cursor": {
          "ref": "878bb2a0-154a-4e94-82f4-ee6479981a26",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "88fd6fa0-1a0c-4c48-9923-ef70272a62ef"
        },
        "item": {
          "id": "e59c1033-7a83-40d7-bccf-ba0032d9e111",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9856d6ab-2765-4d3f-b52f-250f4b6f8f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2ea8f2-2cf5-4c34-94e8-ed6053a54b73",
        "cursor": {
          "ref": "9185e048-0614-4ff7-919b-4225739fb23d",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "97118f59-3e6b-4ab4-9437-64a56e18cb15"
        },
        "item": {
          "id": "8d2ea8f2-2cf5-4c34-94e8-ed6053a54b73",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c123cb04-8597-430b-b0a5-967fce0db8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adff5712-e410-451a-a8c4-5b9a4d342f62",
        "cursor": {
          "ref": "48d7732f-818d-467f-ba17-4bbc9c74f589",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "426c1def-2db8-4e3c-9da3-bdbf47e00716"
        },
        "item": {
          "id": "adff5712-e410-451a-a8c4-5b9a4d342f62",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "31662f21-099a-4874-a8c1-a24725b7ceee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcbfc766-5761-4756-ba0d-be6dbab72e65",
        "cursor": {
          "ref": "aca00816-8b9e-4727-a76f-b502f561b442",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e88bcc17-c30a-4938-85e3-fde6571db16b"
        },
        "item": {
          "id": "bcbfc766-5761-4756-ba0d-be6dbab72e65",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1c4dc917-5253-4dda-a1b2-042fe5cddf4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "0d97c9df-8889-44d4-b575-4e35c8ae45d9",
        "cursor": {
          "ref": "2ed11c5a-850a-4af3-a563-4f3ebb06a2c0",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3d6a9cdb-1ff3-47f3-a007-f2da98308316"
        },
        "item": {
          "id": "0d97c9df-8889-44d4-b575-4e35c8ae45d9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ce8cf733-61fd-4a8d-bbc1-6daf53518885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "299552fe-1c04-4e51-8ca2-a2ecc3247467",
        "cursor": {
          "ref": "20dd1aad-defd-4b16-9bf3-f0d1b8df0338",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0c00153c-09d9-408b-a537-602baece437b"
        },
        "item": {
          "id": "299552fe-1c04-4e51-8ca2-a2ecc3247467",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "57e825ed-42c1-427e-8e0d-f5e191723400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "299552fe-1c04-4e51-8ca2-a2ecc3247467",
        "cursor": {
          "ref": "20dd1aad-defd-4b16-9bf3-f0d1b8df0338",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0c00153c-09d9-408b-a537-602baece437b"
        },
        "item": {
          "id": "299552fe-1c04-4e51-8ca2-a2ecc3247467",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "57e825ed-42c1-427e-8e0d-f5e191723400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd089eb-448f-4622-b1da-63003f1edd10",
        "cursor": {
          "ref": "ce497825-2146-4b79-82b4-68b7a9ed78c8",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0786b840-c7fb-4e83-be7c-9b145b836e74"
        },
        "item": {
          "id": "6cd089eb-448f-4622-b1da-63003f1edd10",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b5e918ba-1a91-4821-9459-8439cf4e58d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb161a3-8fc1-4fb4-b5f6-3efea6d908ba",
        "cursor": {
          "ref": "9e30d851-e801-4b44-8158-ef565f31b1f0",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "de3846c1-05a0-4503-a700-522e22f06233"
        },
        "item": {
          "id": "efb161a3-8fc1-4fb4-b5f6-3efea6d908ba",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9bf99985-6b8b-4309-a6fe-951e0a001905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf3f8d5-69f8-46f7-a58e-6cc216816ca0",
        "cursor": {
          "ref": "06111650-c90e-4232-98aa-b1a290f8c61a",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8a339f5e-6507-4b53-a8a5-9c9a3c7f074e"
        },
        "item": {
          "id": "2bf3f8d5-69f8-46f7-a58e-6cc216816ca0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0c457e77-414b-4a51-9156-4f53c405d005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a98873-c1d3-4d2f-a7f1-cb74a642866c",
        "cursor": {
          "ref": "497a53ac-82b5-4108-b3f7-83ce33243e75",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "050fcf10-ec8e-40d5-b0da-8aef173cd52c"
        },
        "item": {
          "id": "06a98873-c1d3-4d2f-a7f1-cb74a642866c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "87f116d5-7281-4bbc-aaf4-6deb507bdc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ed913b-c76b-4bb1-8cd4-4f1e450c3596",
        "cursor": {
          "ref": "3df22973-a901-46c4-aec6-7b5d5d95b156",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "27a3b51b-8fcb-4cb0-acc1-64611805d851"
        },
        "item": {
          "id": "82ed913b-c76b-4bb1-8cd4-4f1e450c3596",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5a2a9b6e-f028-4a4d-9121-c494ffa823fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec631dc-858e-405f-b5cd-2f386b1dc8d7",
        "cursor": {
          "ref": "5faec9c5-1f05-483b-9491-4f86aaa16c12",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "49331cc4-9cfd-475d-a71d-faba41e97c1b"
        },
        "item": {
          "id": "5ec631dc-858e-405f-b5cd-2f386b1dc8d7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "29785199-635f-428f-8efa-2fd4e374f717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8aa559-e605-481c-aeb4-42e8aeb09b4c",
        "cursor": {
          "ref": "c5b46ae4-7545-4755-a8d2-a9c3c88a5b6f",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fcf8aef9-4c84-41d9-809e-3d197e739f6d"
        },
        "item": {
          "id": "ad8aa559-e605-481c-aeb4-42e8aeb09b4c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7443d069-82e8-4e2c-9dd5-08aea09a901d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e485680-5637-404b-b6bb-72bf76407918",
        "cursor": {
          "ref": "e597f1c7-96d3-4553-8190-ed8016c38e09",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6e22af22-2e55-4bef-a34d-52e9f67116e9"
        },
        "item": {
          "id": "1e485680-5637-404b-b6bb-72bf76407918",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a1290178-e972-400e-976e-069597f21508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69eb4bec-43bd-4b69-bfc5-f56696274cff",
        "cursor": {
          "ref": "fc5bc75f-9f15-46aa-9eb1-7a6bd9dd5ba8",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f2a65fb6-e883-486e-b16a-dc1c74cc984b"
        },
        "item": {
          "id": "69eb4bec-43bd-4b69-bfc5-f56696274cff",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "aa264b9c-1b4a-41b0-b544-4bade80e02a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f45477c-2eb0-4f8c-b17b-d64a5f375e87",
        "cursor": {
          "ref": "d0c7cc35-8821-4027-897a-25ab432bde02",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1fc28d5c-f9d8-480d-b296-ddd4859a7bc8"
        },
        "item": {
          "id": "4f45477c-2eb0-4f8c-b17b-d64a5f375e87",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "305e14da-bb6f-4db7-baab-fe81c41d0d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749792cf-6915-43a3-87e2-0f31c13df647",
        "cursor": {
          "ref": "2679f8bb-7a44-4056-84c0-b6fb123f4991",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bf26cd8f-572c-42ad-b74d-2f13a356833f"
        },
        "item": {
          "id": "749792cf-6915-43a3-87e2-0f31c13df647",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "801b9fa1-1dd3-4f9a-bdfa-5c66827dfa60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d83f55-1e6b-4b05-aca0-d2fc6b97bcc4",
        "cursor": {
          "ref": "e8df7f1e-21d0-42c4-984a-4667271f4043",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f7223c13-aaae-4f1d-a6fe-902e6f390406"
        },
        "item": {
          "id": "69d83f55-1e6b-4b05-aca0-d2fc6b97bcc4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "689fd7d0-d7b9-44b5-80d1-127c17258089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c27c001-06c5-4af1-bfce-40ad82ce3b59",
        "cursor": {
          "ref": "f951c9ae-27da-47d9-95f4-e3ee4ae83af1",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e1a2570e-09ae-40b2-95d7-030b214311cb"
        },
        "item": {
          "id": "2c27c001-06c5-4af1-bfce-40ad82ce3b59",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1fd7f17a-b7f4-44f3-96a8-c377e4b205ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee11d7f-4737-4429-b884-c5ed2c9131cf",
        "cursor": {
          "ref": "54699860-8d80-41ca-ade0-deb4cfb5f08a",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1d1b30d5-0736-4db6-9793-704c09ba9edb"
        },
        "item": {
          "id": "fee11d7f-4737-4429-b884-c5ed2c9131cf",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "279a7fcc-85e2-41b9-a827-8eb5de6b5b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328c4b75-27a7-47bd-9c1b-ee969cbf8bb3",
        "cursor": {
          "ref": "54d61388-c153-4b9f-9b92-6ce01ae464a4",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6c717ecc-9402-4b25-af9a-b8ed7238d2c0"
        },
        "item": {
          "id": "328c4b75-27a7-47bd-9c1b-ee969cbf8bb3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "11f94b02-8680-4e1a-8c3c-91161968c21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff77639c-5037-45b9-924f-dd374cca1376",
        "cursor": {
          "ref": "5f63fb90-a747-4f60-85f0-297beeb7b536",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fd81e66d-d5e6-448a-9761-0b2e2549019e"
        },
        "item": {
          "id": "ff77639c-5037-45b9-924f-dd374cca1376",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "888b6e86-5cfb-4906-9e3c-a70e0e08dabc",
          "status": "OK",
          "code": 200,
          "responseTime": 247,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "77c26343-e31a-4b82-bb41-94f66f87893a",
        "cursor": {
          "ref": "1506861e-fd77-4774-8ef6-2811985492d0",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c1227914-0d29-4937-9eec-008df2cbc575"
        },
        "item": {
          "id": "77c26343-e31a-4b82-bb41-94f66f87893a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "596cb727-89a5-46e2-8a9e-cee5d0d7549a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0758d030-dcb0-475a-9626-b4857283a948",
        "cursor": {
          "ref": "c1bd8119-aaf4-47d0-bb32-0d6374999848",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "50ca4b00-a825-4b4b-bba8-c167849cca59"
        },
        "item": {
          "id": "0758d030-dcb0-475a-9626-b4857283a948",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9ac57704-5c07-4f7b-b279-0c70463cc3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a70c33-b268-471c-b11f-bf3f1c60d1d0",
        "cursor": {
          "ref": "f9d4dbb0-62ce-4b51-b5fa-8febbd6888f4",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "105cbe35-f8de-4d8b-88f6-14b1feab7449"
        },
        "item": {
          "id": "80a70c33-b268-471c-b11f-bf3f1c60d1d0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3e4d3cc2-e0aa-4265-9107-1f8d3975de6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90d68d1-40f9-4721-85dc-38d03a5ed320",
        "cursor": {
          "ref": "4a1a2fea-9f64-4674-ac99-456730efb95d",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "35856245-15be-4940-9221-3063b111b898"
        },
        "item": {
          "id": "c90d68d1-40f9-4721-85dc-38d03a5ed320",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bd03940b-347e-4129-8476-d09150ab5ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7fd5a3-972e-4071-8ceb-a2a15a4e5190",
        "cursor": {
          "ref": "4b443b1c-f06c-4250-a730-548fe80090f2",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "57bafe3d-9aa3-4f22-8e0c-eabfb11deb5c"
        },
        "item": {
          "id": "3d7fd5a3-972e-4071-8ceb-a2a15a4e5190",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d4a89324-92fe-402c-8cb1-053ce71260d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5771051a-2768-44ef-b7f1-209c2b23b36a",
        "cursor": {
          "ref": "18369a77-5f86-43c6-8002-888a9ce49e96",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d313f016-05cd-4777-8c1a-669e1f33298e"
        },
        "item": {
          "id": "5771051a-2768-44ef-b7f1-209c2b23b36a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "25d7e70e-1e45-4b20-988b-b1898ea666ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1002ab45-3ee7-40a0-bc80-8ce9ee57c435",
        "cursor": {
          "ref": "58ad60a1-d993-4b71-9809-6c9180bff333",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ace55c35-8eb7-4161-885c-1e1c9c6e592e"
        },
        "item": {
          "id": "1002ab45-3ee7-40a0-bc80-8ce9ee57c435",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "14935081-e3d1-484c-8ca1-c1f79b8895a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a32388b-751f-4a7f-84ec-fe58aee07a3a",
        "cursor": {
          "ref": "8785637c-0456-4308-a4fe-aef43b78bfed",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "05ee023f-95a3-4fb4-8f9c-311be98518fa"
        },
        "item": {
          "id": "8a32388b-751f-4a7f-84ec-fe58aee07a3a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7c291549-c817-456c-a38d-a766605276ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d95581b-d26b-48ab-b53b-2aef76f1e0c7",
        "cursor": {
          "ref": "9ea0f59f-e276-4e90-8bdb-3546bc214cfa",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "89ea3198-e113-4e45-9bb5-a5e7601efefe"
        },
        "item": {
          "id": "1d95581b-d26b-48ab-b53b-2aef76f1e0c7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "463e16d8-405e-46c9-990c-6d739ed03143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15df420-2ce5-480e-a021-d5991689aa8f",
        "cursor": {
          "ref": "f2f528a9-1e3c-4052-9d21-275ce3327662",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "56e334e8-3ec9-4a20-97fb-9b3f2b89dcc3"
        },
        "item": {
          "id": "d15df420-2ce5-480e-a021-d5991689aa8f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4aef6cca-3e69-4bc2-8045-d3389e2396b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bdf97a-40d8-497e-80d7-974e43677915",
        "cursor": {
          "ref": "b1f4cfa2-c91e-4a3a-898c-2a08e2abae6d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f21f08b2-d393-46a5-a3f2-24ee67d99bc1"
        },
        "item": {
          "id": "f1bdf97a-40d8-497e-80d7-974e43677915",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2b703f40-fc42-4437-a926-f94f2921cbf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e284da-3e11-4bcb-baa3-3c2fdda12b60",
        "cursor": {
          "ref": "052190d9-a248-4d18-b727-6c87b6ef7903",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "91148d6e-b6ef-46f5-a772-d6ebdebbf57b"
        },
        "item": {
          "id": "84e284da-3e11-4bcb-baa3-3c2fdda12b60",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "70b5f529-959f-4e49-a945-ee1f884fc5f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f3d686-aa95-4bdb-92f5-d866e4eab7b2",
        "cursor": {
          "ref": "68c7f559-c411-4693-bb3c-53c5d9d9c0e7",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "357fbba2-4e5c-427d-95c2-f43f60d4edd3"
        },
        "item": {
          "id": "56f3d686-aa95-4bdb-92f5-d866e4eab7b2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "aa8609f9-40e4-4e6a-abfd-0d9e52f63e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058722b4-4b1c-4b29-88e2-889ceeb8da66",
        "cursor": {
          "ref": "3e6a4778-3a66-471a-8d38-71aad576c3c0",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b8057748-4dcd-40e6-a658-24ce125e2c19"
        },
        "item": {
          "id": "058722b4-4b1c-4b29-88e2-889ceeb8da66",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c805965a-e68b-41ca-810c-a319253b7492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8287be2c-deb5-407c-9f7c-601dc60ce264",
        "cursor": {
          "ref": "edc4f952-11bc-4250-8d89-b25d3f784ea4",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d4c02733-ed0e-4e4e-ab27-fc5c7efb1089"
        },
        "item": {
          "id": "8287be2c-deb5-407c-9f7c-601dc60ce264",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "152b4394-59c8-4ba3-a469-75a9ed042d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed42e777-e0af-4b86-a5ea-0dd98c47685c",
        "cursor": {
          "ref": "bb0245e1-82f2-49ea-9309-7c7c354570a9",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c6a972db-b3c0-4eb8-b5e7-48f77ce3c1fd"
        },
        "item": {
          "id": "ed42e777-e0af-4b86-a5ea-0dd98c47685c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "422a1722-f264-49e8-bc95-d795b2ce7af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9aff695-bd8a-4f86-8326-63e7012744fd",
        "cursor": {
          "ref": "9b136840-0a5e-4f86-9722-9aa18f13ef40",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "20ac222e-0945-4301-abc4-c7002435e5b4"
        },
        "item": {
          "id": "c9aff695-bd8a-4f86-8326-63e7012744fd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "680c0e7a-3c78-4cf6-9f5a-72b06bf15680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e20c8d-25aa-4def-8d10-be541f5b090b",
        "cursor": {
          "ref": "d7460ca1-0597-456e-9dda-2105b902d8b4",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9efc3a6f-677f-47ba-9f4f-1008712ec6ce"
        },
        "item": {
          "id": "27e20c8d-25aa-4def-8d10-be541f5b090b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a512302b-df44-4195-9bc8-6f692ea6c150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9916f660-9f11-4f78-ac1a-cc75a5dba7c3",
        "cursor": {
          "ref": "799bdcc1-3f20-44dc-8930-026cc40edb42",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9be9e0a2-0539-4449-b5bc-c398023eb226"
        },
        "item": {
          "id": "9916f660-9f11-4f78-ac1a-cc75a5dba7c3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "18d365d0-bf71-437e-9040-6d229160f6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a0f593-d525-4768-b058-c73664e35a1a",
        "cursor": {
          "ref": "f4138615-d5ac-45c9-91c3-f194a0460232",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "01a8a5a7-1cc0-44ed-9308-f68a381a51de"
        },
        "item": {
          "id": "50a0f593-d525-4768-b058-c73664e35a1a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7f867b67-d737-41d6-8548-cbe42402edad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8803501-8bd0-4864-9bcd-202f8e334f2d",
        "cursor": {
          "ref": "c9dc4b65-b0d3-4570-8309-bb2e885c8485",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e809e1fb-198c-431c-b728-3bb9057ced86"
        },
        "item": {
          "id": "d8803501-8bd0-4864-9bcd-202f8e334f2d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "864748c0-0208-4478-803d-996d6df5296e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37afe864-9d11-4c97-a12b-e085348a98c9",
        "cursor": {
          "ref": "88f84fd8-b528-4b8e-b105-32683c21c96d",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f0d422cb-b046-4d55-9a3e-d5cd08fd85e8"
        },
        "item": {
          "id": "37afe864-9d11-4c97-a12b-e085348a98c9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d595a380-9f63-4472-bde1-2c8024b637b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ad6a8f-2707-4c99-9ac5-365a874d48d8",
        "cursor": {
          "ref": "eed04b53-2dbc-4a6c-9762-17eedf7444cf",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4d90b1b1-fe70-4515-97a5-1664a1b4a3cd"
        },
        "item": {
          "id": "f1ad6a8f-2707-4c99-9ac5-365a874d48d8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "478f3dda-bf07-43e6-9b2a-fadca4e51af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbc5bb6-ee40-4cf3-8f12-85d9d210c825",
        "cursor": {
          "ref": "a6ffecab-43b1-4a58-8815-97727997943f",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "725bbcc5-2c71-4c5a-bf56-28852da043f9"
        },
        "item": {
          "id": "edbc5bb6-ee40-4cf3-8f12-85d9d210c825",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6b0096fe-7c7d-4d1a-9cb5-ced3ffef741c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27ce0af-4676-40c7-90df-acaf2a954e64",
        "cursor": {
          "ref": "01892b6c-292f-4167-8803-d2363645bc36",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "625e12ef-a99d-43da-ae8f-ff435be9e216"
        },
        "item": {
          "id": "f27ce0af-4676-40c7-90df-acaf2a954e64",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "822336fa-ff3f-4f13-8a27-5e16fafa8c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbfbfd2-9553-45ad-9967-298887f5e7ca",
        "cursor": {
          "ref": "f32abbdf-3481-4aa3-8ccb-4aff2ca7adee",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1e3ca4f8-a2ab-44ff-a38f-38b4c41a79c5"
        },
        "item": {
          "id": "5dbfbfd2-9553-45ad-9967-298887f5e7ca",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a06572d4-cb83-4bb8-912b-cf999496ff84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78cd387-0e04-49ca-9adc-e06865eb9bb8",
        "cursor": {
          "ref": "7d5c3137-3862-4eb5-a0a3-894b6e871596",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3933ccee-8635-4638-abb4-45e26de7a69a"
        },
        "item": {
          "id": "a78cd387-0e04-49ca-9adc-e06865eb9bb8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "cf649c9c-5a3f-4810-b654-c1eb63d6285b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd05141-8a34-4f99-98c1-f09ade0d0762",
        "cursor": {
          "ref": "63093fb8-bfe7-4e31-9dcc-35f005148d15",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b10198d4-3ab7-4e9f-bef3-65b7d0c061c5"
        },
        "item": {
          "id": "dcd05141-8a34-4f99-98c1-f09ade0d0762",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c4647f84-c832-40bc-8e57-7921dad4d9e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6adb5b44-23aa-4ee2-bb53-612fcc7609dd",
        "cursor": {
          "ref": "b325fe61-4390-4af3-a136-f644cbac9fa4",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7c636d42-9ddd-48ab-8d60-458c1ab6ba8d"
        },
        "item": {
          "id": "6adb5b44-23aa-4ee2-bb53-612fcc7609dd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f6ed8145-f2d8-4349-8ea2-0d41f7af77dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864dac39-ebd0-4ba6-b6cd-cb8ddf7f54ad",
        "cursor": {
          "ref": "6875e5f6-906b-4673-b024-8b71411bcb1a",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "21847439-1246-45d8-a820-5495245b1c48"
        },
        "item": {
          "id": "864dac39-ebd0-4ba6-b6cd-cb8ddf7f54ad",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "46a4d9db-df76-47f8-805c-91d16844e423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5bbb2b-4bd3-4d75-88d7-ba9218f4076a",
        "cursor": {
          "ref": "dc3ce994-2964-4e96-adf8-db20a9fd6d8f",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6b81ecb9-e6f1-476e-8933-9b165404bcc6"
        },
        "item": {
          "id": "2f5bbb2b-4bd3-4d75-88d7-ba9218f4076a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e8654fcd-3eea-48a9-a2ac-914dad515c2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcd1cf6-ac9d-439a-8b6f-48d0451c5754",
        "cursor": {
          "ref": "c9027eb8-bf39-491b-8483-0b08222210df",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cbdadb05-4f95-49e3-8c90-f8610b8e0c32"
        },
        "item": {
          "id": "4dcd1cf6-ac9d-439a-8b6f-48d0451c5754",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "91592824-d9e1-4cf5-8600-5f8ff675f83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be971b28-4bfd-4fdd-808d-6d72dd66a026",
        "cursor": {
          "ref": "cd633d55-3894-41c7-9783-d8ad3e619381",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0fdc611e-5be5-49ef-9689-7096ad299233"
        },
        "item": {
          "id": "be971b28-4bfd-4fdd-808d-6d72dd66a026",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dc51b046-4bfd-4bb3-bb9c-0d084b1027e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551be68c-7afc-40a9-a3e6-caa3daaa73d7",
        "cursor": {
          "ref": "892aeb96-f2f5-42db-9a58-981874e133db",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9e87b93c-3545-4914-8479-3c8d3b0fc189"
        },
        "item": {
          "id": "551be68c-7afc-40a9-a3e6-caa3daaa73d7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d0159cfc-bfeb-4904-9c2c-068997c4956a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3545d3e9-8929-4afa-9546-724e233140ab",
        "cursor": {
          "ref": "c8a6c1f3-d167-42b1-b929-61befaf8f228",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1e21f16a-9d04-4dc1-a214-040ca7931a90"
        },
        "item": {
          "id": "3545d3e9-8929-4afa-9546-724e233140ab",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "15b1b2e9-2869-43cc-915f-e645e5e37482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed84275-9290-4974-9557-540f1f014dd1",
        "cursor": {
          "ref": "50409109-66f6-4461-a0c8-3be4f7f816be",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7be57808-8c56-495f-b89f-62bc0814c779"
        },
        "item": {
          "id": "bed84275-9290-4974-9557-540f1f014dd1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "48b0e11e-2158-45f5-8009-0615aa495b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cf7bd3-d34f-49f3-be76-f7a38c3f13b6",
        "cursor": {
          "ref": "2db389d4-4bca-430a-9c18-c2e5d24eac47",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3db39410-4675-4036-ad31-f645f58090e0"
        },
        "item": {
          "id": "79cf7bd3-d34f-49f3-be76-f7a38c3f13b6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cb70894d-8eee-4f7a-bb85-b3a3a630b940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af35157-fe42-4022-9f2d-9dac1cb4f814",
        "cursor": {
          "ref": "b7279860-e53f-42cf-8b1b-eea16355ca85",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "88004358-4217-4a75-9332-81307b23633c"
        },
        "item": {
          "id": "6af35157-fe42-4022-9f2d-9dac1cb4f814",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "35472001-f911-4543-b016-0cb4e3172481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37c3fc8-a891-4304-80d0-776bed500c80",
        "cursor": {
          "ref": "c87e83a3-576b-4635-8f4e-7b33047c8f7b",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b596a03b-bff0-4748-946d-2f8199a0d4c8"
        },
        "item": {
          "id": "b37c3fc8-a891-4304-80d0-776bed500c80",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "502f0e71-6d18-4905-90fb-8a20b88bf9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b11218-947f-4563-b021-82f036f88432",
        "cursor": {
          "ref": "583262a4-4c12-4040-9f80-ab8a8708bfed",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5ff98da6-dfa3-4bc3-b723-0aebd30a9033"
        },
        "item": {
          "id": "b3b11218-947f-4563-b021-82f036f88432",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3bf342f0-08d7-4348-961b-86b39e6493fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d267e93-3e68-404f-adc6-b6b15114c961",
        "cursor": {
          "ref": "c3238b24-41a3-4e4d-813d-08d7bafa00f1",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "93dc8ab3-d5e3-4bf9-aedf-55001fc75e5f"
        },
        "item": {
          "id": "5d267e93-3e68-404f-adc6-b6b15114c961",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "46f26858-3e94-47f0-b30f-d9a3f4396cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c3914c-9b09-4a4c-aefe-8575400d14ed",
        "cursor": {
          "ref": "98755e3d-1892-4438-9d2a-9923dbfa2896",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "58454a34-c0ac-46cc-bb1d-e1850d2138a9"
        },
        "item": {
          "id": "d8c3914c-9b09-4a4c-aefe-8575400d14ed",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5056b05b-1eef-4a25-aa80-d590cabc4476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2694eb81-2712-4cac-b1d6-29dfdef09437",
        "cursor": {
          "ref": "0d830173-69ed-4a76-925e-ff66137de6d6",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dd85133c-24f0-4eae-b0e5-4ea1c8015b11"
        },
        "item": {
          "id": "2694eb81-2712-4cac-b1d6-29dfdef09437",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "94a760f1-d5dd-49f4-87ef-c118cf9b9a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf068978-2968-4719-b340-81abe4c4996e",
        "cursor": {
          "ref": "960bb998-ce4d-4105-8f7d-83bbb2a05bd3",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0f005b00-d338-4313-8b73-ea41c3e3447f"
        },
        "item": {
          "id": "cf068978-2968-4719-b340-81abe4c4996e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9b92e47c-550a-4f0c-b08c-f833db9c8bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ff8baa-bc4f-4344-9826-5cbdec959d38",
        "cursor": {
          "ref": "e6f5c99e-36b4-4fa9-b2d3-8f0008ca99db",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4d50a66c-3fc7-4730-a352-27340c032318"
        },
        "item": {
          "id": "41ff8baa-bc4f-4344-9826-5cbdec959d38",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b248caaa-8c25-483d-8a43-6801958b06bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49dc2bc3-7420-4451-83b9-e3bec583ff92",
        "cursor": {
          "ref": "b7f67d64-e64d-4a08-95d5-a25d171eadd2",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7b6ed945-7427-47d1-b590-775cbbf90230"
        },
        "item": {
          "id": "49dc2bc3-7420-4451-83b9-e3bec583ff92",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e4d502ec-a19f-4e99-a042-c2008f98815a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd758c9c-fd27-49ce-b669-e6c597d6c392",
        "cursor": {
          "ref": "caec3409-9027-4baa-8439-d31c2a7cd659",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7e4303c5-c342-481f-b4e6-010d5a675f1c"
        },
        "item": {
          "id": "fd758c9c-fd27-49ce-b669-e6c597d6c392",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fa0598b9-800b-4788-a02f-41b6b12546c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433edde6-c8b2-468d-82f0-8e56ee6352d6",
        "cursor": {
          "ref": "069fcbe2-6157-4ced-a5dd-d7b8995d2d0b",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4e3035c0-14aa-4ba7-974d-83b9eb706c86"
        },
        "item": {
          "id": "433edde6-c8b2-468d-82f0-8e56ee6352d6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "24afde81-2d57-43ea-97ee-85b6ed959723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06791c41-3dd6-467f-933d-8407e3f96da1",
        "cursor": {
          "ref": "e78223be-5ea9-49f5-b2e7-cffb61caec3b",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "daa06d3a-904f-4d03-9e62-5123ebfa19ea"
        },
        "item": {
          "id": "06791c41-3dd6-467f-933d-8407e3f96da1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "568d85fc-a37b-4521-8bbb-04d7769a522a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65bb9199-99c5-4c7a-a247-2cf167a4ad32",
        "cursor": {
          "ref": "6ec81dff-38df-40e3-a0ec-808e809133b1",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7931a81d-9aef-498e-b5ef-75056cc34fb7"
        },
        "item": {
          "id": "65bb9199-99c5-4c7a-a247-2cf167a4ad32",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b7b152cf-1ddb-4a09-9fd5-a0b030a9a82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d857d566-5646-4a8b-8871-a253a8f230e5",
        "cursor": {
          "ref": "1b41a241-8f72-4a1e-bb51-258ff3c53528",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "79c8ccdd-21d2-4035-b281-7a99efba2768"
        },
        "item": {
          "id": "d857d566-5646-4a8b-8871-a253a8f230e5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cbf0012e-23af-4061-91d1-f1abfe094ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9776ac5d-e3d2-4e52-b69a-c976e739c97b",
        "cursor": {
          "ref": "cc4b1f6d-c9a8-490b-a841-1d9b38603625",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bcb5755a-9839-4fd4-b199-a3292ce7775e"
        },
        "item": {
          "id": "9776ac5d-e3d2-4e52-b69a-c976e739c97b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4a1ce41e-5f97-463a-86b3-e271ce529a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7ce96a-76e5-4e15-9386-5b541bd84a01",
        "cursor": {
          "ref": "2b2ba2c6-e0c2-401c-9b07-0a083b7adb38",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9c86eaee-1e70-4db0-b255-cf553ce96aa9"
        },
        "item": {
          "id": "4e7ce96a-76e5-4e15-9386-5b541bd84a01",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5c5f92a2-1b35-4697-b1bc-1555e91f1872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa04db3-a567-47f7-878e-4b887ae3faef",
        "cursor": {
          "ref": "96b7cbb4-042a-4b6b-9917-55f3c98ec880",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dc9c439f-5ed3-4202-95dc-de01b70fb356"
        },
        "item": {
          "id": "9aa04db3-a567-47f7-878e-4b887ae3faef",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6ba07b9d-0e1a-4347-bf3e-4c60c0ad33de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4179d2b-a230-4bf2-ba5a-b8391cbb01c4",
        "cursor": {
          "ref": "bd25dd73-f9a0-46a7-bd68-a9a302428fb0",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e0fff3fd-e7bd-4950-a0ed-cd1b0bd557c3"
        },
        "item": {
          "id": "a4179d2b-a230-4bf2-ba5a-b8391cbb01c4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4a5cb832-e27e-4a9c-9953-6d8535d52a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f7e758-f3ab-4a73-aa79-9db254e781a4",
        "cursor": {
          "ref": "bcee69f1-9510-4a47-9e1b-c815c14e5542",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6412122a-862e-4b68-944f-b00dcefb127e"
        },
        "item": {
          "id": "82f7e758-f3ab-4a73-aa79-9db254e781a4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "13b8219d-fcfc-43dc-a846-73e1170c667b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d211fd98-79f5-4ed5-9790-7a52127bd2e3",
        "cursor": {
          "ref": "09ed2d2d-d401-4255-b209-54d8b340f0a7",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ebf4ae41-7273-4815-b1a4-6250d874a81e"
        },
        "item": {
          "id": "d211fd98-79f5-4ed5-9790-7a52127bd2e3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "88e3e1af-3f6a-47f9-926e-283dd5552815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a630abcf-3ca7-4a5b-82f6-afb33010b5fe",
        "cursor": {
          "ref": "fb6121e8-ca9f-447d-ada8-e4555ef64c69",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "66892f28-eb8d-46a3-8067-be5c85afabc7"
        },
        "item": {
          "id": "a630abcf-3ca7-4a5b-82f6-afb33010b5fe",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "700b9103-aefb-4cb5-a7d4-884d23bddc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6998ddc1-8d98-4b15-a58a-bb2166cfb574",
        "cursor": {
          "ref": "3a5e7afd-6f0d-4724-a4f0-bafa0d95f578",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "87c3c2aa-e846-47f2-a879-3489b6f2aed8"
        },
        "item": {
          "id": "6998ddc1-8d98-4b15-a58a-bb2166cfb574",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ebac7602-9211-4aa4-ae9e-cec809f36346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deebcf69-9b78-428e-9d91-8832608ab6fc",
        "cursor": {
          "ref": "a03bbdbd-c4b1-4b9f-af38-f5790f0bf3c3",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b4483657-97ff-4cb9-9f1c-4b09f7b821dc"
        },
        "item": {
          "id": "deebcf69-9b78-428e-9d91-8832608ab6fc",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "620d055e-747c-40d7-bb5a-f70a27a16f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56625ece-b79e-4b13-9466-956454722e79",
        "cursor": {
          "ref": "7373c30f-898a-486f-be89-64ca2c198c5d",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7f7b5870-1460-44fa-b461-d28a681bc293"
        },
        "item": {
          "id": "56625ece-b79e-4b13-9466-956454722e79",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d24a9983-ffa2-47af-bf05-b6236b60bb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a682766-a71e-4975-baaa-21ae265c515f",
        "cursor": {
          "ref": "a9878396-c3fd-4b26-a7dd-bd4b4c6f7127",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e2186f5d-9f35-4cf5-aaf8-8a26c886e5f7"
        },
        "item": {
          "id": "7a682766-a71e-4975-baaa-21ae265c515f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f37eb124-c678-4167-b870-e62bceb675bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da61c99-377d-4673-877f-1da7988c2ab1",
        "cursor": {
          "ref": "b5380a14-d5e0-4042-95f7-b63cc7a555bb",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "63de1885-cc14-454d-932d-4e16f6eae4b3"
        },
        "item": {
          "id": "6da61c99-377d-4673-877f-1da7988c2ab1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d472fbdc-3e48-4ab2-8012-0e7162b4ed22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc48a09-b2d5-4728-a825-d8ffd9ed5812",
        "cursor": {
          "ref": "47372a68-f898-4443-8da8-8b1de38d9d8b",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "054f42c9-17d0-4c45-9c2c-bdec17cfe9b4"
        },
        "item": {
          "id": "ffc48a09-b2d5-4728-a825-d8ffd9ed5812",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6ad823af-a9d8-4ef2-a59b-623ad7b8bafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39e4e25-3bb4-4093-b073-30c934225933",
        "cursor": {
          "ref": "6589356d-b3ca-4bd6-8e1a-11a2b7d7a6dc",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ddc069e5-07e0-49c5-b8e2-217d177bfe94"
        },
        "item": {
          "id": "e39e4e25-3bb4-4093-b073-30c934225933",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9706d300-7103-478b-947b-e3a5202d6820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc78a0ce-ee3c-4973-a915-9d0cd9d35d31",
        "cursor": {
          "ref": "fc3a129e-5193-4ae9-b351-2a5f8ba92559",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bae117ac-e8af-4121-aa0a-59b7e695a5a6"
        },
        "item": {
          "id": "dc78a0ce-ee3c-4973-a915-9d0cd9d35d31",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cf5f6ac5-ba76-4110-a5d5-8ea66bca53ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23292fa-7866-4bce-972f-d971e3d499fe",
        "cursor": {
          "ref": "b2f58574-9809-423b-a1c3-cfd2e085824d",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "21c71d79-73da-449d-949a-0341b602b9bf"
        },
        "item": {
          "id": "a23292fa-7866-4bce-972f-d971e3d499fe",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f0c51caf-0c71-4e4e-a4e6-c380708e725d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc848f34-ccdb-41ee-8463-41a890c60ba8",
        "cursor": {
          "ref": "a1079dd9-3f16-4231-8eff-7ec018b68fc1",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "eb6f8e4a-a451-4a4f-b917-7d0065a42be5"
        },
        "item": {
          "id": "bc848f34-ccdb-41ee-8463-41a890c60ba8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2973fea9-bce1-4916-933e-4b493f19e643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de65c25-ccb2-4a6c-9a7d-235854ec4826",
        "cursor": {
          "ref": "69c9c8b4-d32b-44d4-acf4-792f9b93e789",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9c7b0a64-d653-4a14-9bc9-b31f49ca4f54"
        },
        "item": {
          "id": "1de65c25-ccb2-4a6c-9a7d-235854ec4826",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6fc93ed3-a558-464d-9b87-3952292ac8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c92ec9-6e0d-4a69-a834-b0701913907b",
        "cursor": {
          "ref": "c0bbf051-ef00-4b0e-9c1b-cc1c43a83f27",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "92b714c1-f365-4ec2-bbb0-08dab300a3ce"
        },
        "item": {
          "id": "91c92ec9-6e0d-4a69-a834-b0701913907b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1eb8d1bb-7b69-4c24-bce1-8d328da56bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487ad284-d1f2-4708-969c-a37e2c9d87ec",
        "cursor": {
          "ref": "893f456b-354e-4e9c-8463-e9474801970a",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9c67b5b3-df78-459a-ac82-9bb21ae3307d"
        },
        "item": {
          "id": "487ad284-d1f2-4708-969c-a37e2c9d87ec",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b825a502-3104-4c06-95a4-3b8771277b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6186713d-e4b2-4a48-913c-d9bdf7447634",
        "cursor": {
          "ref": "c89a74b4-f5e5-4c9a-a860-ac0d0c76427c",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e7d3df65-83f9-4b22-9322-f8c637aecd9d"
        },
        "item": {
          "id": "6186713d-e4b2-4a48-913c-d9bdf7447634",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cfb9a78e-dc70-4520-bd3f-9df2a7cd6dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81ce603-552e-43a6-9764-61f1f767a18b",
        "cursor": {
          "ref": "d5a135b2-4c29-4a7b-bb5d-25b377b71a17",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "09383fe3-214f-4f5e-92e3-2c7dd74e6801"
        },
        "item": {
          "id": "a81ce603-552e-43a6-9764-61f1f767a18b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "22198631-98ce-4034-a5ac-68c45a50a6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10172cc4-4535-4e89-89fc-c8a2650e8684",
        "cursor": {
          "ref": "a91f64f6-11fa-4a05-9598-f6d1ad62e885",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0aedaf7b-8eb9-408b-a83b-6870c44e8af2"
        },
        "item": {
          "id": "10172cc4-4535-4e89-89fc-c8a2650e8684",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bef185c0-25cf-4a1c-bbb4-4746dbc47fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37eb503-4aa4-424d-b98e-1d147cca1f08",
        "cursor": {
          "ref": "bf76319a-8790-4e46-9ad7-feaf4ca629f7",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "03cf4afc-60f3-4301-ad29-cea7c5fd3889"
        },
        "item": {
          "id": "f37eb503-4aa4-424d-b98e-1d147cca1f08",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1e7081de-6f61-425c-8e1d-ae9d464584c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b690ed2a-92f1-4443-a9c5-ba86877071df",
        "cursor": {
          "ref": "b4d08216-fea4-488e-bf09-05c2ddeae4ff",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "14483bc1-70e5-4c5e-bb38-ddf00ff1ad21"
        },
        "item": {
          "id": "b690ed2a-92f1-4443-a9c5-ba86877071df",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a1df4f1a-7776-4226-99e6-761d58eab7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94db0cf-995a-4714-8e66-b45127389797",
        "cursor": {
          "ref": "4aac05b2-1843-4629-a59d-62aedd2f9794",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7288a7d5-5881-46ad-873b-4a5c7a6895f4"
        },
        "item": {
          "id": "b94db0cf-995a-4714-8e66-b45127389797",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2f8b5824-23bb-471c-a682-530030b0d1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a723d8-92b4-4d8c-99c2-290354fad8bc",
        "cursor": {
          "ref": "2af866ef-6abb-4281-a54c-c632365d4f07",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c20b73f9-979e-4c70-80ae-05bf04785765"
        },
        "item": {
          "id": "85a723d8-92b4-4d8c-99c2-290354fad8bc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4a093ce2-f8f9-4e68-9ca5-2a027d16e473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7563763-3aa9-490f-8a33-d2ec082e2535",
        "cursor": {
          "ref": "c88ce6ef-ba1c-4ce3-be4d-9c5a87f445cc",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2bc8c7bc-11ec-47e6-951a-ada8a4b91a3b"
        },
        "item": {
          "id": "b7563763-3aa9-490f-8a33-d2ec082e2535",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "805201df-aaea-4dc9-88c3-42900584469a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf82492-0cd9-4327-93e5-acaf80bb1501",
        "cursor": {
          "ref": "dc6f43cc-16a2-4554-972b-d7b12310c2a7",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "243db153-edc0-4ec8-a525-884d5d1e938b"
        },
        "item": {
          "id": "ddf82492-0cd9-4327-93e5-acaf80bb1501",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5c19d15b-8863-400b-940d-7ead165d328d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b05c31-4904-47f5-b41c-6dc1258e7888",
        "cursor": {
          "ref": "073276c4-a646-4881-be03-81ee548588f6",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "dc912d18-8974-49cd-9ad9-b5bb91121e08"
        },
        "item": {
          "id": "45b05c31-4904-47f5-b41c-6dc1258e7888",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c724e457-c149-435e-8b31-83e453c44bc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "afcd1380-5eea-4c0b-a799-62c83eed0b01",
        "cursor": {
          "ref": "7fda7eb9-0ee0-4201-8d75-a07533d76864",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c4aab50b-78ff-4571-a824-7325f29b0749"
        },
        "item": {
          "id": "afcd1380-5eea-4c0b-a799-62c83eed0b01",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e8e80647-ea7a-4757-af9d-620cf769638a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "51600d91-e5d6-4d61-ba08-d3a7109199a8",
        "cursor": {
          "ref": "311adb8b-449a-4385-b703-09fd35c2c7c0",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "31251747-4be2-41c9-b8b3-8bd9f766102c"
        },
        "item": {
          "id": "51600d91-e5d6-4d61-ba08-d3a7109199a8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4afed7eb-d3d2-4de6-8e09-6a49bbb88319",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c214d2-713c-4704-a79a-4ca1a2f9da0c",
        "cursor": {
          "ref": "64ef47b7-4b1b-4de6-8cec-05f996b026fe",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "afb4ea95-a8a7-47d3-aee0-8dd1fc26454a"
        },
        "item": {
          "id": "f5c214d2-713c-4704-a79a-4ca1a2f9da0c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c238ebd7-d0b7-4e1f-ac7a-b601b3372199",
          "status": "OK",
          "code": 200,
          "responseTime": 2313,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bff83dd-1133-4748-b5b7-704a388b06a4",
        "cursor": {
          "ref": "bd329948-39db-44c2-b03d-9ad9e39d15d7",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bbfa533a-38ab-4d9b-adfe-8b493fbfb2f7"
        },
        "item": {
          "id": "3bff83dd-1133-4748-b5b7-704a388b06a4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "82290148-ec42-4cb9-ab26-cac1028bdcd8",
          "status": "OK",
          "code": 200,
          "responseTime": 2152,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef11766-ef5e-4edb-ab71-68bbc1c3422e",
        "cursor": {
          "ref": "76419ec6-b40d-49b6-b267-c03250d5aeb9",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2f63b5d3-c20f-4a5e-9dc6-0087424c9f81"
        },
        "item": {
          "id": "3ef11766-ef5e-4edb-ab71-68bbc1c3422e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f9cd818c-4f8d-4ade-9a1f-ce07fa834db6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3ef11766-ef5e-4edb-ab71-68bbc1c3422e",
        "cursor": {
          "ref": "76419ec6-b40d-49b6-b267-c03250d5aeb9",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2f63b5d3-c20f-4a5e-9dc6-0087424c9f81"
        },
        "item": {
          "id": "3ef11766-ef5e-4edb-ab71-68bbc1c3422e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f9cd818c-4f8d-4ade-9a1f-ce07fa834db6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3ef11766-ef5e-4edb-ab71-68bbc1c3422e",
        "cursor": {
          "ref": "76419ec6-b40d-49b6-b267-c03250d5aeb9",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2f63b5d3-c20f-4a5e-9dc6-0087424c9f81"
        },
        "item": {
          "id": "3ef11766-ef5e-4edb-ab71-68bbc1c3422e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f9cd818c-4f8d-4ade-9a1f-ce07fa834db6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "22d3afe7-aec2-4ccf-9932-d131a498b537",
        "cursor": {
          "ref": "b40a1044-cd74-449d-8fb1-583f6516b139",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d17d34f2-3a2f-4623-bec0-9bb11eb474cf"
        },
        "item": {
          "id": "22d3afe7-aec2-4ccf-9932-d131a498b537",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "9bcecfa6-8422-4134-a283-32c72d71f7e7",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "2d04dc28-6fcd-49bf-937a-6290b6431c45",
        "cursor": {
          "ref": "e0abc004-66c2-4147-933e-87b84b82f7c0",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f301988c-fa99-4964-a605-232442e7d009"
        },
        "item": {
          "id": "2d04dc28-6fcd-49bf-937a-6290b6431c45",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "90bdac10-0a3a-410f-94fc-febcc303a8e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2d04dc28-6fcd-49bf-937a-6290b6431c45",
        "cursor": {
          "ref": "e0abc004-66c2-4147-933e-87b84b82f7c0",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f301988c-fa99-4964-a605-232442e7d009"
        },
        "item": {
          "id": "2d04dc28-6fcd-49bf-937a-6290b6431c45",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "90bdac10-0a3a-410f-94fc-febcc303a8e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "053d0b4c-35b6-45a5-bcae-3deba2bbbd98",
        "cursor": {
          "ref": "c22bc2cf-413d-4a02-b11d-8324a5bf2385",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b65591b2-48cb-4430-b959-fde0061401d1"
        },
        "item": {
          "id": "053d0b4c-35b6-45a5-bcae-3deba2bbbd98",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "af9c5f8a-7b77-4347-afe9-542450abfd14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 154,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b300a94b-ef06-48ac-9159-68b62315b1a1",
        "cursor": {
          "ref": "6832a3a3-f88d-4884-b9db-02e21d980e8a",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a5ab8993-5389-47b9-a0dd-ee6a8fe9bdce"
        },
        "item": {
          "id": "b300a94b-ef06-48ac-9159-68b62315b1a1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6ca57ed8-b445-46ed-80b9-3030e7707f4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b300a94b-ef06-48ac-9159-68b62315b1a1",
        "cursor": {
          "ref": "6832a3a3-f88d-4884-b9db-02e21d980e8a",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a5ab8993-5389-47b9-a0dd-ee6a8fe9bdce"
        },
        "item": {
          "id": "b300a94b-ef06-48ac-9159-68b62315b1a1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6ca57ed8-b445-46ed-80b9-3030e7707f4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "199f9f64-3418-4af4-8b9b-92cef16ce8bf",
        "cursor": {
          "ref": "ba4ffb3d-4a36-4bf7-a86f-0da9cd7dff43",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "fd41a5dd-69ae-4560-8f0f-e6d6c7d6a881"
        },
        "item": {
          "id": "199f9f64-3418-4af4-8b9b-92cef16ce8bf",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "ddd8357c-ad48-4e9d-b644-c0b878f84b4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}