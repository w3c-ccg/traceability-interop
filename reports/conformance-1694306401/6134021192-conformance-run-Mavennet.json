{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "56c7d307-8674-4e27-b9fb-d07f09fadc53",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4cc4ff6f-df04-43eb-aabb-9814e5db0c09",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c479ecb3-15a3-4e2f-8f84-44f7a2a17c37",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "26b559a7-7cc5-487f-b73f-3341edc26437"
                }
              }
            ]
          },
          {
            "id": "21623b1f-facf-4cdb-b0ac-d166e67d2c50",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a12991b2-9930-4afb-aeeb-a8e974ec4ced",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "087bc372-70fb-43ad-ada6-d716da08d260"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ac739340-c59b-4ff4-91ce-671933bd1bef",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6cc11b01-3969-47b9-878d-42eaf8f69e33",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c1c2eb5e-4710-4aef-9d08-c980916fcd03",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e90999af-7fd0-4701-b9e4-3ebccb904a18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9297e63b-754e-46c7-8330-32efd68820d8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9b688a5f-51da-4181-a7d1-8072bf6b518e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dfab32cb-5175-47b6-ad03-fdb47516c14d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "756aab9b-a319-42b0-892e-ee7c925f9520",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "03142f96-f81f-406e-b842-9ded9035a12b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d07b252-4627-46e2-a1fb-d9669ed9b44e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "492849f8-6b05-4ef0-9d4c-e102f94c43b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7251da01-a9a1-4522-92a6-a89a53cf73ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2fb9ba4e-40fb-491c-8038-98dd597c0914"
            }
          }
        ]
      },
      {
        "id": "2229c3f1-a281-4d20-bd34-c334e7f0b27b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b9b3bc78-03a2-42fe-9ad4-41539275825a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b3c96ea-7a76-4ef5-8ebf-fc7d7e7bc512",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6158e446-da15-421f-a52e-f9a4bef3e300",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c667370e-0027-464e-8cbc-d47342226470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b20a0447-b7c4-4546-930d-af35819182ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2c72c7-11f0-4977-b0ab-087461990502",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee38deb-765f-4fa0-9af1-3aa6184fd87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b086820c-6a43-4e1d-861a-5c34a2a0df5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed23655-f727-462b-98c0-de2c69bbbd5c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b069b04-93a8-4755-8eac-f109deecb033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1290b34-95f4-4541-9b18-f6882e716457"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1e8199e6-5c04-44e3-9d11-8a9b7331db9f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df5967ec-d522-41f6-9ced-71d0c1a73d95",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7b9974-aa7b-439c-988e-465a39bad8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55c6de00-c518-4e8d-8f15-4d43b5e8e6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58858374-0547-42c7-9438-28861e6f746f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499b4df4-1889-4608-aa82-06d868d1af21"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "219417de-aaf3-4f5f-82a5-27b5c0c2084e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c67e9919-a8c8-4321-90f8-26e0b6d17d71",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95de6552-b6a8-4232-8764-555f03f16ef4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bf3c4b4c-532e-4f2d-9009-2a39e6fd2727"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fac043d7-97ad-4a94-ba34-e9b484de8965",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "06857df0-19fc-4be7-ae9c-e6ee3d0ea4b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66c26dce-671d-4036-92a8-2e8ff0cbc47c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91c77285-54cb-4ebf-a867-eb5830f9f81d"
            }
          }
        ]
      },
      {
        "id": "36d04717-59f7-430e-8c39-9166a278c991",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "692e10ca-7874-45d5-82a6-186709e4827d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a84acd35-9f97-43d8-a6ff-643e5d0e9815",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "224dbe00-8c8a-4550-81d5-f4b1102643b4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e943795d-70ba-4a5a-a20c-4af73cf2b06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f3fe18-00ac-406d-a219-7c6141b0f2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c213e0-6503-4a85-b916-f5e771338055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e3112f8-36b6-447e-87d0-5b0810dbb9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e828c4-bcf2-45b0-9d66-ade8c7afa8d4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bf099d-306a-444b-b494-ea3b79a88710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bad9f9c-0365-4e96-a90c-394ee7f65fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716cf263-0daf-49af-87c1-02e160cab5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e999c2c-f05a-48f0-9e2d-2ebb201ecee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ff9ccf-b3f3-4c37-80e7-14ca84a1f4c0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f12acbd-dbaf-4d3d-b59e-e480f7970370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c307a3-6ff6-4457-8636-bd4334fd8018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ee6887-8872-456b-ac59-9ef6b480f007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9f69bc2-e440-4f8e-8e18-6a23c13f751c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1c3a66-57f1-4619-b0b7-c97f6713d3e7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a2764e-1b28-4b0c-aa60-bc85b214a77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a2f7ff-f17f-49a4-b55a-99c8c4490a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f2a2f3-748c-4edc-b47e-fd66714038d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "299e15f4-975a-4ddc-93ab-a7f41240f248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b6db9c-6da7-4028-91c8-e6f0b07f31c7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b1295c-5ba1-4540-9d12-db6b9a995c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fce524a-a76e-4bc3-ae77-b921de572076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85dcc02f-bdb0-45b0-8e17-fec46e21e257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db452bd6-df1f-43e9-b129-761f024f1c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aad2f03-1206-4264-912e-ae49253eed20",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d459a6fc-b31b-4516-a1f0-ee1a7207a9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3169d76c-929b-4a9b-8166-ce8d85bd9ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c669ef4-1aa4-4c52-ba23-b0a6227f0017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9795d02-40a1-4cbe-b032-53dfee9857f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad2707f-02e9-4245-a77f-183dce9f4fa8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50cb89c-dbeb-4eb3-8e07-5affa4bac75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9732dde0-02a4-42be-a78b-785a97a584ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564c4096-1760-448a-8972-e4034e7332f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cd8af83-4287-4381-8a3f-d9551e7f9697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e79639-e834-4a60-b2fb-13aa25693ac5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a9f705-b2ec-4596-89ff-e1ae0edd7574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a376b18d-f3e6-4ddc-b561-a76ea38e0b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5957c3-15ea-4a29-b572-b9fcb36c6f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d411883-27d9-4e04-ab5f-ee89a6c09602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb76847-c7ae-43df-b47a-9c346e439466",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807e1a44-c7eb-4cd4-b7ac-44d4a19bccfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e3cb3b-b2f9-4820-97e3-a5154c8e324a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6d6df3-6d5e-4e16-8c53-6236f8992713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a812cbbb-f248-4b84-bebe-9eefccc671ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081a9f5e-e99f-49cb-a373-81a4d80f295b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e24bf4-5eac-4bd4-997f-80ce7a7e42d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f9bc18-db2b-417d-90fc-db9c8a220bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768a3059-286d-4382-82b6-08844b1a5754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c34f24ba-2982-474c-9656-3f55cf68fcd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069ace1c-d538-4fbf-838e-d5bd3f1b0c4a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61c7a08-ed55-4bcc-be78-1208902099f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35cab290-8f98-4d69-bb79-089bb6a4a28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31133e71-62bc-4089-ba24-bbe28e270b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d532efc7-0c61-4ebd-9d42-41133b117074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8dc93b-f990-405c-bdc7-e072996857ea",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4614e8-8523-4f72-ae72-b972d1ce265c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab5e18a-bdb8-4456-aec9-cf85b5d169ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a217dd3-9c7e-42e8-95a8-e179cd3679f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3dca49a8-df6f-450a-82b6-b1388068a782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7f823a-60fe-4b6e-9ae3-85784f278855",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e026a01a-bc0d-46a3-bd57-a99a31de376b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0137b8-2f99-464d-a997-4d564f37c56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2ddc2f-3d0a-4d43-b92e-40e04e86ab57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48b5c9ed-c0b1-4213-b8f4-284b68161eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1deb2491-0900-4948-acb4-901e204f9321",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01160aeb-fc55-4ff3-ac65-ead5a2d5424b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad1f36c-203d-4261-a9de-f65fe0d38838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d19e943-16ba-4703-b549-5ef6105857b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b9f580e-6642-4be8-b8be-665a83e4c442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d99d44-da2f-457d-848b-d29ec7c2be18",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b35880-bfe7-4c7c-bd65-3164468743ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c9977e-82b2-4029-875a-2f8194dfb708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f9b7d1-688a-4d60-9d80-c75cac425ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9bd1c1b-b91b-4f56-9660-1e3a0f8d80e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df39f8c-dc5c-46de-8756-5605bf6fc718",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3776c19e-aa99-44c3-9922-f4c4da21b12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfb2dd4-d6b0-413b-b29c-8ce29d30a2c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17651e33-38b8-4a8d-bbf8-56d5ab664f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3aae411d-6a51-4401-8416-4385bf6a099a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddaf1459-8035-4447-a8b7-182ff6c914ad",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e375d87-d8b9-4c3f-b4e5-96cb1f4d255b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c79b87a-1797-460d-bb26-59022d049388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db97d503-248f-4685-9c9c-5ba62066b8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89784807-d60b-4da2-9bc7-593135d4068d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1caf5ce1-edde-46e2-bcd4-5d4b462d89c1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd83598-3bbc-4027-9958-a8b837af2913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aacbff4-2241-44c6-add4-92c72fcb4882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8e4dec-4b31-48e0-acac-cd4bcfa4641a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "63c8ff8f-2dac-4b0f-a767-7b1d56976757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a86b636-c739-4255-93c8-5d26833f1a33",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4eaa5b-1d36-4343-bb32-a0fad0cd05cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf1151c-2586-44ae-8fc0-941c1aaba6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225ee012-b60d-4e7d-bce6-876efb87f5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e877f0f8-a479-469a-8ef7-93d282c5fc24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf618911-1430-4c84-9ba7-89e170681cf1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e1702e-12e1-4d40-84fa-39b8566c596d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d6dcef-67ad-4cda-b696-4dc46e7321d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a83eeb-b6ff-4653-bd74-ec2c7280a2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb15225c-e1f5-4a78-8a6c-f30cec680dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ceeea0-5705-4f9f-9b5e-493c47a15896",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e4800a-2fb4-4107-8312-d3ed64899459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafa7336-a846-4001-a1a6-2ad57c5a7275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5890cbd2-cb2c-4ccc-b198-654984554922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6938e26f-9507-4cda-89b4-4791776c4cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de34f2a1-47d5-441a-9f86-9468be405015",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78affb8c-8547-4678-948c-ad85d66d5f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e4a343-7306-4f6b-b043-1e78eb2e2bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526043f3-86bf-41c0-b3df-33ae25b906c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e8a4b1-a329-4f8e-91d3-2b4dc5d5ada8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2df059f-6c1c-47f9-81e6-9e1241fdd793",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416b5c2c-fea5-4c2f-b0a3-6be1ddf0538e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03259a23-377b-4ae3-a8f6-8041dfe9feaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b849afad-b42e-4148-b02b-9e2c5a3bfdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "28bfe0d3-f269-4256-86e7-a29574b2e1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c80e23-b580-4c09-a403-39c4bd274858",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1ad1fb-4822-40f8-86b2-842ba32b2603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36cb655c-ce45-4ffb-84d0-8c6ed658784b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c039d44-e826-43e1-9ecb-9d0acf84f20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6819b8a3-b4f1-436b-814e-9893ccd23eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672fd4b0-4272-45fd-94b9-cb71e63532ea",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7943c8cd-c1e3-4a45-a6d3-d452e131c1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c6ad96-2fc6-4982-87b9-10761046819b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92991dca-0a8a-4908-8a22-c9d6c4eeccf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "15ef95b8-471b-414e-8cf1-0db4ec013618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e372cf7-9cd7-4012-83cf-469456fac8b0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a605bc-2db8-4774-853f-4e018bba9271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d02bb2-e15c-4278-8129-b025bcfba085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5f5fd1-79e7-4ef7-a49a-335cee018fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cbb9664-4bcb-4c03-8ba2-e6da264777c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd6dee9-4b1a-4095-a5f9-138fd14c761c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4acd211-ea07-4ce9-956a-02707397e2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298c3401-3613-44aa-bf2a-227a81e36853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f452b62c-7064-4efc-b0ff-300fbf783c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e898a82-3002-41a0-8e8a-a1e4faef9622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6317e418-4871-4329-a532-a504b440d8bf",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08252fb5-482c-47c1-b7ae-f9eaced07036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2f0ae8-8f2f-4393-951d-70296d64f0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d2ae56-6d8d-4b79-a524-fb498177c1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90cebb84-c1d1-4ba1-9f77-55340239cf08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1bc11df-9248-4bb6-b940-cca6dfa1a372",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cd05ae-6957-48bf-b286-d21a472a500a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c7d1e7f-6c0e-4164-971f-3b8ebb5b98c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab73839-ef88-4bd9-a17c-0e1aa0117f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5950f1f7-04d1-476f-8f31-7a538ace0cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab23f9f-a5df-49e5-836f-3303cad2b6d3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1877649f-6b5c-4896-9635-618940dd1f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b452a84c-2c2b-43c2-8f18-f0941a74f11d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fc8763-3c93-4ba8-b8d5-da95d61a2fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb2794a-250c-4fb6-b9e5-bcfabb4325a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1273410b-0145-433d-8766-c5c98b84182a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37776579-48f2-459f-a794-08bdf4cf5daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271708ac-77f5-47b0-a3be-f24af30a409c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd861df-0881-48b3-9f34-1b70c5ce87a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "04f104c6-50f0-4b39-ae91-df63b68bcde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b90378-6ef4-44c7-9901-c3fc886a10a6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44d2ee3-7e94-48b1-a003-6f4f072d4aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573e0637-5b1d-4e72-955f-fd33aa3db3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97837a25-a874-4106-b21c-2b78be086709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e98ac4-aab0-4f05-af40-2ed778437260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71046d13-fd4d-4b61-b4e9-290e2b099101",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56278f7-d2d7-4d9f-8002-03b4973a9300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729e2e93-dadc-4c14-b497-0b768c5824a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe0b6f7-e27e-4b94-aa26-d70309c3aa41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54152edc-3246-4eb6-a8ee-bb2a64b1da92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca8d6de-df41-4780-a4db-0e4dd3d16116",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5524f4-4d99-494f-ae48-44be6684fb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42aa24b7-728d-4db9-a831-8bcc752bb91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc605dd3-7339-462b-84ef-40e2ca50a722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14094b7b-718a-402d-b8e3-4635296c00e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec94af8-8106-48c7-bfb5-de65cb21a233",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a864aea6-ad27-4795-900d-776ce8cbeb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db662422-53ee-4063-a757-470bea8c0119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002b4a2b-4c2b-468c-a7b8-523729c44dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "10dc6408-ff80-4cf1-947d-ad658b89393f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea629f1-2944-473e-8c12-ae45dfc352ec",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd62d991-c5ba-44e8-be28-f48529078002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1dcf97f2-f9b9-4209-b7ea-4fb79fd065dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a98860-3f57-43c8-9c06-510f667180b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df5d5f44-4360-40af-9c79-0aafb9257473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677c69ca-0432-4b77-928d-6751eeb63dd2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e96dcf-07d6-4683-a625-03e511b39258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a7832b-e766-422e-91df-ddb2a7b6db0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0c6906-5c85-409f-b976-9016448c9067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cca50978-53ca-4c2f-b4fa-f719bf4a4d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5adbc01-b3a3-4dc4-b749-15e0e0747c70",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0f69f9-8712-4c5f-9b5e-ddeaba79f15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66fa3ce6-1ee7-40da-99ed-a6813c66b381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c5b11e-aa46-4aa6-bfff-cab4d477b72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a109e15-6d2a-442d-a7d4-669faaca0a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b4d828-69ed-4d16-975f-b6b9fc05d2df",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396ca9e3-5204-41fa-b628-28e9599f0bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abfc766d-bd5a-49f7-8935-a3299ecf84d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea70994d-6748-4276-84d6-0f32867a0907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb26a1a6-8f79-4e11-b0fa-972c6e966fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7122cd84-dbc7-4bc5-a3af-41a748e64b40",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedff50d-ef3b-450d-a799-4e5f18fe4342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837a7613-0bd9-4030-a541-aff60cc56b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9329966-0ab7-4722-9335-376cb3992130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "15621c71-9326-4ca4-8daa-71b515ad8315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17705fda-42b1-4952-b60e-42541b7daf65",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f5be17-fc19-4a19-9531-d9adb4d08fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd5f5daf-fb42-4065-9143-d8c2c23dd2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fa5870-d315-442e-9668-7184d91a090f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "216c300e-2b70-409a-9687-5cd0a4245eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5718de-edec-43d1-ae48-57e3766a082b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a149ff-f4e4-4a38-bf96-6ea998b0b2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28c28bd-c0f3-48b1-a892-a763004f3f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bf989e-76d4-4491-9a65-f55b6b52225c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "30c3e5c4-02f5-48db-833b-e9f6a0ee8672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd847bf3-b4be-4254-b44d-733c1d2ea8b5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82871e1e-3f1b-4f69-bc06-2704ba08f2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902ede6a-021f-402c-a567-d4b620030426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafecd97-d077-43a0-a063-c1bd76e5cd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e07cc5b-5cbe-4906-969f-782fec85d70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15927710-bfc1-4e57-8d91-835ed148d4f4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b640a8-1a58-48e6-afc7-fad41a7ca70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf32145f-6a88-488d-81e0-6ee218151cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10664fbe-a72b-4e34-8b16-5e8097bbab2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "83cbe398-2858-47d3-85af-6c0417432675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541c540d-c594-4e26-8700-02e4efa933fd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3983b700-3254-4e02-948d-edc083c86a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dc4e3e-d309-430b-bf7f-76e8d622b4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad0e981-2750-4743-9d9f-26cad8cdd987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb2513f-94fd-4894-a9df-346a92cd0b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af84bda9-2aa2-445f-a700-c5fbc11dd6d6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07821526-4284-4961-8c61-807ef863f565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8798b67f-f5aa-4469-ae1a-b7bbbc47c204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06753b47-c746-4fce-815a-10425efc57db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db3463fb-2a88-4212-87e7-aaa3541e6139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c5797b-4c65-4699-a92d-055a142cdbea",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b748523-bf25-4345-ad8e-3a6887baf145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9ff86f-75a0-4c85-bdf1-affe977e7137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8525404-b7d7-4ca8-9eb8-71ae1a824bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10f8ee22-4708-4acd-9de2-ac978dbb6294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ea3167-f975-4097-a1f5-2989311dade2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee9e636-b033-4fe6-8565-e14f09c3f4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b280e18-fead-4912-be11-594585941ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c4dcdd-1294-4140-a4e8-efe7897e414d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9054701e-4e34-4c33-98a7-6ef09d656c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f369fba2-7268-4aeb-ae4f-495d1730dd2a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d85bfa6-f16d-4bd1-ac8d-e8db0811e60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4633dc-8e16-4c2f-ba76-fbfeb1b912ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecea2dcf-66e2-433b-a990-10d6a5f6b36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d223726-6a71-4805-99ad-e657dff46c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f62ce2-aa2e-4794-9d35-476db85b4b97",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6947ed7-58ac-421e-ac8e-5d6076cb472b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe0a90ce-bba2-46fb-9bb3-6ed6a05cfe8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b436c965-0fa0-4121-a6b2-c302c4c82c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef881d54-c2e3-4a3c-86f4-b5c554449081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21186175-f6a7-4bd9-ab4c-8802b8ff6416",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2d12bf-ab4c-40e3-af03-25eedd863358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d45115d-a0d3-44ac-b9f3-5c841f27bc65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa60e1e-85ad-4473-805c-3236eb515e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd845392-682c-4538-81f9-314a308290c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4e826f-7e0d-4d35-bff1-240606f79af4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312684db-c488-4022-93cf-a2684a1181d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805a2f3c-954f-4a81-a211-0aaeb89c6b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f685aed-dd21-4227-99d5-11025d30db2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c58205dc-a8bf-4cc1-92ed-60736349a4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bb2fa3-6c87-437e-91c2-1974d9cc3948",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce2395b-cd19-4276-ac90-61934fd8af80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3b30e9-f3ed-4d13-b934-a0698119de7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d01d86-a174-41b9-9427-bc7830e0bf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e46ae7fa-926c-4043-ab8b-f2e8bb59e2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83f40bd-7adb-418e-aa15-202411043d4d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4c100b-cb16-4bbe-9061-6c58a9896241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f52f75-8524-44ce-aa9c-6def2484302a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e48c9a-9c48-4840-bfc9-3c4eca2d65dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "647c86f0-a60a-4f25-8d7c-1f9ff8ce8a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baeb197b-5093-466e-85e8-4bd6341239cc",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57286e15-f3ea-4a1f-90a0-fec6e2c56ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13781883-b021-4cd4-9345-c60a99e022e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2c57a9-29fc-45ee-9455-e57c6f6adbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84ccc82f-459c-4c07-8bdb-436f3e961b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a02a727-3052-4627-9ae0-e00040b32d07",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2b13c9-4d15-43b1-843c-4cb4a0901ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f84e71-ea2c-4edc-9da0-4760555e3f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7178fc3-2bd8-4da9-bd4f-0e0b1e1d6ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc2a571-a5c7-47a2-9cbf-c2dc42dd3adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36833090-8567-4a00-93b8-a8a5e4389090",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76759fd-7e8f-4e61-b444-b820061f3d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2578e4c-2fc4-4a2d-bdf7-f083b11758fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083db9c7-71da-4219-beb3-41cf44043c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "12350b95-1790-43b1-a003-34bcb22a0eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6f2a35-a754-45dc-9f30-75cd1db6ced5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5dae8c1-92e8-4fac-a788-30782d19fa0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7845341-27e1-430f-9f42-db0ac6b12513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b34623a-4b6b-4ff2-add4-380ddfac895d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c1a228-9c52-44a1-8d87-a085b0185fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b21b34-4c56-4bdf-9434-9b5acee92c62",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4604b926-4f8b-471e-bf6b-2a14903c27ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2701b772-170c-49d4-aa45-8bac6e7ab420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fed349-646a-4408-bd39-6663524a1b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "410cdad8-a7d2-4ec9-b512-5d6722114432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e16bc4d-f75c-4ae0-b359-f5f3d4d72637",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51175900-f126-4058-8bb6-6721594da51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e964e7-51a8-42d7-b5f3-485b06d0bd24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c414da5-2fbf-4806-9b6a-0a16cc717c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d670a438-d0b6-4bd0-87fe-810656e492ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c285ad5-4435-4ed7-976e-89d15a72fbeb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2db6c94-263e-4bca-ae01-ece5a444a2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b37050-3e45-4bef-ad62-e8ba0bedc5a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bccc54-030f-49f5-93a0-d52d6d710ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fe5ffd-d20f-4d5a-82ca-55cc7687abab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8347ae0d-1f3c-4ad8-a68f-40e9ae60aa36",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5b1e80-2995-438d-8b81-acb02dc42794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302f6ca1-48e3-4650-99ce-cafb20258a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8d5bb7-426f-4e88-a178-701a6bfec2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef736cf-7914-4e9f-9391-a04f248b6fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848768a7-2226-49c5-9bbf-1735b043af8b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc72f083-ca94-4ecb-9871-9e2aab557449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3538dd8-6944-4f95-a3f8-502824cf29a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae520f1d-191c-4bd1-9b27-e88a1573ac0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b6baa1-f2c7-42a5-b18e-e1aff96acbde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d846b4a0-b069-4386-b726-ef8258e363b5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2a4213-07e6-482a-b53d-d050810dcd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3044826-a607-427e-b240-d8a999336f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60248e3d-a654-480e-9824-675ac6cc033c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "883867b3-21b9-40a7-939d-1115e550758a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4347dd-c867-4beb-a034-261285345123",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59ae19a-5344-40f7-a904-72318ddeb7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148d0523-5f3f-4c23-81be-33f38d3bb9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f929a394-8335-4e3e-b0db-950d1940c91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9be834cf-5c3b-4a93-b494-8e27c523453c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6c2ee0-8375-4dfa-9bab-079335185558",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f926cc-34c5-40bf-b8b3-26814e82e60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cfd984d-90fb-43aa-b87e-6146db8b6b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2011d69b-a0a6-4c15-8b88-229a3011310c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8790af7-9357-4936-a372-161e45337244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e215bdf-5a9c-4331-ae3c-b803a622b41e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafe21d9-8266-4ee4-998e-99bd8b5b968b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4e23e7-8c94-43bf-9a2d-655213fdec05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20d58fd-c55f-410a-8a19-743398e0ded1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0777526f-1bd5-4ee0-97cd-e8c82eaa8dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469d8d5b-f405-4434-9292-f73b27eb4581",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa277996-eb65-4003-b556-ea69ff17139f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b6e220-aa8f-4d7b-9496-fc1e8153125c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdc49f2-d41a-4340-9a76-934d2cab9769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a32064bd-25f0-4d7b-a7f4-84f8b64d4629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41d3a95-18e1-47a1-bd47-9dfd1c208bf0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10564b2b-32bf-46b0-b6cd-d4c3bc6c0100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff3f7dc-050b-4bb5-8382-284d9175b826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a771f87-04b0-4833-9ade-caeb2a6a5c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c12279b7-a8b9-49c5-a2c6-673021cd5342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5776a1aa-d7b8-42d0-8ad0-b70d5ac2cd08",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36dfab1c-c030-47fa-af1b-a769d67a46ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5c5f54-54ba-48cf-885c-ef1656aca6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16d2901-a6b4-4087-9d88-7bfbcedbffe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aac6987-6e7a-4244-8306-d78e6622fe90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3873cb68-8352-46f4-be16-8c0d71a1b501",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e19936-cbaf-4ced-b5ee-e86241d577a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5520ec-2d94-4ecb-a361-b49cd8d4a2d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50309d5-b39f-484d-a1fd-4e2c1e47ee50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3419ff1-0445-428d-9b8e-2fbf3c6db150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a33de6-8bf2-48d5-b66b-db2833bceae4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195434cd-31a2-4a03-9f1e-51cba1d4269a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2112c90-920a-4b50-8369-10b818bff49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ec907b-adb1-4cac-8b67-91e5a270dbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a81dceff-fe5f-4e68-a54a-244da2073e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fb63fb-66ea-40c8-9920-afc92df48f1d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40acb24-8943-424b-b205-f891b740721e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2864dfd9-c6c4-4179-a977-0c895f6fc3c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e371532-8d89-4267-969a-8a69b3a080bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f213377-00bf-483a-ad3a-3985fc5b392f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1814310-37ef-41c6-a204-61fd37f4ad39",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1bc508-05be-46e1-9575-7e208bd4bb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8f8247-5f1c-43f5-b6ea-404d23afc73a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab1b9cb-9053-4098-a3ab-5a9e01d3a2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70bbe121-ca1e-46c4-a381-81b768ea4131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe47094-c4d0-41c4-b3ae-ba349af89ff8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd5a7fe-7331-4d9d-b8b4-29719b9854fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a832d72f-7981-4c5d-9b40-74fc3c9d33f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f294dbf5-c86d-4f34-8631-63688ca0a74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "299e8a6f-e7a6-4a98-a7f1-6d9706ced4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367d60ba-62c5-4d4f-b437-5418a6b89688",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f756e31-cfc7-4670-9b0c-22b1b0ae05cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9ea9f5-53ec-4767-b4f7-6042208b3712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b63266-f7f5-43e5-96f8-98567dd7960b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8166d5e1-4147-456d-8605-05aad981f7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f4bdc5-ca97-4b5d-87f3-aefc381e80f7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecc92cf-5d11-472f-87eb-5f2e8c82485e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "564b052e-baa7-404e-8632-6b051e2cc696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70aaedb1-0e9c-4a3b-b566-90198158cdf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e01be3dc-8567-471d-860f-ff91ce159333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abc9666-a1e6-4b7e-9375-95ae04caee45",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54708c37-9b33-451f-9122-298e22559226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2787ebb6-b1e9-4858-8a83-88a74f951950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f6708e-6813-4765-b964-4162e495869b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54bcc8d4-041b-469d-9eeb-a10eb467a868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933646a0-be19-4834-86d5-e8e97d84527e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2200b10a-0bf8-4062-a71f-cfd7e5ac32af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1672d8-8938-4ad1-a8f4-d0d3e9c60e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d91b2d-cdaf-42f4-9fa4-ce5f35e6d3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e92a709-eb6f-4e39-b084-b58fd39e3c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b7d809-0e05-4001-aa65-7968887eae61",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33266b10-c92a-432b-aeac-f02c79c23810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74821c21-712e-48a6-8057-ce99db88ccd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bb6b33-f097-467a-9989-9e15bf0ea2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c66fcc5f-10b0-4b3a-b5d6-ade120c8069b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6dd9fc-a926-4a14-bee9-436abb542626",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f7c060-b09c-41ae-9e7d-14a094ade324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8e4018-9881-42d4-9411-bf94addedd36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34376e80-4b0e-4cc5-b3c2-576172f881d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "116a0b55-09cc-4230-b8dd-b021678b575e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e84166c-1703-4166-a7fa-29a72727b60a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7baf25-777e-40a1-8ecd-9091999c55a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "864b6de0-664b-402d-b8c6-8a84980b0c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21844308-fa3c-4389-ab31-a21e361eedb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac387db-05c3-44a5-93f0-e2ea9b80ccd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50bbad5b-f6bc-45b7-aedc-96289a78eac2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b49aaf2-9c7a-459c-a4b7-623e3b286291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea261edb-5be0-48cd-a0ec-660b2af5aaad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f89772-fba8-4430-9a88-dd1ad0a0dae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e19dd2c6-7c63-4a33-b9e4-519f94a0e1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68c8001-e14c-4a15-86d2-edc1ad13bcac",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d12cf39-7103-4bc5-bd2b-1778af7adad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71c7a8d-84d8-4206-9833-c2c356a8119f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a95f22-c0fe-46b9-87e3-0e1903d2670a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc899de-185a-49c5-a281-43f7c04770a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc030ce4-3488-4a69-b618-86678b2da749",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b165b6a0-2281-4163-826b-3702932b23a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660b63d4-f5a9-4027-b63c-705b20df720e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a963575c-8e66-42f9-ab91-eb6f32c00199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d7479989-0b3f-4582-a848-d519e32e682f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d51340-9e8f-4362-8c0a-c7a6a7eb6cef",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bcc317-fe81-45e4-9c02-94ed710c1aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0c576e-e3f4-4909-b3ac-f5122b876565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba376b2-dfb5-4e10-890b-b15185fdf40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1a52c80-1ab1-4214-b96f-9854d37711ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea41bad-92a9-49f5-9425-84e6136f5d95",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d915d6bd-0a78-41b5-aeb0-44b0f323018a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21331025-2f98-4da0-9417-4e2aa8c7c83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2fc87b-1e05-4fc9-9691-85462fd70333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8382970c-785f-4bac-b7c4-6bbe12dfbc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63e762f-4e33-4836-b84e-dc23c047a1cf",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ddddbdd-8fdf-44e6-94b1-5bfd8e504225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0028d794-e660-4540-9da6-d50af733864e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fa4480-7f9a-42aa-a39e-4cd7fd808df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b1e4e9-866c-4679-a674-c8cfd08a7a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b0c72b-5411-42ad-aa6e-914e932e3be2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c3a914-39ae-49b4-bf56-a77316d528f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e49b6aa6-252e-4ca4-b3e9-1d98a09c3482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c20ea26-6ce4-4565-a9af-c22bcdcad7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "83985a43-983c-4d72-94ae-016cb9bf048c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f840aa3-d129-435b-8a47-c933a489a34c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "934ff7eb-6270-48f9-aef5-1af6a8c926bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067a81b8-6c66-48f7-b558-ac00f9f82e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c545e674-0eb3-4fd1-8df8-a60d9f328702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f974e2b-fd16-4112-a0ac-3dd30a28ba0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa3271b-02d2-4736-9fd9-ac342bdf277c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15a3c21-c794-4ee4-a5cc-53701eb12b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe03792c-ad31-4b9e-a79a-958500be5053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3817af82-8408-45a0-963e-c5b3fa273ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3069033-8e83-4b11-985c-94ea16be0d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270ec765-dfe4-401d-b3f3-697c005d6e3a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003bd052-44ac-4f84-a3f5-f2c846e148e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1456ed01-2c14-4c15-8ef8-39e6126889a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f08aabc-53dd-4ca7-9805-a59fce04fb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "03261514-9838-438d-8263-ee288d1142ec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9eeb09ce-693c-4511-965c-87f2cb08f6f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "901e988a-e4ed-4e4e-9381-e8596e24c6f7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a4fd8f-2778-48c8-9ae3-4b05389d0459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99caab5d-a641-485f-8771-708b588b31db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1922828f-e6a7-454f-b8e8-649375bf1a6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27f4dca8-b8df-4a15-8985-6be4de0f3d0d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "767e7a02-afc2-4d17-bf73-5c4ffb6c0419",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7ca8ab1-3863-4517-be54-4ddd31eede95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19ad61d0-9907-4542-9b02-ac079f816b12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09ca6d0e-73ba-4fde-9d31-94a12f2a66d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "43624bd0-91be-4906-92d1-0afd9c69385e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "63c190f1-9864-4e90-8292-2f25c4495b3c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0cdb4d18-c9d5-4ce8-b21b-2139806351b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7a642935-6ba9-48e6-b814-3caa5ca659d7"
                }
              }
            ]
          },
          {
            "id": "09c610c8-e040-46c2-88d8-8f7accbe2ed0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e424a6ca-f31f-4cd8-91f5-c34992c832ed",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db165919-8921-400b-8be2-48f0a92821f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1e265ea-c842-45f0-aa3b-e9e3fda725f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8f0b82f-7b64-4dd9-adff-6e2da9daa791",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "acb255e1-8436-48af-a8e8-31487a1664fd"
                    }
                  }
                ]
              },
              {
                "id": "490865c9-ae9b-444e-9b2b-77b81744c545",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78e065e7-6b44-4cc6-9335-e79fc785f5e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3b058f0-c83b-4021-87f1-2394d0d799c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2812665-8775-43a1-9a04-454a445e5618",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f075122-878c-40a8-8883-12b608547f62"
                    }
                  }
                ]
              },
              {
                "id": "27d057da-3e03-4504-87c5-731253f5903c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7544dde-d25f-4c82-b4b1-28451f1194cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "412e01fd-b0f9-4743-866b-b06b0eeb5563"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49575548-0ba6-4a17-acdd-812b6cbafaea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1aaefee8-a4b8-4e40-a39f-c81408b45eea"
                    }
                  }
                ]
              },
              {
                "id": "c19e90c5-7fcb-4bb3-abcc-850699e65829",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b22b71b-63f7-4b4d-8220-c26b8175830d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a5a9cd1-e46f-42aa-9738-042262a35724"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19466989-e275-4927-b910-81126a3883aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0403864a-6a5b-411e-b7b2-d7e51752b448"
                    }
                  }
                ]
              },
              {
                "id": "96598a6d-f4d1-4fc6-8461-bf77ac573ecb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e178876a-82ff-4533-a2ba-d766c06d505e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3086bd80-42cd-4a3d-9659-5605fd421973"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd7ba086-e791-4041-b717-6caedc5a20c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "343ef417-2826-4fb8-a991-ddeb446f9618"
                    }
                  }
                ]
              },
              {
                "id": "4916c8fc-9084-4c89-843a-e91d8d4b31fb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ffc666d-3bfc-4718-b8c4-8548fef280d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "38c554b5-d8af-49e1-81c4-96170f0c8e77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91c32851-ffcf-41fd-b6f1-17995e81f5f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "535e2efd-2962-4d6b-a6ef-d656b321ea13"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc2e5980-d59a-40f1-bbde-d2d8db563b00",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65748869-51e9-4997-9702-9415ee835a5f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e7a8a8a-baf8-49b4-9fc2-623d12cbca3d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "215d43c6-607b-42bb-a3d0-c86806464129"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a37b81c2-ea1e-46bc-9193-fd2f6996873b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "57ac7bac-56b4-4344-88ef-4fe02cc21144"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c61ab98-6441-4e0a-8d9a-f34b753b311a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd53c772-51fd-411e-b7a6-66e523f7e8a2"
            }
          }
        ]
      },
      {
        "id": "c73c5cd1-d987-4640-a92d-9e8cb2623ec1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f0bac09b-fdab-4a2e-8788-47c4adf826fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a0b9f65-624e-46d6-9012-575c09c9b552",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a5728e1a-b97d-4ec4-9f03-203179098d6e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15604d9-2420-4dc7-9905-c2eea3a1ccda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd9f638-4123-4b99-ad5a-8871e1801f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8115a9e2-9896-431d-b830-2a3487aa868f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "01905d5b-b88a-48b6-b1a6-51bbfe847e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45fcf70-6f90-48dd-a1a2-15f564a01418",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6615900-fe1d-43c6-b59f-f8b8b23862bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c51669-333a-4210-a341-3f192353f512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3240ab9d-632f-4b00-8940-850604e27331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3254612-7e12-496b-84da-0c9f3e76a904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944d5087-a988-47ad-9b9f-63ef1453d3a5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59c35aa-d4b3-4e5b-94c6-f75df3b1e893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b171c2-6445-4925-8bba-296c26348453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c9fa58-c93a-41e6-8319-c9bedb2a557e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09227a81-6469-4bc0-b2cc-f0e803c3785f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5174f9e-d6b3-4004-b148-cf4db83fabc5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a4c2f3-0e8b-4548-84f4-d297a05158a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e19d20-3443-417e-a816-0ccb0af1dd68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840f1bf6-a8d2-4420-a0e1-7900e4a2e2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2292a7a2-6ceb-4c06-b706-ac81800cf356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7956a7d5-e0da-4340-bc52-6537851609c9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7399a13-1ea2-412c-bdf3-7df1e8367200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606752a3-fcbb-4288-ad0c-93730bed4f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ed6a27-9390-4b85-9de2-f87abd458158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d120c168-f99d-45ca-abef-e4c8ef5cca1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729b7b85-2ab7-4c9c-bb10-8be22e5b97f1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ecaf6c-95ce-4a75-8ef2-c5916bbcc2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "447c5db7-e4fa-407a-a317-1564654a79fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae7963a-508c-4a36-98af-ac3f76f52d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b137bc-ec17-426a-8f89-088298f083e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a95f2b-80a8-42e0-b280-79531d8b1068",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edddd03-37e1-424e-91af-bd45383401ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300326b4-9174-4d15-b92c-2656489c14aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aff2705-4a4e-4632-90b7-f69ba1061fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "36d371f6-6918-4a51-82ca-16ace4894c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b055a821-78e4-4fd8-bcfa-36910f15883d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6661a2c8-7726-4bb5-8cda-8dfccfa25014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c502220e-95b7-4478-b55d-c81793ab5f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8f45df-e6b6-4e47-8eaa-e81fc176596f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15c68520-cb82-4715-b29d-0f55de8efb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0eb08f7-42f7-4ff5-b9a3-634d369a9051",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0f7c45-4dea-4d8d-a5b5-791d19173bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1680e7-4944-4556-82f4-a1b75af67632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1261256-5149-4b6b-85ee-183058ccb876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c04d7693-9666-4473-9972-810e52cf3430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab5085c-82cf-464a-ac4b-c6d0b44bc6be",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0771e9-03ba-4623-b67b-b09ba9bc0158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85df7855-e83e-4b85-a8d2-b07c96831da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332a4e5f-1ab8-48ca-8f89-8f701be0ebbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd47a2c-9e22-4747-ae25-93c26ba997fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ffeb30-9c04-4796-8cfa-c2956d696f40",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec0bb34-be1f-4dd8-adf3-57a3f9be3f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbd2d3b-ffba-46c0-a95e-3c5afdd40ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e380f37f-b7e0-493b-adf2-2fe626731b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "325c2571-97a4-4cbd-9292-2b4fef8e0b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd885605-09f9-4e6d-bb65-957e25eb0695",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec872260-32db-42d8-84d4-099e4b11adef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d393bdf-cb3f-4568-a2a7-f6a1e172451c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a767d9-0d1b-4440-bfe6-b53443550242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d40b6f-958b-4fe4-a02c-b6e55270dc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f8ab56-b1bd-4dda-9eb9-d085491f4b49",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a95f184-5628-42af-b5cd-58a0ded0c214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fa8d3c2-0123-4f6f-af67-b29da3a21692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a797b6d-0f65-4ad1-8cdb-2e1b981a09a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b41adb-0682-464a-a004-14b5a206041e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c3fe13-159f-4331-935f-db7c47fbf145",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b6ce93-8ab2-4415-9230-625558ee5abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1f423c-c026-4cac-a55a-4abee4f7abfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4f71e2-ab9b-43c9-bb75-7a06eba9c85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bdcda1d-9ae8-4524-b111-7c81e4bd3214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab73ab4e-3afe-48cd-9e54-830b565a0141",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56aa56ae-be6b-4995-b8d4-002c798c19f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0633e4db-bcfd-4ec2-83a2-605dfc6f2d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8985d23-837b-41c2-b7c3-b5dfed63da4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f86250c-fefb-4751-a2a5-14ea30c516ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97bfa1af-1ae7-42e8-99a0-5363fc3e634e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06920f7a-c02a-4024-83f7-4a8e6c19a067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2333fe81-0808-4b19-95ce-bd8d18f09248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d045848-6a01-4a59-b8fa-ff640a38ed57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c70194fe-d19f-4400-a705-b0d43664cea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f321267d-b5c3-459e-8e3a-aaf41ee5e88b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf17eea-6246-40cd-8fb1-a40c1b9b0656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5594e2-6a4d-4615-b693-8a17f874caf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e10946-f741-4f4a-9503-5f734ef06c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9a569a-5e6b-40a5-8220-839525389fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0675911b-a6c8-471f-b431-6c23d0eab2a0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dea2df-e839-4a25-9169-ed3cfaced3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04558f39-81ad-4159-aa4e-d6f87dce8b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43a6c25-2c0b-4160-babc-38f1798488d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca570dd-a7dc-4acb-8361-608b583d5890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5e494d-58ab-4321-aa43-a31a926d3265",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de58e2a-a6be-410a-947e-be92376783a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66038fc0-1a0a-442e-97f7-d7619c4ad609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be87544-7c03-431a-8751-ec52d8f55a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a77c610-89ee-4092-b899-4d5bf0228121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eeb160-c8d5-4a93-8f2c-ffaead6007cf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f91fb28-ba6f-4704-857d-67a5e35422b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8c1d4b-47c6-467f-8f79-c25276122721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb5504e-7f3c-4f9c-b474-47deeebe82d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ebce141-7e68-4f90-bad2-6896eb95397a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61508f91-22da-405b-b8cc-a1ce8c7fdad8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf4f9d0-baf7-42e5-9d95-a7330e55f2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a797434-146e-4fd1-842b-60179baa7248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73495047-b3ce-44df-95f9-a67789c6eaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76ad90cb-9884-4930-981b-7cebbcb96d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6433c7-3ce3-403a-ba98-4d2ca917845f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fb6e02-f4d4-404d-9c8b-b2826f7781f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f09fbba-aff2-4cba-8986-310439497d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5330135a-f94a-4159-b022-62331bad5aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6afbe0-85d4-4d80-8ab2-b30273cae9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ac958b-0656-47e6-9189-91b8ef8836d4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f5e377-3a18-4c7a-94c3-234de301c822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa17aca3-4796-497b-8afd-53143d26763e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa521ff-cd5d-4f49-b27b-4cddeb488ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2004e052-57df-40b4-9b7d-c9e5ee7abb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47e2c51-2801-4651-8c7c-744164760fbd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30cc191-db2b-4614-8606-c63215e46c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8187e35e-42bd-4383-8203-38e8937ec22d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d06b7f6-6f2f-4a52-ac06-66bd509c3d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa84151-ff30-4665-ba83-ec0d4cd23955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5740c90b-62b6-40be-9583-e7cce048d726",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c390e4d0-37c0-4253-b9b3-783b2de3945e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ceabf4-39b7-4525-ac7f-e26811c3d142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4535a6e3-9aaf-4711-b1e7-a0a050a42f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c323e1d-88b3-4ba7-bcc9-de4b512ba735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8891a4be-4651-47f0-bba2-731fe9bab551",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8d3a9b-c503-427d-8dbb-12ff61e573fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf28515c-dc7e-4f78-a365-69dded6b279a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f34944-ed10-4747-9916-1243073b7300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0345d9f-bbc5-455a-aed4-11ca16496065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da6ec47-c623-4927-be2b-00e637000a2f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3e4b67-3f80-4ddd-8f55-28e5f18d2ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cc6d2c-7486-4e5e-ad24-c7a161c94104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c579544-e9e0-40c4-8a54-7423c5278c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cef172ae-53d0-4ec2-bbab-f6565948dafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc07cc27-5fb5-4e62-86a3-c1da7905b7aa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc35725-33a4-4008-b027-73aed5c6e2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d5922b-a072-4f9e-8068-cc5648098b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2847ba9f-526f-49e8-8f71-a032e944b4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74a1d806-6969-4529-a2cb-63efbfca367d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf07815-8293-4365-9366-0310985e8ebc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e1edab-ff77-4269-84d6-3550e9d386ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e429b8f6-7ff6-4e6c-993f-1e0f218443c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96b7888-37e3-4cbd-9360-272834eb242d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f02fc3f7-f717-4001-bd8b-0ca74465d5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e3c722-ff84-4e6c-896b-396dab01c089",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fc36c1-f237-49c8-82e5-118c2d85d2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af94e0ac-fcee-4999-80df-1413477b4d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60925f67-cb48-418f-b13f-e3e2c63a6422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c30544a9-5e44-40a2-be7b-5595f63f1a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2567f2-e72c-4be9-ae05-78867f9bcf33",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb1748f-9bc2-45ab-8eb5-7822c596f75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4567ea6e-3db0-4cf9-874a-ad3395aa7ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6dff621-602a-475b-b826-7281850e1a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a324ddcf-2b02-4d1c-8571-ba6f54583fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14389abe-f81d-48f2-b1b4-bbaf843b9698",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e7970a-7b29-40d2-a82b-a3bbb881e173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91238750-afd5-4892-8b9e-66bd98366537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0949b818-b836-4638-a480-e7b385f869ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4685f58-1af1-4d3f-a62e-0fe844a98340"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d425f7a-6973-4899-a824-be9ef1ae34b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f855a028-7033-454e-a2a9-58fd8960a837",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129247cd-c4e7-425a-8f21-4e12c4672b5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "df1a455a-2369-446e-a566-ae1be0972640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac67fc7-64b8-4726-8802-7610f057f385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bf2e24a-5da0-491f-b46b-fc0df984f19e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d229154a-b155-42b0-a3a7-5343384052bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dd18dbe-3bc2-45fe-8763-1fffc38387b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6762204-1344-45c6-9956-8dd00fe8cf26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "128d491a-02af-444c-8bd6-dc9bc3789205"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95c88bf1-02bd-4838-8f53-7420392c9897",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60d720b8-c59a-4d49-87d1-74c4d83d13eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3041fd35-89bf-4aa6-8bd0-3b9c88bb6124",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "856d7447-f809-40f8-a668-7c46b326ff12"
            }
          }
        ]
      },
      {
        "id": "e88ac058-2664-431b-937b-3988689c3825",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "e388c19e-5ccc-42f4-91aa-333833a9aa02",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6d4aa7d-91f9-4ea7-a313-e04f95222462",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1f4d3ec6-edb1-4b09-94c8-148f57b870db",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05578035-02c0-41f2-8520-7a73376191b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc4f0c9-2b97-4fef-b408-ea229d8cc930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21643243-4e4f-4f9f-a369-d383d53ce60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee258d13-628a-4bfc-8ff1-b5706a63883f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1555296e-5cee-48a0-a471-9f89fff08cf7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "112fc222-6180-4763-b7fa-46ffa6f74094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920eadd6-0dd5-4c19-865a-fba1d8156c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16891c1-3cf4-49b1-aa6e-8f071f87b10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "39c4874e-4e42-4e84-ac27-a71994d93b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1a9529-1af8-4f1e-a67d-2dee0a36a8e8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351a5a84-2daf-4d7a-a90e-5193a11c5207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7880ae-5643-4c39-ab80-7f2817d4f744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c38f0e-a238-4075-aa5e-94f7e9e13cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7115651e-395d-4855-b6e8-2003883c9600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37305bec-3b05-4b3a-8634-ec25eeb1d81b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2599a434-57dc-4332-94d6-9c8c86c96b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1385ed23-03a1-4fca-8c3c-6253ce8ef6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c84b53-0eae-4666-ac2f-0e710831ec6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a51f46e1-90ac-4a58-9e98-304b37611c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bf4905-7850-44f0-836f-493bf7baf341",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff91506-daed-40d5-aa1b-06a397fa0bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4efd089d-dfcb-46d1-ae69-9ac92e09a6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a0d365-409b-41c3-84d1-07f059a03c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c33cf97f-7522-4c17-93de-90c5e0e087d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8b5e27-a56c-4bc8-95ed-096e1530cb78",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c3b93d-caa2-469d-86a1-908711b54f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bdb2d5a-3b7c-4ed4-bc50-824982c7f9ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835436cf-2645-4db6-b9fe-98efe97d3b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42f0b715-0d13-4241-91ca-26b33155591f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31f3e32-bec7-4df3-9db5-8bf38eb97600",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fbc650-e771-416b-954a-b33394b7bddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39209f15-eeb6-46f5-84fd-81fb8ee6984a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968113e2-65af-4aac-a82d-c129aae4e7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "01c02a15-29af-4054-aa01-bbb867a34ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43747bae-750b-4732-965e-ffadc4fb2071",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5a10ca-ad12-46b0-acc4-0d5fdbd88ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac23cbc-1394-4999-9e42-f626d6e01270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11544899-32f9-4442-9969-2efb72aafece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd5c893-563c-44ce-840c-f63c8881ee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87319040-3a39-416a-ae61-ce045aa74515",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc6ea5b-bb6d-412d-ac9a-0c36d6b35ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4796268-d570-4277-86b3-8b987def64a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a511ac1-5987-4480-a8cf-577efa76bdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7d5dc2-7ad6-4a5e-9d15-1b0eaf46bf2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0a9d70-9eb3-4aaf-9311-3898bba2acf0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd2b5af-5965-4937-8677-1d0340ba6c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4112a6b7-e7ef-4c55-9a94-778023bb9647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8de148-7efb-4375-a8fa-1401c3b72282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24c5a3b2-28d7-491f-b80e-22b8d09f9b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19dd8ca7-18a8-4570-a1da-26ee3356dc43",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78949f39-21c0-428b-baf0-1042cd732c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60488403-82d3-42f3-adc6-a91a0e51fdab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d501506b-da07-4e18-885e-cb71d8641b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c66aea-f99c-4b5f-bd00-3c33ede61215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a61e6d-9e92-403c-a6d9-9b70f1122fe5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f1248d-c67d-4875-9670-eee8a3992b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5879f223-9947-4554-8de2-8e423ca72d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f100f7e-e4f9-40bb-915b-18ce932d0138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72e7502c-9fd6-4739-b8e5-2002b78bfce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f9c61d-d6e2-4b34-af91-1e7cfa704e15",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ae8d8a-99a8-467a-ba6f-9f259f4a83ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec290daa-b84c-494b-8300-a0eca3d0e074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa63b22b-70d3-478c-86e8-e92ce18d91a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aad82939-1f9f-4588-a7e1-b569bd3b3752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df442936-4d77-4a9e-ab2e-f7c9c176d02a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f91114-507e-4c50-b69c-0d5a5340bbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f090d630-81cb-4b63-ab6a-f25a7bc98a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c63522-8208-45bc-b171-467174bf7f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a67c6ae6-ceb8-4cc9-83d5-f1cc9a3957f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d72555f-6240-48ac-a9ec-237b6ea57574",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfe426e-f77e-45e7-980f-68505bee4664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde07b35-514e-4cdd-b30e-457dcdea5902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265fdf5d-3e2d-47ff-91db-1d948c2cd508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d827db9c-024b-4680-a290-d4aae3aba9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b319e443-5bb0-484f-8f83-b9654ddf6d8d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac4312f-2a80-485a-9950-591621be6280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7abde87-65f1-4c23-bf84-b5c17c8ee814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fc6082-bcef-41bd-82ad-e1b51ada8477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "71d25fe8-ba97-4fa4-a8e2-a0d688392d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae26a65b-d557-41bd-bdab-22dff689817f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbfa617-3035-4ad4-adde-29dade39a25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f4a8ea-ace5-462d-b9fb-3b42ec49611d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409d80f7-ce30-43d6-a374-4c0712482dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f89c260c-255c-4470-b453-4c9851195e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dc3f3d-f78e-4d2f-b3ce-b107a3b3cde3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e68df8-2869-42c9-9cf5-68d1926e232c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5212022-7277-4c97-a1a2-1870894c1139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1308c54a-c745-4485-b970-612f6510fb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2510a3ef-ff60-4fa4-8f6a-16c10081a7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e661314d-6f27-48a5-87c8-b17ae182b0c0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5f4d1e-d0a8-4863-8243-0faa3769e240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b9ccb0-854e-4c94-b20f-fe8ee8d67e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b243f2-cf18-4aab-8fbf-709057e95236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dcacc28-3b31-40f3-880a-f98e16e30a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d741a63-ac62-441a-b19e-f6a5ef297a47",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0403ab-a609-4054-921a-dc97da168811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400514b3-d1ac-4f48-900b-f08ec54e12eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108c888d-2ed5-438e-9a63-5238d80138bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c6e75c-5a21-42f3-8aeb-7957c0f4ae42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a97807b-1712-4527-a225-e025dfbaf125",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3d4029-c111-4b2b-a971-9af603f5770e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351c7d64-4a0e-49e8-8186-91ae178bae62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b263bb-d304-47de-9ed9-4fb646b11f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de80df16-4b01-43dd-8673-a425a073cd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480364dc-9767-4a45-ac17-28f9d48492f4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ce1226-3b62-4e01-9562-459fbe8d4c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60636b39-3a03-4867-8d16-f83f0afcf3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9660a6e-2207-43cd-b424-723c503a17c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9df94b59-1550-4439-abf1-3f8eb97d32f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6e668c-58dd-435e-910d-c4985e33c91c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f68edd-a337-41b3-8f48-8c377d130331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc7cd3d-8d01-4b77-ae77-a23c8838a0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e64f91-3e54-49e7-8a62-ec5cd952c385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f60edb9-c0b8-4406-8662-bbbd3136d94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d50151-723f-4de0-b33f-cd723fb0185e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ed1b94-76ad-462c-aac6-a95bbf4b24e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5667b5e8-d58c-4bde-8678-f4c1c936512a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed5b786-a9e6-4ad3-bbf2-ce2bc45dea6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c274a87-81a8-4545-bb0e-9851959f4686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa0ffe7-122d-49b8-91cf-bad045cdd5bf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5b4678-8888-4f45-8269-65966acee1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc6b0d3f-c000-49b7-a89d-3cf8e89da6f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7eeef5-e7cc-4c9d-b174-11490623a458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2064429-75d3-4125-8866-83e0485ef0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93926954-7aeb-4a3b-b611-148e08cd1cab",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ddb5ce-9066-4561-bdda-2c3ab5e7efe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd333ea8-7d4c-46fe-a108-8b984ff85161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e2e3a9-27a6-4bb9-8008-4790fbe96a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8117c2b7-0189-4be2-a5e6-42b96906f63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a635cc2b-7f98-4f95-80db-a5ce4ffe30e8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf0c3b4-bf97-4374-8fe4-4215ef46807f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9118498d-e078-449a-910b-a443d31395d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fad04df-536b-4376-b155-de3e54e6ad1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "767d860d-5576-4816-a74a-ece5e8b26bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2ca5df-a76b-4ffd-bab6-4a574f7ad562",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f02dd3-c213-491f-8f2e-dd6ac699b1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd380eb-fc0a-41cc-ac0b-08445aadae48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac26852a-12a6-4a33-a693-e8b05a4c1514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b51ee32f-6d26-4e69-9bb5-56c3b0ba0bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550afd1c-f1f3-4299-a3e6-5f3d9ccd66e1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95268b1f-c859-44ee-8b38-92a0864e07e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601892a8-869f-4677-89ce-772ed9f1bf79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f11b7b-429b-496f-8b7c-8af2d3970347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a69eff85-2ee2-4611-b1eb-1721bb3d83e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c10370-0b02-4f93-af86-1978b104f339",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc77204-d494-472c-a1f8-fc0e6ea8bb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f3fb6d-6640-43a8-97b2-bedb20bd1456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f54d590-6850-4d37-acd6-2bceb784a692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d17e209f-9a12-45b8-80eb-a3ab0aa7efeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6648f720-27fd-4c28-b0f6-017d8b83209c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899d31c3-c51a-4cf3-b107-d97c199a4190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32594792-7710-4a03-9e94-36e3db59c195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e484fd-7036-40e7-ab77-adcf5d0ebcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "424cf660-d39b-4e68-8ddf-fb518aeca3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9477f1d-5d67-4414-a03e-77a05d393a65",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bab3331-9318-4028-90ff-2221d94f8bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d39605-6f2c-4957-872f-44db2085f2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d94d277-bf9e-4eb2-8b2a-7c679b1ea017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c76cc3-5280-491a-8d36-ea6ad94eb0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ab6c11-f44a-4a07-890c-14009bd072af",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72176bb7-6a62-4c4c-a835-b707b9c92318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8812ef8c-23e3-4133-8bce-d4e404943f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a3ce3a-42c4-4c86-9e85-083e795c0592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34424706-8480-435c-bf20-42d96abfa997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f90514-efa4-48fe-8e21-8bcd8f8c1646",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd350df-e389-46d9-ba5a-64bb46c54cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c25fec0-0971-4705-a147-e9846197d7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa02b8f-df6e-4db7-98d6-45d291eee0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0f0c10-2ccc-479a-9b2c-6d71539a973e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4347d081-55b7-4544-8789-926d3725226b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c50f0e-9d32-492b-b9ec-b74d65900743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c246686c-8764-4f66-a07b-bb6fc5472b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6e7d7c-5acb-4bd7-84a3-d13242d04340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df15cbf1-4648-4693-ba1d-00bf4cc608d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6aa8ec-476a-4e11-a179-240d11317aac",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f252450-12a7-4d53-a3e4-c37df534e8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30fc4811-8984-47e9-93d3-238fc9eba13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728b0772-a34d-42e1-a0e0-f1605c374495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97067c37-72a8-4ac1-9766-a9c3eee66b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56398a6e-20fd-454a-a29e-c425a8a2cbad",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee015ac-d2d7-4f7e-a618-581b9a66cf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896e304d-ff53-47a0-b5cc-6bd528f6d51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c24c61-a1cc-4bf4-acdc-96b8a8cb3473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a81f8c-bdbf-4107-8fb6-b974060805ac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "41011496-8aee-4be1-9ca8-2835077ba4fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d29e8b6-a3db-45af-af25-78d6b9f579e9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6915e5f4-20e4-4018-8acc-7b33f6d93f22",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "953ed0ea-6d7e-48f8-919a-13b802adb2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6ae51c-1ba1-4e78-b3aa-c1fc4bedb618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49db1af3-ea1f-4ed4-89b2-1145e74f4c4f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da225fd0-5808-4e2e-8a50-9b0b391365ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15de07ca-7830-439f-883b-9f9be7e6ea9f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b5dff30-7b09-4e03-8932-7d620e20b154",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "251247a8-5c3d-4c7d-88a6-7b0a9453341b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97c6f691-b1fe-47a5-bc1b-983143f3034e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3ffddc95-7f52-4c3c-8d26-7650a8f02c22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a779055-00fd-43a8-97ef-51bf368278fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2bba7c49-5453-4a7d-b0e4-370d8aa4a88c"
            }
          }
        ]
      },
      {
        "id": "487d538e-4ae4-4bb7-9994-7988110a8ea6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6c7c5449-18a1-4455-ada3-40e5710c227a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "682b1ab8-ac85-4ebd-aa41-14347416a660",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1331834c-9d67-412c-980c-7f12e90bedce",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f07d81-6bb6-4a78-b6a7-63bee4aa420a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346142ae-1a27-4ff4-9b20-01ade058a987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8677eac7-4918-401b-9447-ebd94b2b73b6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82c48ed-8341-4a0f-b66d-e985c2d5e15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d321ddff-697f-43a6-8f03-2189269d7e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26704cb-41a3-4213-83e2-62fe5da639fe",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb71699-6ed9-439f-9da8-35ae9c02fd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e6ac2c-da10-49d0-bd2b-d1f65c2464b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac3536f-9bee-456d-968b-4b837f6146f7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b1b183-ac9b-44c4-abd9-1bfd6539c428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4219a2ac-5bd0-4da6-9531-7842374e7246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243269a8-8f19-4c5a-8c34-8a99b4d83e92",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb65784d-4bc3-4d48-8024-fe9cf33c6c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1db58bb-445b-4f64-9baf-e97366121cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa50b4c-5e08-412d-a43c-a67fe6b995ee",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297969c3-223a-473d-b720-d4758b795d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a5ce293-6087-4dc2-9712-781fcf44bf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56f72e1-f829-4bfe-8b54-eca8cbe465be",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d540b905-eb28-45f7-8b82-33d9d4e2151a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be94b6a1-c302-47f6-b111-639e58f47ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4a466c-99c4-45d2-8c15-bcd9350c4329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2968a71d-0a6d-41a8-8399-07b946749c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72ec84a-40fc-4577-a18f-59fbdac9ce18",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310923e2-32e1-47fc-834a-67198e66350f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d718b57-8656-42f2-8a2b-130b61a2d706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dadfc76d-745a-424c-baeb-d427bdbae900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8790b49-1950-4045-8ff9-b15a62aabb00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71ea789-3879-4a4d-a125-105f15202507",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604677bd-b95b-48f3-a7db-a150f8b346c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9ccc5e6-455d-4740-9945-d91738bd48a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058a2786-00e3-461b-bb43-beeaf2a74c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f73d81b-4037-422a-8df1-775adb88c0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f23e59-d543-41e4-adbb-cbab444be484",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f07bc9-fc19-462a-89ff-b1c99b536241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a80746a3-3421-4c6c-94eb-c189f11f5f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2353ef-93e1-412f-ab20-db58948de690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff227fe-dbe5-45e1-be97-0b421953e6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cc50df-5cba-4d2c-b879-d514d90cc28c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee414df-55c9-4898-a274-ccf9efb32b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e4b832-71ef-48ba-b332-996c8a6498e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7ce440-129e-4faf-a1d0-5ff91a61159d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ddad37-b4fc-4c59-bdb5-04e5f1121aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7621443b-49c4-415d-80b4-f8baea2ca9c8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be051f79-9f0c-4a78-93df-224151e159d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe14ab3-5b1f-44f2-87f2-da63d548b2cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3908ff3e-9e20-4cfe-bf02-98d034a63200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e66f70-fbf1-4051-9be2-52eec1b38b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf131bf-5f2d-4ee6-a7cc-84027caa378a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a9abf4-d887-497e-bf45-7b534618d209",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb372d03-7f7d-4143-a5cf-ec7a74745ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441d8e76-2b25-4431-9445-df52385df3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1bb59c-5304-4ea3-a3cb-195bd27d6978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c9796d-ef17-44d4-9196-0560e4b5729a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007df117-0813-4bd2-9e9c-3ab948bafd8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08dbb3c5-7f7a-4088-aebf-6da73fe78718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec680b4d-1374-451a-b3b6-9dc4ee9b0da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c093d7-a75a-4701-b61c-38e9fbd6ea44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0673f18-2cef-40a9-bba8-f95ffead549b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c0681a-be03-48ee-8835-46bb65e10579",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f27a6a2-9cf2-4ce1-8fdf-afd8550e8049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a86566-67bf-4cb8-9746-952e29e42662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03cdd29-befe-45a9-9994-780635bb4a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f034ff56-a288-4e0e-bdeb-e8b2cfda284e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b3167d-da16-4e74-9956-43c13348dc72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9896040e-fcab-44f8-8f88-e4e2b23976b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d934c1-5366-4772-8b98-67b13d46cf19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148258e6-35ac-49f6-a454-b1d79597f505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d156b25f-6064-46e6-bf8b-fdb574186597",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97925a3c-7eac-4c08-8f2e-cedc18e72c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10efdbeb-a420-4062-99e3-40cf0181349f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c489c6ab-76fd-4d92-923d-3399de9852d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2abdd4-0131-4908-bb44-7dd2d759e4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1ff052-30a2-49c2-b9b1-f9223f6cabba",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a664965-fa89-4637-9020-98e1c386a3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01178b88-67ee-4831-8225-b5df4e168840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9305b441-fe88-48b6-9739-a45753c08aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd8006c-11b0-4139-b501-619aebd39bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92f660d-44f8-40f3-b1e5-02a0c803bd14",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b8b3e4-4f5c-4415-8dfc-81742689e8ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618f6d95-0562-4e97-929a-7baac9b80559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e28fc9-90bb-423c-848f-e3ecd77070c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59028f4c-a9c4-4522-b0f4-914d8c4fd189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ee859d-9ae6-4548-a6de-7e7f2b9accad",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2316c1c8-47d3-4a60-9e33-87dd80c8c220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88da7d87-9755-4dec-8345-2f5a78c36c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c5dd3e-b91b-44c0-be10-337ff0917c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135f99ce-009e-4cc7-9593-3100101631cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bd62ae-32c0-4f07-a4b7-fea2041dc932",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78982fcd-2891-4c94-8308-416c7f356d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498cd455-df28-4e88-a6a4-29b32f0461c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec22fbe-2168-402a-801a-999f2c3e00a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01983af-fbeb-4ee1-85c2-d9850146e400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a763ab67-ec35-4aaf-81ce-0210b8c0d192",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe9d6af-606e-44df-bf65-9542a05d223b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d966ac4d-f18b-41a8-b180-48006bc89a8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69058b5-b909-4b33-9221-5d03a0244cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2942d78-ce24-4ee0-91b0-533ff4895422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83a3d06-b0f7-4004-b241-dae1cbdbb5bc",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ba743c-4c2a-4475-9f24-021f94066737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf21dac8-c092-4bb2-b112-13545fb7049d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a6235a-e336-4372-a0e7-8514ff6c52c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3100e483-8053-47ec-b97b-bbae3a1d8323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db0139b-2c92-4c71-aa14-bea964690786",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1e156e-894d-49a2-8b02-a7765a0231b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87fefec2-920c-43e0-bfd5-e964e0ab6d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b087f5-4990-428e-8df5-75dd2ba2157d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e573c767-2cba-4e3d-82c0-8002448c6dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acdae12-bf91-4a04-81e0-75d9d54f8080",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bca4f39-df45-46b2-bc65-0fb000601ef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aded77c-9743-42ee-a9d5-7d9bfb2aac3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c74315-9a99-4828-b43d-7baaf4752c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c70cc2-9578-462e-9371-38b8df2fda9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8244d802-8598-40b6-ae43-88cddc213fee",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ad1549-8caa-4ce3-a930-a3fb391571f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff97499-d8e0-401c-a9df-bf5302a49541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3551068-3a1e-4ffc-8829-dcb36802694e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125b2de2-a7c0-4d0d-8cde-6a75541463d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b0bfbf-cd01-48e6-8ca1-3460d86eaa52",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0db39ba-8480-4f19-b4fe-b75826216e74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "083e7837-1d0f-449f-9189-87cbed70db70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7a96ed-91e9-47ac-864a-0f1eb1ed75b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a0c971-26e2-4e2f-ab57-0dbba1fc38fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b0d225-73b1-4083-aa7f-e5d838fba3ed",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1446ecac-4c42-49cf-87dd-525ff1f6f45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edbe4834-b010-41f7-a9e2-80e967afa8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9549d7a8-e648-4534-ada2-123cad55949c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4659bd5-5d5e-420d-8739-9691a0ee3b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a095a35-c0cc-47c0-a8ae-1690c0f519e5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5599c588-06c3-48f4-8c17-17c82661f193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99afc06a-afc1-45df-aeb6-3fbae05dc999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a67ded-5a40-4e61-a86b-6ca4bf747a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c6b95f-2ffc-42ed-9d36-a82a32b092cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c574a0-ecb6-48a6-86cb-cbb1537b4dad",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6bf29c-060a-48b7-af95-f5e6a3c508d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c791b26-c082-4695-86dc-d8992e5a584f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e163b5-5685-4e3a-93cb-5f8e82ce9e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbb1e58-d85f-4e3a-861c-17d992ef68c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61db9d62-e1cf-43c5-b7a0-6ce76dea00c2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411533d2-5e40-4318-a6eb-0cee3c6a08ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4451e9f0-5e12-4e0d-8609-f3808da28793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b742800-897b-44dd-ae21-3a26863fa6cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a96e7e3-f77c-44cb-ab89-1b4490625006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b17cae1-3af2-418e-889c-9fd771495562",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29e6e46-70c1-4a74-821f-f97b438ef5ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7b6c045-6547-4f4d-be60-b5d8a02f749f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4e7cda-8715-49f5-b2d8-febcc1d4a93b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d928475-47e1-4d8c-9725-09422dcd5812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6327180-6d65-429b-bcea-03fec6e1e9b2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901fc37a-e6ee-4568-bb11-5978ba59d678",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb32db51-526e-455a-bc25-124a98a35154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b220e1-9b66-4ce8-88be-7829ff7b4601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273005ee-e235-4335-a68b-5725ca046047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d2f42c-c9a3-4e3e-9cec-41f3b411d859",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6c7d8d-af28-4007-8a92-15f2d293292d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "457e7728-21c1-4fa7-862a-efa3e16b2850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66f7c04-5bc9-41a4-aeec-f3dee7155b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412e4030-4348-4e05-bd66-e4c5b6d1695e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f896787-9d46-40f2-905d-0a1beb296bf5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c985fd5a-74d6-4656-8c00-111879734433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8c9c4c-3fb9-46b8-a81f-a333ed330aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7e5563-ac09-4479-a40c-137455326ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b431c6e-94b0-43c3-b4c2-694a38c1eceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530f7e50-8f04-480f-ae8b-c8d444120088",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412c614a-174f-48d8-9951-b88a9e1d30fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf930dc-d44e-4a31-9b69-8285e3a59924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bae1d7-9c1d-4af2-a3df-994fd0072953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c181aef-59c2-45d2-b31e-d7cc030d1fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2491fa8c-a202-4807-94f6-1c1a6bf2b7a0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796af004-48ea-49fe-8078-bb269e8ba199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aee2a5b-150b-4529-8003-29d70c5ccd2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169f0793-1b9d-401c-ba2b-ed2c147d93dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856af09d-19a8-414e-8c77-ca8ff24daf64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6c6432-eff0-49b8-892d-442d7a6d0f87",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b03962-474a-4014-bd43-922cff28f1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799dc08f-ae31-41b4-8dd8-c7cfd4a6df43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c6cee6-6330-4224-a6d4-d868680f08f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b533fda1-ed08-4e9d-8e88-a1598917660e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efc85db-af80-436e-b21f-8f840d19b5be",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633a8aaf-09c7-41a8-95e7-5f20dfe1c3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3215c064-9b0c-4b36-96b6-9c73ea6f692b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389fb639-6297-42b8-af78-4df2eefa16be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dedb207-7890-42ff-a3c7-c4555636dd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e10d938-837c-4791-b3c8-6074245aa95f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e854e2-49bd-4dd9-b63c-9fef36154170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6261d6-aaba-42dc-8762-4c95c78efb6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f8dac2-104d-44a0-9b7d-e756f3dc7c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f00ca1-64d3-4a27-8414-cdd0e164974a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6dd165-2111-4e75-8417-b2cdde657746",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879f84ef-b34d-40b7-9613-8d2d2248099a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d125c3-731a-4bda-9a21-7717c6b69ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4385d1-5757-48a4-b524-def70e6fe468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad227a42-5f61-4dcd-8095-8fe409f63d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f42e8e-fa4c-4391-a44d-5dfbd6330bda",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33352e9-5a9f-4f76-bee0-bf5a1bac018c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e9284f-0ed8-4614-b689-0cc210815cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a9dac9-b7bd-425a-87e4-aadaeb06dd7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0139e418-9431-4d95-8b69-bbdefb8156f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b385f2b-42d5-4db0-9428-814eb0b9c0b8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311121ce-961f-4498-a941-ddac7642b2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a327deab-8b47-4087-809e-f348522dd946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba079bf-2d91-4167-86bd-0f8ee703fa91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa28e531-10b8-46b4-b7a4-e474508e6e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dd9e6c-cf35-4da2-9899-2780dd8f6bad",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9193572-e8a8-438c-a755-b90e96ea45d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013b8e8d-2c35-4a90-a9b6-2473eaeb6479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c26d33e-a180-43dd-866a-2038df8cc341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1857602-a944-4a50-adc5-4267cf6894a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a3fa1e-072f-49b8-8ded-ab77f5fe1e66",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17191986-846d-45ef-9075-3e34c505ae43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61cd48f-9048-426f-84c1-5c0d72cb73c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d47bc28-68ce-41df-8263-dc34dd8d2b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9c5ae3-4a87-4140-be55-5e57368df651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ce1789-8fdd-482a-a82b-b75c7258a268",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ada253-3ae6-4954-8190-f2e110e40132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026ee3ef-8cc2-467b-a0ee-d572e1db9f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6dd1ef4-aee2-43a2-88eb-5f11ce1349a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956c3ec2-48e9-4ac1-a2b9-971a40912b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e6efb6-e5fe-4b7b-b5d7-ba47b661ea39",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce91fea-f60d-4a22-9f7c-964b45c24254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d81337-4389-4a2d-a6bb-364d3f986057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bcc834-6253-4f1c-a89c-e75627697159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12c8e61-9746-4cf3-a965-940e72f6ce3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1993e889-da4a-4423-8a59-9ab2748352f7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66160a22-7b96-4180-a598-ff59a9a0eb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2390c08-8a58-4c81-b76f-af0d1fe1b58b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206ba274-9cd2-4ce7-b1c6-e33562ce9564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b048fad6-7a42-4eed-9135-9b546b8afa1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806b43c0-06e0-4ece-a311-00a8d0fa6232",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5142319-0519-4f18-b724-29f011e29f94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf314ac8-7820-468c-b781-11c1062556fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee79dbd3-a656-495e-b35f-c71fe5b1e1d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913f2846-3643-4614-9a41-f5bd06621d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8dc974-2585-4dd7-8eb9-7c238f7efb04",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef17871-345c-4360-8496-09a5954aaac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f0081c-041e-4a0a-93c0-b0ac721b333b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152f30b0-0c1a-439e-854b-d4bcf6529730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b527b0-4a77-47b6-a06a-109a6ac074d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b58157-e500-449d-a670-667bde996fca",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20de0b7b-a1a3-4e69-9e75-35c27b6ba2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c818be5-6535-4bd9-b93c-2359a35f2939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc5fbad-54b6-4f0e-9894-e2d82604c4cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4ff58a-5aad-4eb0-a685-cd7262ff23ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83117c1-049d-47de-96ab-7805cfe11861",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf84c497-37a7-4299-97d0-3e9d74273cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc14e09b-33dc-4fbc-a4a7-5ef7ed91ae39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871ccfa4-7ec8-4ade-abe0-9ecd41526aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be5d59c-3ef5-49b6-a545-3b24a5019259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99a2f4a-f295-4265-afb9-bdbb5b60cb02",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2aa94c-c686-4550-b5e2-835f29f001ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de23476-f3cb-4a04-8121-9cf95648f484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "536f8701-96fb-43b3-9ed3-17922957f940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa8c10a8-a549-4a12-8cb2-16a332e172c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a61392f-7c55-4ff2-9754-154656dde057",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94241fd-8915-4167-9b97-049b07c99eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bca07d4-7227-4629-96c3-c0c64ea4d51b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b305da0-ef19-421f-9a29-b5d6877fcb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0adb35b5-be3f-4c04-9526-aac66427a712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8167245-0117-41bf-9aa8-186787257f17",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9c9e74-a4af-4bc4-8ce0-d90516342571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e09f9243-b5c5-44d2-ac6b-47c0fd54cdc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98072d5d-19e4-4e09-b19d-e712e9eb58d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63491e38-9cea-47a1-b533-6132abca5afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d8ba6f-bedd-4e4d-b82e-124c261a4d01",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab394d8-f995-4904-a999-195d27fad5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710719a9-2534-4c01-80e2-11fddd1d0cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee24b8e8-f804-4e4f-9890-253ffa53a1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ccd7863-29a0-4f1b-a6af-b69732639972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5092d4-4067-47b4-b47f-5e8ecb21b93b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a82e8d7-4d6a-49fe-95f7-9258ee7c8f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a4358c-a693-4a24-aabf-b60d71fd3c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca438d7e-9534-4dc1-8a7a-dad5898fc689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a8b3fb-d7e4-420a-b2a5-fdb0400332f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fe3f07-7141-4c50-b7e8-7f059ed09ce4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ff52b9-e7b8-4904-82dc-e3f96e98eda1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd75a67-318f-4111-981c-648d3e921156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa018e8-0e31-4eca-b24c-719e8d3c5d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83081ffd-506a-400b-b635-139e05ebabc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7615e699-2b22-48f2-b37c-5171eef441d8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6af9a5-a022-4d65-ad2c-4535fb88e976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9157d3b6-3c1e-4ce8-8349-89b253a5c618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afb6c1c-3406-4024-8b70-af447798f9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3d072f-a153-493c-a500-169f13a3b990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e98e4b-3330-4830-ae32-d9c11fc1f061",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72d7eb6-ce61-418d-89c8-1dbbb5ee8871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d827e242-dc6d-4a2a-a252-c32538e2969e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c870ac8e-1d4f-4e73-83df-8a567166ef87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa950b9-9a7b-49e6-951a-889870144446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32134e81-8456-4b81-87aa-06767a828981",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf1e0e3-f8f8-4ab5-9329-5eba0c078570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d973b75-de98-4f02-b88c-8031902bbb91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b13c7c0-4988-47c2-982c-2ca72535f2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8762b80f-4b1e-46de-8be0-c7f7dcd36970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e7015b-ba8e-40bb-af43-c36e77dc2ed4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e68b210-de29-46ff-be82-86205e23b843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26914802-b01c-48c8-ad3e-400dd12515cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9baa1daa-61c6-401c-a8ef-46113e8d5326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f709a0-5183-412e-98d6-165c35c62c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d115a13-7b04-4ab0-a584-4bd9a0c00346",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bb4c71-6637-48e0-9231-2de906796789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a14fa0f-8d3b-4de3-a7bb-09cf16dc8a77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad8c9b4-5f4d-46f8-aeaf-1a6f04325ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5144b227-9931-4cd1-894e-ec71c6ad076a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d8bc71-d48c-427e-98c9-aa634b40f71b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be665ecb-4a15-4158-bef7-6c5389ca093a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "835fb3b5-6b09-49a4-90d9-3fdcab8c5647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16800a7-3fcc-4c99-8fe7-97f43700f624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24d47ee-b83a-4b97-aa3a-c920b1a10d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49479470-f41b-4999-9f91-f308232d04dc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def34a32-dcac-4d9f-a9e6-6d689a8f2a52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "377f360e-1a06-4457-ad41-8604b5d9ce33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6484c2bf-9fe0-49ad-952c-083cf4bba490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c89568-d615-4e4a-9cac-1529fce4514a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de727ae-e269-4443-92af-c20f858ca7e8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9843c9d-3024-43db-8f20-e1d7cb472166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4281f967-164c-42e5-b46d-0218e145b505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb7f36f-9b25-4c20-ad06-b2ead5e0ccc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102137e6-0cbf-4fb6-9476-f87ee37deda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a07ae61-31a8-4fd7-af9a-08d17640ba69",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ba9813-3574-4a1c-8f77-331e7cf932a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46bbd869-dc28-48a7-a0c5-09c24f0c9814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "520a818c-2c09-460c-ad76-968879491290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b43b5e-b496-4aa9-87a2-a6c752385de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18e120d-91f5-4bcd-aea0-3004a3266854",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ea3f49-a72e-4ea4-baf2-94e7ca6bdafa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc73a785-f66a-4702-9544-f6342ba9c668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3145b2-2391-46bc-ae89-e658854a8671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6bc2327-1e91-4f2e-9d77-c61d98bd59c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b6813f-7c92-4bef-83fd-bbea2ed9c1f7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a64005-6c7d-4e72-adb4-993141205666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe9f79d5-3052-42b6-ac7e-072eb1ad0a57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac13ce95-0fcd-48ab-ad98-944f3043f027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7313c0f1-1e08-4c86-9056-711dbccfe187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef746e3-b2e8-407f-af00-46ef147354b2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2fbcc85-c1d5-4ea2-94f5-dcd2494d41a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "081abe7a-fdbe-4d2c-97cf-703aff01e56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db3e01e-e338-4acb-9826-40f171068097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d50ff1-b9e9-41fd-8b58-8f1fcac1c7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de93f3d-9188-4825-b709-ef0bcf1f95e2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68322084-de94-43de-b179-f2e00cd2281f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "639023c6-a894-4e29-81a6-658ee5c28742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1387e561-0e79-47b5-ac36-644d5eb8cf1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be399316-fb20-4613-8fad-390f1b493d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0c0215-0cc9-4daf-b9e8-30a38c3651e0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2720b56e-a370-44d4-9a56-5873df907340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71b47077-4340-4c05-a57b-c2b39f95a46d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65de93b5-c6de-448f-9857-0a926d69a3b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabf5124-c003-4164-9f3c-ea2fc8e6aa96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b48ae04-7a63-43f9-9aab-ee7f014b06b1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24647d5e-d53a-4c42-aadc-98fe9eeb57dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "188c3cd3-0429-40c4-b722-620d13856cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175b4433-efb5-4ca7-be9d-b512de8d8ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d8f36c-f0d1-4b55-860e-54df1391277d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5324d40-e37a-4ea9-80fa-effbf69d1475",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841dc3f2-8c13-4a0a-b676-a64bb69da774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8dc862e-c6af-4f74-92b7-ce9fe2417b78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31745ba0-a84b-4f7a-bc52-e6380cd88470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6beb6a5a-9bcf-43a2-bb39-b3ab627d086a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067d9f11-0639-421e-826c-e68ca719ebb8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f141591-21b4-4fe2-a166-98b5231bc532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8babc3f3-1f4e-4c9a-be5a-19e90c914e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d04213f-44ec-49a4-9321-b23ff299d0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d55a73-3e71-4d59-88f0-a2ebcd1925e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83976cb5-e3f9-45ae-a672-7b725ad822ca",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9999ac07-4f7d-4c9f-99a3-d295d33af6b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9b7b7a3-bfce-42c9-908e-fea624d7ddfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2905e4-3015-47a1-b494-7a1de5e4f784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513b2475-9972-47e2-9ccb-a75b93f1a3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c568700-3695-465b-a0e1-4186dedfa828",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3bf1bb-a982-4c21-9405-bff8549a68f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f3ad6b5-e965-46a7-9094-1b7307333f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631ce139-5f6b-4586-99ae-801e8dabad23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9009ef94-cd18-40ce-99c9-f373292cb080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccb8260-7f28-49dd-b919-b52d02135236",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de3b6d0-db43-44ce-81ca-c1150789a3f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "151b4bbd-5544-475c-a443-99bf9ed54be1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d373e4-8b12-4e43-9dca-ccac090d5a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab34718-69a2-4348-a1a1-3c43ece480b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67db225-2026-40a5-b7c0-eceac3656521",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5e5996-bcaa-4420-bfdb-bed01127d43f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9df9401-eeab-468d-a181-71d2c75839f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7673e283-2012-406d-b6e2-8b3455cb945b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a418b5-05a2-497f-92e6-50e53d2b56d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb87bf4-e376-4a20-ae4f-5fa6ae1b66da",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f972250-51c2-40ea-939a-6d5c36ff9696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6f6cb08-e1d5-42a7-a17c-e7051834b6fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4c2859-e8f0-49d2-af08-cd05c79d2e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4aa5813-3c4f-471d-a6df-1d9cf0ed708a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f1b8ba-09e6-4bfe-a1ce-49c1abcd211a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b22975-e9f1-4b04-9bdf-01a80cc20c8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28234778-0896-4c55-804a-6512ea3f10d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d6edc8-9b37-4c4d-932d-47690ff9808c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f65842-3e6f-4439-b5d9-73e2a66887eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b0b6a0-30d1-415a-ba91-8a1173faf5bd",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b12a36c-7c3e-46c9-9fbe-92a151cb7eec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddd11c0f-d3dc-4245-b8b1-ca7d60136863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8047fa1f-58db-4bdc-85a7-3c49ddb142e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd74ee2-b206-4f34-acf5-3e42d316b056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ec5ba4-a3da-47ce-be7c-cecfbbfead02",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b264c74f-3a7e-4a18-9ab3-4b604f01678b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "808ce78b-4f6c-476b-94b0-f95fa908ddc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5a9f4a-2a25-4c7d-8988-44144d4806fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95aaa604-ce08-4eb2-a007-f3d66df8d89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cb1a2a-9681-490d-b4df-013fb73fbbdb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde2bd60-7b8f-494e-9a40-5898b32acabd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cd3bc82-02f2-4600-bf2c-f6f2a6639501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f429cb1-cdc7-4042-8013-b2995819cdba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f183e6b7-9ce1-41ba-ad52-3c8ac70d1e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9a4bf5-180b-4b3f-97ee-54ef3d329aa6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6537aceb-2b6c-4e94-b4fd-c9f85b6c021b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04b332c9-9c47-416e-969e-2ede0127885d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a0f98c-aaf1-495a-9344-d6eb56784d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42192fd5-914b-411e-9748-6643a779a0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bfcc0c-353e-47f4-a563-ffda79fb51fe",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cede8f98-7b32-48bc-a12c-195c8927dc00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d434d845-adaf-4154-9fe1-da36a1dd33dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b313bf-d822-49fe-9c67-7a734c95db21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49eaeee-7e5a-4ab9-9174-a12942d158d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d0fd37-a8bf-49f3-b628-d4252d6d60e1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b72ef0e-1ba5-44df-94e1-27c9523be3dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3e400ff-8a48-4771-ba42-58329b5851c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9088ea12-06c9-4ab9-90bf-6a80fb6ebd09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bc7e64-af7a-4535-9e9f-e511c0ae5e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec82108-ee48-4784-905a-83a3ff96bb8f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88f1c36-7e8a-418c-a893-3f1465f6be8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42693cec-1b3b-41a4-b56d-f4ab7f8a3118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "343f456f-f51d-4623-9937-0c4564e876f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9f0b7aa-deda-4cb4-b291-d68c11c13509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0296f0a-3b7a-4b0f-a6de-7c399cbbf13f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7e1e23-8be4-40a2-a74e-c33001a075c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e00ba673-99d3-4a6e-9cc7-f9f4ce0315cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1045005-b726-477f-9378-04a4fee039dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fb6925-1eaa-4aa3-9263-8da1d4a22b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de61236e-0ed6-4c51-8c9b-1f55ebf0f9fe",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de40264f-798d-4c10-9577-70d48c65c39e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dedcf85a-b780-4fed-b711-368c84687d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fde22f-2216-4e17-9523-0691f5681b25",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59d1590-09ce-4975-95c9-72a6b04bec70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581c9fae-fc75-4cfd-aa24-b6384704975e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cd9ee1-7fd6-41b0-821d-31eb94be77aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5a132d5-cf8c-4a15-a4fd-388b9e78ea50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feaa0b5e-46fb-42c8-a50d-ed841d665802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86325640-a0c9-4002-b357-acfa1cfb5a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac3c50c-7941-4ec4-93ef-4ece3b7d09be",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339ae7d0-9f43-4858-b0c7-6709e8c04c7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d66c505-f09d-46b4-b219-7679320fd78e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "816d6927-83ba-423f-89e3-19a89e5e93ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06d78b1-fe1f-4129-a744-de2150e59972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d072b8f-c7f5-43f4-a66a-671555dbb2a8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ed5fe7-0ac5-4ca1-954b-ccb482d00f11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "734c3e28-8d20-4224-8f15-b25f02485ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a41353-d79e-4b65-a3bf-312dac9918a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cce13a4-1b9b-42e9-b2b5-396d7d679d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b728e59-c865-436c-ac5c-4cb4d8c0b767",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118789e3-7494-4b62-a72c-6c05281a28b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f226406d-7c82-4d8f-9da5-0802413b49b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7649dba-f395-4ba0-ad87-044ad65d23d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1f2606-4aa6-49ef-b774-feaae7173b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051722be-715d-42b3-83a3-052614d6de2a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0aaafe-48f5-42b7-ae76-2ae3ee19232f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d50e01ec-f5df-4a1d-a8d3-3c74d1c13309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66f4a28-83da-4382-90c6-4a69c7570f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e828d0-ddeb-405b-ab5a-61810dbbdbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9723dd3-e5f7-4512-ba4c-26891081a249",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633a5ba9-4181-4c33-8194-ba0b1dbb16bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4a7d23f-a29f-474e-991e-1e4b0f325dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "537c8c34-3bda-4fe9-b930-942179290326",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83e1ba88-6535-4a65-8958-0199fb1372eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8e4278-116b-4b6d-8c77-70263132a6fd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de330d8-e9a5-4018-8faa-f06d1ba446ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d3843ee-b2a1-407c-92c8-354622692599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9e23a5-4c2f-468f-bee0-bc258e4ece8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58896e72-9e72-4a97-a04b-6e49e06f0756"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca3dc846-e6ec-4664-99c3-401460105ad4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6397043f-4f38-448c-8d56-1d128004d1b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae183c0d-4d3b-41ce-8cef-a7d015cddb54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6728780a-fec2-4fdb-a4de-77d49dcc6ca7"
                    }
                  }
                ]
              },
              {
                "id": "05f6dc24-9626-4e4d-94c5-a4d6b52a5e33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e0ba594-7326-4240-91da-926965632917",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e8f1a4-f198-47af-984f-6f288c22365f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ff6feeec-cfa0-4071-b097-35d8bcc8702b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0bc41d-fed0-48b0-8027-0da25eb91408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d57bbfa-c120-480c-b6a4-381da6973773"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "188352c9-1407-4cef-b2dc-de8e0dfe8865",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94b8b643-b105-447d-b506-334dcbfe67ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b814068-cae7-4323-8b83-850d276e19c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfa2e37f-5ddb-4c59-b04e-94266659fd2c"
                    }
                  }
                ]
              },
              {
                "id": "74a07f44-209b-446f-9d96-a5f9a92ac843",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d437c648-0275-4dc2-ab37-24e85a22daf1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a830ad40-754e-4c9a-963b-435370f81b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ace7cb95-c906-49fc-958e-ed486d58fcf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f5012f-eb65-40ef-b96b-6120716a3a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea259228-40ed-4fb9-8c5f-fb52173a9275"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cc809ac0-01a9-4bfc-a8b4-071488b2a322",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cea37651-735d-41da-85b3-98bf206de5a9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c66dcba3-5e95-4359-9645-b7de29dffb6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cf6ddcc4-2ef8-4d13-a0e0-cceffd388003"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "420a5ea2-40bd-4cd2-ad1c-f457599320c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40b040c1-4df2-4341-a080-ac330eb6a7ee"
                    }
                  }
                ]
              },
              {
                "id": "f7a7ded4-6ba3-4987-8dec-5fcdca135185",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33089215-921a-4f72-b2de-bf6495f92efd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ed429700-77f1-42cc-bfde-bd14a052b1a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68deccae-0c31-4e23-8b52-d2362f6d5853",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d900218f-d38c-41db-9345-c56f004e4778"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "960a354b-599a-4c74-a3a3-44ee74059ae2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "add1d475-8df5-4a29-a3af-7be134b20ca4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d06c281c-1cbd-4fc1-93c4-df16dea30a42",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9961b67b-be9d-412d-a8b1-824e270d2459"
            }
          }
        ]
      },
      {
        "id": "bc03bc94-69d2-46ef-a9b0-345eb7e4d0a5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ba621395-7364-4201-9669-b12b40dd4527",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3ddf618-bf95-47de-be28-c5c9ac41f418",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e28339c6-19d4-43af-9f3d-63060dbaa4a8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476952d8-34dd-4ef4-9216-7e67cb4e775e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f8f1476f-3712-41a1-a126-e06879e05924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2badc08-ce2d-4f1d-ac9f-4904a6d54f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d38f0630-f867-4c52-8f4d-55768f5cdbfc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73deb078-ceea-425a-b80b-1fd0984a0c32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43f61c23-4e6d-42e5-929b-1342f297bfd5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4587300-bb79-45d3-ab8a-49cb62484892",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4526f4a6-aead-4dae-93b8-c7ec67ecf275"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e104c5fa-bd0b-43e6-a174-7b18084d1cf8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bb8c7571-8475-4c08-bf67-57b25eb7ce6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c7bee53-e19b-4352-ab2e-2230b3b482ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e21cb5d-0b9c-43bf-861b-673e6cf985e3"
            }
          }
        ]
      },
      {
        "id": "f83b52d1-ec01-4866-a92f-0f73dfde9a10",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "20e8b3f3-3267-4224-beb4-69fa1e3552a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a25d3681-7b42-4401-9c78-739504f8ba79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52362b74-c436-4e3d-aa39-a94d03c94e18",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689013e3-dc61-43d1-9daf-53aaf4fafa98",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ee798f0-e048-478d-a63d-2b216457e794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46974fbb-e63b-45cb-b7f3-aa872c715eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46ad89b0-2b3a-4a8a-b121-b225351d33e6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c91c537-f8bd-41d2-bb88-ddb7b2fb9f04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4942c1e0-efb2-4aa4-b1cb-c6a695ff15ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e699ebc6-90c5-4596-a2cb-7576b0b6d09e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e257033-94b2-4342-aaf0-131ae5ff9917"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9896398-621c-47aa-9142-08858558768b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a54493eb-8797-4f35-8ee4-9864247025b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ec9b198-0e9a-4ce5-b86b-f9582012ee45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a34750f-b16d-4ee2-845e-adfe5b90d95f"
            }
          }
        ]
      },
      {
        "id": "6789c6c7-04dc-4e42-8a4c-6fde1887ff64",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "29f8adae-ab51-4278-8b3d-23709f882b4c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0df9e115-ca58-4728-b1d1-a7dd4df3fdf6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "593a2ae8-9a76-4a9f-a72c-3400e55c31d6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd39147-b624-4ed1-92cb-5a1de6263090",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77480261-05f0-44a4-8dac-ebe806c8e00a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b434dd-afa3-4401-833b-19e6cc6046ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33ed566c-be82-4872-91c4-b8ded5d24888"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6afc323-7a7b-4edc-8ecc-3447ab448d53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4373ae0b-dcc7-4fed-935a-4e44daa1884d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bac4d93-a834-42b2-b724-f36f61c53ff4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9748949c-5e55-4742-93ed-6f5f9e1615df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e036bca6-0415-4f11-892f-f4844deab768",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6a861562-47c3-4f51-bc7c-6fc419b1eef1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "493ee28f-c2b8-4734-b882-433934d67ec3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a915b01-b7df-45f6-a23f-eb4629c1d7d4"
            }
          }
        ]
      },
      {
        "id": "8cadc355-ed34-4cfc-878e-ac56777e703d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "abc18d34-8163-4c37-817a-659d0b359444",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a11edb04-aa9f-4f6d-abc3-c1f05fb1ea1c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f3226b60-904d-4876-99c3-9433b52223e7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6694e2b-af76-4337-afa8-ab935ee8aac8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02f98789-bd2c-4123-b19c-22d0f054e224",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 103.09154929577461,
      "responseMin": 10,
      "responseMax": 1971,
      "responseSd": 253.16293269743483,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694306089528,
      "completed": 1694306130764
    },
    "executions": [
      {
        "id": "4cc4ff6f-df04-43eb-aabb-9814e5db0c09",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e6c80a64-7fbd-40a0-93ff-833b6d2f343f",
          "httpRequestId": "cb05191f-84df-42bc-a7fb-ddd3ef742fb1"
        },
        "item": {
          "id": "4cc4ff6f-df04-43eb-aabb-9814e5db0c09",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f585f4f5-a57b-4028-be3a-d7ca5d6650c7",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "21623b1f-facf-4cdb-b0ac-d166e67d2c50",
        "cursor": {
          "ref": "8bb121c1-e554-48f9-8149-85eff4225b96",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d0b9da66-53e3-4a19-8101-28a5bc7a53f9"
        },
        "item": {
          "id": "21623b1f-facf-4cdb-b0ac-d166e67d2c50",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "251b621c-053f-4ffd-9b74-876b10161234",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "c1c2eb5e-4710-4aef-9d08-c980916fcd03",
        "cursor": {
          "ref": "6b2afa90-5273-44b1-883d-ed9bc831a13b",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "925a3703-f2cf-40ac-ae01-d41652460448"
        },
        "item": {
          "id": "c1c2eb5e-4710-4aef-9d08-c980916fcd03",
          "name": "did_json"
        },
        "response": {
          "id": "696714a7-8d66-49b4-86ba-e40bc179d686",
          "status": "OK",
          "code": 200,
          "responseTime": 358,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6158e446-da15-421f-a52e-f9a4bef3e300",
        "cursor": {
          "ref": "a46b1113-dfd3-4dea-97aa-cc62a88503ee",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5006faa0-d705-465f-8489-4708b0f51827"
        },
        "item": {
          "id": "6158e446-da15-421f-a52e-f9a4bef3e300",
          "name": "did:invalid"
        },
        "response": {
          "id": "ce67a366-65be-4761-bc5f-ce531061b209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6158e446-da15-421f-a52e-f9a4bef3e300",
        "cursor": {
          "ref": "a46b1113-dfd3-4dea-97aa-cc62a88503ee",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5006faa0-d705-465f-8489-4708b0f51827"
        },
        "item": {
          "id": "6158e446-da15-421f-a52e-f9a4bef3e300",
          "name": "did:invalid"
        },
        "response": {
          "id": "ce67a366-65be-4761-bc5f-ce531061b209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2c72c7-11f0-4977-b0ab-087461990502",
        "cursor": {
          "ref": "2fcfeacc-2280-485b-bec1-c9e6f03ce6e5",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fa604ec1-afb3-4ae8-a8d2-9e51ce0d13d7"
        },
        "item": {
          "id": "ff2c72c7-11f0-4977-b0ab-087461990502",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b1c0b3db-b0e2-4964-840f-2cccd16a5698",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed23655-f727-462b-98c0-de2c69bbbd5c",
        "cursor": {
          "ref": "9030c160-4b33-466d-af1d-3a46aa75f92b",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d87e3fff-e948-4822-8249-f9a457341b04"
        },
        "item": {
          "id": "bed23655-f727-462b-98c0-de2c69bbbd5c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0c81da7b-2d76-477b-b477-47e7754e863f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5967ec-d522-41f6-9ced-71d0c1a73d95",
        "cursor": {
          "ref": "0452abd3-e8dc-47cb-bf4c-04c0da47c32c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0fee9138-6d7c-448a-9789-4d3e738f88ca"
        },
        "item": {
          "id": "df5967ec-d522-41f6-9ced-71d0c1a73d95",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "936d4460-6a06-476c-9793-f7a25f329d5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67e9919-a8c8-4321-90f8-26e0b6d17d71",
        "cursor": {
          "ref": "3960393c-1d3a-4fce-81f0-17f51ba542d1",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b8d47899-cc58-42b8-9b82-5ef92268eece"
        },
        "item": {
          "id": "c67e9919-a8c8-4321-90f8-26e0b6d17d71",
          "name": "identifiers"
        },
        "response": {
          "id": "18bd6c53-4fb0-42ee-bcf9-e929cb33533c",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224dbe00-8c8a-4550-81d5-f4b1102643b4",
        "cursor": {
          "ref": "c4f0b29e-8fc9-474b-b22b-7591e135e743",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "004629cc-30a6-46ee-8781-ce646f5f5f6d"
        },
        "item": {
          "id": "224dbe00-8c8a-4550-81d5-f4b1102643b4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bf95d9e8-d4cf-4da3-883b-06b90240c49a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e828c4-bcf2-45b0-9d66-ade8c7afa8d4",
        "cursor": {
          "ref": "124cc635-fee7-407c-bf1b-7fb829587b48",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "50effb1d-8477-43f8-9905-27cf5727bda5"
        },
        "item": {
          "id": "37e828c4-bcf2-45b0-9d66-ade8c7afa8d4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ee18b4df-b025-4ac1-ae8b-c8ad3bcd34a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ff9ccf-b3f3-4c37-80e7-14ca84a1f4c0",
        "cursor": {
          "ref": "c9f6be69-a444-4779-bf12-6da5b6d8d0a6",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "26cdd2ee-ba0e-419c-9c93-005411524d10"
        },
        "item": {
          "id": "c6ff9ccf-b3f3-4c37-80e7-14ca84a1f4c0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3dc82d6c-cd67-4576-8d81-9f5ba1f1148c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1c3a66-57f1-4619-b0b7-c97f6713d3e7",
        "cursor": {
          "ref": "377a2cd8-bfb0-4c6c-9bf7-be9422f9575c",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "53cd3464-f310-4ea0-a631-f3d4ae70902a"
        },
        "item": {
          "id": "ba1c3a66-57f1-4619-b0b7-c97f6713d3e7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2e598183-ab6c-4251-a0d3-7db6d30105f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b6db9c-6da7-4028-91c8-e6f0b07f31c7",
        "cursor": {
          "ref": "6fe6ee05-f687-48ec-9fbe-628ab36e11a6",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "790d8d43-786b-44f1-90da-d9024846d22b"
        },
        "item": {
          "id": "83b6db9c-6da7-4028-91c8-e6f0b07f31c7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f1d66efa-b652-4f82-9c95-d0ca7def5c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aad2f03-1206-4264-912e-ae49253eed20",
        "cursor": {
          "ref": "25cd7d46-4ce0-49c7-b18b-2a504fcce474",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fff44602-0d51-4b55-8e95-1274f5bd7e2a"
        },
        "item": {
          "id": "8aad2f03-1206-4264-912e-ae49253eed20",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f35954c5-ac3c-4b3a-b034-545a5f08da88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad2707f-02e9-4245-a77f-183dce9f4fa8",
        "cursor": {
          "ref": "b5a21e99-af07-41f0-bc5e-8f2049256a3f",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "19be672f-b848-4ad4-81b2-fa87e2daf67e"
        },
        "item": {
          "id": "8ad2707f-02e9-4245-a77f-183dce9f4fa8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "acf78139-55be-4af6-93b4-bc4097b27cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e79639-e834-4a60-b2fb-13aa25693ac5",
        "cursor": {
          "ref": "30bfcf32-a52e-4191-a2b6-883713fc1b0c",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a2272d2c-5d77-435e-9d8c-c84a073453e1"
        },
        "item": {
          "id": "78e79639-e834-4a60-b2fb-13aa25693ac5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "71ff9e88-9f51-45fe-8586-6bdd072b745c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb76847-c7ae-43df-b47a-9c346e439466",
        "cursor": {
          "ref": "f99cd7c9-d6b5-417c-91f2-15a0d3b5df23",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "741a7f18-7dbd-45bb-a8f0-f085addb5605"
        },
        "item": {
          "id": "dfb76847-c7ae-43df-b47a-9c346e439466",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "94832b7a-22c0-4f0e-a930-61edf047744f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081a9f5e-e99f-49cb-a373-81a4d80f295b",
        "cursor": {
          "ref": "bd91c8f6-d61d-4f04-964c-e3bac44b0bb7",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "803db2c8-5bd8-4178-be52-b2e157098df2"
        },
        "item": {
          "id": "081a9f5e-e99f-49cb-a373-81a4d80f295b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d37eb78a-d3d1-4406-b385-634b69537741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069ace1c-d538-4fbf-838e-d5bd3f1b0c4a",
        "cursor": {
          "ref": "b6ac16cc-b681-463a-bb0b-1f0f200b2623",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a745e3a4-42fa-49c9-8c9a-298221d2c35e"
        },
        "item": {
          "id": "069ace1c-d538-4fbf-838e-d5bd3f1b0c4a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "93269eb6-52ec-4669-ac7e-d9fe2af98a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8dc93b-f990-405c-bdc7-e072996857ea",
        "cursor": {
          "ref": "2834bbc2-256a-458d-98cf-d7334b3c311c",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "009ac594-90f8-4096-be34-d32f6742d602"
        },
        "item": {
          "id": "4b8dc93b-f990-405c-bdc7-e072996857ea",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f1c08558-fffe-45ba-bc53-d4dfc8629bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7f823a-60fe-4b6e-9ae3-85784f278855",
        "cursor": {
          "ref": "e023d517-c575-4b03-817d-d3595eb5dcb8",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ffcd676b-134d-49f4-9190-90661805c27c"
        },
        "item": {
          "id": "6f7f823a-60fe-4b6e-9ae3-85784f278855",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0d65cbc4-3ea5-4b2c-a4fc-5c74f135282d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1deb2491-0900-4948-acb4-901e204f9321",
        "cursor": {
          "ref": "4dd2cea3-c07f-4a35-a141-32660194a5c3",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "92e5f752-72d4-4f02-8bcb-dbe5f8319e8d"
        },
        "item": {
          "id": "1deb2491-0900-4948-acb4-901e204f9321",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b6c7fa97-6ecd-446c-8a3e-0de318740864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d99d44-da2f-457d-848b-d29ec7c2be18",
        "cursor": {
          "ref": "c7f162ab-a524-4e1b-8a9a-953f4bf3e28b",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9ef006fd-b5ce-4e78-b435-45bc15af20bf"
        },
        "item": {
          "id": "d6d99d44-da2f-457d-848b-d29ec7c2be18",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b81d329a-8470-4c76-926f-496489075ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df39f8c-dc5c-46de-8756-5605bf6fc718",
        "cursor": {
          "ref": "e6c625f8-1741-4883-8c05-6109f549cf98",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ec67b6db-9f2c-4d1f-838c-bbaf722008d7"
        },
        "item": {
          "id": "7df39f8c-dc5c-46de-8756-5605bf6fc718",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8a296290-bc84-4fec-a75f-b169a8d3b40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddaf1459-8035-4447-a8b7-182ff6c914ad",
        "cursor": {
          "ref": "6a18a918-a9fa-4442-86ac-9b5c01c8f1ea",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a872ed18-f0af-4df2-b354-58d9faf1929d"
        },
        "item": {
          "id": "ddaf1459-8035-4447-a8b7-182ff6c914ad",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f3949924-2a58-4e78-bb16-9de3f1f6f3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1caf5ce1-edde-46e2-bcd4-5d4b462d89c1",
        "cursor": {
          "ref": "1e869713-6867-476f-84bb-c4b959ccef7e",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7bf87097-27b5-49c4-81be-0330aa71f2d2"
        },
        "item": {
          "id": "1caf5ce1-edde-46e2-bcd4-5d4b462d89c1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "63bc4808-c096-4469-b7b3-d2309922ebb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a86b636-c739-4255-93c8-5d26833f1a33",
        "cursor": {
          "ref": "79eab53c-2fbe-4777-bc38-48d7b8319dde",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6ec50e3e-9563-40d1-a252-02719353f76f"
        },
        "item": {
          "id": "1a86b636-c739-4255-93c8-5d26833f1a33",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4c8273f4-4047-4f97-9b6c-521f6a918f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf618911-1430-4c84-9ba7-89e170681cf1",
        "cursor": {
          "ref": "d759c872-aa47-42a8-8872-2d7a88cfed69",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4bcadf11-a0f7-4df7-a03c-ae5905c8b086"
        },
        "item": {
          "id": "cf618911-1430-4c84-9ba7-89e170681cf1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4df69610-3572-4f3b-8d8b-c279d49b2bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ceeea0-5705-4f9f-9b5e-493c47a15896",
        "cursor": {
          "ref": "cd5963ed-c60a-400c-a098-192e5a5bd264",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "73a6dc1c-3c1a-4421-a436-7736deac5e0c"
        },
        "item": {
          "id": "36ceeea0-5705-4f9f-9b5e-493c47a15896",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "170c6a81-9b6f-4f9a-81c8-5e8bd2b028de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de34f2a1-47d5-441a-9f86-9468be405015",
        "cursor": {
          "ref": "fd946088-53bd-45a9-b09a-2068085f59af",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e422599c-1c7d-48a9-b3fd-d1c721f0b4a5"
        },
        "item": {
          "id": "de34f2a1-47d5-441a-9f86-9468be405015",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "666155fd-2f2e-44ad-9c7e-60297ab14b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2df059f-6c1c-47f9-81e6-9e1241fdd793",
        "cursor": {
          "ref": "7aa8edaa-e7d6-4b46-8928-9fdb93523764",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f21ecc34-9414-483d-a496-e4d7773bb65e"
        },
        "item": {
          "id": "e2df059f-6c1c-47f9-81e6-9e1241fdd793",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d59615e5-d46f-421c-8e8a-b083272f7c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c80e23-b580-4c09-a403-39c4bd274858",
        "cursor": {
          "ref": "906f53ee-e186-4ab3-ade7-38f8e13273cb",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b50c15f9-b8b2-4a28-93b1-8c851a749eda"
        },
        "item": {
          "id": "58c80e23-b580-4c09-a403-39c4bd274858",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9fe08b42-21a4-4de9-9a7c-b7f108051cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672fd4b0-4272-45fd-94b9-cb71e63532ea",
        "cursor": {
          "ref": "45aea5dd-9ff7-4cda-aa94-1ba04003b12e",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "68352a77-a317-48ca-904a-223bc278f21b"
        },
        "item": {
          "id": "672fd4b0-4272-45fd-94b9-cb71e63532ea",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d889fb02-7ee6-468b-9a90-632774ab9878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e372cf7-9cd7-4012-83cf-469456fac8b0",
        "cursor": {
          "ref": "a5e7ebc6-908d-4899-b0d6-a808aaf9ec2c",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a4c21584-cbe5-480a-8727-baba2ddd96a6"
        },
        "item": {
          "id": "6e372cf7-9cd7-4012-83cf-469456fac8b0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "906903a9-a994-43e4-91d5-86010e550d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd6dee9-4b1a-4095-a5f9-138fd14c761c",
        "cursor": {
          "ref": "f2355f55-0ac6-40fb-bed8-87efeb5c85ad",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f98607f7-f639-46dd-b9eb-aa93a80d2a88"
        },
        "item": {
          "id": "4dd6dee9-4b1a-4095-a5f9-138fd14c761c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "62b3d60f-3a9a-4320-a2f8-3f3c77e8f7d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6317e418-4871-4329-a532-a504b440d8bf",
        "cursor": {
          "ref": "6e8feea8-2f91-44bb-9353-1956e916db84",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "05760dd0-5c9c-4e55-b6dc-bf3f474e5e74"
        },
        "item": {
          "id": "6317e418-4871-4329-a532-a504b440d8bf",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b600d9d2-a313-475a-b2f3-ec54a3adb97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bc11df-9248-4bb6-b940-cca6dfa1a372",
        "cursor": {
          "ref": "53887e24-a46a-4455-a4f8-ab47b5a9a175",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5ea25378-b0e2-4493-8523-06e74e2c8c60"
        },
        "item": {
          "id": "e1bc11df-9248-4bb6-b940-cca6dfa1a372",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "682ec9fa-a205-44a8-8c39-62b984a9e660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab23f9f-a5df-49e5-836f-3303cad2b6d3",
        "cursor": {
          "ref": "ca57f748-7d63-4a74-9c91-c5d1b2fa35ef",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ac757a65-3828-4d2f-b88d-b20bd68a97b2"
        },
        "item": {
          "id": "6ab23f9f-a5df-49e5-836f-3303cad2b6d3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "78ee8e42-b38d-408f-bd9a-27d0adf17bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1273410b-0145-433d-8766-c5c98b84182a",
        "cursor": {
          "ref": "9b3267af-e127-4d60-bffe-a2c19d293120",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4c5590e2-9df0-4f3e-b34e-9be0455e82b5"
        },
        "item": {
          "id": "1273410b-0145-433d-8766-c5c98b84182a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fe952f92-28b8-4b94-b585-1351ff69128c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f5b90378-6ef4-44c7-9901-c3fc886a10a6",
        "cursor": {
          "ref": "9e0554c6-63f1-4e77-9659-0b2302229429",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2a587c91-8b28-4869-8be1-3a9114ded969"
        },
        "item": {
          "id": "f5b90378-6ef4-44c7-9901-c3fc886a10a6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4508a59a-0f9e-44a6-a97b-b9f0b1e04795",
          "status": "Created",
          "code": 201,
          "responseTime": 1971,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "71046d13-fd4d-4b61-b4e9-290e2b099101",
        "cursor": {
          "ref": "741b8e52-ffdf-4136-8586-b0a70e0979cc",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2cd27ff0-f4f1-4a2d-bfca-ce48419f84c1"
        },
        "item": {
          "id": "71046d13-fd4d-4b61-b4e9-290e2b099101",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5c2556fc-b3ce-42a5-a605-c75275b0bf75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "aca8d6de-df41-4780-a4db-0e4dd3d16116",
        "cursor": {
          "ref": "a4938c0e-6485-45b2-839b-a1cdfd81cf8f",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "319540e4-d1ae-477c-b188-7ce880748689"
        },
        "item": {
          "id": "aca8d6de-df41-4780-a4db-0e4dd3d16116",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b7fe4999-d48c-4c09-9985-d878a982c938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec94af8-8106-48c7-bfb5-de65cb21a233",
        "cursor": {
          "ref": "79b19ae5-1497-4dae-a78f-41ba4e5af1ad",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "23f9d8e3-1d8c-46d0-9e35-99b8ebd0238d"
        },
        "item": {
          "id": "0ec94af8-8106-48c7-bfb5-de65cb21a233",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1d7d3835-12b2-49ac-80ab-095ccee5aa6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5ea629f1-2944-473e-8c12-ae45dfc352ec",
        "cursor": {
          "ref": "f9936458-c156-4157-b77c-41b38d4f3942",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "35817eec-3197-413f-8f47-5e12b4265828"
        },
        "item": {
          "id": "5ea629f1-2944-473e-8c12-ae45dfc352ec",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8e1f520a-4e7a-4871-875d-4c67453666e0",
          "status": "Created",
          "code": 201,
          "responseTime": 1535,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "677c69ca-0432-4b77-928d-6751eeb63dd2",
        "cursor": {
          "ref": "3d5b8cc7-ee89-4e3f-9005-005dc32f2f90",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6e2646b1-68b7-4674-88f8-2c3895d36c35"
        },
        "item": {
          "id": "677c69ca-0432-4b77-928d-6751eeb63dd2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "99bfec58-6ae7-4bf5-a63d-2d48a6946209",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f5adbc01-b3a3-4dc4-b749-15e0e0747c70",
        "cursor": {
          "ref": "bd7104e1-3f94-4980-992c-dc002d2e93a7",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9e15affc-9d8d-4d93-b4fc-e4440d8ba735"
        },
        "item": {
          "id": "f5adbc01-b3a3-4dc4-b749-15e0e0747c70",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "28c67b9b-fd0d-4d45-be9d-6d864c9f6a94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 767,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "16b4d828-69ed-4d16-975f-b6b9fc05d2df",
        "cursor": {
          "ref": "d5f453a7-3a55-49b2-9607-f2a2f02f5d8c",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7c6dfd85-c21d-47c9-af86-56d1a38e3187"
        },
        "item": {
          "id": "16b4d828-69ed-4d16-975f-b6b9fc05d2df",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ec6e3297-06be-48a7-a468-394893a71166",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7122cd84-dbc7-4bc5-a3af-41a748e64b40",
        "cursor": {
          "ref": "70e44acd-1cc7-4be6-ac55-9e3a6a410c5d",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f1a0652d-7572-4c1c-839b-da8c69f2069a"
        },
        "item": {
          "id": "7122cd84-dbc7-4bc5-a3af-41a748e64b40",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "13247113-8b5c-4c1c-8267-e657c772c5c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "17705fda-42b1-4952-b60e-42541b7daf65",
        "cursor": {
          "ref": "dce19dd7-a875-4577-9a50-45f6cd007e63",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0c917075-9375-4b15-84fb-45f03246e667"
        },
        "item": {
          "id": "17705fda-42b1-4952-b60e-42541b7daf65",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2489f2a0-3d90-42be-a7e6-9ef5e707732f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "bc5718de-edec-43d1-ae48-57e3766a082b",
        "cursor": {
          "ref": "085ff46f-6ac3-4d7d-bb61-35685de7b274",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "83261e95-d74a-4890-b741-6401afee7c2f"
        },
        "item": {
          "id": "bc5718de-edec-43d1-ae48-57e3766a082b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "575534bb-4bc6-44b1-9e3b-bff37dd63bb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cd847bf3-b4be-4254-b44d-733c1d2ea8b5",
        "cursor": {
          "ref": "4fd89c2d-b4a3-4396-b482-a2b32e0dac42",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "151c5c26-85b1-4cbc-b6b4-ef4946f7c863"
        },
        "item": {
          "id": "cd847bf3-b4be-4254-b44d-733c1d2ea8b5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cbdb8f3d-0486-4c9f-8f83-9e54e78d471b",
          "status": "Created",
          "code": 201,
          "responseTime": 974,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "15927710-bfc1-4e57-8d91-835ed148d4f4",
        "cursor": {
          "ref": "14ed49b4-6d7f-4986-85d3-35c607187248",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "660d63cf-e79d-41d2-b293-29ca82acbc2a"
        },
        "item": {
          "id": "15927710-bfc1-4e57-8d91-835ed148d4f4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e979b1a3-e564-49bc-bf10-c76cf3c2020f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541c540d-c594-4e26-8700-02e4efa933fd",
        "cursor": {
          "ref": "173400d6-bbfa-4c32-b39f-f43c12bfc951",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a20f87db-5e51-43a0-a679-28187d27b19e"
        },
        "item": {
          "id": "541c540d-c594-4e26-8700-02e4efa933fd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "33cb3c12-a4f2-47fb-9458-0fb83e446757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af84bda9-2aa2-445f-a700-c5fbc11dd6d6",
        "cursor": {
          "ref": "8b34e88c-a4fc-4ac1-8b3b-ec700ba42d31",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "883d9a70-18f5-4f99-9fb5-05b49e19a699"
        },
        "item": {
          "id": "af84bda9-2aa2-445f-a700-c5fbc11dd6d6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "542b97db-ffa6-43ed-8431-86b12a783862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c5797b-4c65-4699-a92d-055a142cdbea",
        "cursor": {
          "ref": "028046a4-49cc-42b4-8962-7ec5c4c304b4",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1548a726-42e1-4bda-a9f7-759e1e0a1277"
        },
        "item": {
          "id": "90c5797b-4c65-4699-a92d-055a142cdbea",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6788f40c-6801-4a4a-abbd-93447de669dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ea3167-f975-4097-a1f5-2989311dade2",
        "cursor": {
          "ref": "3d6c17ce-1af5-4793-bd60-1e2c2710c559",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5f9aa7eb-b355-4f97-9fbb-d82fcba8d9cb"
        },
        "item": {
          "id": "07ea3167-f975-4097-a1f5-2989311dade2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3a4f407e-1f35-42fb-a83c-646732d6cb82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f369fba2-7268-4aeb-ae4f-495d1730dd2a",
        "cursor": {
          "ref": "68825138-b852-4395-9042-e3ff1a5c8a36",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "152fc8ff-3559-4430-8fb1-6dc4c90f0723"
        },
        "item": {
          "id": "f369fba2-7268-4aeb-ae4f-495d1730dd2a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "599aacb3-5930-4c7c-9d71-b5615a420e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f62ce2-aa2e-4794-9d35-476db85b4b97",
        "cursor": {
          "ref": "361f130b-03e5-4b2d-a2c7-0978fba176d2",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a29d9084-5438-42e0-a0a4-318f50b356f1"
        },
        "item": {
          "id": "19f62ce2-aa2e-4794-9d35-476db85b4b97",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6d1633e5-2a11-4328-9e55-dd2e81e790fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21186175-f6a7-4bd9-ab4c-8802b8ff6416",
        "cursor": {
          "ref": "96d23c82-bea3-45bc-8f0c-9d7f848d69fb",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ec963468-230f-4476-936a-a3682d800605"
        },
        "item": {
          "id": "21186175-f6a7-4bd9-ab4c-8802b8ff6416",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "41da986d-75aa-4915-aebe-329fd70362df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4e826f-7e0d-4d35-bff1-240606f79af4",
        "cursor": {
          "ref": "b00cbd55-ebe4-4976-b855-6d367d2a3276",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "040450af-ebca-45de-be71-3b5b568a1e53"
        },
        "item": {
          "id": "9a4e826f-7e0d-4d35-bff1-240606f79af4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "68a5507b-7391-4f5f-8e97-66cb31d151fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bb2fa3-6c87-437e-91c2-1974d9cc3948",
        "cursor": {
          "ref": "a32297e4-155c-491a-930c-38de77662813",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ef4ee645-5377-423e-b4a6-5a750b96bf17"
        },
        "item": {
          "id": "d0bb2fa3-6c87-437e-91c2-1974d9cc3948",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6c3574d3-4d78-438b-aabb-dcee82cda420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83f40bd-7adb-418e-aa15-202411043d4d",
        "cursor": {
          "ref": "bace9cc2-04ba-4bfb-80ca-52a67346e5da",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "24304485-703c-4d87-b6ce-bb6b754212ed"
        },
        "item": {
          "id": "f83f40bd-7adb-418e-aa15-202411043d4d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ba0f62aa-2872-4882-b698-28f0c5bd10e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baeb197b-5093-466e-85e8-4bd6341239cc",
        "cursor": {
          "ref": "0cc33ab3-7dfe-422e-96f0-af3c0052c881",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8010d51d-7676-4fa7-8fef-6761e2afe909"
        },
        "item": {
          "id": "baeb197b-5093-466e-85e8-4bd6341239cc",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7a1c7f91-b854-4b26-960c-c7850cddfda3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a02a727-3052-4627-9ae0-e00040b32d07",
        "cursor": {
          "ref": "aa5b1a27-f982-47e0-aa62-1c20efe8ebcc",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8aadb484-70ae-476f-9919-a849bafe4f2f"
        },
        "item": {
          "id": "8a02a727-3052-4627-9ae0-e00040b32d07",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c285328c-9991-43b0-aa2f-23c74691e869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36833090-8567-4a00-93b8-a8a5e4389090",
        "cursor": {
          "ref": "bc1f89d6-e49c-43a2-be8d-1c33db46a97b",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7ae183d7-19d9-494e-98ad-5e401fff80b8"
        },
        "item": {
          "id": "36833090-8567-4a00-93b8-a8a5e4389090",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b4c61526-c7f6-4f76-be23-1b788731d60d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 737,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "de6f2a35-a754-45dc-9f30-75cd1db6ced5",
        "cursor": {
          "ref": "37c90c07-9815-4a4f-a532-de20f905f031",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "fe98561e-67ac-4cd6-a7b1-a56d1b92b409"
        },
        "item": {
          "id": "de6f2a35-a754-45dc-9f30-75cd1db6ced5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8ea00dfb-c4fa-4871-b7ae-3d6787394dc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 735,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d1b21b34-4c56-4bdf-9434-9b5acee92c62",
        "cursor": {
          "ref": "75b80733-37f3-4807-8451-fa46d1f91c79",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1f2113fd-fc17-409c-adce-130819a930d5"
        },
        "item": {
          "id": "d1b21b34-4c56-4bdf-9434-9b5acee92c62",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3353c202-f1db-4406-8be6-a0853e93051b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5e16bc4d-f75c-4ae0-b359-f5f3d4d72637",
        "cursor": {
          "ref": "9b88988a-05b3-44e6-abb7-022b584e6315",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1d58000c-9809-445d-b384-8a48622a87dd"
        },
        "item": {
          "id": "5e16bc4d-f75c-4ae0-b359-f5f3d4d72637",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c632794f-5bb7-46a9-9dbf-46f9be9ea6d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 750,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0c285ad5-4435-4ed7-976e-89d15a72fbeb",
        "cursor": {
          "ref": "8241740b-6dee-42ac-bbbe-8cf58d22bb18",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "814de989-276d-43f8-98bd-bb0a4cf972ec"
        },
        "item": {
          "id": "0c285ad5-4435-4ed7-976e-89d15a72fbeb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fd75a9ad-333e-4f47-a0ce-5ebdfca86561",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8347ae0d-1f3c-4ad8-a68f-40e9ae60aa36",
        "cursor": {
          "ref": "56c57f8d-490b-4102-b99b-c471569cbcee",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0870348e-28f8-40b7-ac43-565a6e11f006"
        },
        "item": {
          "id": "8347ae0d-1f3c-4ad8-a68f-40e9ae60aa36",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d4ef1284-4e68-424b-a933-f14ff552f4f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848768a7-2226-49c5-9bbf-1735b043af8b",
        "cursor": {
          "ref": "78460e9d-e8c4-4ba3-88aa-481ab945d8ba",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "68a406ab-f6a9-4636-aeb3-40c1ef5119c1"
        },
        "item": {
          "id": "848768a7-2226-49c5-9bbf-1735b043af8b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "148bac32-9548-428a-87ca-0e64ce6fd811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d846b4a0-b069-4386-b726-ef8258e363b5",
        "cursor": {
          "ref": "5bd7a7bb-ff1e-4c21-afb0-5ddb88689755",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d4ff4804-d0e9-4948-afa4-f9abf2acd1ac"
        },
        "item": {
          "id": "d846b4a0-b069-4386-b726-ef8258e363b5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7dc94fb9-a247-4be9-9abb-af67b150a451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4347dd-c867-4beb-a034-261285345123",
        "cursor": {
          "ref": "5bef9df5-0fd6-45c9-87cc-5036eb75e283",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6e660162-87f9-4ebc-8bbd-ee16156fce2d"
        },
        "item": {
          "id": "dc4347dd-c867-4beb-a034-261285345123",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3550b4cb-e147-41a6-9b92-c38f2527499c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6c2ee0-8375-4dfa-9bab-079335185558",
        "cursor": {
          "ref": "fdc22dcc-289e-4aae-8328-0ae0dcad6fa9",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b8413475-33dd-4998-b3fd-c6a93db11d02"
        },
        "item": {
          "id": "9b6c2ee0-8375-4dfa-9bab-079335185558",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d1e134ef-ffaa-4ad4-9095-23f995e7119a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e215bdf-5a9c-4331-ae3c-b803a622b41e",
        "cursor": {
          "ref": "f120c9cf-ec50-4316-bda1-9be64fe645b9",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "20d818ed-48bf-4690-9970-ac453c248ea9"
        },
        "item": {
          "id": "6e215bdf-5a9c-4331-ae3c-b803a622b41e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0f6a546f-dfee-4a9e-adad-255f5ffee3dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469d8d5b-f405-4434-9292-f73b27eb4581",
        "cursor": {
          "ref": "0f851f6c-f91a-46fb-8945-4f2893078280",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "57ca2415-1105-4118-9020-894f55652c76"
        },
        "item": {
          "id": "469d8d5b-f405-4434-9292-f73b27eb4581",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1bbcc036-050b-4955-a4e1-0e501d64bf6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41d3a95-18e1-47a1-bd47-9dfd1c208bf0",
        "cursor": {
          "ref": "113f2aa5-0951-4c04-99d3-513f98bf4136",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e869257b-916b-4b1d-bec7-ad699052c3f3"
        },
        "item": {
          "id": "b41d3a95-18e1-47a1-bd47-9dfd1c208bf0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b1e7e79d-662b-4709-9a33-fa2b696c137e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5776a1aa-d7b8-42d0-8ad0-b70d5ac2cd08",
        "cursor": {
          "ref": "e84d0b3c-c530-485c-916b-06a82a66f518",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "de104953-2ede-42d1-b28d-fba6a561ee9c"
        },
        "item": {
          "id": "5776a1aa-d7b8-42d0-8ad0-b70d5ac2cd08",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "39e17e8e-f271-4fe5-9c9e-a7bca396527a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3873cb68-8352-46f4-be16-8c0d71a1b501",
        "cursor": {
          "ref": "cbba4360-c183-4469-b9e6-e1f3b98834c0",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e1bdf18d-f700-4107-be6c-00c2a6e9df7b"
        },
        "item": {
          "id": "3873cb68-8352-46f4-be16-8c0d71a1b501",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0487e370-f083-4a04-b0d6-18dcc24217c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a33de6-8bf2-48d5-b66b-db2833bceae4",
        "cursor": {
          "ref": "7009610a-6c4b-44ef-84f8-e3cff5ceefc2",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d12d051a-54fe-4c01-8834-c379f9892b9b"
        },
        "item": {
          "id": "a5a33de6-8bf2-48d5-b66b-db2833bceae4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "96ceedcb-a759-446e-b4fa-1fd63c8d3dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fb63fb-66ea-40c8-9920-afc92df48f1d",
        "cursor": {
          "ref": "764b26df-48b5-4dda-9f94-b31549d543f5",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "71075e5d-43fa-4c47-a1d5-20979e38c32f"
        },
        "item": {
          "id": "07fb63fb-66ea-40c8-9920-afc92df48f1d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "89b33829-3b1d-4ae7-9cb2-b7ca65cf0299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1814310-37ef-41c6-a204-61fd37f4ad39",
        "cursor": {
          "ref": "b85049bb-8485-46b2-a4a5-585a12118385",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4a69aeec-03ab-4bf8-b7f5-2450ac166717"
        },
        "item": {
          "id": "c1814310-37ef-41c6-a204-61fd37f4ad39",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b8541d20-9aa2-4d98-8ec2-34ee02eadab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe47094-c4d0-41c4-b3ae-ba349af89ff8",
        "cursor": {
          "ref": "6bca53ad-d22f-4ab7-88a4-688f85a5df8e",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1bec0cce-df55-48c6-a288-357ce29eb6de"
        },
        "item": {
          "id": "9fe47094-c4d0-41c4-b3ae-ba349af89ff8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a2bd8c74-11a0-4c95-a5d2-33222b364a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367d60ba-62c5-4d4f-b437-5418a6b89688",
        "cursor": {
          "ref": "24f3cd45-54d7-45cc-9493-18329e53335f",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "dad4223c-7f52-4288-a4b1-d9e1b4305e42"
        },
        "item": {
          "id": "367d60ba-62c5-4d4f-b437-5418a6b89688",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cd45d0cb-5a6e-4220-8fe2-32b137fdb4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f4bdc5-ca97-4b5d-87f3-aefc381e80f7",
        "cursor": {
          "ref": "3744af57-533c-4f85-b8a0-8825ff436139",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ee755c6c-623b-4cb5-83dd-2643d31d30f5"
        },
        "item": {
          "id": "77f4bdc5-ca97-4b5d-87f3-aefc381e80f7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3e7d02b3-391f-413e-a70b-74a5122fa80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abc9666-a1e6-4b7e-9375-95ae04caee45",
        "cursor": {
          "ref": "58b43f6e-ca65-491f-af4c-044eaef20d3c",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9e883e79-f741-47ad-a471-b19e7d8aef20"
        },
        "item": {
          "id": "0abc9666-a1e6-4b7e-9375-95ae04caee45",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5e8abdb4-0fca-4bf7-a2f7-22e76ffc688c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933646a0-be19-4834-86d5-e8e97d84527e",
        "cursor": {
          "ref": "f8b80208-d8d3-48fe-a2ae-b995e0c8c8c0",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "326ada16-8b2a-4845-98d4-c4d52bd2894f"
        },
        "item": {
          "id": "933646a0-be19-4834-86d5-e8e97d84527e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "108e37fa-8daa-4706-a479-086902d32d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b7d809-0e05-4001-aa65-7968887eae61",
        "cursor": {
          "ref": "1abfec44-82ff-4457-96f0-b85f2678beb6",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f451feb1-c454-401d-8319-98bf1fe4f8c9"
        },
        "item": {
          "id": "72b7d809-0e05-4001-aa65-7968887eae61",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d5e76995-ed1e-46bb-8b40-e092a952c5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6dd9fc-a926-4a14-bee9-436abb542626",
        "cursor": {
          "ref": "fddeb257-a848-45dc-8e16-123b45ec812a",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "95088eb5-3b2e-4a97-8e9a-cdaf462580c1"
        },
        "item": {
          "id": "3d6dd9fc-a926-4a14-bee9-436abb542626",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5dfffa9f-f118-4811-a230-ff24884ee800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e84166c-1703-4166-a7fa-29a72727b60a",
        "cursor": {
          "ref": "ac4ffcd9-26f3-429b-b4d3-9a9045a36fc9",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2b506dd3-3255-4f8a-9599-56295bc9d7b3"
        },
        "item": {
          "id": "8e84166c-1703-4166-a7fa-29a72727b60a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "aebbae26-5edb-4781-96e3-c58ca28bfcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50bbad5b-f6bc-45b7-aedc-96289a78eac2",
        "cursor": {
          "ref": "370a5fa0-1c66-423a-a4b1-ccd897734206",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0c6bbd2e-db8f-450a-9aa6-11d764025b74"
        },
        "item": {
          "id": "50bbad5b-f6bc-45b7-aedc-96289a78eac2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0a60c3dc-bc4e-433b-b36f-c4c5ec74c8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68c8001-e14c-4a15-86d2-edc1ad13bcac",
        "cursor": {
          "ref": "98e6c6b9-4289-4802-b70d-515b7b5422d9",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "85282e07-b325-4816-b597-44776966c693"
        },
        "item": {
          "id": "e68c8001-e14c-4a15-86d2-edc1ad13bcac",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e8dfed8d-0482-438f-ab05-e4ff021e9dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc030ce4-3488-4a69-b618-86678b2da749",
        "cursor": {
          "ref": "e8cfde4b-dadf-4b79-8075-e1e01c8ce30f",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1d8c7649-bdd5-431b-b288-4b2080530bc5"
        },
        "item": {
          "id": "fc030ce4-3488-4a69-b618-86678b2da749",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b5b93cc8-4366-4df2-8ccd-b8b0fef1ef89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d51340-9e8f-4362-8c0a-c7a6a7eb6cef",
        "cursor": {
          "ref": "293ee3d0-c86c-4dc0-9208-a5f4ba567340",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3a182552-d881-4e2f-8c66-fe0e7673926f"
        },
        "item": {
          "id": "26d51340-9e8f-4362-8c0a-c7a6a7eb6cef",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "708c11f3-5f8c-4953-8fa2-d078311c0fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea41bad-92a9-49f5-9425-84e6136f5d95",
        "cursor": {
          "ref": "6d19bade-210d-4a37-be3c-254e72f13dcc",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f9986a39-0be1-42c8-865f-704f44a4cd46"
        },
        "item": {
          "id": "1ea41bad-92a9-49f5-9425-84e6136f5d95",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8d70d85e-90b9-427e-86cf-673dd6d75135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c63e762f-4e33-4836-b84e-dc23c047a1cf",
        "cursor": {
          "ref": "6d6dc816-7b64-41f4-af41-7145e50e7a0f",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "21c63284-e23f-44f9-abc9-d0b35e0bdc43"
        },
        "item": {
          "id": "c63e762f-4e33-4836-b84e-dc23c047a1cf",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e90cf2d0-0daa-4ae9-b000-f639e9c3cd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b0c72b-5411-42ad-aa6e-914e932e3be2",
        "cursor": {
          "ref": "7f2317f0-2152-4059-b658-46103a75d2bf",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "00d6de89-b849-4459-92eb-52193fabcfde"
        },
        "item": {
          "id": "58b0c72b-5411-42ad-aa6e-914e932e3be2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "082f834b-cc27-49b2-a0b5-5746c223f23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f840aa3-d129-435b-8a47-c933a489a34c",
        "cursor": {
          "ref": "3ee104e3-086b-4c49-a817-86da05429123",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8a0bc2e1-2ca3-4086-8b7d-2efe6f09bd9d"
        },
        "item": {
          "id": "5f840aa3-d129-435b-8a47-c933a489a34c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bde7c753-9a05-44ca-9c30-7af195eb7399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa3271b-02d2-4736-9fd9-ac342bdf277c",
        "cursor": {
          "ref": "7a0f5fa3-32eb-4cc5-8fd4-65e951200a44",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a08a852e-63b8-43a8-ada6-45950645a768"
        },
        "item": {
          "id": "dfa3271b-02d2-4736-9fd9-ac342bdf277c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c95eab18-3795-4739-85c5-bee5e19a9c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270ec765-dfe4-401d-b3f3-697c005d6e3a",
        "cursor": {
          "ref": "2aa231e3-f89e-400a-980a-bb5077332374",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e618a81e-ad33-4b4f-b87f-235a5d630c82"
        },
        "item": {
          "id": "270ec765-dfe4-401d-b3f3-697c005d6e3a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "deeea288-fa66-4501-9e16-ece4b5014868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901e988a-e4ed-4e4e-9381-e8596e24c6f7",
        "cursor": {
          "ref": "10a04be9-dd03-4191-9209-12b2a47abd64",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5491364a-a5b9-43f6-9156-3d1630d5ada7"
        },
        "item": {
          "id": "901e988a-e4ed-4e4e-9381-e8596e24c6f7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ac224431-7d39-4ca8-93ec-3124ae00aec4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e424a6ca-f31f-4cd8-91f5-c34992c832ed",
        "cursor": {
          "ref": "243e7029-433d-4221-bac4-88d4bfd64cda",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "794a58fa-cabe-4f58-8c56-ce691bf2e1dd"
        },
        "item": {
          "id": "e424a6ca-f31f-4cd8-91f5-c34992c832ed",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fd844c8a-1e3f-425f-b12a-b6dbdbc78af3",
          "status": "Created",
          "code": 201,
          "responseTime": 1068,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "490865c9-ae9b-444e-9b2b-77b81744c545",
        "cursor": {
          "ref": "01320466-03be-4dc1-b3bd-4b10a92c655c",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2322a12c-a448-4e78-87e4-582de033bcd2"
        },
        "item": {
          "id": "490865c9-ae9b-444e-9b2b-77b81744c545",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "32db11ce-8f2b-4a99-b887-037f297e0844",
          "status": "Created",
          "code": 201,
          "responseTime": 1414,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d057da-3e03-4504-87c5-731253f5903c",
        "cursor": {
          "ref": "ee5be2ca-64a1-4653-9b0b-e898893059b7",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4fb50a69-db13-47f5-bea9-224ea2830247"
        },
        "item": {
          "id": "27d057da-3e03-4504-87c5-731253f5903c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fce0e44a-db5d-44e3-84bc-7379d875a829",
          "status": "Created",
          "code": 201,
          "responseTime": 982,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19e90c5-7fcb-4bb3-abcc-850699e65829",
        "cursor": {
          "ref": "68217c3f-4342-41b5-b8b2-6e0bdfc9894a",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e686d4e6-91e6-476a-9a81-3130a602498a"
        },
        "item": {
          "id": "c19e90c5-7fcb-4bb3-abcc-850699e65829",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6b1b91df-a4e6-4c15-a1f7-04de0e73313d",
          "status": "Created",
          "code": 201,
          "responseTime": 992,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "96598a6d-f4d1-4fc6-8461-bf77ac573ecb",
        "cursor": {
          "ref": "46d853ff-0331-4a3a-94a3-04fca04e3457",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bba87642-48be-4f40-bf0c-5606d39cd7a7"
        },
        "item": {
          "id": "96598a6d-f4d1-4fc6-8461-bf77ac573ecb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "823d17ad-ec46-439e-a074-0cc4047979ed",
          "status": "Created",
          "code": 201,
          "responseTime": 961,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4916c8fc-9084-4c89-843a-e91d8d4b31fb",
        "cursor": {
          "ref": "ebf7ed7a-d48f-4a31-90c4-a8980004d861",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "143e63e9-6f75-42e6-a2c3-4d96bef8f060"
        },
        "item": {
          "id": "4916c8fc-9084-4c89-843a-e91d8d4b31fb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1272da73-2565-4601-8c84-a0042d866d35",
          "status": "Created",
          "code": 201,
          "responseTime": 1084,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5728e1a-b97d-4ec4-9f03-203179098d6e",
        "cursor": {
          "ref": "da951a2a-9f9b-4361-b3ac-6e9791e3e861",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b0c72058-6bfd-4be8-a44b-cddce13a9adf"
        },
        "item": {
          "id": "a5728e1a-b97d-4ec4-9f03-203179098d6e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "db6824c6-2b42-49ab-87b0-4dae4295bb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45fcf70-6f90-48dd-a1a2-15f564a01418",
        "cursor": {
          "ref": "ea76e5b0-7849-4cb7-837b-e84516382a34",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c211b7cf-1e8f-4615-8a0a-74fe30f84675"
        },
        "item": {
          "id": "c45fcf70-6f90-48dd-a1a2-15f564a01418",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "070b69ae-b564-4655-81e0-b04d0ee02f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944d5087-a988-47ad-9b9f-63ef1453d3a5",
        "cursor": {
          "ref": "c69ccf1f-6bac-4dbf-80f0-e32825ea8d35",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ce789e45-4c3e-4fe2-9383-526dfa0feec3"
        },
        "item": {
          "id": "944d5087-a988-47ad-9b9f-63ef1453d3a5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b531ddb5-62b5-4dda-bade-8210cef4331b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5174f9e-d6b3-4004-b148-cf4db83fabc5",
        "cursor": {
          "ref": "0b248c17-503e-4996-a247-7492dd88a554",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7ab55f74-a4b6-4510-9325-ebdb5d638600"
        },
        "item": {
          "id": "f5174f9e-d6b3-4004-b148-cf4db83fabc5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "510fbf8e-f999-4cc7-8be7-436aa9365788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7956a7d5-e0da-4340-bc52-6537851609c9",
        "cursor": {
          "ref": "a880c3a9-c7f4-424f-a3ba-a6a3f137706d",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "37be24be-891d-47e8-a230-997658acb1eb"
        },
        "item": {
          "id": "7956a7d5-e0da-4340-bc52-6537851609c9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "40c4024b-c6af-4e58-93fe-dc332da75a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729b7b85-2ab7-4c9c-bb10-8be22e5b97f1",
        "cursor": {
          "ref": "1c1fca97-5614-41e6-a720-c76505efe7fd",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6362ed42-fff8-4e61-9e97-62f252244299"
        },
        "item": {
          "id": "729b7b85-2ab7-4c9c-bb10-8be22e5b97f1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cf576d99-c2f7-41de-89a1-100df5db6f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a95f2b-80a8-42e0-b280-79531d8b1068",
        "cursor": {
          "ref": "25495b75-48c7-43f2-aaa6-0add00294941",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1a8550ef-47a3-43b5-b6fe-ec1af9771e26"
        },
        "item": {
          "id": "f5a95f2b-80a8-42e0-b280-79531d8b1068",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c8bf1d1f-34a4-40df-a819-9ed5b164777f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b055a821-78e4-4fd8-bcfa-36910f15883d",
        "cursor": {
          "ref": "7b067276-8428-4e8e-8694-f8440d78ce6f",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a66cf0e3-b2f6-4470-a11f-40751d822ead"
        },
        "item": {
          "id": "b055a821-78e4-4fd8-bcfa-36910f15883d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7925b279-ac81-4717-8d4d-f3a0199579f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0eb08f7-42f7-4ff5-b9a3-634d369a9051",
        "cursor": {
          "ref": "d1f2afd5-f73f-4755-a0b9-ffb70251c939",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fe0950da-a72d-46ea-807b-8ef07cdc96ca"
        },
        "item": {
          "id": "c0eb08f7-42f7-4ff5-b9a3-634d369a9051",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "35c0661f-9f4f-4009-bd3f-a645e9b94c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab5085c-82cf-464a-ac4b-c6d0b44bc6be",
        "cursor": {
          "ref": "964dc3af-be14-4828-b7aa-0e6273a6296c",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "70b3319d-9aee-4c58-92ab-90b12be7eff4"
        },
        "item": {
          "id": "0ab5085c-82cf-464a-ac4b-c6d0b44bc6be",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b5c8fb2d-f8ea-44cf-bcc7-1a8986e1560b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ffeb30-9c04-4796-8cfa-c2956d696f40",
        "cursor": {
          "ref": "20384575-939a-45b0-aeca-ac36e15844dd",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "acd8e3b1-809d-4c8f-b7d3-2f2c2b3d0d5f"
        },
        "item": {
          "id": "d4ffeb30-9c04-4796-8cfa-c2956d696f40",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d866dccf-4a75-46bc-a45e-b9ee7a68a29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd885605-09f9-4e6d-bb65-957e25eb0695",
        "cursor": {
          "ref": "b9ca9495-94df-453a-98f9-9843d068e40d",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "aa406a97-0a1e-40f6-b997-b4c81b6db789"
        },
        "item": {
          "id": "fd885605-09f9-4e6d-bb65-957e25eb0695",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "90572461-69f8-4bcd-a4b7-752f86f4893a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f8ab56-b1bd-4dda-9eb9-d085491f4b49",
        "cursor": {
          "ref": "40144a1a-1538-4ff4-a90b-ca5e6c7ec929",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "33885b8e-f9a1-4643-bc3c-b5711658a57d"
        },
        "item": {
          "id": "68f8ab56-b1bd-4dda-9eb9-d085491f4b49",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "191ba6bd-1d8e-4643-9230-9f521c32c1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c3fe13-159f-4331-935f-db7c47fbf145",
        "cursor": {
          "ref": "dffb2244-b7a7-4f64-81d4-5bb94d00a669",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cc3e43ff-729e-43d0-b17c-e136a452aa65"
        },
        "item": {
          "id": "f1c3fe13-159f-4331-935f-db7c47fbf145",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "61bcf9f9-eb24-48b9-80bf-a2598629782e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab73ab4e-3afe-48cd-9e54-830b565a0141",
        "cursor": {
          "ref": "c4128653-692d-436d-9529-f9741203940b",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e34e3901-615b-49dd-a6e3-e40b8bb8101b"
        },
        "item": {
          "id": "ab73ab4e-3afe-48cd-9e54-830b565a0141",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f0a8d3fc-e837-40f3-bfff-54b169b77f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97bfa1af-1ae7-42e8-99a0-5363fc3e634e",
        "cursor": {
          "ref": "8221d829-8f5c-4b7a-802e-458fc370d54e",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e54a1beb-764d-48d6-b20d-d8ae8dd35820"
        },
        "item": {
          "id": "97bfa1af-1ae7-42e8-99a0-5363fc3e634e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a563b1a0-3f2e-4f39-855f-31b09c0915db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f321267d-b5c3-459e-8e3a-aaf41ee5e88b",
        "cursor": {
          "ref": "1e24bf7e-1e8d-4474-b245-d2756472211b",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3943e265-b6c7-41e8-86c7-cb8063abcdbb"
        },
        "item": {
          "id": "f321267d-b5c3-459e-8e3a-aaf41ee5e88b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "83eaeed6-9b1d-4918-8148-669cd515d00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0675911b-a6c8-471f-b431-6c23d0eab2a0",
        "cursor": {
          "ref": "6f77de1e-9abf-4205-b5cb-15ba66ebd9da",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "884bf3d2-44aa-4656-9a0e-3dc0f12da825"
        },
        "item": {
          "id": "0675911b-a6c8-471f-b431-6c23d0eab2a0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "14b9e038-f9b7-4ea3-a8fb-eb7fdf3452fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5e494d-58ab-4321-aa43-a31a926d3265",
        "cursor": {
          "ref": "44f88ee7-0dc0-4a64-9d26-a4b3523a30a3",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1e8bea99-4431-4f55-856a-8df8c944e92e"
        },
        "item": {
          "id": "da5e494d-58ab-4321-aa43-a31a926d3265",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "75cfc3c4-bf7a-4546-adbe-562234063c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eeb160-c8d5-4a93-8f2c-ffaead6007cf",
        "cursor": {
          "ref": "8322e88e-fbc1-4799-80f8-45951cba0795",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ccd40577-f2fd-4d7a-90e5-a5f180cfd8e8"
        },
        "item": {
          "id": "f1eeb160-c8d5-4a93-8f2c-ffaead6007cf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "056046e2-8a9d-44fa-b23e-a47d5e542399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61508f91-22da-405b-b8cc-a1ce8c7fdad8",
        "cursor": {
          "ref": "3ce8ff37-ec21-4126-abe3-fb64f47262ba",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "81c612a7-4715-454a-b0c5-314eb41e58bf"
        },
        "item": {
          "id": "61508f91-22da-405b-b8cc-a1ce8c7fdad8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4db81186-fe3c-46c5-bcd4-64bf89969e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6433c7-3ce3-403a-ba98-4d2ca917845f",
        "cursor": {
          "ref": "775c0825-5c42-4b35-a969-452c76c88b56",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c14cbbac-76f1-41f8-97bd-152d587d1c6e"
        },
        "item": {
          "id": "ac6433c7-3ce3-403a-ba98-4d2ca917845f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9aadf49f-6fb8-4096-a387-dabdbd6ddf89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ac958b-0656-47e6-9189-91b8ef8836d4",
        "cursor": {
          "ref": "4c593ad0-cf93-42a8-b8ec-c9d4e608d767",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "067c6257-f26f-4fe3-8652-ca8cba6419c2"
        },
        "item": {
          "id": "e2ac958b-0656-47e6-9189-91b8ef8836d4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d3f30840-dbd4-46ac-9117-8bf014b3782a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47e2c51-2801-4651-8c7c-744164760fbd",
        "cursor": {
          "ref": "250d9b00-a6ac-4532-96ad-480095cfab50",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b8961d52-3843-4e84-8a53-52102ddeecfe"
        },
        "item": {
          "id": "b47e2c51-2801-4651-8c7c-744164760fbd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9d942d5e-11f0-4c0d-bf4e-faea8ec660e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5740c90b-62b6-40be-9583-e7cce048d726",
        "cursor": {
          "ref": "9d963409-8e08-4a18-b9bc-e26197fb8d7d",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4c571262-6e43-4922-85ba-de10704f8cbe"
        },
        "item": {
          "id": "5740c90b-62b6-40be-9583-e7cce048d726",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e1e5a73e-21fc-4903-a36d-4f1f694650c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8891a4be-4651-47f0-bba2-731fe9bab551",
        "cursor": {
          "ref": "a30e985a-8189-4342-bb55-b6b815592dce",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "25139dc4-14bf-46a5-976f-d3e4ee35c753"
        },
        "item": {
          "id": "8891a4be-4651-47f0-bba2-731fe9bab551",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c3389269-5401-46fa-9b2e-4fd5b66a9ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da6ec47-c623-4927-be2b-00e637000a2f",
        "cursor": {
          "ref": "677bf9a1-15a3-4fc3-bbd2-f3c98ea3c195",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0f55019e-ff2b-4598-a50b-3b7b6f17f578"
        },
        "item": {
          "id": "2da6ec47-c623-4927-be2b-00e637000a2f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "169f1aa6-9d31-4a63-ab8c-846c247ddf9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc07cc27-5fb5-4e62-86a3-c1da7905b7aa",
        "cursor": {
          "ref": "3114f48e-c82b-4c9e-9549-afe92f015eae",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "41f414ff-648e-4bcc-8e5c-d3181ebdd970"
        },
        "item": {
          "id": "fc07cc27-5fb5-4e62-86a3-c1da7905b7aa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "55d33eef-5d5a-4d21-8de6-2f2ea96a43f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf07815-8293-4365-9366-0310985e8ebc",
        "cursor": {
          "ref": "0c91ffbe-b737-47a5-baf3-b35691ec2d2b",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1f891336-241f-4a6a-b40e-bfc4334ff310"
        },
        "item": {
          "id": "9bf07815-8293-4365-9366-0310985e8ebc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b18e0807-7f13-40e9-8af5-ae375f539e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e3c722-ff84-4e6c-896b-396dab01c089",
        "cursor": {
          "ref": "1b9d2bb7-61bb-44e3-a693-4b5617f117ee",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fc93883a-f677-4726-8d95-0d413ba8be17"
        },
        "item": {
          "id": "c5e3c722-ff84-4e6c-896b-396dab01c089",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5854d685-9682-4f1b-8910-20491938b0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2567f2-e72c-4be9-ae05-78867f9bcf33",
        "cursor": {
          "ref": "365d66aa-feb6-4f6c-8114-dc97be61d334",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9e63507a-2423-4934-b80f-52beaed42abf"
        },
        "item": {
          "id": "0b2567f2-e72c-4be9-ae05-78867f9bcf33",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3f2c41f9-4992-40b4-8705-133bd8a3ed4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14389abe-f81d-48f2-b1b4-bbaf843b9698",
        "cursor": {
          "ref": "360367ba-fde2-4763-94e6-f589f3514e80",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c49b3cfc-9b67-45d2-84b6-ea9bc2b9741c"
        },
        "item": {
          "id": "14389abe-f81d-48f2-b1b4-bbaf843b9698",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "74963a09-aef3-4c22-b4eb-44935689c1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f855a028-7033-454e-a2a9-58fd8960a837",
        "cursor": {
          "ref": "88026f19-ef6f-4976-bfd3-bf28e1c3f273",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "94393b0f-fc08-49ad-8525-2333804739f1"
        },
        "item": {
          "id": "f855a028-7033-454e-a2a9-58fd8960a837",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "25e5d4d2-50da-4eff-b14b-a69d76941877",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4d3ec6-edb1-4b09-94c8-148f57b870db",
        "cursor": {
          "ref": "0852349e-136d-4c2e-b127-c347fef0ec0c",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6ea724b0-acc8-463e-b86c-ff290f6adb01"
        },
        "item": {
          "id": "1f4d3ec6-edb1-4b09-94c8-148f57b870db",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f785c3a9-d3ec-40c5-a3f3-10ce0f038079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1555296e-5cee-48a0-a471-9f89fff08cf7",
        "cursor": {
          "ref": "dcfc7801-6b87-462a-8f11-33fab6a915a7",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "dcdf4857-97a1-4498-8e35-efcfbdaaa4c6"
        },
        "item": {
          "id": "1555296e-5cee-48a0-a471-9f89fff08cf7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a18783c5-2d44-48dc-b441-eacb08c8ed9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1a9529-1af8-4f1e-a67d-2dee0a36a8e8",
        "cursor": {
          "ref": "3e43d50a-22e2-4812-8f13-2841ce166c18",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "443c774b-ec1c-4832-9481-c3f37e02d089"
        },
        "item": {
          "id": "db1a9529-1af8-4f1e-a67d-2dee0a36a8e8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b668c681-13e9-47c3-be10-16ade60756eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37305bec-3b05-4b3a-8634-ec25eeb1d81b",
        "cursor": {
          "ref": "df1911b8-f6c8-4643-b0a0-f35bfb9149bb",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e00fd438-d0b3-4fbf-b8ae-494930179251"
        },
        "item": {
          "id": "37305bec-3b05-4b3a-8634-ec25eeb1d81b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d60c65f0-3900-46ea-8c35-38222cfa9659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bf4905-7850-44f0-836f-493bf7baf341",
        "cursor": {
          "ref": "3cf49c3a-d2e6-4cc6-b11f-9a90b2ffd08f",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5c8abb2a-bc98-4e8a-85c5-3ceb4a7f4de0"
        },
        "item": {
          "id": "41bf4905-7850-44f0-836f-493bf7baf341",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f3397d9d-a870-4196-a37d-bd676f376c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8b5e27-a56c-4bc8-95ed-096e1530cb78",
        "cursor": {
          "ref": "127e6f2d-8b09-43c2-8c87-96588b9b217d",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fe78a672-a597-4f9e-8b65-17e52cbefac7"
        },
        "item": {
          "id": "ae8b5e27-a56c-4bc8-95ed-096e1530cb78",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4cd76faf-3393-4f8e-8868-d9f40550ea6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31f3e32-bec7-4df3-9db5-8bf38eb97600",
        "cursor": {
          "ref": "a498a9d1-40de-4b81-9a07-53b48b365daa",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4089a103-d14b-4f6d-b589-b6a5d1d58de0"
        },
        "item": {
          "id": "c31f3e32-bec7-4df3-9db5-8bf38eb97600",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "548eb6ed-ccad-44b0-a9f5-b6cefddb881d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43747bae-750b-4732-965e-ffadc4fb2071",
        "cursor": {
          "ref": "71c95f53-36a9-4888-ad73-e4b6cca567cc",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e5a764be-e06e-4ac0-bcc3-e0652a403e41"
        },
        "item": {
          "id": "43747bae-750b-4732-965e-ffadc4fb2071",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7656b397-6c5e-47d8-ab6e-0fcfc6f40ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87319040-3a39-416a-ae61-ce045aa74515",
        "cursor": {
          "ref": "f5e29ffb-8a1f-42ee-9417-fd0b00ef751a",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "03e645e0-8522-4280-8a4c-4865f8921e31"
        },
        "item": {
          "id": "87319040-3a39-416a-ae61-ce045aa74515",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3ca4da2d-e999-488a-9bd4-3bc64a6b3e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0a9d70-9eb3-4aaf-9311-3898bba2acf0",
        "cursor": {
          "ref": "37d157ec-9105-4597-b070-6b5a7b72e1cc",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e6ae945e-801c-4b07-975d-840ce4cb4c39"
        },
        "item": {
          "id": "8a0a9d70-9eb3-4aaf-9311-3898bba2acf0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e4405444-4f77-4b92-8b9b-9cb3d7f098ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19dd8ca7-18a8-4570-a1da-26ee3356dc43",
        "cursor": {
          "ref": "e38623cc-2886-4268-99d5-6669b810b9c9",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f7cb66cc-f9a2-4985-b476-2ed2c48a9c16"
        },
        "item": {
          "id": "19dd8ca7-18a8-4570-a1da-26ee3356dc43",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8203885d-8d04-4349-b5ad-80a030156e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a61e6d-9e92-403c-a6d9-9b70f1122fe5",
        "cursor": {
          "ref": "d30c46c8-ce5f-44ec-8eed-f9499b3dfc79",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a44a5d35-6e98-4707-82bf-a061caab553e"
        },
        "item": {
          "id": "72a61e6d-9e92-403c-a6d9-9b70f1122fe5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "15b35c59-abfe-4cba-9551-96c33c6a8562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f9c61d-d6e2-4b34-af91-1e7cfa704e15",
        "cursor": {
          "ref": "a79986fb-43fa-4473-aa0b-913306847aec",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "efd1c50f-917d-429e-ad0d-504d792d9aca"
        },
        "item": {
          "id": "e4f9c61d-d6e2-4b34-af91-1e7cfa704e15",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ee860957-6094-4471-8ec6-b143824d2038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df442936-4d77-4a9e-ab2e-f7c9c176d02a",
        "cursor": {
          "ref": "3b70a3be-e373-4cfe-95d2-54203b479ef0",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e28a28a6-1219-4bc1-9c28-0cd8e4852846"
        },
        "item": {
          "id": "df442936-4d77-4a9e-ab2e-f7c9c176d02a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "faec8adb-5f5a-4e21-b8ce-de7a555c0eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d72555f-6240-48ac-a9ec-237b6ea57574",
        "cursor": {
          "ref": "6e36b502-7662-4884-aaa8-2ff67c0ee9f3",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "09bca5ba-39ba-4efe-b818-5e64003a8d1b"
        },
        "item": {
          "id": "8d72555f-6240-48ac-a9ec-237b6ea57574",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c05e0030-a307-4192-a9f9-ecc41fe7b543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b319e443-5bb0-484f-8f83-b9654ddf6d8d",
        "cursor": {
          "ref": "1092c9fd-01fb-4b52-9639-6f9b070bfc32",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dbe7a95c-36fa-4830-834e-bfcc8e142ff3"
        },
        "item": {
          "id": "b319e443-5bb0-484f-8f83-b9654ddf6d8d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b9c7e375-0e2c-473c-8731-f186878b8e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae26a65b-d557-41bd-bdab-22dff689817f",
        "cursor": {
          "ref": "d2ed83ce-15aa-4af9-bd71-cd0eaf3c0308",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4257e12f-15ff-4816-9dc1-f6037ee119f5"
        },
        "item": {
          "id": "ae26a65b-d557-41bd-bdab-22dff689817f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "88515f8b-937e-418a-8246-4f9f42dcf7a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dc3f3d-f78e-4d2f-b3ce-b107a3b3cde3",
        "cursor": {
          "ref": "03a91036-f148-41bc-953d-98106eb5701d",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "039e48b3-bbc0-4f33-a409-59b68b97561f"
        },
        "item": {
          "id": "c8dc3f3d-f78e-4d2f-b3ce-b107a3b3cde3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "572fef57-f98f-4133-a537-f5321240826b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e661314d-6f27-48a5-87c8-b17ae182b0c0",
        "cursor": {
          "ref": "0de7881f-dfc9-4151-95c9-1febda2ae0a2",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "072c3518-2cad-4b21-93b3-d4a0f0a5de71"
        },
        "item": {
          "id": "e661314d-6f27-48a5-87c8-b17ae182b0c0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bae300b7-fa1c-49d2-8329-ae1455295fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d741a63-ac62-441a-b19e-f6a5ef297a47",
        "cursor": {
          "ref": "4e99b20d-4e6d-4f44-9aaa-a7bda0cbe0d2",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "912e7a14-ec90-40fb-a211-f0f4ea9c7db4"
        },
        "item": {
          "id": "4d741a63-ac62-441a-b19e-f6a5ef297a47",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1325ba70-ed06-472c-9263-ab4a44e1c2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a97807b-1712-4527-a225-e025dfbaf125",
        "cursor": {
          "ref": "98ca26ab-8dc1-49bd-b5cb-bb6268a8d9b7",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7b76818f-620f-4e45-8916-2e5043bab736"
        },
        "item": {
          "id": "0a97807b-1712-4527-a225-e025dfbaf125",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "da88c08c-9944-459a-899e-34be66373e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480364dc-9767-4a45-ac17-28f9d48492f4",
        "cursor": {
          "ref": "e7ce134a-5843-42f9-97bf-793d7a1b39e3",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2e54fab0-7a3b-4660-b1b7-15791fa31826"
        },
        "item": {
          "id": "480364dc-9767-4a45-ac17-28f9d48492f4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7afca5d2-39ae-4b9e-93c6-dc9ffdfad8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6e668c-58dd-435e-910d-c4985e33c91c",
        "cursor": {
          "ref": "4752579d-e59d-47ee-b1c9-8612dba23cf4",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2acadf15-2875-46f8-9e99-984f82fc92d8"
        },
        "item": {
          "id": "dc6e668c-58dd-435e-910d-c4985e33c91c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7d1904e1-5df6-4fd8-bde4-7ba0c25e93e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d50151-723f-4de0-b33f-cd723fb0185e",
        "cursor": {
          "ref": "92b4bca6-1d65-49c7-b5b2-f9a465bb9876",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "51f50f73-6b9f-4b37-8b8a-3239f6f03ef5"
        },
        "item": {
          "id": "64d50151-723f-4de0-b33f-cd723fb0185e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8cd9caad-95d9-4ce1-a1d0-c07ae475a328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa0ffe7-122d-49b8-91cf-bad045cdd5bf",
        "cursor": {
          "ref": "65a3ef2b-ada6-43b2-b784-8b9f14302653",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ce47b138-d6cb-49f5-b21f-95b0d01d6aef"
        },
        "item": {
          "id": "faa0ffe7-122d-49b8-91cf-bad045cdd5bf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5f068306-7205-4199-8932-0369d0854be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93926954-7aeb-4a3b-b611-148e08cd1cab",
        "cursor": {
          "ref": "77809ff7-0942-40a9-b725-d1eeb6f461f0",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "954b2bac-1ba3-4710-859a-7e3fa50e1ab3"
        },
        "item": {
          "id": "93926954-7aeb-4a3b-b611-148e08cd1cab",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "50af138a-e875-410e-88f7-d0d51f162ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a635cc2b-7f98-4f95-80db-a5ce4ffe30e8",
        "cursor": {
          "ref": "0960c668-b667-473c-adc5-67996e782936",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9513b16a-d758-48a0-84de-0910a03a4f1b"
        },
        "item": {
          "id": "a635cc2b-7f98-4f95-80db-a5ce4ffe30e8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cfbc6b96-e7d9-44de-850f-1f7c8509ea3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2ca5df-a76b-4ffd-bab6-4a574f7ad562",
        "cursor": {
          "ref": "aaa27bbf-cb54-4547-8474-c1865120ba50",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "54c85b24-aaef-4c2b-b284-5c986ff0b329"
        },
        "item": {
          "id": "ac2ca5df-a76b-4ffd-bab6-4a574f7ad562",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "da1473a5-b8f6-437b-88bc-b847c88cddfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550afd1c-f1f3-4299-a3e6-5f3d9ccd66e1",
        "cursor": {
          "ref": "1a5ffb88-a387-4c18-9508-00a5ecda4831",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "cdd3efb7-b274-48e8-a8c8-89ea5b61c1c4"
        },
        "item": {
          "id": "550afd1c-f1f3-4299-a3e6-5f3d9ccd66e1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "390fee97-aa0c-4920-9b3e-984b2473fa66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c10370-0b02-4f93-af86-1978b104f339",
        "cursor": {
          "ref": "1b5267e6-74cd-4667-936f-02ac4d3a85cc",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "794c28bd-e773-445b-a5e6-d6db4de7e922"
        },
        "item": {
          "id": "23c10370-0b02-4f93-af86-1978b104f339",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c9d766f1-ff74-492a-898b-d10a5f588a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6648f720-27fd-4c28-b0f6-017d8b83209c",
        "cursor": {
          "ref": "be7935dd-4399-4e7c-baeb-fcf5cd587732",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "793ac7a7-3b03-441a-b743-0bbaf51825bb"
        },
        "item": {
          "id": "6648f720-27fd-4c28-b0f6-017d8b83209c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "52578b51-be52-4478-a020-f9a7604ba0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9477f1d-5d67-4414-a03e-77a05d393a65",
        "cursor": {
          "ref": "cf101362-8e81-4fc0-a2a1-9b2ba5057439",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8cf51125-d54b-4d38-a1bf-f25162ba5148"
        },
        "item": {
          "id": "a9477f1d-5d67-4414-a03e-77a05d393a65",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "10bab7a6-b24c-4d9c-9e3a-3fbe8a962bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ab6c11-f44a-4a07-890c-14009bd072af",
        "cursor": {
          "ref": "3042c5ee-4814-4b81-be5b-9715acd2fdf2",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e1dd7ed4-daa2-47be-87bf-4dd0cbaa969a"
        },
        "item": {
          "id": "d5ab6c11-f44a-4a07-890c-14009bd072af",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9db384ed-3a5a-4ea2-aa1a-4114066864ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f90514-efa4-48fe-8e21-8bcd8f8c1646",
        "cursor": {
          "ref": "e3142f7c-a663-4bea-8483-ad901e44432b",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3a240f16-1229-4499-acff-8b7ae0824cbd"
        },
        "item": {
          "id": "84f90514-efa4-48fe-8e21-8bcd8f8c1646",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a6371e83-644c-4e6d-8760-878782bbe5d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4347d081-55b7-4544-8789-926d3725226b",
        "cursor": {
          "ref": "70b144b9-1cd2-4e6c-adba-6f628375e6d5",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "91b64156-01cc-4724-b28e-1e6f5053587b"
        },
        "item": {
          "id": "4347d081-55b7-4544-8789-926d3725226b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0a9e389e-5da3-494a-9cb2-dd6c8a7e0c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6aa8ec-476a-4e11-a179-240d11317aac",
        "cursor": {
          "ref": "af68e7b7-a95d-4795-a42c-c39b1e5c5ad1",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6f14e1b0-e258-4d1b-b0b1-1ea6ae962c32"
        },
        "item": {
          "id": "2a6aa8ec-476a-4e11-a179-240d11317aac",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0257fb13-8f9e-470b-acb8-8e221dd77f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56398a6e-20fd-454a-a29e-c425a8a2cbad",
        "cursor": {
          "ref": "f1592172-e4e8-4c99-b5e6-876469cc9e9b",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1b8b3f84-9896-48b8-952e-b47ba29cb148"
        },
        "item": {
          "id": "56398a6e-20fd-454a-a29e-c425a8a2cbad",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8df707a3-a5b0-43f3-b160-c5eea97d641d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d29e8b6-a3db-45af-af25-78d6b9f579e9",
        "cursor": {
          "ref": "635ac9dd-da59-49dc-b730-50046688c802",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d90a4943-2763-4d0b-84e4-a3497ada54e1"
        },
        "item": {
          "id": "8d29e8b6-a3db-45af-af25-78d6b9f579e9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7d8cdcf9-dc83-4e0c-94fb-42d451911b7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1331834c-9d67-412c-980c-7f12e90bedce",
        "cursor": {
          "ref": "dc5d92a3-69e0-4fa0-9cf3-d3334ec8b0b3",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "41c0bc3a-ba24-4dab-bd62-c791fb313271"
        },
        "item": {
          "id": "1331834c-9d67-412c-980c-7f12e90bedce",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "71ba902d-57e6-499a-b1ab-6ffb396a42a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8677eac7-4918-401b-9447-ebd94b2b73b6",
        "cursor": {
          "ref": "9d1ddad9-4ba7-4120-a35a-091b1889191f",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4b54bba8-cf4e-4185-b60f-9f27b7c85de4"
        },
        "item": {
          "id": "8677eac7-4918-401b-9447-ebd94b2b73b6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bb14252d-8bae-49b8-9a56-bb13411065a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26704cb-41a3-4213-83e2-62fe5da639fe",
        "cursor": {
          "ref": "2f07c11c-56c2-4f97-8ec6-65b5641edec6",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "85b20d67-fb8f-4fa6-b803-c0bc6ddba017"
        },
        "item": {
          "id": "c26704cb-41a3-4213-83e2-62fe5da639fe",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "dce9d84a-f5df-4695-82f0-6db607b57636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac3536f-9bee-456d-968b-4b837f6146f7",
        "cursor": {
          "ref": "cb8702c0-932a-4e26-841e-0c88ad24dd77",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "00a6e3e9-bc17-4ed8-86f7-a33517e1fe1d"
        },
        "item": {
          "id": "7ac3536f-9bee-456d-968b-4b837f6146f7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0f84c02c-d46a-463a-8096-28336a44c07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243269a8-8f19-4c5a-8c34-8a99b4d83e92",
        "cursor": {
          "ref": "753ec6e2-6a25-4a43-acd3-0fc9632b06b8",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8f4c0011-f075-404c-ac26-246de62d014b"
        },
        "item": {
          "id": "243269a8-8f19-4c5a-8c34-8a99b4d83e92",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6991a0b6-c572-4933-a14e-c00ffee820ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa50b4c-5e08-412d-a43c-a67fe6b995ee",
        "cursor": {
          "ref": "8a018b75-9caa-48cb-9009-ef7a9f990841",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "292d5fb8-886e-46bc-bf80-9563b9f3aead"
        },
        "item": {
          "id": "7fa50b4c-5e08-412d-a43c-a67fe6b995ee",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f697bcfe-efd6-4e18-aee2-87b247a7e3cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "d56f72e1-f829-4bfe-8b54-eca8cbe465be",
        "cursor": {
          "ref": "7425d6e1-6d82-47fa-bcaa-35c54a98e438",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1ab5a22d-e73f-4f31-abae-fdff38a0dc62"
        },
        "item": {
          "id": "d56f72e1-f829-4bfe-8b54-eca8cbe465be",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c6b64475-5cf2-4ccc-8c21-eedf8398ea80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72ec84a-40fc-4577-a18f-59fbdac9ce18",
        "cursor": {
          "ref": "b9d0849b-603a-4a98-9908-e820f97fb8a5",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2601f6e9-2e32-4423-8c8b-5dd77720ab36"
        },
        "item": {
          "id": "b72ec84a-40fc-4577-a18f-59fbdac9ce18",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "883837ae-cf63-43de-8ad9-0de36b16b0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71ea789-3879-4a4d-a125-105f15202507",
        "cursor": {
          "ref": "671d615c-a779-46a1-9ce9-84370c86d698",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7f2bacd8-6bf6-4241-9051-7816ba7a854c"
        },
        "item": {
          "id": "c71ea789-3879-4a4d-a125-105f15202507",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "290d8f0a-1049-46f3-bf15-bb0fce4e3654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f23e59-d543-41e4-adbb-cbab444be484",
        "cursor": {
          "ref": "0bc6ae84-2790-482b-a390-bb941e5ceb2a",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "97e56b65-3399-4a44-a90c-8fa4350b2d33"
        },
        "item": {
          "id": "b2f23e59-d543-41e4-adbb-cbab444be484",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "856c484d-4ecd-4d0b-a0b7-176cef58d5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02cc50df-5cba-4d2c-b879-d514d90cc28c",
        "cursor": {
          "ref": "06adde96-38f4-448c-bfb7-1bad5c637aad",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f6e7f332-1e44-434a-a33e-aced596728eb"
        },
        "item": {
          "id": "02cc50df-5cba-4d2c-b879-d514d90cc28c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "33f974ec-5c44-4d88-ad0b-404fb6eb5901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7621443b-49c4-415d-80b4-f8baea2ca9c8",
        "cursor": {
          "ref": "3d5c37c7-45a4-4ba9-bf48-268773d2f8b8",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9e24a3fa-2ab1-47b4-a169-5480063de7de"
        },
        "item": {
          "id": "7621443b-49c4-415d-80b4-f8baea2ca9c8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "72284214-7aa9-4044-844f-ddc58fc521e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf131bf-5f2d-4ee6-a7cc-84027caa378a",
        "cursor": {
          "ref": "6a1c2b60-217f-4ee2-a4ba-fe68e4bced50",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cd6e7759-3a71-4b81-8a1d-76a62420ebd0"
        },
        "item": {
          "id": "dcf131bf-5f2d-4ee6-a7cc-84027caa378a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "da19d5e8-87a7-4a6a-86b7-a50a08f2ffa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c9796d-ef17-44d4-9196-0560e4b5729a",
        "cursor": {
          "ref": "817a80d0-17a8-4a9e-8662-9c19a5489d4b",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "dbcfeee9-1d4b-4b97-b951-ff192a643c4c"
        },
        "item": {
          "id": "e9c9796d-ef17-44d4-9196-0560e4b5729a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d2842c73-3faa-457a-b0c9-75b896c23132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0673f18-2cef-40a9-bba8-f95ffead549b",
        "cursor": {
          "ref": "b33fabbb-9674-4d6a-a0d5-58988dd375cd",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "03807e33-6dac-4884-b18e-40e3071512b3"
        },
        "item": {
          "id": "f0673f18-2cef-40a9-bba8-f95ffead549b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "56cfd6cd-2c0c-44bc-80da-5017e706d5f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f034ff56-a288-4e0e-bdeb-e8b2cfda284e",
        "cursor": {
          "ref": "fff6a817-1725-4218-b088-e79a0682a04d",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1260d8e1-fc1d-4645-8aa9-eeb1c635f560"
        },
        "item": {
          "id": "f034ff56-a288-4e0e-bdeb-e8b2cfda284e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "77748d4e-63ed-48e5-a07d-a61c28409351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d156b25f-6064-46e6-bf8b-fdb574186597",
        "cursor": {
          "ref": "e3933ec0-1bfd-4bca-aa43-51ddf2d99674",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c74c3b0d-1760-4693-8cce-ee350c79de3a"
        },
        "item": {
          "id": "d156b25f-6064-46e6-bf8b-fdb574186597",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "dd6a098e-eca1-406d-ba28-91db7ec2e74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1ff052-30a2-49c2-b9b1-f9223f6cabba",
        "cursor": {
          "ref": "0a93d65f-fb40-47b6-b67e-82b2058fa5e9",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ff9135d0-2ce1-48cc-95c4-2b9ae84bd1e6"
        },
        "item": {
          "id": "ea1ff052-30a2-49c2-b9b1-f9223f6cabba",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3a63d793-8a92-49a6-8093-e882ba157dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92f660d-44f8-40f3-b1e5-02a0c803bd14",
        "cursor": {
          "ref": "d042ba10-3296-471d-846b-7ecd93aa85e2",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8d625f7d-9508-498a-aa85-aa4d675663c4"
        },
        "item": {
          "id": "b92f660d-44f8-40f3-b1e5-02a0c803bd14",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3df6579a-129e-428f-9bad-8c350f280656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ee859d-9ae6-4548-a6de-7e7f2b9accad",
        "cursor": {
          "ref": "5102a7da-5282-4330-8bc5-971a8cc2eefd",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d4e86ca9-5a6e-44d2-bd52-b9431e1e30a2"
        },
        "item": {
          "id": "63ee859d-9ae6-4548-a6de-7e7f2b9accad",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e9ac18ff-aa6d-4181-a12d-77b576b10a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bd62ae-32c0-4f07-a4b7-fea2041dc932",
        "cursor": {
          "ref": "3720d63b-de38-4289-9727-ae65fbebba6c",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ecf6c25c-b0f6-441a-9427-c6df4712ebbd"
        },
        "item": {
          "id": "b7bd62ae-32c0-4f07-a4b7-fea2041dc932",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "45eee9b6-5db6-47df-b801-dc75c5292fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a763ab67-ec35-4aaf-81ce-0210b8c0d192",
        "cursor": {
          "ref": "83b89956-4a43-41f5-b6f5-2937815471e6",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "81d81bdb-e9cb-4644-b001-722653ff475f"
        },
        "item": {
          "id": "a763ab67-ec35-4aaf-81ce-0210b8c0d192",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b2f318d6-bd36-4224-8607-7e6ec50cd22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83a3d06-b0f7-4004-b241-dae1cbdbb5bc",
        "cursor": {
          "ref": "a570f574-c7a0-4b8c-96a1-20c61d15290a",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3a48fa83-0e31-47f5-a781-7debf136092c"
        },
        "item": {
          "id": "c83a3d06-b0f7-4004-b241-dae1cbdbb5bc",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fcd0a99d-cf6b-4715-a67f-13dba060df6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db0139b-2c92-4c71-aa14-bea964690786",
        "cursor": {
          "ref": "2880ddef-517e-463a-b1b9-02868fb45867",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fe56f887-2cf7-4440-a176-c681cd3f168d"
        },
        "item": {
          "id": "7db0139b-2c92-4c71-aa14-bea964690786",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5cd18e1d-0af2-49e0-88e8-a8510062df4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5acdae12-bf91-4a04-81e0-75d9d54f8080",
        "cursor": {
          "ref": "a5fed6b1-bb1d-42ea-94a0-27036ffab680",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0700dc65-1d44-4c8f-bb7e-9863600015fc"
        },
        "item": {
          "id": "5acdae12-bf91-4a04-81e0-75d9d54f8080",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "651eb433-e112-466c-8211-4a9de10a81bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8244d802-8598-40b6-ae43-88cddc213fee",
        "cursor": {
          "ref": "b489276e-3b1a-402e-8d5a-6047cc93c517",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5700d1af-0c1f-4ded-b534-0fbb0cc69153"
        },
        "item": {
          "id": "8244d802-8598-40b6-ae43-88cddc213fee",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2cae8782-1730-46dc-adf7-f38e7dc02774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b0bfbf-cd01-48e6-8ca1-3460d86eaa52",
        "cursor": {
          "ref": "42869470-d51f-4188-8c27-6210a45961d2",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "54eee53c-bd5e-4122-9ff8-1419bbb65fba"
        },
        "item": {
          "id": "d4b0bfbf-cd01-48e6-8ca1-3460d86eaa52",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "aa1b3303-ed79-46ef-b4ef-2d06d65248c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b0d225-73b1-4083-aa7f-e5d838fba3ed",
        "cursor": {
          "ref": "2b375504-4c8e-4a99-9bed-fb4d0175d17a",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2649d7b7-dc0d-4dc3-afb8-d19f7e6842cf"
        },
        "item": {
          "id": "51b0d225-73b1-4083-aa7f-e5d838fba3ed",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8da4b67b-bf39-4d46-b1c3-653e123f6625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a095a35-c0cc-47c0-a8ae-1690c0f519e5",
        "cursor": {
          "ref": "e47ae6e9-e92d-4abf-8c14-8fcf6b55de21",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "80982251-e09d-463d-868e-9bc90f75d0a6"
        },
        "item": {
          "id": "2a095a35-c0cc-47c0-a8ae-1690c0f519e5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0b785cbe-fab0-4bea-b6b3-a1ec13863681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c574a0-ecb6-48a6-86cb-cbb1537b4dad",
        "cursor": {
          "ref": "d94c8524-0d83-4f18-829d-740a1a714ba7",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "105d6420-b73f-416c-88a8-3b0f4b285cd6"
        },
        "item": {
          "id": "47c574a0-ecb6-48a6-86cb-cbb1537b4dad",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "77a00b7a-d6a7-482b-84c7-29e429eefdaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61db9d62-e1cf-43c5-b7a0-6ce76dea00c2",
        "cursor": {
          "ref": "9d9648ed-726f-46b4-a332-325624cfcd57",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1ba6e034-663d-4e5f-a095-80f881c6994f"
        },
        "item": {
          "id": "61db9d62-e1cf-43c5-b7a0-6ce76dea00c2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "aff8450d-ae30-4c56-b24f-d30021ea84f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b17cae1-3af2-418e-889c-9fd771495562",
        "cursor": {
          "ref": "0745fb28-b2a8-4da5-80b8-f330ee4a295f",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b507d7da-23de-4352-b397-b015257ccd16"
        },
        "item": {
          "id": "2b17cae1-3af2-418e-889c-9fd771495562",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5563feb8-337c-4118-8002-392c9d574d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6327180-6d65-429b-bcea-03fec6e1e9b2",
        "cursor": {
          "ref": "545d7e4c-52d2-4c4d-912e-d4343babb1ab",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "91ed0bae-08ea-491a-9661-24c2d4362c3c"
        },
        "item": {
          "id": "a6327180-6d65-429b-bcea-03fec6e1e9b2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bf296d47-2525-4ceb-9aea-a695d0273cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d2f42c-c9a3-4e3e-9cec-41f3b411d859",
        "cursor": {
          "ref": "953e2654-3f0f-4ac6-a05d-4ffdc8e13c30",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e0104a30-3a37-48ae-a601-1bbc6f77ef0d"
        },
        "item": {
          "id": "57d2f42c-c9a3-4e3e-9cec-41f3b411d859",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a1c97cf2-db42-484b-baed-8d1694a1017a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f896787-9d46-40f2-905d-0a1beb296bf5",
        "cursor": {
          "ref": "da0f24b8-a7e9-4967-b3ad-9216d0cf76d0",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "66bc189f-59eb-4cf3-b93a-c8198fe34479"
        },
        "item": {
          "id": "9f896787-9d46-40f2-905d-0a1beb296bf5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c528e66d-2932-4474-b2e5-ef8ca7c449c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530f7e50-8f04-480f-ae8b-c8d444120088",
        "cursor": {
          "ref": "eb3c2fbe-16ac-4ae9-8794-dbf75c5822f4",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "448da744-ccf2-4d69-b1ef-65e05ac1d728"
        },
        "item": {
          "id": "530f7e50-8f04-480f-ae8b-c8d444120088",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e2f6ab36-227d-41fc-827d-ac3a49ed5145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "2491fa8c-a202-4807-94f6-1c1a6bf2b7a0",
        "cursor": {
          "ref": "b5579c5e-8117-4d58-9a90-9457480716ed",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0bbfd725-ef04-46df-bd69-1434a62093b6"
        },
        "item": {
          "id": "2491fa8c-a202-4807-94f6-1c1a6bf2b7a0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "734828d0-0c87-48d6-a8b3-8243c815dea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0c6c6432-eff0-49b8-892d-442d7a6d0f87",
        "cursor": {
          "ref": "2ad555df-c899-43ac-be30-e101cc002e9b",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d327e3fb-7233-45a1-8439-d9f20e7da0fe"
        },
        "item": {
          "id": "0c6c6432-eff0-49b8-892d-442d7a6d0f87",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4e1b8452-e9f7-43bd-9935-dd33cc05447a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3efc85db-af80-436e-b21f-8f840d19b5be",
        "cursor": {
          "ref": "abf0c025-631d-4b19-95d9-ef12416c3934",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a9cd4982-defd-46d8-9177-e078a5b43d71"
        },
        "item": {
          "id": "3efc85db-af80-436e-b21f-8f840d19b5be",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4ff969c1-4eca-4b81-83fb-1c8f4e149bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e10d938-837c-4791-b3c8-6074245aa95f",
        "cursor": {
          "ref": "bacb673f-4176-41c3-9476-f2ea4c9911b1",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "adddd496-1a4a-469f-836f-847a1ce949f2"
        },
        "item": {
          "id": "6e10d938-837c-4791-b3c8-6074245aa95f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3f47c300-81ad-47aa-8cd9-329996799817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "4f6dd165-2111-4e75-8417-b2cdde657746",
        "cursor": {
          "ref": "3ff75480-51c6-4e77-9a56-6a4a0ee50e91",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "aa18fd42-0432-436a-af26-a3e38919275a"
        },
        "item": {
          "id": "4f6dd165-2111-4e75-8417-b2cdde657746",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7b598de2-fa12-44f8-a167-e3c670d9d041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 843,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d0f42e8e-fa4c-4391-a44d-5dfbd6330bda",
        "cursor": {
          "ref": "c6d84c44-de20-4669-b3d1-3d51ff9b4b97",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "75112da0-abc3-465b-b60e-83c422a4b83c"
        },
        "item": {
          "id": "d0f42e8e-fa4c-4391-a44d-5dfbd6330bda",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7c521962-c960-48ea-ad5a-f9faf31a501c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "7b385f2b-42d5-4db0-9428-814eb0b9c0b8",
        "cursor": {
          "ref": "2f1579de-fb94-41ee-bdf0-a538fb581a3b",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fd2f5a7c-cbde-40b0-bf46-f6c2312c73f0"
        },
        "item": {
          "id": "7b385f2b-42d5-4db0-9428-814eb0b9c0b8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "52e82ad2-e62c-41b8-b015-3306b0e179dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c7dd9e6c-cf35-4da2-9899-2780dd8f6bad",
        "cursor": {
          "ref": "e1839661-9327-4d13-a7e5-7f0f7b3e00c7",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "78b0122b-bddb-4a43-9c16-0e4cbb0326d0"
        },
        "item": {
          "id": "c7dd9e6c-cf35-4da2-9899-2780dd8f6bad",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8889b554-7781-4324-a1b7-567a69ed006f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d7a3fa1e-072f-49b8-8ded-ab77f5fe1e66",
        "cursor": {
          "ref": "21a4a7e0-7402-4339-99d4-4bff7285beec",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "13e1c90a-2968-443f-91e6-7e243f14128a"
        },
        "item": {
          "id": "d7a3fa1e-072f-49b8-8ded-ab77f5fe1e66",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4554bf96-b43a-45d8-ab41-790095c6911c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a8ce1789-8fdd-482a-a82b-b75c7258a268",
        "cursor": {
          "ref": "658ecffa-b5e4-49e1-8ee7-7efa7e44ed76",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cfb108be-3884-4bfe-99d5-f299b84fe52b"
        },
        "item": {
          "id": "a8ce1789-8fdd-482a-a82b-b75c7258a268",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fe10f065-21fa-4627-bba6-2c3bb34dc096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e6efb6-e5fe-4b7b-b5d7-ba47b661ea39",
        "cursor": {
          "ref": "868a1b9a-b64e-48d9-86e2-8d2fc002d22b",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "587ed6ab-400c-439b-b5af-2e33e194c73f"
        },
        "item": {
          "id": "21e6efb6-e5fe-4b7b-b5d7-ba47b661ea39",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c912b1e6-4370-48ad-ba69-1c9180a93046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1993e889-da4a-4423-8a59-9ab2748352f7",
        "cursor": {
          "ref": "dfabf47a-888a-4bb5-a0b9-449d53968420",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a7a0b88f-d2d0-4cbd-9899-21ec9a698995"
        },
        "item": {
          "id": "1993e889-da4a-4423-8a59-9ab2748352f7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e11aacff-563e-4b80-96ef-2bb78a7d7971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806b43c0-06e0-4ece-a311-00a8d0fa6232",
        "cursor": {
          "ref": "d23acbad-5748-4ae3-8137-a23efb84d3e3",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "55537e69-980b-4eb8-80c1-16516ddf37c6"
        },
        "item": {
          "id": "806b43c0-06e0-4ece-a311-00a8d0fa6232",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d4004aa9-a3c4-4195-bf9f-812488f915ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8dc974-2585-4dd7-8eb9-7c238f7efb04",
        "cursor": {
          "ref": "b02b14c5-6918-4d9f-bcfc-82e5e9bed42c",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9b896cc0-65a5-4931-9ef3-8052dbb3d826"
        },
        "item": {
          "id": "ea8dc974-2585-4dd7-8eb9-7c238f7efb04",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "161af1de-51b9-40af-9bfc-6ca180a930af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b58157-e500-449d-a670-667bde996fca",
        "cursor": {
          "ref": "ae8ff009-052c-4dcd-b2ec-17d3c09b7085",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "de38a9d5-d5a8-4a0b-9c4d-2fa63930f207"
        },
        "item": {
          "id": "f0b58157-e500-449d-a670-667bde996fca",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e0289e3a-0a08-47f3-96a9-d537bc4e42d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83117c1-049d-47de-96ab-7805cfe11861",
        "cursor": {
          "ref": "23bc754e-77b6-4169-ba6c-0b172aa32a38",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "59dcbb72-24ae-4250-9a20-81efa5f72784"
        },
        "item": {
          "id": "b83117c1-049d-47de-96ab-7805cfe11861",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5560998b-2989-4952-94e5-6f36531318c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99a2f4a-f295-4265-afb9-bdbb5b60cb02",
        "cursor": {
          "ref": "38fa2ac1-3782-4906-b338-6117fab1dc3c",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8f05f930-f880-4547-8823-a25a8eb63be0"
        },
        "item": {
          "id": "b99a2f4a-f295-4265-afb9-bdbb5b60cb02",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5390d250-ed3f-4c4a-9ab0-9859970910ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a61392f-7c55-4ff2-9754-154656dde057",
        "cursor": {
          "ref": "4932cbb4-252f-4448-877f-d8b6123ec28b",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "334d4380-c65c-40ff-b4e3-f48bf233e84b"
        },
        "item": {
          "id": "0a61392f-7c55-4ff2-9754-154656dde057",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e73f50f9-99c8-40e8-b5bc-fa7c45f8ea51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8167245-0117-41bf-9aa8-186787257f17",
        "cursor": {
          "ref": "8d30c684-b5b9-4563-bf3a-f0638e2f8a69",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "78ca2e88-7de7-4dd7-8261-13ebc827cd2e"
        },
        "item": {
          "id": "e8167245-0117-41bf-9aa8-186787257f17",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ccbb34f2-3f1e-43de-a1f3-4e4cdd42117e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d8ba6f-bedd-4e4d-b82e-124c261a4d01",
        "cursor": {
          "ref": "008bc2be-1a84-448e-8b01-0625666220ba",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d7865711-f5d3-4235-8f2e-8985b38c9d33"
        },
        "item": {
          "id": "e9d8ba6f-bedd-4e4d-b82e-124c261a4d01",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d03200e6-919d-43e4-91ed-eb3f62ae209c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5092d4-4067-47b4-b47f-5e8ecb21b93b",
        "cursor": {
          "ref": "8829f342-8cf1-4e8a-ba82-d6717f374abc",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "792ec425-b39f-49d9-ad65-cb6ce8c4c178"
        },
        "item": {
          "id": "8a5092d4-4067-47b4-b47f-5e8ecb21b93b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "61c11ace-ca56-4ae4-97f1-a13742686bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fe3f07-7141-4c50-b7e8-7f059ed09ce4",
        "cursor": {
          "ref": "51841a0e-cb69-4d01-b47e-b13fe908a74d",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cb3b249b-9aca-4756-a1b0-8e34e1b3995a"
        },
        "item": {
          "id": "97fe3f07-7141-4c50-b7e8-7f059ed09ce4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e5cf35e1-bbea-44d7-8de7-6a8cddde7048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7615e699-2b22-48f2-b37c-5171eef441d8",
        "cursor": {
          "ref": "6b4e6f49-205e-47a1-9b1f-4eaa595b7262",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7e48996d-4926-489e-8de6-16f71d677fe2"
        },
        "item": {
          "id": "7615e699-2b22-48f2-b37c-5171eef441d8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cdc8b111-2448-4908-9634-92b35c9446f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1092,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e3e98e4b-3330-4830-ae32-d9c11fc1f061",
        "cursor": {
          "ref": "14da2afc-ffcb-4911-b933-0456861d1ea4",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "93ef37cb-cc5c-4c06-9112-836a1628913d"
        },
        "item": {
          "id": "e3e98e4b-3330-4830-ae32-d9c11fc1f061",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "dcaf468f-e61b-429c-81bc-d0e6e7f84f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 757,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "32134e81-8456-4b81-87aa-06767a828981",
        "cursor": {
          "ref": "36f8b69c-8af6-4f85-b060-b584d53555e9",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c8eebbfc-1876-4deb-a6ca-dc31020b2545"
        },
        "item": {
          "id": "32134e81-8456-4b81-87aa-06767a828981",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9ea857c4-02bb-4c13-99e8-4b60e06de391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "31e7015b-ba8e-40bb-af43-c36e77dc2ed4",
        "cursor": {
          "ref": "21c5957b-50c2-49c7-81f9-ef03504cc0a7",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b28295f4-dd71-4475-8030-c9f69f456044"
        },
        "item": {
          "id": "31e7015b-ba8e-40bb-af43-c36e77dc2ed4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "17acc1e7-bd30-49e2-b350-88e554a492ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 711,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3d115a13-7b04-4ab0-a584-4bd9a0c00346",
        "cursor": {
          "ref": "2df77ae2-c92a-4804-845b-2b85a2106c4e",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "93a48776-b443-4d92-afce-625fa818d11e"
        },
        "item": {
          "id": "3d115a13-7b04-4ab0-a584-4bd9a0c00346",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0b792c97-6b59-4fd7-b353-f6be031710fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b9d8bc71-d48c-427e-98c9-aa634b40f71b",
        "cursor": {
          "ref": "ffca577c-0a69-4b06-8589-eb84ab19b2e2",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fa37361a-842f-4ffa-b248-4225ac28c119"
        },
        "item": {
          "id": "b9d8bc71-d48c-427e-98c9-aa634b40f71b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "069ee505-ac88-4dbb-a49b-d00b6160f6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49479470-f41b-4999-9f91-f308232d04dc",
        "cursor": {
          "ref": "a0a6aff8-dd7a-4e2d-92e6-9dde1421e941",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "648a7a2c-573b-4b4d-b2b4-f88617e28e79"
        },
        "item": {
          "id": "49479470-f41b-4999-9f91-f308232d04dc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "89f43da8-bf68-422b-ba03-00a5be307b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de727ae-e269-4443-92af-c20f858ca7e8",
        "cursor": {
          "ref": "ba09ca4f-8bca-4219-9537-70d55bf145ae",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "01a5855d-a4e0-4c66-9f53-2c85018d08d1"
        },
        "item": {
          "id": "1de727ae-e269-4443-92af-c20f858ca7e8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "61dfa1b2-fcbe-49d4-884f-a164ddaaf50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a07ae61-31a8-4fd7-af9a-08d17640ba69",
        "cursor": {
          "ref": "a4ba141b-f218-4fe6-819c-64753840b60c",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bdf22031-aeb0-4da6-a1fa-670922aad939"
        },
        "item": {
          "id": "8a07ae61-31a8-4fd7-af9a-08d17640ba69",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "55d20ba0-e560-43d9-ba5a-2d22ed739dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18e120d-91f5-4bcd-aea0-3004a3266854",
        "cursor": {
          "ref": "729fe932-498d-4119-9fc9-2c542d648d44",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "11ec629d-415a-45bd-95ca-423dfa633e46"
        },
        "item": {
          "id": "e18e120d-91f5-4bcd-aea0-3004a3266854",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0174d83a-6822-40a9-a28a-566a2dcd4475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b6813f-7c92-4bef-83fd-bbea2ed9c1f7",
        "cursor": {
          "ref": "f260e0ad-1508-488c-911e-87436fdd0e99",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c5c77046-dfc5-4487-af83-b38484a955d8"
        },
        "item": {
          "id": "c8b6813f-7c92-4bef-83fd-bbea2ed9c1f7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "42316a7c-2563-4e46-912b-6816cfe49614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef746e3-b2e8-407f-af00-46ef147354b2",
        "cursor": {
          "ref": "4479ba78-c0ed-48d9-836b-9679c0a891e1",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "db0c9da7-2dcc-4cf8-b66f-f56b7a986253"
        },
        "item": {
          "id": "fef746e3-b2e8-407f-af00-46ef147354b2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d41917f8-7678-40d9-aaf7-62ffbbb277ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de93f3d-9188-4825-b709-ef0bcf1f95e2",
        "cursor": {
          "ref": "3bbc5d8b-67b2-4d44-8c1d-232ea794488b",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5eb93b03-94de-46b3-81b6-02e35962bb9e"
        },
        "item": {
          "id": "7de93f3d-9188-4825-b709-ef0bcf1f95e2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e64b3314-a24d-41d2-b49c-1c5c87068f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0c0215-0cc9-4daf-b9e8-30a38c3651e0",
        "cursor": {
          "ref": "add60de9-34a9-4532-bf9b-ab1351992d9f",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "22055981-a8d1-4948-a1cd-ac6cc7cba0b6"
        },
        "item": {
          "id": "5d0c0215-0cc9-4daf-b9e8-30a38c3651e0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c15cbb8e-5f01-4feb-8581-d07e42b7c075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b48ae04-7a63-43f9-9aab-ee7f014b06b1",
        "cursor": {
          "ref": "ce8a57ce-cfe2-42a5-b655-ed115d84e04c",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c58cb83f-8fec-431d-8504-0f23b2b29e19"
        },
        "item": {
          "id": "7b48ae04-7a63-43f9-9aab-ee7f014b06b1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c5ebfd91-40bd-482b-995f-bbba9de36504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5324d40-e37a-4ea9-80fa-effbf69d1475",
        "cursor": {
          "ref": "03c2b34a-5a89-4516-8303-20dd6448f4d7",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8a89c7e0-3822-4dd3-9375-ec512b927e39"
        },
        "item": {
          "id": "d5324d40-e37a-4ea9-80fa-effbf69d1475",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "75ad631e-fa6e-4613-860b-6422e2d0a3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067d9f11-0639-421e-826c-e68ca719ebb8",
        "cursor": {
          "ref": "005a47e1-25f5-4ed9-a089-28a965b6c16d",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5c5d3ea4-fdb6-41d6-bfe4-a476db76f527"
        },
        "item": {
          "id": "067d9f11-0639-421e-826c-e68ca719ebb8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9b161e2a-f5ca-4f29-925a-a35017c74104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83976cb5-e3f9-45ae-a672-7b725ad822ca",
        "cursor": {
          "ref": "6ad22fe6-abd6-4699-a7ee-c1f4c56161fe",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "338733a2-c8fa-4917-8e7d-6284be8c9456"
        },
        "item": {
          "id": "83976cb5-e3f9-45ae-a672-7b725ad822ca",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "701a16cb-5cee-4b78-8d85-b493e712eccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c568700-3695-465b-a0e1-4186dedfa828",
        "cursor": {
          "ref": "a8b0669e-a7d4-4824-a9cc-8e4f97a51e9a",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "04e94969-f9b1-44a8-8020-e0fdbc0c3958"
        },
        "item": {
          "id": "9c568700-3695-465b-a0e1-4186dedfa828",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4a320448-4068-40ac-a2fc-9fd8aa0775d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccb8260-7f28-49dd-b919-b52d02135236",
        "cursor": {
          "ref": "f61ed71e-b293-4a20-a189-120d9fe293f5",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f52a2a2f-4f1a-4990-882b-cefed837d625"
        },
        "item": {
          "id": "fccb8260-7f28-49dd-b919-b52d02135236",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "41f9d8d1-6938-4901-be4a-674f17e1421a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67db225-2026-40a5-b7c0-eceac3656521",
        "cursor": {
          "ref": "5f06d3fb-3214-4744-b084-64f83efb5d4e",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "f95e374a-04da-4eb5-9aaf-4ae5a2d15b79"
        },
        "item": {
          "id": "d67db225-2026-40a5-b7c0-eceac3656521",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f54f72b5-9174-49fd-88f7-0756c31d56bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb87bf4-e376-4a20-ae4f-5fa6ae1b66da",
        "cursor": {
          "ref": "7c095b92-d929-4749-97ca-371e50d82b5e",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8ed9eca2-f0e7-41ed-b2ad-d2e9f0f1b3aa"
        },
        "item": {
          "id": "beb87bf4-e376-4a20-ae4f-5fa6ae1b66da",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bbd2116c-7423-4508-8415-56b8f55bedeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f1b8ba-09e6-4bfe-a1ce-49c1abcd211a",
        "cursor": {
          "ref": "198af808-3618-40ae-8502-a97ea3d2458c",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "84c7ff3d-efb5-4ecc-86bb-1d654b85ae35"
        },
        "item": {
          "id": "c3f1b8ba-09e6-4bfe-a1ce-49c1abcd211a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e051f2c3-d8c7-4391-9b72-6156a0725bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b0b6a0-30d1-415a-ba91-8a1173faf5bd",
        "cursor": {
          "ref": "c5f68036-aac6-41ed-bce0-88ffd311c157",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5e251632-e1de-458f-9b2b-ccbfb1697b60"
        },
        "item": {
          "id": "b1b0b6a0-30d1-415a-ba91-8a1173faf5bd",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e052a5da-496f-4d98-9d7e-2981b0290d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ec5ba4-a3da-47ce-be7c-cecfbbfead02",
        "cursor": {
          "ref": "987d19fb-3190-422c-b2cf-0b81578abc73",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "cec957ae-b78d-4f50-ab3b-dc67093510e1"
        },
        "item": {
          "id": "d8ec5ba4-a3da-47ce-be7c-cecfbbfead02",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8b3fae27-c398-4c5b-898e-237f9acb700a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cb1a2a-9681-490d-b4df-013fb73fbbdb",
        "cursor": {
          "ref": "36c652b9-9fe4-4a95-a9c9-bc68e6289dd0",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5fcf3dbd-28d8-480e-9282-aa63deb85fa7"
        },
        "item": {
          "id": "75cb1a2a-9681-490d-b4df-013fb73fbbdb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8659ed0a-658a-4fe9-a20f-1329947e79a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9a4bf5-180b-4b3f-97ee-54ef3d329aa6",
        "cursor": {
          "ref": "0c417114-7a07-4ccb-a09c-87e4f298989a",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "83da894d-6812-4ab9-941f-179e6cc71bab"
        },
        "item": {
          "id": "7e9a4bf5-180b-4b3f-97ee-54ef3d329aa6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bc954688-252c-42d7-aad9-4494c00aa9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12bfcc0c-353e-47f4-a563-ffda79fb51fe",
        "cursor": {
          "ref": "6238e8ea-5874-4092-a0a0-6982b53b8a9b",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "84c57f6f-03a1-44bd-a04c-41e41d69a4ac"
        },
        "item": {
          "id": "12bfcc0c-353e-47f4-a563-ffda79fb51fe",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9f1e07bd-cfd4-43d1-96fc-a0a9b217eb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d0fd37-a8bf-49f3-b628-d4252d6d60e1",
        "cursor": {
          "ref": "e5e3a3cc-fddc-4534-b90e-072398390b0d",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8dd23e40-d17e-4efb-8b46-e2169bdfdd65"
        },
        "item": {
          "id": "d1d0fd37-a8bf-49f3-b628-d4252d6d60e1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "edde1582-ebd3-436d-b302-ca42d7b255d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec82108-ee48-4784-905a-83a3ff96bb8f",
        "cursor": {
          "ref": "f446a4ec-9bd4-459e-8f36-483782e08aaa",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "23debdf3-e68d-4a2f-9dfe-36411ed8311d"
        },
        "item": {
          "id": "0ec82108-ee48-4784-905a-83a3ff96bb8f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c07a6817-741d-4fcb-86f9-6b44639922e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0296f0a-3b7a-4b0f-a6de-7c399cbbf13f",
        "cursor": {
          "ref": "973b73c9-ed31-4be1-b52e-a5d755583ea8",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d6736c71-4465-487c-a77c-4391baa5152d"
        },
        "item": {
          "id": "f0296f0a-3b7a-4b0f-a6de-7c399cbbf13f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2d68c852-fca3-4803-93b0-dd0bfc67b308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de61236e-0ed6-4c51-8c9b-1f55ebf0f9fe",
        "cursor": {
          "ref": "0d1cb953-f3fc-4767-a36f-306e4ea95c41",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a33642b1-cf4f-4f85-9e10-3c1c0c6e1b1e"
        },
        "item": {
          "id": "de61236e-0ed6-4c51-8c9b-1f55ebf0f9fe",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c3475ad7-7a11-472e-bfee-440065bf871c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581c9fae-fc75-4cfd-aa24-b6384704975e",
        "cursor": {
          "ref": "f674d9f7-8c34-4d91-bbb8-f9e26de4d630",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5f091a8b-eb56-4646-8694-68fb1df4e6a4"
        },
        "item": {
          "id": "581c9fae-fc75-4cfd-aa24-b6384704975e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "eee47584-8d3b-4cff-9363-145ec0e30954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac3c50c-7941-4ec4-93ef-4ece3b7d09be",
        "cursor": {
          "ref": "aadd59bf-6526-456e-b4ad-414b45cd9b98",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "565f3bb0-b81c-402b-8c20-6cac18c69b98"
        },
        "item": {
          "id": "7ac3c50c-7941-4ec4-93ef-4ece3b7d09be",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4962785d-6dcd-47b8-9507-c3e1f46fce39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d072b8f-c7f5-43f4-a66a-671555dbb2a8",
        "cursor": {
          "ref": "66b4e7b8-af8c-4cd6-8f5e-0b2f121acb99",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4fbd6ffb-471c-45fa-b816-7153f711388c"
        },
        "item": {
          "id": "5d072b8f-c7f5-43f4-a66a-671555dbb2a8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "600bab98-4e80-4222-b3a0-152c44042b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b728e59-c865-436c-ac5c-4cb4d8c0b767",
        "cursor": {
          "ref": "f02eaf05-dfa9-416a-aa38-7bf978017a2a",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a698e84b-721a-4d8e-89e5-31548a7af880"
        },
        "item": {
          "id": "0b728e59-c865-436c-ac5c-4cb4d8c0b767",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6b69bcc1-d38b-4c47-913a-6f64a4ef3025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051722be-715d-42b3-83a3-052614d6de2a",
        "cursor": {
          "ref": "679cdfc1-669c-4adb-b8db-d164306d3bac",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d7fa80c0-c7fb-4218-aa8f-8ff0b37c8e15"
        },
        "item": {
          "id": "051722be-715d-42b3-83a3-052614d6de2a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7b5491ce-f50c-4a1f-a037-4ac6a3c05c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9723dd3-e5f7-4512-ba4c-26891081a249",
        "cursor": {
          "ref": "a59323b3-b7c7-4cf3-91c6-fc7e10e7e739",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "273f83ca-81c1-4132-b59b-1847b50853b7"
        },
        "item": {
          "id": "e9723dd3-e5f7-4512-ba4c-26891081a249",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "77a60e84-9e6f-4c7c-9f6f-65dc469a1841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8e4278-116b-4b6d-8c77-70263132a6fd",
        "cursor": {
          "ref": "fd3ccb3d-3342-4137-8e5a-610a24ad221a",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "49e69593-2a91-45d1-8cd3-ddcb899da1f5"
        },
        "item": {
          "id": "ed8e4278-116b-4b6d-8c77-70263132a6fd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "631a77cf-e2cd-4815-8382-51fa1d035fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0ba594-7326-4240-91da-926965632917",
        "cursor": {
          "ref": "2e59611b-f621-4188-ac1a-e1ce38fca86d",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ed4ff5d0-631e-4885-87ef-294ac68a582e"
        },
        "item": {
          "id": "4e0ba594-7326-4240-91da-926965632917",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fa294423-b5ac-433c-9ef4-e875b45f9dab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d437c648-0275-4dc2-ab37-24e85a22daf1",
        "cursor": {
          "ref": "02809a63-f63f-44ae-adba-fc12a08528b5",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ffc1486a-c09e-406d-a190-b10b6a72bcc6"
        },
        "item": {
          "id": "d437c648-0275-4dc2-ab37-24e85a22daf1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a9729d15-ca9e-43e1-a672-4d83dc234862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea37651-735d-41da-85b3-98bf206de5a9",
        "cursor": {
          "ref": "1056436d-41fe-49cb-9261-df7278c4472b",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "afa3c656-5e87-421c-b165-3a82ddf0f880"
        },
        "item": {
          "id": "cea37651-735d-41da-85b3-98bf206de5a9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "396b9e85-b1d3-4758-a3bd-34e967def31a",
          "status": "OK",
          "code": 200,
          "responseTime": 730,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a7ded4-6ba3-4987-8dec-5fcdca135185",
        "cursor": {
          "ref": "a689bb8b-6408-4f0c-80f0-239015e68ed2",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "bbf7b3ad-da78-4fd9-90ae-7ea8eea0c0d2"
        },
        "item": {
          "id": "f7a7ded4-6ba3-4987-8dec-5fcdca135185",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "376109bc-5d32-4f7f-818d-51ddd3098778",
          "status": "OK",
          "code": 200,
          "responseTime": 739,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28339c6-19d4-43af-9f3d-63060dbaa4a8",
        "cursor": {
          "ref": "a901b952-7c20-41b0-973a-8e221fb6813c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1053902e-42ec-4939-866b-c59d4b532056"
        },
        "item": {
          "id": "e28339c6-19d4-43af-9f3d-63060dbaa4a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7baaa076-72c8-4d1e-9eb4-cfa39738f1ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28339c6-19d4-43af-9f3d-63060dbaa4a8",
        "cursor": {
          "ref": "a901b952-7c20-41b0-973a-8e221fb6813c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1053902e-42ec-4939-866b-c59d4b532056"
        },
        "item": {
          "id": "e28339c6-19d4-43af-9f3d-63060dbaa4a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7baaa076-72c8-4d1e-9eb4-cfa39738f1ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52362b74-c436-4e3d-aa39-a94d03c94e18",
        "cursor": {
          "ref": "12d4fe41-bb4e-4919-9c2e-8c2a378b4e2a",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3e772ba1-c9b0-4cf9-9fa5-da28d32e744b"
        },
        "item": {
          "id": "52362b74-c436-4e3d-aa39-a94d03c94e18",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7bd82d1c-1da1-435f-bf18-e1027489d1ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593a2ae8-9a76-4a9f-a72c-3400e55c31d6",
        "cursor": {
          "ref": "b0628a73-eb23-43f8-8f5b-3c86a23c856a",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "66470809-5043-42bd-aea7-4b1ba2971713"
        },
        "item": {
          "id": "593a2ae8-9a76-4a9f-a72c-3400e55c31d6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "41d755c4-6a91-494c-ac4a-5e554cca64d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}