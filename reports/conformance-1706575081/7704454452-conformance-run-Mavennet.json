{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "63894896-56dc-4797-9183-3b1892f61412",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8d87ec6e-fb72-4866-96ab-8acddb6c2f45",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "710fd321-16b9-41b7-93c9-0bb3c7b5ab19",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dad3c0ee-0f97-4f1b-81be-5cb1dde614f7"
                }
              }
            ]
          },
          {
            "id": "b48f6290-e0b3-4543-9d4e-ba2afc02259d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b50d0d2-3a7d-4a61-a80d-837b3015b780",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4bede6ed-9244-407e-9658-274f34500be3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4d1e859b-8e4a-464c-b80d-2378029a95e6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "968e510a-5243-4195-a395-6a12e1422827",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bb7c00fc-06bc-4dae-8e87-2fbdf907ae5c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3dfb637-55e0-4ce9-99ea-675bcabb461e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d92c5bb-0050-4e6c-83e7-de1e6af71c1a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7dbba6c5-967a-41c7-bc58-fcfa83c2341a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02d7dbcf-1da0-4f25-bb20-ffe7c7016adf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fecf537d-9777-43a8-9c9e-d9256fba1ea5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "195af145-ffd8-4aed-b519-3facde68d838"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13a34215-f0d4-445e-801a-a733428f3e83",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8cc2358b-f337-4a9e-8fe9-4c9b9d38f49c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d2e1f27-f128-46eb-ab41-b2399e13e4a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee78f6dc-bf42-408c-a4ed-1dcee4991594"
            }
          }
        ]
      },
      {
        "id": "53ec0a5f-f1d8-4722-bd6a-1fd467319b31",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "baa0c02c-39b3-4108-9976-5042b8c87846",
            "name": "Negative Testing",
            "item": [
              {
                "id": "212f1f54-f903-40d0-b90b-c32b32442189",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0c992840-51b3-4087-9eba-4cbca5e2d6c3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548dbb11-6076-4c1d-8985-bfed56e11d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "336e3e2e-ee73-4c2e-9a51-604fc52aa7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1e0799-b20c-418c-87d2-9ae00bc89b64",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdfec2a-04d3-454c-86cf-2633356f0aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f992b3ae-d228-43d9-b141-d2a76d6231ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3701d185-8c1e-4ced-9f82-9284f526d767",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81191205-dfaf-414d-88f2-d1c905d20e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d96a114-af34-4e9a-9cf2-f8f5718527c0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87db411c-5736-49ce-b4a2-53a1e39fa108",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7317c295-2f20-49ae-a947-1d991c74e18d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75369aad-1d80-4738-9db5-5edebed9d17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c97ff98b-14c2-4256-9f42-4dd969cc793b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca81c59-d70a-4a07-86d4-b762a8065bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d1ac5c-2e2c-447c-a556-a08349f32802"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "098f34f3-e0c1-4d33-9fe6-e1ca0dd46b6b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "415363ee-8b28-4475-a53c-200a1c17e7a6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28e2e5a8-38ac-4c59-aee8-088ae0d5f3ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3219fb3a-b195-47c9-bedb-c9852eeab816"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8693006-6fca-4719-a30b-24331f7aa506",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a1c49ba2-5291-4238-b093-8effa1c704f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5f07192-4105-4383-b934-2498dd895bad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f518e409-04a5-4383-aa46-1ca2cfa083a2"
            }
          }
        ]
      },
      {
        "id": "226f4a3b-1f73-4292-b50a-ca5272aed119",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3dc5dcff-4994-4b6b-855c-ae8abf9aece4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "845359df-fb0a-49fd-a63f-99416dca9026",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f9e4fe5d-17d0-466c-b8c9-c3b20966d49c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e483dee8-5433-451d-82cf-63448784484b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6302493-e2a3-4f69-8858-b8d25e8bed96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16349987-197c-4bed-a287-9f0ba8f1e038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2272fdee-0af3-4b42-be00-81efe145c4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06aeff4a-711a-460f-9892-a33d5482d49f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e475945-2532-4bae-9ce7-9d053e634d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a17823-0b1d-45c3-911e-f99135f58661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f766ad-55da-4646-b683-d43f82c885ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27234c64-7423-4888-9930-c6bd9f2638b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6490de76-6920-47bd-b99c-060e672458d5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a911f623-95ea-48a2-a35f-791aeca6ba4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72dc714c-34c2-4f3a-9429-ceea7c1b9485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24ae673-017f-4ee4-9f1e-778c80ba929b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6306d94e-2c15-468b-a94e-df8399ef8ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0e4a1e-a212-4461-b9d5-0eea4ac70ecc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bb1a05-6fe4-498d-89c8-ceb8b2a67d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42cb771b-c96c-4ffb-8b93-3cb55bb00aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2526c343-c403-4bdd-932a-1d4e287461ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8c55394-a747-4960-8075-9cd6d4c38e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9b9e5c-b08e-43f8-bb78-e9c16bbd9419",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59998c1-f3b8-49a2-8a33-2949c4d4c84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8c1765-9360-4be1-9bc4-f109117141b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02921940-122e-41e6-b8fd-9bcf3c1b27b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ce1037f-b3a1-452f-a335-b5ff4ba60bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15bcb341-5d50-450c-876f-d66d476bbf44",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566a5ca1-cdf6-4289-b2fd-8a4f4fd111a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891ab7aa-1d98-447d-a931-be9d649f3339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc5ad15-e604-4ee4-9eaa-11cf1f9a4759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f96a498-5631-4c5c-b1b2-2aa6435eae4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e74cbb-342b-45d9-8a5b-5d3d388337f9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632b263c-c852-4331-a86f-80aa56e7080b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64a62b5-e20c-4a3e-b863-baf5d50eb75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0a537c-ea54-4f8d-b28d-517837a3632e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "722cd186-c030-414d-8615-5ba45eaa3d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fbb346-7213-4de1-b6bd-9d75a80abc1a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8156c9-dab5-40ec-8fb0-03731ce9ab59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68333e6-3ae6-44e4-8cff-f75738eb5054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e115fa2-aa57-4de3-b361-806d4b371707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1d36193-6238-4fba-9cd1-e62183942214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830e4f11-76f3-4d8a-8eb8-6d5256b15a23",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e8160d-bd70-4b75-a186-17e3600f56eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7cb34f-bdf0-4ee8-b121-53ba9548931d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676dc5fb-a0cf-4f4d-a5e6-418157aacbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f69f81cd-3887-4fcc-9bcf-d3d157138895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61103dcc-320e-400e-8306-0111496916a5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb19561-0857-4e67-870a-d7d4d38d87ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813849bc-42f6-48c4-abdf-ecfc4d8ebc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407905dd-7a44-4aa3-93fd-eec2e341cc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d2544e1-d639-4ef6-909a-ea5664a2976d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc93e21b-bc6f-4853-bd86-9dd2201262a0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8738fa41-b1e8-4f5c-b71d-843dec6e0ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76454bca-03ae-43a4-b144-dc6153bca775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86cf962-97f3-4fd8-aaa0-7348a1454466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc6e2538-e996-4759-bcba-dd6220913b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa6af7c-c1e2-4b66-a1eb-709a0f0c3288",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f07234-29c8-43ba-b821-83a472d69b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87df2984-5cb1-4e9f-84d4-a20e3b7c75a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daea4987-1e3c-4f99-8dbb-bb7d5bad2b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "433b88a3-3eec-4ec8-99c3-f5410d256783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f58855-19dc-4f4d-9ab7-e712fd972647",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00557e68-456a-4fdd-8d91-921d6ef21baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2168ce7b-e3c9-4ec7-8b2a-cec79f3fb403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d82f937-f84a-480f-bc90-3839314f2ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "284099a4-5d28-419d-8a1a-1713e1b92431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c3edcc-6291-463c-a149-f7a253efb64c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c3300e-49d0-4534-91e2-d043d39dfa73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832ac6ab-9f78-4623-922f-698892327066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7aed71b-feb9-42c9-a570-cc9a5e043a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4425d970-c17e-46cb-8e36-01c80eb8a960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125eb272-9e36-4916-8f87-b0c35f0262e2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b430abe1-0c7f-4564-a241-9b6cdcd42cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e664de6-6dd1-4876-9500-11c2cd0d79f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a271839a-4774-4ce8-b76c-4911d4dec4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1aa64fa-1273-4391-9f85-f1cfd42e23d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a18ac4-f993-48e7-a619-220a08eca3ad",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e52490-0fd8-4145-99b4-0471490acef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59134d7-ef9a-475d-b0ad-dbc84f62b458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78715e0b-04db-4e68-88c0-0762d5033d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17f23e55-5372-4593-a2d9-f4d7d21ee385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894de7bc-e3ba-4954-9659-e7d2e6d9de9e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de195ba-fbaf-489d-93a3-8a880189f924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b467bfe-cc1d-4708-8411-8b1c77dd419e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3d88ee-a1de-4e09-b756-72b7487fd4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf66dcdb-cd5b-4871-8d80-6780660f6f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b50875d-c052-4da0-846a-05d52d05bdfe",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2620b9-1ad5-444e-af40-e5a95499bea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3f2382b-2632-4561-b5c0-a6fed9cc2679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec3cfdf-6da3-46c3-88e9-13ff7aec60a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b040deaa-11d6-450a-a7e8-a6c8520649e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6128d07b-d3c8-4735-9bc3-c84bb1f6cae4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cded6a-bea7-43fc-a575-a92166e08b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "885a9476-d597-44d0-9584-99267c70cc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c201f5-dd68-4db4-903d-7fac8ca8903c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b071af1-5690-4d08-a00b-94c2983b0318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad84063-18a7-427b-ab11-d59a43b34c5e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbc8c2a-e80b-4769-9c75-43a6e7e9bc41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "613ef19a-db57-4950-9cb3-c1ede2ef7cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00519a53-d500-41ba-a19f-1210abc9eb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49b93772-1260-4690-9f35-dab866029f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7ad615-599c-4164-948f-7b3a028bd5dd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ad1a7c-df15-448c-b91b-1e5eb95fc375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6fc863f-fab0-49e3-81c6-f0dce7f8160a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d1c7c6-2808-46ed-bb8b-483320d6dbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93c4fad3-da02-4d65-8bc7-19a7152f6b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c043c5b-437c-4770-a8e6-bf35c28fef35",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "831f280b-7286-47bc-9cf6-a3c1896759d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d8b778-ec2e-4483-bf37-1aa40cc4aa14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da75ec8-8b4b-42fa-8172-4c5d86cbb2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4719b8b2-500e-482b-8ce1-7c46f98de83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f68c82-bc39-4349-8978-56b07132b669",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00eb7345-53c2-463e-958c-76a82beaab3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46571dc3-bb3e-4aee-8445-2c225fa65d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d0b70a-7917-411d-b9db-e7fabbde2776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27ebfcf7-e049-4f45-9290-369d4dce00e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3cbda4-cb32-4718-9e11-6fbfcfeb8d4a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a34108-f0a3-4bc6-976f-708c997ddbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f51764-f9fd-430f-9bed-99087c03306e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e928ed87-2e7b-489f-bbec-5da47bed6bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9518b1-7401-44f3-b423-498adf760b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0488ba-09b5-4c36-96a1-c0a1a02068d3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c51aa8-410e-4d3e-93b9-a6ee6bbda772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857783f6-59e3-4bc0-8b3d-ead53d0f6d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a485559-9113-4689-9be1-31c22f168680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cac8f76-c945-4c22-8676-6c8fab35946e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c2517d-c067-4460-9dea-1f5e8a2aac5c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24599457-2c50-4503-92ab-2e2958255b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d564f0c0-f9cf-485f-aa85-96a3c37ef2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fda265-623f-450f-b28c-a3910a8dba5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d1ec01-5522-42c4-bed0-d66147a8086d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0212adc-10a0-402e-a1cf-38436ed04862",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755eea06-cddc-4d5b-be48-3f7de3b93f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a84121-7f92-4b4f-a656-98c273aaed4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebe5d25-cc85-4f13-9de0-f9141c091df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd9563bf-1bc2-4984-8829-20840290908c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32143422-df26-4b16-89e8-66c2c6300c92",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a036a4c0-b781-4a88-a9e1-47e1a58950e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03309586-a914-47e6-8680-f77064f9aaac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61d1dd6-b724-48ea-be8d-c8ea19b29a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca996aaa-f522-4926-b9cb-e604d909c01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5a4f42-816c-40fb-bdbd-f0d8ca04d277",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f2fedd-899d-41ef-b9dd-237f2dbb6d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83e2673-ab82-4cac-b1bc-5eb90d7df357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82751548-9cbd-4a82-926a-8d004d0e77cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "11cd33f3-ff6e-450f-9065-ab00a2b3b668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e40dae-d7a7-4b96-8fe7-c895f294af90",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8cf977-939d-443a-952e-bea931da37c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f25702a-d2ba-4188-bdcc-b11fb87ede3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb08328-a4e7-4fa7-850f-79f773900ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "28888f9a-611d-42a2-9d34-79f7b6a3477a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d0a183-231c-423e-8da5-850c3a2014d1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2a2496-c491-4c10-9754-ad06a68a8502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07bcfc0-8049-4195-a39a-9ac2faa78b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f6c6dc-b9a1-4e1d-bd3c-cae4d64c199d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a332e475-973b-45df-9b15-32d175629ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0837e95-cb3b-4470-864e-3757baa7d136",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b504fb-5d76-4de5-8db7-70bef00722a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db14b8de-802e-4a85-bada-45546291be9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b685f9a5-40e9-4a5a-940e-7f87564d7d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01e3e7f4-faf1-4f22-93ab-e453b67ac29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11fc348-a1fa-499d-9cae-a93e56cd4e0d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbc73cc-732d-4b29-9dbb-b320fdc6374e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a05986a-92c1-4c0c-aa5d-0a9c262966ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef351464-dff0-45ea-9d85-cc13f5ef81a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a34d68d-0c2b-4e7e-86ac-824f2b0cc207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469d3051-4848-414d-93f9-ca98bc7a30f8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febe45dc-8942-495c-9253-d086f273d2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7796dc87-f355-486f-8c60-a36057205a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa415914-bc1f-4976-b54c-23cfb6dd3a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02023a17-7496-49a7-9c41-d4db68b9f9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff60f879-2f0e-4a49-8df4-444b712ae06e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e5ba72-0367-43af-8577-5ebf1c97f2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688eadff-cc6d-44e2-a16a-0febaf73cf3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c1239e-3370-4389-a38b-174208f8b6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "40ba2a15-d104-46ba-9d89-c76658b56b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4675d6e-06d9-4be6-afc0-c1a72a0119ea",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d97150-41b1-4dad-891a-64abd5019ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0f6b32f-2564-4c84-a116-fa9dab536cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0d3561-c6e0-4f53-a3ea-b8b10c720be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70cfe796-3211-4619-bdde-b89f8c3e4332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72abd135-e868-4eec-ba32-6c40347c6831",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670c0fc0-3fe0-47df-8645-9145e44287dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9fe6025-4b45-45d3-8ce9-0655a3a71b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5714a134-e8af-4b49-82e4-f323123b595f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b745a149-473c-471a-a5ba-4c463819f5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45538f3-1da2-4a35-b2d2-820a530ccf87",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "296529b4-6121-48fc-baf2-43188d10b1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a9eb8f-360e-47a3-b794-f2331c3eb15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb3f7a4-0468-41b4-8f3b-5a765b77bb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5336ca9-b7da-41ea-8d62-a9997e5cd47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1bba86-312e-4f96-a154-99daae8d6210",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a20f973-313f-42ff-95e1-6db35d85284a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e1dc4d-a463-4ed9-be18-2f418a427c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e20e6ef-a864-4c50-b383-5560e923e1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec10ec1-93b8-42b4-88c0-17017bcf8a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a6e5a0-8154-47b4-aa6e-826773d5aaf8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9990a26a-e9df-4863-be07-f1c5f4c316f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707cf37e-e026-4cf3-8310-e99f070b4fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df10f56-c768-4a10-80f9-44e569568ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d85a0e-47c0-4be0-8fbc-82834622efaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af988a9-297e-4614-bb86-af5ba2a040c5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdb0c80-af84-4b96-ac2f-cc06111f856d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a5e769-7fb9-4b4b-b7be-e86040a796d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2032bf1a-e878-4229-a859-15d83e6c35c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6bd7f75-8695-418c-abbc-db3f956351ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c330ba9-1891-4b26-b2f9-dc6bf28c4c00",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f20224d-8d88-44bb-91eb-cd16da6fedce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a923ccc-cf69-4f16-9476-502b9da75674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e77d51f-ff51-4a87-bc94-0bf402711498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf2de70-4120-4f9e-9797-0022745775dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889d4da3-257a-4c19-a233-4df84fed9db0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e8b22c-89fa-45b3-95df-acd4be82b544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d1d3e5-7b09-4cc8-9d5c-f9065f051fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d7ebc4-a549-4e7c-bd9e-e9b43591f127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "22b0e415-6476-4367-b73f-9571d1916649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99da741c-b4c0-4266-b051-0f452b266552",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6113c7b-7755-421a-af08-65e5f26f0537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e684b54-9b21-43c7-b0c0-7f8f4f8e2b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ac6e5d-182f-4c9f-8a40-e6a0d0bd4955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a863fa04-ea25-4167-b07a-da1373bf4629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c220eca-01f0-481c-85cb-a6f7adbd41cd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf227c5-c12e-4a0e-a9dd-004f92a72afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb449c7e-be88-4019-b3a8-320c02779a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f2bbf0-6a0a-4fa0-925c-510cd9dd3392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f990b3e5-e64e-45d2-a174-f9bf5307a7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a1231b-f9c4-41fc-8ac2-aeb151a0a46c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4b699e-6ae9-4c35-94c8-a18230e807bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6625d822-9c87-4684-aa86-5a8f8e465ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69287727-351d-4066-9b05-f9ae0afca711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac0294d-ed15-45f6-bafb-f8830c61760a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc24a5e5-1cc3-429c-8a05-843dbba48ca5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5000762b-0ddc-4776-a964-4419c178bc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd08454-e66d-4c8d-a5a8-ee5ef9a53135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22cac1d-0b80-4b65-afe0-dcbf374d71d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6eb5d3d3-4743-4da9-85f7-ade6b9b3de41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce8e02b-a069-45a8-b879-b30ce91e7981",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0f39d3-4785-4a41-8b9c-ec7ef59d28cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff9567d-e7d0-483d-8e5e-bea9bd742255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ae2caf-5574-4bcc-8709-555f9f7b07c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a15db962-8b61-4100-a89d-5d01062de543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd14ce8-8248-44fe-b573-26387aae9925",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c813756-9653-43f8-82bb-457ee800f6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c12b1a0-d842-444b-84c0-346dd0524b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adf40d5-7304-4f84-8cbe-bb46b7a79d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3df4063-3eef-4a43-8b1b-2bab63974457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d165f96-4c7e-411c-8c41-d1dd98f1e7ed",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1be427-e146-4d35-9df5-c67ca17dc6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8114fab2-26e6-42b9-bc85-def6b37b8634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9684b02-e6a7-480e-b667-b11274d7416a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7fac6cd1-307c-4ec7-a827-cee45a68c360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d73b68-2e9f-4331-908d-6dc204922e85",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68eb1ffa-707f-412c-8c43-c97feedc2a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e97af89-4c22-4b7c-9694-f9d73023f186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7f7c6e-561a-4acd-b4b0-78a88922e3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a55d7ea3-d097-4535-9aee-359786af6467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d567cb-33d3-4467-ab5d-eb62d5a98ffc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ff3238-2e09-4889-b47c-1683778decd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a6c49e-905f-4715-901f-e586479f29e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f993d755-8dd1-4e26-b2f3-d21f1283d12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af696460-0fdd-4b28-b992-3ef951293acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ff78d3-4f8c-4c4a-b911-6b40671ab4a5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5ac37e-f8d3-4c33-85a6-4bfd7565256d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9574eb25-a87e-4754-8131-e8e1a8892b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab5864a-0321-4eed-8a56-829347bb44b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc10984-4f0e-4c3d-8010-b7c0ee161958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eca99cb-ba26-4e8e-94ca-68a6b243cb38",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a8f78d-c2af-4024-8d4b-1a0929ffc7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ac9ae7-6767-426e-b9ec-15c79e2ea403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857cc15f-fefb-4ff9-b196-0a73af550ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a537ab7-1350-4f6c-993e-b1ac231b5588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b7c34b-548e-43d6-8300-fab90c28e344",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f72472-303a-4161-b0c9-5c568a2fba1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe50cc7-b013-4cb3-a328-5e7be9e5c2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d520db4a-99f9-495d-a6b7-86fdcb645524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3f167f-a8c5-4c19-973d-11f96d344db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfe2149-a7a1-4427-a6de-35f4eec03661",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e449b0-6aba-4c52-956e-6f3f2c26aa32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c9c55ee-8876-44d8-9718-86521699208a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd109533-14c6-41aa-b5da-ef1fdd306436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "868911de-c031-4c47-9b7c-ccd3264b2c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a30beb9-467c-4f32-9c00-745066fbe545",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7459392b-6887-48b7-8765-1a072a4027db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12af382-5932-416e-9011-21cc183a45a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faa9e3e-9374-4224-aeef-4b25f266e7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8848f6f4-c8b3-4b23-9af4-2b9612b6f1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f997cb-e83e-4306-8461-1f42308a7152",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b500bc-44f4-4735-9667-2a225540a48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1976c5da-a226-43f5-b162-9d72f73e993f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1546158f-26de-44b2-bcff-26c08774eed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3725d5f7-4fad-419f-8e35-def346b063e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2468941-5e59-4f87-93d4-cde744b54390",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d6725a-77c5-4e8c-8933-c2583bbf0c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181fe907-c563-4cf0-aa0b-beca16672626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fae514-1869-4523-8966-697993982c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "54bc386d-be6e-46b0-84b5-81969f7d853b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4d655b-5dba-4e70-b09b-a575cb91016f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e69522-90d3-471c-9f3c-128704a7912b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8180a7c1-03e2-4b36-80f8-7ba8ac21fa81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85246453-db8b-4618-9d06-92b973733bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a21d4cee-acf3-4b96-9414-3d2733af2c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2002ab24-e347-429b-b7fe-4e984e23b5fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c465aaf8-eaf7-4950-bc17-e56f15e9f04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bed9de5-d555-4b22-90f1-97442ab4160b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c0c805-1c03-4b7b-aaa9-a6bbf0def5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c85fb3b-7eda-4274-8fe9-55f05ad08b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc45265-6911-4fac-9de1-1bfee27e7910",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351add3a-f6fd-498a-a97c-49a3c77730cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5714d3a-ec9b-4793-a6ae-0edfc87dc83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f05988-f98c-4b7a-bc1c-35927b18e4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "20ea9cac-604a-4463-8749-d90819718633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1538e1b4-18de-4ae5-9dff-2dfdba4efa0c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a8fb94-0932-4109-8cdc-547d38dddd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ed8a74-c2b4-42d2-afd7-fb9073cb9aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccb59be-453b-4acb-b439-2ed07c1f8656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "93a7ba2c-7414-45f2-801b-3c513ace54ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb01fec0-5954-4f6e-bbbd-b6083fc8d973",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6ba09b-5257-42ad-a676-83e8b0c73c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ab363f-fb01-4223-8bf8-fb61e941156d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4f47e9-b793-47be-9813-c0ff0ffe5ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38c8b2f0-cb54-4068-81aa-52f62b914f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c490148-803f-4fa7-8c8c-8fad8b68522f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26972088-7cfd-4721-aad5-d8e59cf6bd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39510cf-5b23-4b44-bf4d-ac4dae5ad834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d801d50a-070d-4e68-bdd1-ce4041388796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1363b81-1417-41fd-a286-3c1b029fba61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8d204f-d81f-4a89-843e-fbed83f0c715",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f1a853-345b-40ce-af29-d2aa034bdbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e967d4c-28c2-443c-b967-7926a616e327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ec0cff-5823-4b25-9730-53e589fa4f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f310a1a-b584-41c8-b4c5-4bdae53bc6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7670160-1ad2-4c94-badc-92f0a14414a5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb24b1b-75ad-45a4-a648-1dc17418e6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0037ac00-68b3-45c6-9c1e-20a612836dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c5d2a5-ca1a-4e35-bf75-133e7c9759c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c4348d74-1c61-4826-9af7-85cabf8d14af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bdf37d-e06e-4784-8cf3-8d8f3691401e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b636e53-0e99-4448-8410-009800be496a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361bfde7-0cb4-43d2-984a-0f01dd2ed26f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de0406b-1fcd-47ad-a7a0-2f6619e44bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "98fbe071-5bba-428e-b3d0-c9b1d49bddbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcc905a-7e61-47c1-b428-e304ab66d2cc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9385100c-8ca6-4a19-a7e6-578164673fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b93fc08d-7a9b-458b-9edc-6981efd68bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e76007f-2e41-432a-be04-82569341b6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e147e7eb-1458-40b2-b9a4-af87c681ff8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44ad88d-f63a-4d22-9542-790563351ca9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562a494a-671b-4a42-aaf8-09924dcd30b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f6f2d9c-ba2d-4fb7-a31a-81b508281957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98be587-5613-46bb-9cbe-2a17768107c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f8898d-bd1a-429a-9b96-0fe4d539fe46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926b81f3-a303-411c-b662-a8a09b237f1b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fe3cdf-12e5-4aa5-b27c-344e193bbc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183426f2-fc00-44c7-8418-72217af3d093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8160e21-ef1f-45e7-ab89-7fcd7071bea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e331dd-0321-4164-b1ce-3f1f344c5c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089035b5-d3cf-450e-ad0b-41b2022ba0fb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e14535-13cb-4fca-99b5-f773886cf119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9066f42d-0c6d-4336-a2ca-2cb0593c9dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4389453c-3500-45ef-9a2e-25db373c826e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c62e6351-c6f2-40f4-a951-e96801e70553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23916547-392c-43ac-8bbf-191472548ade",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2359130-4bbe-4fbe-8f6c-5f33c16c9621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83eb355-db89-425c-96e8-163190787a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e487ee0-74c5-4326-a39f-be800715b8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59117e69-6f23-4162-85ef-b02a61f6209f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5737f7-2e08-4155-9151-9b62ffc877e1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af47b997-3ccb-4014-a78d-3c33b79027e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6a0129-ba27-4741-a4e5-0af454e41123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e79cd4-a0c7-4f11-8c15-4d5550163276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78b80170-70b9-4574-a284-fa7b517d580d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c564051-a836-4878-a94b-10648d489509",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df1b571-8bb0-43b4-b983-43f59180a912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54fd0fbc-1739-419d-aabb-e6f1d1155c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd207132-d7ea-4617-81de-04e52e95f180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a85386f7-97fa-45ba-a27e-b8d4ed26e8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdd9157-add2-4f00-89a0-24aa2761b517",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8689b4ba-3fc7-4226-805b-ae20a754be1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f64cf73-9cf8-4884-83a1-8de6d9d30665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9affef10-606f-43d5-a9ef-5cf4c77ad452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "524d6930-9fcc-42b3-b908-cd1b0bf8f919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7d9b2b-a62f-4c84-a524-de69c2638a48",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d23fdfb-1d53-4d0f-aaf7-2b62f5fc416b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3d1d57-13ea-4b9e-adb9-eb9bd395fb76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4ac72c-6705-4d9f-bdaf-5db5b2a85b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a936466-4cad-428a-b851-6d3d7e97b361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6728f6-332c-476f-8b67-5e8642bf12c8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea117abe-9c6e-4ce2-96c0-8625713b6410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204abe91-2966-4d53-bff3-c064ed7b014d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be2886f-7878-495b-925d-7a14f574b579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "418633d7-a1ca-4d4f-bdea-89c4da59cc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4ef851-1f47-4a03-bdf4-fe8fa1e5d135",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2568e799-d2bf-43a3-bd2e-be96f373cb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e258fe42-fe8c-4a73-b842-f2f19bc4bb59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfecfd1-dedb-456d-b6fa-554c5829f706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a00b57-625f-462f-a9e7-043b7e1e3405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2949da12-0888-4d54-b6cc-22f072a5bd7a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd7b964-14c9-4fdf-851b-a22150d9ce94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df668d18-ae74-406a-b323-e83a76ebb563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d3d460-cb3c-4707-afa8-3aff8e49d7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65cf6cdb-d1bc-4642-bf73-7cc43d79b496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b85f934-01f7-47f9-ad74-2986f5bcf3b5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e757da-ca5e-43e2-9753-903af0de8eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c247c06e-7f5b-4896-8dbd-903ce6fafdfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6182b77-1e1f-477c-bb62-84440042c6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1b0c2f-199e-42b1-b29f-62b99cbf8e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca370b58-d75c-41ad-9e4a-453dfba1eabf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad938d9-8d78-4997-9db1-6acce1fbbc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9513e329-1e9c-430f-8236-c33c71d10738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546d405a-f061-49ad-8ff3-bbc1adbb0f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1d8ee9-cb26-463b-abd7-bdfc715ee01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9279ab4-e0e9-454e-b448-7d97d2900bea",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4280e7eb-12cc-44e5-905a-eac1581de876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd54915a-66b0-4be8-8bda-3e8143dae4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fde4a93-c55e-48b7-9738-acc7071f0f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1d3dcf-a622-46f1-a84e-2747c05aced0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92e2bcf-42ab-463f-b93f-b8b006f68288",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e37b22-5e2b-46ef-8a27-8597b02f1a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11f05c4-5c7e-4816-bc27-4ec19dfbe02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2440258-486f-4cde-8d79-72b10751a35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f10a0b4a-c210-4de0-957b-449847119955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e931afc-8cbe-4c1e-a161-dcdbebee75a5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5498286-1499-430a-b4ee-0a86b2a95e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3569f8-726a-4f88-bbc2-6b03265c7614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd18402-8bfd-4f11-b5aa-1b6ca7a15d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9b7826-d2af-4e78-8f65-8670c3a6fac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc90d0eb-e1c0-4156-baec-d77537dfebcd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70c6b19-02a4-4056-9f8f-b6e90cab0267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c004ec-03a4-4aad-a08e-1a1866037276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e5c2dd-3055-4add-b52a-878c36dce796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccba0c4c-163b-4241-8598-75ae21b1610e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59f885f-fc97-4b7e-9bcd-46cfddb0839f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c15f32-0836-4241-bbef-a837c45cb6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e6a8f8-c188-4083-aca9-09facd5ae9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57b261f-c7c6-4b4c-91c0-14921b90c5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2d9d48-a6b6-4d13-9181-041ecea05a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c472f3-8585-4c2c-a3a1-4598ad4e5a7c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb6dc17-317b-42a5-8675-0fcfd1f1d7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcfe8540-ec46-4abf-bb24-20e808a62cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bdf615-6609-4779-a214-54e66196cfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "68015226-3093-49f3-8894-e3bc070eb1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fd1f59-8215-45e5-b3a8-d1b7f58d7d2f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817ba2b5-1e1b-4b03-a53a-75e0efa2c5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615d8b80-d1c6-40ad-8bc6-e50d2c22b17b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b2b064-0770-42db-a52f-7648c9f95eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d6efc2-fc58-4634-a75c-bd6b32d55e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274f99de-70f3-4596-b1d7-9405912f2609",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2096cf8-7645-46bc-b129-b7a6e381d1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e337868-d56f-4e07-a6f3-7267c0ca054a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82095eb-c0ea-4e75-b871-c67ea8c1ae0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d12514e0-ff53-40c7-a817-86c9a3d7e5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec76ab31-fe5e-4bca-8b8c-f0d2f97d8899",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d26556-1ee2-48ab-96eb-18353b9829cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3b45a0-61e6-4d4e-b34f-74b72bcdb79f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c7a1b4-6fd2-4381-a0d1-034525570ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1574718f-af89-4cd9-84e0-5a5608c572ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6abd47c-cb61-405a-92be-8b7c95f5a9a3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e41875-e29f-4c3f-a71e-d3e2bddbdfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0f4a3489-6a15-4612-9a7e-2f24f99d8a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85025812-40ed-4ca4-89d2-9923d6e14b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a32038-2a42-4e9f-a4c3-71c95284f2b1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9d64287-dfdd-4176-bfdf-4e10aa5f0903",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf454cc6-8686-4eac-93f5-56c95103af04",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da6824f-bc14-4c44-af15-1584d19911b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc8a742e-60f6-4615-baae-33cf1b188a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6aa263-1e3e-4c1f-bf90-b611d3357dc5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6bb38ab-657d-42b0-bd9d-8809ad4184fd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afd3ffc8-28c5-4066-a4cf-efa14d71f176",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "278aca32-327f-45af-89ed-2628d669e84e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91f72e50-e484-43b9-9025-b3893ed69f7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "facb9184-baab-43cf-a239-33824e44bf35"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "92bfeab2-2b34-4767-a819-7dea31c8e06d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d69e4f7b-8e02-443b-bc02-587df193a686"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2252a7a0-74da-45da-ba89-0429f73e1bd8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c72623b4-cf8d-493b-8730-6284c382900d"
                }
              }
            ]
          },
          {
            "id": "51d2a8b8-7a42-44fa-b603-ff82c6113140",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f6ad59c-02c9-4791-8530-9e2312664337",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "dfa75fa0-d76a-4325-bea9-23a74571ee63",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8744b9-827e-42bd-9fb0-c2f3ff166551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "47a77e13-2055-4722-bbb7-7e791579ac3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34229a4-995c-485c-907f-ab17e0106f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "307368ac-8125-4f85-9fbc-54f16927f07d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b837a73-9ad2-4b05-ac40-d1875c93b127",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0de42908-299c-4489-a664-7c6366b3e0b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cafaf3ba-57d3-4851-9fa8-817a4eae1a7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cef9d066-ddff-4402-9336-868d6dc6e63d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4f327bb2-2815-4d53-89b1-199b59a77d40"
                    }
                  }
                ]
              },
              {
                "id": "7d52dc91-335f-4c06-acd0-679a276ba804",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b88d8ad0-d26a-4b80-8fe8-f97833ae43cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06c54e9b-15bb-48fa-8595-edad4a12ad86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ed3a11a-9ce2-46a4-9ca5-d6d61c3e8d0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d4ecb1c9-056f-4040-bbc5-fb5b2386c9eb"
                    }
                  }
                ]
              },
              {
                "id": "c479a948-98fe-4808-b863-ef494fb31643",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "976aa4a7-c4ac-42f2-991f-186bb4cc327d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e182d624-f942-45f6-8aec-5a47c6f20659"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "542275b6-98dd-4119-8a87-168369ea1834",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7bd6f885-bd6e-4e59-838b-b2f072513722"
                    }
                  }
                ]
              },
              {
                "id": "f9f16c34-2f75-44c1-809e-aa66974df9e3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f16136d-f9cb-4b1e-9294-d15956bfeab2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2088e75-15ba-40ee-8278-ac88048ef7d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74a8342c-2717-4d36-896a-a6d5915d869e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2a150615-57a0-4510-a682-fbe42d6b668e"
                    }
                  }
                ]
              },
              {
                "id": "820aa9aa-d441-4347-802d-2017a0c864b3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ae2395a-1711-497a-b623-30738e2fccb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d88ab12f-51df-4dc4-bff0-d5d3faeed23d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2bc37c53-bffd-4df0-b61c-0ae563846710",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "abf79702-227f-41eb-a152-7996673ed2a2"
                    }
                  }
                ]
              },
              {
                "id": "90511dfc-2a23-427e-a67a-16ba31c373fd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33572c22-abf3-4672-9fa7-ee89470c6d71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "040e315d-5360-4f42-b32f-0983a94f4b54"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "993b7105-785c-4018-9691-2bd6daf837b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a97bb6ad-6a2b-4c91-99e2-59a209f010fe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d93a6eb8-f390-4cf4-ae4e-d8bf2d712331",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72c1adba-bf1b-4f07-bcd0-b360b9e6adf0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "83aea80c-d52f-412b-9c87-5963c2a660ad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0ce1a46a-84f2-40d8-8e33-2d9d221486e9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58b715f7-b207-4ed8-a990-5aa4867c556c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f779bf29-4aef-44eb-bd78-d7a7f5d54c95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbe77777-3a39-4fca-821e-26d143109450",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c89887c8-6c3e-47c6-8f5d-590231b3e4e5"
            }
          }
        ]
      },
      {
        "id": "e2721f81-a700-4fde-8027-6f8c2ab297f4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "99318af3-e96d-4e95-8e85-06f974b08770",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d1779e8-97c3-43dd-8ef0-1bbbe02db7fe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2b84f035-abbc-4f81-a7f6-6c9895bcd587",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4be438-77f2-4b3a-8192-8d0e9cd8f325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72926800-0ff4-42c7-9824-41bfd6beab79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32ee17a-4942-4b91-a9b5-56c712585ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a9daf1-1bb4-45c6-ae89-026ce39b1205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1c31d0-f976-4165-bed4-42c9f4a2eaba",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba880f4-ec61-4d83-9aaa-82f1478e55dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4173ad98-1905-4ccb-9cbd-805cc1fb6eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bc21b8-1a89-4d1c-8985-b9fe53e9ab90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1fedd1e-9c04-4e5a-a64d-ba488cddb50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a3a966-f532-49a1-ad5e-3096474b0594",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614283a2-188a-4ce8-a243-51985139e1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3d9467-eab3-4f56-94c7-3195820e1b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2d045d-65f1-4dd7-8afd-4388f1d916fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2ae813-3395-45e4-a7f4-e820ed7a0f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e929b2-4487-4408-bef4-04554762b0f2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3f5bf2-6581-4b33-896d-31d4516969fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bffa8522-e21e-4016-8f4c-17118d5bfce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143db536-1edc-4fa3-9af3-fc1377358ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18fa19b6-db4f-4c5f-b4fb-3581b7c7192d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10041c50-115b-402a-8e55-3616945b1793",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a90276-29f8-4281-bb09-73dfa8d433d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c1fff7-3e83-4ce1-b17b-9b4e3ad5588c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf818132-bca5-410e-b94c-d4d3567d0969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53d13fac-743d-4119-b9ad-c52d71212f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d122a43-bcfb-4054-a548-c99666eefc74",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e957ad0-37e5-4352-943f-60f13cab611f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da763c47-e13f-411b-b5df-54dd27073c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931ee3e5-1b40-43fe-9914-062c00589635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eef9c8d7-96d2-44b0-b6b1-727344faee11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b4e421-ad78-4c4f-9bf0-2b73cd9d7dff",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69519ba6-c743-49b2-a19e-7f2101b93267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bce40f5-36be-446c-8823-a846a19cdc7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483b8db7-647d-4835-8fb5-0f57acc8dba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8dc9200-f590-4417-a4d4-7fe688f3b72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2557c164-ee76-47b1-a324-071cd5f788d9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c758a6be-11e1-4519-ad30-fef0b19480ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "780acf30-8d53-44a2-b254-ccd9b768b215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d795cdb1-38f6-46ea-8eb6-bd68f4d2e54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e878df5-b42d-4a67-affc-fc42f70b8e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f89a97a-749c-4987-ab99-8f3f77ba272c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eecd494-b861-4634-a3ea-6759dabe6eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccaaf74-2f5f-414a-9b15-07251d6e8190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cd8879-8aac-4be6-b6c3-56c3b54c3457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3103e36-2e8a-447d-b9d6-3d7557441303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3de60e6-09e3-4c9a-ad3a-668ea87fbc48",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a50f9d6-3742-4d48-9aca-6a9213a253ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ee1540-f53e-406b-b91a-ba439321cfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44fcc75-2d87-4507-91cd-5549ad4249b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8de0a472-9cbb-428f-bec7-ea9dd431c621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6feb9e17-b97b-49c3-a66c-fc2979f9133c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce6ed82-55b6-4fad-9ca1-b30a8d313fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539ac721-376b-4b5a-9cc7-9a58313f19ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef20704b-7a04-4e1a-92a5-750b95880b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb99c84-3cd5-4041-a1a1-fea8dff09db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6d6431-5bb8-414c-8f42-ebaf57c85ff8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c272ee0-55b6-4042-8ff5-329ddc4ffaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0712751-36e4-47b7-9c3e-31791d152731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858bb695-1148-4fc9-bee7-cfdfeb31ae20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "29ee20c9-e6fb-46ed-8db7-46df54fbac61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b49bdeb-d759-4cb0-95b1-3f2e0d5c2bf7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5817c7f2-83aa-4c01-a20b-45a38c000d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6179eb-db57-4a2c-bb5f-ebc9a119237d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabb24ad-9c5f-4220-8e96-ddd65641fc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c86f2d-92c3-4ac5-8999-a30d4de71a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13dd972f-e541-4ca3-a622-66b78c97f256",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a86d27-b9d5-404e-aa8f-b1a2d8b6011c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf07018f-4d64-46e7-b5d0-3656b3e082f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207c41ce-bba3-4d19-9e06-50a45ccbc32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "98e39364-3726-43b0-8699-c3b9089f71c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9229482-4609-4ad3-a2a7-65eb160631d0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485d2cfa-fc9d-42f1-92f5-6ae351438a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed30a4eb-77da-4f90-a0c6-008c3cfc9dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938c0c58-c3e2-48b6-975f-e3f6cb96f459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0649648f-b13c-4487-8de8-2f1041f7440c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c8aadd-2e0b-42ac-b266-e3b28865de52",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809ca5b3-4dbb-4179-b451-d0e12b97b522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3fdf6df-1649-42af-a0fb-3299b3eaa1e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad03ab6c-0f30-44b7-ae54-ccb3cb07ddfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdcf88b8-5591-4e6d-959b-4a24f09c85d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f25154b-d376-42a7-ae0e-8d78279453af",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7fb0be0-f8dd-4225-b8cb-6f470e94438b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "765b8bde-8f13-42f0-8e04-da05c625e299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032a4eed-c131-44bb-82f1-9190d7d26db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fdec7e-ca72-4890-950d-8d979ff683ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e723b4-5a2e-44d6-a468-aa7f9669bb0c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6d8a92-d8eb-4549-bf03-88123d8bf1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6c9ff6-49d6-4575-9103-926ff7635f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c214d741-7cad-41ae-bd56-50d8442c50ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0803c08c-76ed-438d-b186-e150bf281a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acad42a-e5dd-47f6-966d-12031a60c559",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d432259-d26d-41fe-90a6-3c295dfcc1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcc69ec-a343-4485-8ca5-e51f10b4d9f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a09171-1d77-47d3-aea0-6d878130e70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc93cbcd-225d-40aa-8293-f70f0933e451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff2f26b-080f-45b3-92d2-db7be3d5af73",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796d169e-888d-4e7a-9648-0667d6584eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86e2187-0c0c-42f8-9f3d-5051685078fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970fc397-b419-4aaf-80ba-c13bdbc6ca9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1210560-448d-4e7f-a0a8-a17cb98b1a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24e0e7b-6829-4201-9312-cefb5eb3460d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5dea54f-b104-447f-8fc7-66da8d6c399f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155c8e38-ee2c-4f0e-bd38-0a3fc333e688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e58b586-1e63-41fd-8eb0-55f2ef54d8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f600824-70b9-469c-b7c9-020e98c024c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6f0ea4-9d8f-4a63-956d-efbadd0f9530",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad15032-099a-49a5-89cf-5532c5d114aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d1e09a-78dd-4a78-bf93-4d65010c5158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfb2b71-a36b-4548-bae2-67a9d0531687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf5394e-9ffa-4615-88d3-f2f6047f039c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbfe80a-3dec-4cf8-8eea-3e390cf5db9f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f13d3d-2525-40a6-bfec-c325a6c8670b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b49da52-8b4e-41c5-8ed9-7c1602465440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe461b73-0a4e-4a19-8d9d-963064b0429c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83e051fc-a567-4356-8e78-4e04128fa62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7cfaf5-5b5e-4cc9-bc0e-1b0c6fea521e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a0503b-15b9-49ae-8a1c-c47b631eda74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2484633-4053-4256-b771-7890978cd5af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa44749-babf-4b14-89eb-41a76a2b967c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5306b58-ba79-40f4-bce4-839112be88a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42c2dbc-7074-40e4-996a-bab729817b48",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd81b41-85e2-4c7c-8b33-2b66c1ccd318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6acd749a-ce6e-4f4c-b583-c1b23ab3d7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec492a8e-5e00-4197-b89b-bacd46e2ba4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f87d1eee-3544-4aaa-a219-2643ba1cc992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44d9e5e-3456-437b-9af8-072685c6b23c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d18835-b14f-47f5-8afe-737fd6f59b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8b9bb4-acb3-4d68-bef0-c4b55fa6a623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323a69fd-1216-4741-8113-97d9989f6279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6508dabd-2fc5-4f8a-b6c3-3bac2726ae85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf5d33f-37bd-4c4a-9be6-7a55de02362c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2bcb74-4f94-4e44-bc90-882b28073585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9393cca-b824-4b94-b0f4-b86a649fe00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043470bc-67ab-4c96-8317-fbc50a909b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7af0a40-1595-407b-8db8-f2835943dfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf37ee8-9cf5-4858-ac9d-84515ed9a313",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a792b2af-5c44-4c69-aff1-98644f704134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90eae049-2eef-4dd0-a425-ce7e2c5c5b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2804d4b6-03f0-44e7-9d8d-f1247e613e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5911b130-d009-419f-870c-0e67280fe40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39dd162-fc45-47f6-b127-078bcd1a134d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d70448-8a35-4a19-a9f2-e184a9983b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d128be-d8d7-415a-8119-8e725828f230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a016dd-acaa-4712-8ea7-2e443527b484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8159b6e-21f5-4685-9b01-6079642ef629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24a7245-66d2-4b9f-940d-e2c3244a4fbc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938fd611-6719-4b87-87ce-9bdc6ab89337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e43acd-814f-4361-a3e6-2086f55a8355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f1226d-0d78-425f-a0b3-5fcb2c1384aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87e74619-28ce-4a08-80e8-8ed3ba59d26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc5bccf-066f-4bc0-9cda-7d604dac2ff5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6808a523-7de1-4a2a-8324-d80cfa5b6561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb2f700-d61e-4be0-8052-22cf8066070a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3055ebb-87c6-426c-a798-435a5125dd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "753201a9-54d4-42be-977e-491b9a1133bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06d1296-f161-4b86-a88a-f7d4bdbefe59",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa176b0e-fccb-47a3-9ea9-fedee2da9498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f018ed-3b4c-4c91-a8a6-5f0e1552d287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031d10b8-9495-4d01-ab9a-5bcf929e0430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf61ac0-6354-4f09-a968-e8a7bdcac0a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "505e8833-b771-44d8-a1dd-97d9b4de889c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cdbca2f2-1bd4-4c1b-be5d-3c37ba96ed7b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d01b2ca-0db3-4af2-880e-b84dd6f0b949",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6ccba175-ff0d-4873-b2d8-70b5989748e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1699ec-e968-4d20-936e-5c78237ee14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "409a763d-f782-49d2-a3e6-2d09824967b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5e0d09e-02bd-4fe0-b59d-ab23bd415ff9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56d40dcc-3cdd-418b-b62d-5d2c4dbef6f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "50933cfb-c2db-4125-a6b7-14e4a11495e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b38cd2f-c7c8-426f-93f4-37b1a36e4ff8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c68e0b1-d77e-4869-84cf-d15c7441fec1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fbb8e823-0af0-41dd-9b65-9fc4837245a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fec6d4a6-ae9f-4da4-b921-dbbb8236888b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04ba79f1-5005-43d9-9b02-da7534d03949"
            }
          }
        ]
      },
      {
        "id": "a6910ccb-8795-4714-8d7e-db46ae079d74",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "94218da3-9b22-46f9-86ab-edcb289908e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21e44de7-5198-44cf-9107-b8eff3d35177",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9f1140b2-9401-4764-9acd-edd5e04d1c9b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0bef6e-df56-4f87-b28e-757dd648fa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d7e52c-f24d-4a24-a47c-0956707eb4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f256d600-5564-4195-881d-cdf62e40a75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2af8b8ab-ddb0-4387-b2b3-9d19f2359fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018f6ff9-e5f7-4182-a0d9-528ce14da44c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4063695e-0592-483d-a6a0-008249ff418d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84dd93a1-1334-41f0-b3b8-b2fd74fc683d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe61b21-5a84-473d-8bc5-26d3e6712e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9abed1d1-59b8-41f0-bbb4-9f2aa63d2331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef895c5-350b-4c87-b5b2-9229121d95e7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cf0a90-bb53-4b63-ad77-893826868e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192b2181-2168-4fa2-8f9e-bfe24c645aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f889ecef-4e15-4129-ad7f-167f62932121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "892eb6e9-fd09-4d38-8bf1-d0c6bd870e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6879fe97-dfa1-4cfd-9641-a8905b67eda8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79cb82d-59ac-49d0-8802-afd150374698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d852eff3-e3a8-48bc-a376-1186497d4b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3c5b98-ab62-41ea-a119-b5824a9d0c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3267ea58-589e-431b-8930-e9e41f7694cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6fc6cf-2666-49c2-b7f0-6b08ff6d5f1c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32158c7-19d0-4710-9198-f09b066e7a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd348b46-7ad0-46df-b857-a19e797d32a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6d0e08-1e05-469c-9e3c-079175b1444e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca9fc868-e199-4f3d-834e-8eafbaedbbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e40093-5bb9-444f-a5cd-62c6aa7fe830",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc07454-c759-48c4-9487-85f1e3aef952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42055e0f-731f-48fd-b651-87ca4aead022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ef6ce1-5862-4630-9be7-760471cc0f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4160b2c4-9c8c-43f8-8ff9-1f5c9c2ca803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453a6e10-d56a-469c-90d2-ae8b7cfeeb26",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2bb259-e043-490a-beb9-e5b344491ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d68330e-8e69-4a76-b095-a2099fc3a377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fda3ce-0fd0-4323-ba7d-69f4dd9577ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fe0778-2808-4d1e-af8f-d527c0fcb7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2146411-274f-47ab-9ce0-f4bdefd05760",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912cd4d4-e776-4f6e-859e-ed055b3c2641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "affb5a93-527e-4271-a58e-ff97a9124b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a943548-a3c7-473d-b5b0-08843728ed54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0099e74-dbe6-4c41-b532-b67ff08f21fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2bb25eb-21aa-433d-83b0-03a46d4006a9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ea73af-7e01-4b9b-986e-d47dfc18d7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8b2b94-292e-4117-97a6-876026d03946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8026db2a-70d5-4db4-b7e5-32291236323d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46c8f672-d43a-4fea-af4b-f632b127b1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f477c4-f82c-4bea-b903-0f0eb22c6c71",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1287a8a-e576-447b-9ac8-35651b664bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd67396-ee01-4d46-baf1-3ea80ba4ffef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3bc63c-0076-4b32-a656-ec5ce95ed937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "beb34e1d-f7ca-427d-9b8a-dac0017d7639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0541a4e-b6ff-406b-b5e0-6007a0a2d916",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd79e5e-8bfb-473f-847d-54b7d04dd15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084f5fcc-2ab9-4a54-b26d-e97152c7bae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c47c171-3dc2-4c6e-bf47-385562d5149f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0ecbc11e-f564-47c6-bc46-27a7787f3afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f909d2-f8e5-4f18-a363-f02837880568",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f0c52d-632c-41ab-a444-e0f24e93ded6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516db961-6c32-4a14-9b68-e74c76bf2798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e022007-b3dc-4fc9-b8db-1bbe1210c1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d63cf16b-1ee5-4faf-bf1b-5d4b3de383a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8334afa8-7b73-402d-9752-df589d2b5de9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a256e9-169b-4dbf-bfb8-5fb720ec589e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f90ed0-86e7-4d73-a156-b79f4517f7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac01e767-dc3a-45d7-8787-797233ec39ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e24fe6-dd80-4b98-821f-7daaa682f451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592734d5-9638-410e-9165-a5dfa1982496",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7eeb535-ff13-415a-bc4d-db45eef28d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615047a0-ab43-49c5-be02-94345700a1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df42c713-d81d-4cc2-8f9a-c11e868a33e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dddebb27-ea50-4d74-b8a5-2bb45b45fb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b29717-0d6e-4def-a1d4-572d17bf554b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb5f6c9-562b-4775-a5f8-8e66cb35bb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c8063b-5402-4ed5-ab72-9298156504ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136c73c8-25da-4013-9923-c8265c6e373d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8658de65-76ea-4464-bf53-2eb734a29637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bf6bce-2867-4b23-8f80-2f0e3894d801",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03e186f-8f0f-4fa6-916d-1ed8f10360ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86691102-5c80-4206-bf1b-44b45c24e30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855afa41-54f0-47a9-9ab9-316e8f4b519e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "deae6993-741f-4b3e-8b8d-54309733d367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74850671-615c-4710-86ce-93b42be32951",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe5b554-e797-447d-8dc2-98401e6ba579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11cf7cdb-f0e9-42f7-8be3-a3cc3755b771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca106caa-0bcb-4b88-9009-e8a1251d5568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef513fc-060d-49ec-888c-739b62a65326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e2ce4b-76de-4908-b7ad-afe1ae6c0ab6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdeae90d-4a13-4e0d-ac2b-5db70c60bc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36255732-ca29-46f1-852e-a4dc0d0cf408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8b4db6-81fb-4f15-9dda-924ffe6ada6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "67416e51-8e16-463a-91e8-2b47f732c579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04f02e8-dbbd-48d2-b70e-126c7d6c1d55",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe20c34-92bf-4197-b1c6-8c1aeb419213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33fd55ef-1d5b-46ae-83db-2eb9b2200e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876f9ed7-e512-4a37-9146-ffef2f5ffbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d65f8fa-b7cb-48ae-8f7d-221ba329b685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c37686-2c43-4a67-8afb-51ddac47fb3e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35c984a-93b5-498a-b507-672e9d8d9919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4580969f-e019-46ed-86f6-9c170b77be59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ad1255-a07b-47ac-b43c-8141b01354bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02d30359-e577-4b90-9eb5-f16d3d022453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec90112e-e8fb-4339-98b5-8e27ae25f11d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c38f7f-8273-4f8d-b575-de880ee94dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c975f686-cedf-46c2-86e8-2fc34d7f8f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff703006-1f2a-4279-bd46-b1be6900b274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59d45b89-c6a1-4f1f-8eeb-e21a32b69548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38960ede-b563-47c3-8d01-11253b669f36",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ddd763a-64a4-46f5-aaeb-bb6037358597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396ccee1-e780-48b0-82ac-8370bbdc7fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48189762-6324-480d-9bd9-8c1544392ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef0bf9a-88d3-45d4-a941-ae952ab738ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fba1f9e-d2e4-4d86-b444-255db50462cc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cb9aaa-a13f-4b04-87c7-d321447b42e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f31232d6-b9e0-4b25-8ea6-4704aaec66b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f422f6c-41f9-4469-8795-a0fe6bed42b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82884d6e-3c8d-4cc7-a84d-d70cba99a11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3c239f-1f8b-4c56-93ea-81d202deeab7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323c2645-3b68-4c1f-9261-e2d1edc63c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd3eb02a-2dfa-46c5-8d0e-f04a00af2cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3584147-4e53-4348-bb13-3b4028bf5e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39c511ab-ded5-4558-9362-5d4294405aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc7c60e-4f22-456f-b023-c98ebb8c2ab0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9651e4-1a87-43f4-99f7-11851c2378cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a1c816-d6fb-4de3-a276-4b950f76d2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c806f238-72f6-4e9e-b038-95fc02405897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "396f31c0-6f1d-4189-8405-218a31d05f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9e36f5-24ab-468f-a782-679ea043a7c4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9207a79d-e5b0-46d2-b183-d54e07214d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7917b20-3b0c-4b95-94cc-1fc9a69e12e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c945983-1bd3-468c-b286-ff8acc8605ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fd03aa-ec0d-4aa8-bad1-31b70dcf1740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fac984-d5c9-4163-a096-322e7cae556e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99d1ab0-703d-43ad-ba4b-0424d0ded9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5dc57b7-0c37-4125-911f-f2a30f3cc078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12bd5c7-21ff-4916-90f6-273f739902bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6657b8af-86c3-4810-9c58-4ec4128d5ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d079306e-0783-4b72-9d1c-7d9bfaabed51",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b11d328b-255f-45d0-bb4a-22aaaca71439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e832d48-1ed9-4707-84e4-8acc68543580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956f5f33-bd1a-4f67-a3fa-38c1a9b875fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea67f4a5-49ac-40d9-ad1c-6f5a8f8b930b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ea6035-481a-441c-98a9-ca85abf691e7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2417333-25ec-469d-a34d-29513548bce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d91c2ff-d3f9-4a05-89a0-63e47c913f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd18de76-b24b-46de-8604-ded84a360915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67197f63-bbfc-473d-95b2-bfa2fcb3bb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d3d8d0-e9e3-45be-b1f7-bc0039934728",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc3e880-9dba-4aea-84fd-91f3f8d2bbcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45622b4-4329-4952-b13d-4afd086e9e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44e6171-1c60-4733-983e-ce5fd3b875ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac664a4-1260-4da7-83e4-1128b235ecf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ce9b08-dec4-459d-aa16-ad38df6bd02f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92f2f06-a73f-4474-b95c-9c37af7bc175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a237a35-0da2-4168-a827-026d39d64ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85997662-edc5-464f-adb6-73d30d9a7fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67facb07-9969-4059-b017-08a93ed294ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43935844-1158-4aee-a34c-6cd426fa8964",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d727aae0-b73d-44c0-94f3-adc68bbe5f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20de81aa-07a1-47c0-a5ca-c92446d2e46d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f5349f-6336-441c-806d-d35dfc0bbe10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "411ae7f0-fec1-4f88-9dea-08332e767595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8076f1-5f0c-4345-b334-9411f2ce2539",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282d3534-460c-42ca-af4c-ea7c019699c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50248a77-0184-4acf-ad58-4400375d7ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb2871a-f4fe-466e-a942-7ee6d18c01bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8481028-d371-497b-b8e2-663b35e0dfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbbd483-ef8d-4931-9446-9e24955b143d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a9a5c0-6b11-4ae8-b46d-028aa7fb4688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a77aac4-017b-446b-9e48-e7d8dc965f43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fddaf15-f61e-43ca-9f27-204b7ce96f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f36c2bbc-f1c8-44b7-9990-8ed22b23063e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5622d423-8c52-4211-8114-26c893f2896a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125f7b20-31ab-4aa9-afea-26c06b95693e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7efd38-4912-49f1-889f-102801cfa8d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b59711b-7d3f-4292-824f-ae639deb00db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "063d570d-c78f-4b21-b1e8-878971202c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a04b5d3-ac1d-4244-90f1-7662861e1b19",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc79afc1-1c8b-4432-8922-1fe82d35c201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246faea2-84e1-4a01-98a9-0fefe2dfdf16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b942f81e-e929-47fb-8e50-f2e78a62599b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41b334e5-e32f-4005-b351-bc3ce6296f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6269e0-ad56-4e31-ad3a-ddfc33bd5bdb",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27db3ce-3667-427c-ac1f-d25afdbfce8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0d24af-a28b-4976-a047-72292c47f4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4c86ab-a7b7-42eb-8c1c-d4c4c6a008cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60b8ffe6-3bec-4bc8-9fa2-5f48bd6eb442"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2cdd2ae9-4c5b-499b-8cb7-e38ce35279ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce8f7894-92ff-41df-9b3a-294b47380df3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84299e98-386e-4864-877e-4bdcf5fd35b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b8b9a5-bbef-4191-99ad-1288f53a69d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3b8b78-2641-4d2d-aaf2-02664ae1aa9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "074787b8-8505-4e1a-a3d6-629d2e4c542d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59133839-6f07-4100-b6e7-95bc0458025a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f23330e-7351-414a-bf66-8022e77a1c6b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ed7ab0d-d2a1-48a2-b2a6-21a18d224bba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e6a9438-c869-4f3f-96be-edb3efbed14f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c3d5033-0b3f-4dbf-8645-c43fde07d220",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9b296861-8956-4f01-ab52-185aed1b8772"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50ba7b34-8293-42b3-8798-f8c9285b68cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6c927d5-1ac4-4065-a41f-48b71a577735"
            }
          }
        ]
      },
      {
        "id": "9683ce87-5146-46b0-a281-d339670ed4d2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "16909ede-d4e5-4d68-abe0-515b37edd1ec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "792da648-e9ce-4c4d-b59d-5f2f6c6ef6a8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d6bdec62-ed08-4e22-986e-cb51eef29d41",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3a244f-4d30-4ab6-ade7-c0395f630a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67842fbc-b641-4f70-8e42-4a35265c6c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb824906-791d-4d91-aca0-ea3de3fbd644",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a8b66a-900a-496a-bd1d-02ae64385eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f27786-9358-4eb3-b204-b2691c834ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9b565c-684d-4acb-a802-19216de37b23",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170ab90f-1d49-4d9f-a589-56a1f99e3e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22b0c15-87a8-4d21-af59-3eb8ae8d1b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eff4827-48ed-4960-a510-a1cbdb19afbd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0504b417-9217-4cce-99e9-197e76caf5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932f504e-6b63-4448-9906-8483f5fe919c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9683fb6d-0985-4f32-87f2-60cc9ce5cebf",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da645bc0-a031-45f8-9113-5594c1eb817f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1270191-053e-4763-8b2f-b5aa2e80e39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f499fb0-cdbc-4b95-83ce-69186d8eef71",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a502316-238c-4dde-a645-e0cf67cebe2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a2c61d3-4820-4e42-bedc-6a4cd16c4f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24839a3-cc79-4dd1-8487-ec0c9adc1da3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621b01de-2032-4d8a-9508-70eb31ac4291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4586c226-dd01-4faf-a96f-f2cd724b5338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f8c4eb-cd47-4326-bff1-13299e4435ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52138212-e605-4e25-9394-ec8af064e534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec364969-2c78-4c53-abc5-51bc828bf91d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d24a1e5-beba-45f4-b13f-e5d32ebfc492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68da14e9-5f5d-4f03-ab09-1eda21d73d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff43b1d7-e9d6-48d5-bb02-50963319baa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8fa007-be25-436b-ae09-a2870bd412d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5b2efe-bbef-4c17-818c-24686e51c52a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8986ba-eb10-4051-83c4-c55fa515c07a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d70ac984-7109-4f46-81fb-3522bbb6ec9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa98cf50-832e-4031-8978-6d7032504d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5229aa0-2d28-44a7-b52c-fd90d84dc9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d378b625-ee6b-4098-8b83-b5ceb3c561d1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd5865a-9e1f-453c-9a7a-7a9de80248fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88be2678-33d3-4cb0-af85-c3dc02d14c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff26e7b-d6f2-4eda-9676-d031013290cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d46bb9-7ae5-4073-9ab5-2f71df7458ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3827cd-c2aa-40b3-8932-48f049b45392",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ade272-bd1d-42b3-b232-c51219ad6c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c2272b-2b22-4b9a-bda2-300c4190ab93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2adc6c-4ff3-485c-b73c-2510763e9731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9bab81-330b-4ba6-a458-e5e4eadee00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f70402-dad1-470a-99a0-66ba17cf8342",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a169acd0-37b2-49fc-b171-1a05afd4c3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d609fdee-4eb7-49b4-8889-35cc25512634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4abd46-e24a-41ce-86a3-3b0e0c5ad6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3202d0e1-60e9-4ec0-a84e-2d57a1f22db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877999d7-909c-4d41-bd68-3b6529fb1d5b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d5d397-a34a-4d59-a09b-f0c9f42c28b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a62be17a-ca72-45bf-b635-c26f3e104fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb308fa8-1251-4cb8-9129-98e529da0f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ca463a-6ffc-4885-b915-9d268c5c9825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084eed96-592b-4bbc-ab45-1b1c3cdfb4ea",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a039476d-fdca-46e0-8545-5b729c1ba40c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02766662-d8af-4b76-a339-f5f8a4b95d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d26387f-9b08-422c-a48c-4a31e04e83ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b0938d-565a-41e0-aa65-4a319e8910e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fd6dec-7dc0-4c78-bfba-979c0bd51ac2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8df2bbf-ba10-4271-a9a5-49fc7050cdc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1eec004-9f74-46df-9cfc-13dbc8519ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d138f157-13c0-42b2-90c4-06e8322be916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d94ec87-019f-439f-87ea-12db11ff1072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de23e78-136c-479d-8af9-9a8f79b91107",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e4fadf-4e42-4651-8090-524e42446a53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b9a6ce7-0d33-4303-ab8a-c74e0b6262c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835123c2-4d98-40f2-a3e2-a87dbe20302a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3faf6a3f-343b-4151-ab61-8966cb79daac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782a0e09-caac-4385-b27a-88417482b066",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67e8385-1044-4da8-8571-26f5c7ca1aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0703de58-ee78-4996-9373-5c14b040276c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197ac038-5048-47d6-8151-0c6a25dbeedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19c4d35-bbfb-4d9c-99bc-8d996f6462d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3ca22b-75bc-4850-9a8f-8686f13f72c6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9930a2a3-f49a-4525-9daa-700cd784ff4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf0cab5-1efc-473e-afdb-5384ec865c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c7ecd2-9888-4abd-8e2e-98f32f665d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af070e1-8064-4d7f-b041-771ffaf4362b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c0c7da-4126-4a32-8e81-a2bdc7913016",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f761ba9f-366e-4632-be92-079e0248a9e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ede3fa4-db1c-4c44-bd35-7325b40d3b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3fd217a-717f-432a-96f3-f9ac5766ff06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3b60de-c035-4e1b-8288-0a410838b6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddd0d3c-7c3d-4378-9488-cdac74dc1cfa",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2175bb6b-1165-4b36-af7a-ade97f19acf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb856d5a-c2d4-41f4-9fef-ff8f0aa9717b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889e615a-f831-42da-aa78-5d23698a4e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b04131-af06-4c56-86db-37c6e5f88d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391f8cf1-6f87-4ba2-a262-e71301118815",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecb8880-6d82-48d3-aeef-fb802999e6ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f00525c-19ad-45c0-9ad4-6012b0042590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4899ce-d816-48a3-94f8-ad1f12371fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d491c43a-f807-4125-9228-5e9eff281950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6987e6ee-552c-4de3-85fe-6fae81f732be",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca3ba93-b01e-45ea-8a2c-780be0581b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de24ff2-e323-402c-95b1-600615d932e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae43817-ddd5-458b-83a0-b76a5d3dc040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04399830-61c2-4ad0-82ad-f869a52e7889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b7566e-412f-4425-ab65-66183c429d33",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e456bc03-86ad-474d-892b-69ccb2f5d42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8915a3-f27c-44d7-846a-65c03b5f00b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "784f3462-3d59-40f8-a698-d3b477ad7232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd1d198-b8d4-4587-8ab2-9ea6faa42286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2ac965-15c3-47e9-9a1a-ca46c26f03a0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57c425f-1d1c-4ba3-8ce5-35579a4f0e2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a456849-d813-46d4-9459-42f11ea3dd6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d72356-02ce-4b18-8e0c-4bf2037e45d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50944d89-db81-4fcf-a6d6-ec2f04fac20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2a3a11-133c-42e0-9ca9-326d90e408d9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7640db59-9fea-4039-94f5-2998f1033248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2db573a4-105a-4add-b768-dc20afad1bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab88792-8727-4943-b8b4-21d137b6d8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f9e469-bd3c-4dda-b824-7f01a37cee6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1203f456-0c57-4488-aceb-ecc09e18c5ce",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed441d94-e20c-44d9-8d68-9f95dc92e1a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bc0ec8c-02ce-48b6-87e5-263e47925892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a892710c-a33e-4847-b9bb-0fa684a7f8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb0e9e5-d6df-4215-b0ab-52f3eb15c2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9d4129-d34d-424d-9ec1-8a8a1e2bbb53",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf5ebba-6d0e-4e18-b538-156ca1edf2f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "000bf412-71d3-42fd-88c2-f85f3f2b3f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8508fed1-38ba-4c3f-87f6-ec13e3bc8ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9900f54e-71fb-4cf6-bbc0-93145b883cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec999ddc-25cb-4815-b891-5e566232c7e2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31074f09-029c-48eb-8920-e9c56cf58e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2add50-0c04-450f-b980-5ba00f4c915d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb02af0-1099-4116-a460-8b6879c85157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185d147f-45aa-416f-9e62-a9d40c4e23c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceedf9cd-990e-4164-8d49-f0ab7c53f9ec",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c8a6b4-e963-4574-bf5c-842554a1c000",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd8d44c-204d-4f67-ab86-32baf71e57ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e9712b-f3db-4db3-9031-0f30011abb88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "388ab6c3-3cf5-457c-a94c-f16841c93f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c527b72e-956b-4843-a4fa-938f7d2c7355",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca54b32b-49d3-4be0-b16c-4196139b4993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6570053f-8704-4b24-8982-149930ca7773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfd0ff9-e147-4a56-b36c-677459cb02d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ea03ae-2d7a-45d5-97e2-52dc34eab53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d60e95a-3f43-473b-986c-4b1185757125",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b09d7ea-4de4-425f-a9fa-aaf58d1f6962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1ce0dc8-b710-4de1-91a1-728754a97828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aad6e54-3a9b-4a41-ba28-90c3e7da66ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cae9e9-e784-4066-a274-421f3b00e76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f551cd-5959-4030-bd45-2aebd7b1490a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ea1f9d-eb07-47b2-9bf0-bbe744f79c4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e590af59-4c97-41cf-8a5c-68955aade624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6686837-6df9-4c91-b645-be86759f57c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae98b20-4c68-41bd-b725-9da30f1eaac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0de56b9-7649-417f-bc80-6727d36ca06e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02e9848-4c7a-4362-9e66-5e90c74690c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e87c3abc-25bb-4c86-8ba4-b28bb670334b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c35ef8-0f51-4351-bb39-672ccb63bb0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc91f051-2fdf-40d2-9d99-86f09c419536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648e4835-5433-4464-9961-f674246e1fd3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac590afb-03ac-47d8-a777-e5194a76283c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c120665a-6fcd-45a1-893d-b2779295cb0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea6606e-5c88-42ab-8d1a-0b03b0615d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a9b3fb-3905-4f12-8ffb-715a5a3d9907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5de8b8-3d07-40ce-bea8-6a62ad79e578",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d23a33-4f9f-4504-ac37-836a3cd0718d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f2dd9b-39f7-48b1-a0a5-0393134cbc2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed9ae79-f729-4053-8b12-a0b32fb17ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "283e9ae6-55f5-4940-bfaf-81e2c28c1f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bbcfcf-e1a0-4845-8667-27157961b650",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46eb620-ab0d-4ee3-95fd-d11d3d173d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435637b2-e540-45cc-8b02-61586906dec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2737fd1b-4a15-4cd6-b313-253efc95fe7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bcf5c37-2379-4d05-bfdc-d2cf13d6b61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463604e6-9dc0-44f0-8485-fccd9ddd69ef",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2e227c-0657-41cf-a048-413b8a49e429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d55a948-bc09-4eec-af72-a740c25adc04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03236e17-b8dc-459f-93b5-c3e39dadf912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078e4d8f-a0a7-4581-ae5b-fef2f7955e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea1adef-99e6-4425-ab6c-933932afd9f7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c2dd03-8d37-4bc2-8b17-61cfa4f753cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ba1d6f-ca24-4bb7-9a04-8b674c359ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8279a3a1-d327-47f3-9786-a42efa3cdad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "150d305f-84ef-4a8b-b42b-0ef5707c924f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b601775f-583c-49f5-8bd7-f8d77f623905",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5730e725-8ee8-4807-8109-89f0a586b2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508327af-0ce7-46c8-aa1c-0699067d166b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce40569-f829-46eb-9b7d-9abf29c57fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1736cb1-11b7-43ee-8059-47db96b7eb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09df6ab-5cab-4e14-839e-0e5015b03aeb",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7107dd-5757-4427-a2f0-7c21815b8ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd663909-e755-48b3-9662-e8e264c2ea8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f277de-cee4-4bd8-8815-ce926f9104e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25806651-84b8-487e-8b75-857573626a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1f106f-4d12-466a-8f4a-d81bf1d8d9a7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd776f4d-2f32-4fec-ae8d-bdb4a7959425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a5e659-8f8c-419c-bc4a-a8c531f3e551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1eedcdb-c6d2-43c3-9583-e36bd1838631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27001b8-63ca-495f-948c-3505bb9192be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbd5af1-6ff6-4bb4-b12a-8f20fbb470b6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9eefb6-605a-45bd-8074-8cac7bce80b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c4b09aa-4b27-40a5-8871-1bdd7e824e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa26428a-f36c-4694-bd79-eae7eb0f763a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893e9d93-1e11-4740-9f61-2008100f4341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad11d1e1-e7ec-49bd-9c6f-e74daa45f6e9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7decb091-1e9e-4112-981c-edcd8d34ce42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42fb3c58-0f99-41b8-a9f6-bb1d1eea88ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f35f55-a545-4ae9-aed7-12fd0f0500dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c39e6858-aa9f-45c1-b7ca-cecfc0081eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de5cf30-3334-49db-a27a-3d5b094520f8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d3779d-d43d-48a5-bd15-dcbe2d67c8ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135ed4b5-b44a-4239-8b4d-d1e455280b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6239628d-7886-4377-984c-76e97d021fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470f2f4e-ba7b-48c8-b624-4e6540021203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785fec42-8d88-4185-a383-6a975aa12bc4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dc33d3-2ccb-4700-a6f2-079a093a9140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7007417-4a24-428a-842f-69f143fadc1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3dfdc0-7494-48f2-9265-3354aa2dcece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc60f6c6-b692-4ec5-9fbe-9fc1b76aea58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6edfd17-45af-4628-9fc3-7ac3f039ccce",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464bd702-a71d-4346-b8ac-c8728ca6c17c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872b74ca-3f20-403d-a864-38b3423ba2fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31661cc-2c96-473b-8aef-5361c716a4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c92f0fb-5e3a-42a8-b42d-82c81b038671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5615784a-225f-4a50-ba22-ace71f578ba3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90724004-9d9c-4bd8-a5cc-9d3f33301345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb11646-d9bc-4b38-a4fd-ac3404516e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffc6dcf-53da-4eb4-8a21-b8dfb8f9b118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a591e8c9-e168-4bb6-be36-99c29b338d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea379bd-0894-4ca3-9ff2-015ab429b831",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a71d0f0-c7d1-4a3b-ad1e-51c83b81f192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26269cfc-e736-45b8-9619-26fc70f1eeff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef071fae-e464-4124-a841-a527f7d43f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f0db4d2-d416-42f0-8ef4-749a76b22e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e937e8-9a71-476c-aa64-c66f3f10f0cf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7282b71e-8553-4226-811b-1b9d7349c957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc603bb-39bd-472f-b2fc-a9aa7aff8d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b23ff44-589b-4f95-81ba-443a62511412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1d3b75-0d1b-4892-adf5-039e13bd0406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50981610-8006-4946-ab3c-a6c119a1865f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad97118a-a694-4464-acb1-060e2432912a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6da565b-24f9-433c-86d1-4a7660fcc94e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00905e1d-b729-4bbb-b7ce-e6ff219107b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c80b2d3-60cb-4773-b0f7-1b3bc078cc73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b531c8-96ec-414d-8590-58089e1addf4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc444538-9638-4b34-b54c-89f49732cfa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefb71e3-5fe0-4131-8b77-b00bf27b198f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702af5ea-83e3-4bbc-9571-99394a88ec17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894cbbf5-a40b-4566-80fd-04f0bd8dd0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca7c181-a515-44ed-9056-748df1f620fc",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2a9c5e-3263-4ced-b12d-dc80b0196551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b7315e-b0e4-40aa-8392-b85ec75b5082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19564597-0b4f-4b39-9108-2707b88dbce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a58990-8b83-4282-bb06-a3ac27d8542a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f29e7f-f12f-464d-8433-443444b2a0a3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb10bee-f03c-4863-b83e-33ac83941728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c726fa-b64a-4193-8181-edc273c1eab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7bbfe0-c70c-4551-8a98-1fe3f6f6a959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0dc6621-dbb2-45df-afed-48f3363518b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9684ae3-b6a1-437a-93e7-15d622aca15f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbc49fa-64f0-4242-8ea9-fc391eb6510f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7631fc1-7083-4740-94a3-8ffe762d3637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6b6d28-83fa-40ca-9567-b6ec30e2eca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5956430-2536-479c-9e18-870bd0e5bc9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa656c40-8d3d-40fd-af08-eedfa57408e1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b63362-6162-40d0-ab9f-1ab59ac183e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12392854-80d8-4948-8831-c001a7104848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b36c550-c292-441d-a4ef-6e79713d0262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a93d971-72ed-4bea-a7b8-d02a820d60de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36baafbd-190b-46f3-b1e7-874a29bed78f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad212eb2-7ad7-4da8-9fd5-16352fc1eb87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673b98df-2317-4d7a-9245-3837573f9c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "430b3be6-366f-4836-b6d2-0f6c84b7c0d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6ef87f-d8db-4fe0-a792-6929a3776929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ea7631-5b62-4e48-a263-69d6cfbad1a9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b8867f-f1a3-43c1-b593-1a55587a22a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e976728-d95f-4a62-9b0c-99be285f6907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f40f495-b6ea-4c52-a2eb-22ea45d54386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a72702a-42b4-4a7c-9074-4463e2570c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9381b457-6c0d-4bf7-98dd-04ac4080ad9a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01ba96b-5a9d-4298-9c25-3d5a6c750d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e92ccbab-46d1-49f9-8d7c-be4587e35e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c5b50f-6a66-41b6-8d62-27bbb7256f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13545be-98eb-4680-9084-1b92a8cbd227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97659209-5eb9-4592-9664-27f633b9971f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a2a39d-bf74-46f9-b31f-b95bfda72a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ffb31e-3277-4860-bdd0-6df0d5cb4b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f87df26-9e86-4efa-85e3-e473325918d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89609476-2263-4492-9b6c-c4340708ba0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b41d65-e456-480f-9ff7-4ef9a433335b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719acaae-45c6-4e1d-b8cf-bb1a695034d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e42ea9-05a3-42b1-a202-16c9b6a99e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ae03af-ecee-45c4-96bb-02d984ed5120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac6ba6d-b9b8-4777-b73b-a8d346dd753c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5575addf-d683-465f-93e8-be8b70d7d263",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444a3989-2204-4cb8-a603-0db1f3433170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212d8e85-3330-42f2-9fa0-675524acd8a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24493f52-8af0-4e44-be70-200e739b4ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3385b8a-1f3c-485f-9a98-f67c0262d926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f48c794-a308-4d01-ae40-8dde7d471302",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407a2d39-5ccc-4f39-884e-1ab1e2029775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2a6777-5ce9-4afc-8b7d-f44025cda721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "764e4f89-95b1-4f70-9e03-d8feced3e676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beef03a1-bdad-435c-b021-7eea8cd068db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78710b00-07bc-433c-982c-03f394d72fa6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab812ce-ef93-4d3a-9c41-e2b94e236016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b9010c-4fdd-4001-95cc-e21e4391cb5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c15b6c-e673-4e4c-adff-eacdc5bcea2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2d6157-3784-4e3a-a06d-867b1c5b2b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de24995e-d344-4810-bc94-8150ac5bbf88",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0b3f14-f492-47d2-84b4-e0260779e71d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dab765e-7e03-442b-b37a-a658a85b8661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "425a603e-a33c-45d2-960d-31caf89b0a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6500251-3d1b-4744-866a-50d4c5ef943a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b6dbe8-a9fd-442f-b727-1c51e5a7c7f8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee1aa5a-5052-4e69-91e0-6446a1a187d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5c8158f-b2c8-46ab-875b-df8861e2fa48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b11e64-a4f7-4fdb-bab0-46fb7fc33193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51548e12-d9ca-467e-92fa-69f0c27cc4d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9b441c-d76a-47a5-8ea9-9e59059df3b5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bfc4fc-0044-4a01-9f6c-d66ea7cab875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de1f9557-7f5e-407f-a5e7-8b9b90d639eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3864296b-0c00-4074-a195-00f1fe6c5206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54704d5a-cc00-484b-97db-6d1e114cba22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5b492d-5040-4e40-956a-8cd8517414f6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8899cbd5-3e0a-4bc8-8529-54d7f276e4e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6c17632-1222-4105-8f1b-a5a885f97c82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42118521-5430-4dce-9011-7a1dd807f0f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c20957a9-710d-4430-81bd-c435f195a69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27babe1e-ab3a-4ea9-8024-dc43ccba3add",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6837f029-7746-4387-ab45-2c34f613b33e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1273a3b4-c509-43a9-b83a-b6b33cd2d23c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28493e4d-d753-4983-9d47-1c4371cbf9f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a500656-58e5-4f93-8fcd-f2859fac2ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cca035e-4f09-42e6-ba70-e37a3eec6b73",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d4a528-5922-490e-af99-250da0b675b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6f8d074-f931-44dd-9d80-909d212d5781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3839a87e-6968-4b1a-9ca7-67f24bf02c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a48b8a-8a2c-43ff-8752-b461f9fd4756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c928dc9-a135-4575-a2a7-8601f0bd7ff9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33914a9-1e63-46e3-8f9d-7bd85a89bc10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b8afe0c-89c1-4fba-b0b5-31d96ddcbbba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad598721-272a-4827-a8bc-3d84a6f2caf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "036f6c48-695b-4aea-9a69-316ebe77c72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23b252e-90c3-41a1-9112-e4cc505ab669",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8774b162-f144-4ff5-8cbb-88432508c8fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64f4a45c-552b-4a5a-96eb-5b01ade39c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1790bfa-8ef1-4948-930f-85f706a43dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c034ce30-20d6-478c-926c-18c3f1dc2d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f123d2f-ddfc-4548-b0f5-a4f88e5a5b2a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4c2a5b-eafc-4688-b950-92fcb6594275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fe30c39-da24-4eef-8a3d-b328b0d806f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c511c3ce-33b9-4c4e-a121-a4c57a529d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8272baf-b94d-435d-b0ab-e120ca0106e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3382951b-675b-4ca1-92ca-c29cc1ab102d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e57942-9838-4e83-90a2-6bd65c1799b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ace0bf9-c616-497b-b4b8-67471afbd94e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a103901-6922-4781-85e4-76425bb366fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262e7845-9914-4115-8cd4-3814f1baaa9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcdc115-9023-4aaa-a721-453c55bc6e7e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808fc5d9-94c6-4dd4-a4dd-74b101c30944",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "513fdb08-1881-4b94-a033-93bdf7c646d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a7e273-4266-4fdd-9661-e26072223da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a585417c-d687-4d81-aab2-914c97e84be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0fa810f-3920-4432-a4a6-f5c8878aaa50",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a73f056-b53f-454a-830e-a0fc71216e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52c7c70c-5971-4097-b164-9a1ce5e2a357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "596889d4-ff1a-4a30-8650-8373cb9e5855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50ac6c7-1e2c-46b7-9049-80cdc95aedbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b03d40-5b56-453c-a9dd-bbabe1a672ec",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42949648-2ac1-439b-b51f-8b961c5d734b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41b39ae1-b767-4754-a966-312dc5a130f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f54a5c0-2b73-429f-899c-947145979fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b7ccca-972f-4f50-ae0a-68f6a474bf47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2b28b5-dd7f-432f-94d3-6f7e9ced01f7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73ac802-6179-44c4-9bd9-9ddf16ff11d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "774e3be2-d84c-469d-8447-236c154ffe70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eefc3d0-66ef-4c38-86ce-fc371c0929e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a32c53-4689-4ee7-b119-b0128827d0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b668a4d-6b67-4854-99ed-4ff8d8ac91a0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86812c19-562d-4aea-ac74-04305916c0ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c59a9b48-8d3c-4010-9fef-f471e591dc21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350b5e03-3236-409a-b8bf-5c4b84e7874d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ab151d-1f67-4d34-b5ac-bf020ff949c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec8ec3c-2b05-42ab-975b-84c9ce790dbc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0531ff1c-3be2-4a21-9665-cac9f035e6b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0ac3b35-0023-4619-8902-9b900fd6e4d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2ae438-25a1-48a7-b5a0-78e7117f3b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e705ed-e91d-40c3-abae-399ffd408db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c06408-ef65-4793-9f38-3023d60656cc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f32c325-1cef-4415-951c-d8b55e8490fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e0b6fc7-e1d0-4206-a3b8-770b0967b7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981ca00c-d766-48cc-a5e4-f9fbaa8a6cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602555aa-64a8-404a-bbe9-ed9c42f11fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af821cd-e58b-4b1d-9a7a-9499b93ca988",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbfbd2e-e1af-47e9-9d6b-b8d10b670c84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f3b37ae-ee52-4668-8b04-db9f70dad8d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "120b9cbf-8f16-4179-8848-ab3fc02ea860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094edc0e-5226-4e49-9ff5-aff994ab9f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c28f5b3-1e04-46d1-a07e-8db6fa2b40cf",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4242216-d758-42af-94cc-328044f32dfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "730aa7c3-f69e-446c-a1f8-a590eda44691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d683223-3980-4949-bad6-49eaa4163c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e259c133-8ec3-4a21-b5b9-dd614807da17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed9a64c-2973-4af0-b325-7cc838df2195",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152312b9-55bb-4c67-a282-a22069fcafaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e456f59-c3c3-4507-8f67-4952bba90e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1187b9b-8a4c-4494-a2fe-c944e2bb4daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0174ed2c-b932-4ab9-8d8e-e9dfb2e82265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91e42b3-a3ea-4528-bc77-f863fae8d91d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a129a1-2fa3-4dc6-8714-c9ffd6ad386f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2feb86d-1cc3-41da-907d-44b01ef3c4f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f77f3a-dfbf-4cff-b3d1-e5ef2ff0d1bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c483db2b-3324-49d0-962c-93a663b41a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335e8093-41a3-4b53-9740-04b117f21665",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7644eb-6a78-4812-a394-880d6783aa22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9572b852-fe0d-43c6-89b8-5e3753b05b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adb8504-a77c-4ae8-8cea-98f1838b65d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c18d217-960b-4960-b10d-e3b4d739e73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca99595-bc0d-4fea-84e2-4e109b60fa98",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3aa044d-c782-4f3b-8fa3-fe20e7baa047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1aa43e9-5c29-41cc-8ade-f1a3d5c4a73b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6cbcb3-2796-4ce0-8ace-88ed3cb369e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8782fa51-6418-4572-ab0d-f0a09f3fd889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e59fece-f83e-47e7-8540-502a0fc41ed0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6134751-c706-4d45-994b-f5f0fdf28a5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97330e65-7a5e-4ffe-9980-d7826867f77e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e51ddd-659a-4bf5-a6a8-c93f2117162f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1bff54-0a4a-4c01-b2ea-beb46334b1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367e4887-4c21-4122-9369-453e35586912",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9a8469-7d7d-4674-aab6-e80655789585",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71e0d30e-5985-4abc-a109-c1560e6491fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dcd5fd-2bb4-4749-81c7-02537d7f49f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d675aef-8685-445c-baa8-4cf708375264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb97bfd3-11b7-4799-8e54-ec848bd1eee8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c15c72-86fd-42c9-888a-6e4e1380e6dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f97680-0ed6-4f3a-9ad5-6f966a3b96f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24978367-2229-43c9-bb94-398692a7e542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975c9759-b2ca-4978-b020-e259f1d7293b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef48769d-9823-45ea-bdb1-dc2e9d31322c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3552f8fd-0b8d-4b24-af30-fff327881949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01d0f711-9179-4eb5-a3b4-3896b93a7c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05eeacae-b532-4a26-a779-c79c0e852919",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4763f13e-c3b4-4566-82e4-d01e22059391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5411c8bb-55c7-4325-acfd-ab842cc1f16e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725c8b5d-916a-48e3-9686-650db69ff7d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f847c0a-ff83-4941-99cb-e507b6f47db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f1e1fb-2160-40c8-a12d-04c1339d52b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd5f310-1353-4f94-9416-24eac8343635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03af600-ddf3-48d0-aac6-0b6c1eeddc87",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d489c582-a80e-4cbe-b644-773e6eda6c22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2601f0f9-df64-4c3d-bb13-c8b1c8927969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be8126f-27c3-4374-a58b-fe9779f52f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c45264-e878-4547-a68b-a0feee6cac9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939839d3-032a-447c-b4b3-6104c91ef4e3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fceb1b80-6320-4c14-a9d2-4090bc9b5440",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8340425e-6109-4600-84f4-bd8a8f00ebce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ce07fa-9036-4802-a055-6eed088d7da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186d0327-2900-436a-9825-75c18f2ba787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4251c8ab-7910-4905-bd4f-e5289256a6b8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ef3dad-78c1-41fa-8ecd-0ea2810605c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7edbb02f-87f2-49c4-afd2-95e965f7a322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f50a0b-d696-4f15-bd1b-de258bacfeca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908d5436-a5ed-4f93-a959-59334c430af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e10c75b-6ef6-4686-9e37-7e04a5b42271",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c50fc2e-d1d9-42f9-9179-2d4988821f00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7de44873-3725-4022-9cc8-41b2c3bf572c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b8c449-90f0-4d53-aabf-0b4ca702edd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc420db8-f0d1-4917-b59a-47990499e0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e8cff0-0757-4e27-9fc7-4876e93b23e1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0cfe2a-d17d-4eae-80e2-6f5edda04c65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebdebe80-241d-4b52-a5a3-37f7f1d78d47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a5cbfe-15ae-4863-be64-13ad192a952c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a4d1df-4e2d-41e7-a00a-5efe358d5a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232dfd51-ccf2-4411-918d-1ae08e66243a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f752e60-1b62-4831-a413-46d0a31574e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d9d23dd-1170-49fe-9f92-83612ff4d7b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af53f1ea-1d6c-43e3-bfbb-4a5a8a35c559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093ac7c9-f550-4c1a-bb94-0a3a52dde5c7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6e8a788-41c1-4273-a493-ce0efbe57e92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a088e9d8-52ec-409f-8d3d-3d9f5704cf7a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d81c44d-d022-475a-a42c-a3b5dfea6c71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2635fb4-671d-4598-8e0f-1b0c5b032ba2"
                    }
                  }
                ]
              },
              {
                "id": "15c8b061-754c-4662-b397-930dbe31173c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a26fe254-6f38-4879-b057-f47bc6606d7f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357aa536-e44d-442b-8004-631d62eb5669",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "391d811b-aa99-4c57-9cbb-93256ff28175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3acfe367-669b-4767-997e-b839a30c22f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7821624e-45c0-4b59-a407-904ac32189c8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0deac15c-4103-4bd2-a0b7-dcdd9448e025",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e70140af-781b-464c-b71c-bd6413898c41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14abf54e-511f-4fc3-80a3-62f362aa4430",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e89e916-f1c2-4f42-b4f7-5f846bd9560d"
                    }
                  }
                ]
              },
              {
                "id": "db701643-5f14-4875-8638-80e44e8a9ab0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cb1123a4-7cb6-4b81-ae5c-3990e2dfe32f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b2eff8-5055-4907-8324-76dab5956012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "113c384c-9d19-4dad-a7d1-2e7000fbd602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008eab37-05a5-430b-ac01-d3d808156a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da6d6702-0117-481d-9902-63b369f908fe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "335fba86-95ae-4323-b8d3-61aa20b8ee42",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8a5f26c7-d0f9-4bae-ab29-11e8eeeef375",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21baf5c6-1119-4f37-a9cc-75ecc8e7a88d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "645fa1df-b332-455b-b32d-427bc19f489b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2ce17ee-caf3-4c79-9a04-692e15a65313",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e6445cd-3d33-4657-8d85-7d408153505b"
                    }
                  }
                ]
              },
              {
                "id": "d40f9ad6-dba6-49db-a9fa-4f578f387501",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "290c3296-c70b-443b-aa0e-5a28f17eac71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "43960e2d-8841-4b00-bcde-48adfb3faf81"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d82ec658-79e1-4aa3-b811-8fe5bd7171e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ca47fcd-2c6e-4834-90b1-cea0034a0fa1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2196df9d-d459-4269-90aa-735921b51b8d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f0bf202a-25c1-426c-a226-8cb0150acb74"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d8e3160-eaf0-49b1-b398-5d741b8d5a28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8f673ef-ea48-4305-ad59-4533415def62"
            }
          }
        ]
      },
      {
        "id": "d2509a83-a4e9-4d65-bbb0-e07f757ce34f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "49ad5f24-01fb-4b2b-a2ed-3830de0b6af3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "510e09f8-d6d4-4c24-95ce-e2bde822d668",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3306628a-bc11-4527-b349-c0d1d3c27fd1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1ce2a1-7106-4dff-803b-240aa545fdca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f7923a5b-e20e-4202-b64f-3b4b40006ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab55cc2-e5fd-4379-8cf9-d4eb8918d864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29267ca9-c749-4111-9f74-613c6e623bd1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b1c2dd7-b623-4827-a07e-56b63731a4af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59933711-0648-4beb-8aad-7a324bcae93b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5209662d-be19-4cc5-a1b2-0cb7542f977a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3382745b-a29c-4246-8377-803d5bd87632"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6bf23ed-6f93-4a48-b024-3f52230e1976",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1d1061d4-e1fc-4146-810e-b7d57c063090"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20add77e-8cef-4f2b-a4b4-6b3dbd763833",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1bc73ec4-06d8-4183-a7b0-d3bec40cb3c2"
            }
          }
        ]
      },
      {
        "id": "e16bcec3-d867-48fc-b3d2-8e244705035b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b86dc45f-d07d-4bb2-b553-615069389f77",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83055167-0e71-4415-a84f-65e1345f3c1f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27d2cc1b-52b7-496a-99de-4263dd7712e4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72783b0b-e43e-49f1-8889-121b420a4026",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0448c0ef-560d-4a08-960c-615fac050f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d623b8-a4e6-4b4e-b3d6-c5f82ea90d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ba4934c-7a6d-489f-83d0-2ae2f4c85032"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ede5684-0ba8-4ca5-89f3-63355f08bc93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1f64fe8-ab29-4f07-9a72-07796b86184c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17f08087-256a-4d63-8331-c6b89cd2b5e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bf2ee09-dab0-46b7-8385-55d8fbd7e4ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb6c0dee-d32e-4eef-8de6-c2d90b17a70a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "322d9001-da4d-4adf-b5db-d160ea51324d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23bdf9f3-3d1d-4e59-a183-4d6b9630a9c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f10580d-13b9-4895-86f7-058f39edfcd0"
            }
          }
        ]
      },
      {
        "id": "08ca0507-1ca4-4efb-8831-18e73ed0dd25",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c7768010-ec63-492f-b923-d602e4c9ced5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1cef51ab-d730-48d7-9b95-093e97bb9ccc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9410a9fa-973c-4da3-92f3-7d4ea2fbd933",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90be404-d89b-4b41-847a-2b46e1ee0fa4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69d2f9e4-07ba-4921-b4fe-dab8468bf416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b69a58a-0ecb-4685-b8ac-1ded01d58823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41ae3fee-3fae-4a43-9601-e76f84725efa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d72f3c47-9b4e-4529-a2e9-8adfa515aa2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5abf8be3-36cb-46fe-a8b5-f38faf81cc41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4be56dfa-ddb0-4ce8-a114-a456d04cfadd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c451426c-6b2b-4c01-b811-c4248bf928a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af539275-eb24-439a-9431-22d788086547",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "66346cc2-227f-44fa-8e0b-e2ad6a8f971c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc9b041e-060d-4099-8406-8740c4599b96",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cfd406c-f9c0-44df-b1c8-9948415a4c19"
            }
          }
        ]
      },
      {
        "id": "ad15f563-dedc-4782-b6cb-4eeab0491e2b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d85c95d-dfc9-4eb1-953c-faf900490183",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c7598a8-e3f3-4ae4-8cda-efc54b559881",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5b73e2b1-a0eb-4b6c-92b9-da3e0e550531",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d9036f6-8ee3-44fe-94a9-e2f67c2da5a4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0138aa76-b666-4a8d-8b92-c98eee96c99a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.32631578947373,
      "responseMin": 10,
      "responseMax": 511,
      "responseSd": 62.38062712743876,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706574846022,
      "completed": 1706574872672
    },
    "executions": [
      {
        "id": "8d87ec6e-fb72-4866-96ab-8acddb6c2f45",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6c932cda-adac-4f98-be6d-2e09c3342356",
          "httpRequestId": "c0d220d4-7210-4820-b483-b685f2ca9904"
        },
        "item": {
          "id": "8d87ec6e-fb72-4866-96ab-8acddb6c2f45",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5a84f4f8-94b2-45f5-b986-70d1ef8cf936",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "b48f6290-e0b3-4543-9d4e-ba2afc02259d",
        "cursor": {
          "ref": "30cd7e75-a300-45bd-91b7-96343dc6d4f6",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3ee09b44-a7e2-4c1b-876d-aae0596353e0"
        },
        "item": {
          "id": "b48f6290-e0b3-4543-9d4e-ba2afc02259d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b5cb6151-d670-46a8-89a3-c453a9abab0d",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "bb7c00fc-06bc-4dae-8e87-2fbdf907ae5c",
        "cursor": {
          "ref": "08d262e6-7019-4370-bdc7-de0692919968",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f90f30bc-e48d-478f-bf95-6bfea290c9f2"
        },
        "item": {
          "id": "bb7c00fc-06bc-4dae-8e87-2fbdf907ae5c",
          "name": "did_json"
        },
        "response": {
          "id": "61a4e370-0ecb-4a3d-bb1a-607ca176ad4e",
          "status": "OK",
          "code": 200,
          "responseTime": 256,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c992840-51b3-4087-9eba-4cbca5e2d6c3",
        "cursor": {
          "ref": "59259283-ba99-4dd6-b9f6-3ff9624c7bd3",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f4e8e14c-2a83-44d6-994b-e80261f05b01"
        },
        "item": {
          "id": "0c992840-51b3-4087-9eba-4cbca5e2d6c3",
          "name": "did:invalid"
        },
        "response": {
          "id": "b7730c17-5ad0-45eb-9e07-320b4565ace8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c992840-51b3-4087-9eba-4cbca5e2d6c3",
        "cursor": {
          "ref": "59259283-ba99-4dd6-b9f6-3ff9624c7bd3",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f4e8e14c-2a83-44d6-994b-e80261f05b01"
        },
        "item": {
          "id": "0c992840-51b3-4087-9eba-4cbca5e2d6c3",
          "name": "did:invalid"
        },
        "response": {
          "id": "b7730c17-5ad0-45eb-9e07-320b4565ace8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1e0799-b20c-418c-87d2-9ae00bc89b64",
        "cursor": {
          "ref": "c5b249c9-b6dd-4471-99f3-5b937f7219b8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5d0e1eb5-8cd6-4c96-9002-5be6b747c482"
        },
        "item": {
          "id": "5a1e0799-b20c-418c-87d2-9ae00bc89b64",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "da019c96-5252-4503-a0ae-35fc069039d9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 113,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3701d185-8c1e-4ced-9f82-9284f526d767",
        "cursor": {
          "ref": "218ac296-3fce-4e6c-a433-10ea1f2586a7",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9510fbab-1706-4678-a8f7-39ed88d5372b"
        },
        "item": {
          "id": "3701d185-8c1e-4ced-9f82-9284f526d767",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cd9c001c-c623-4295-81b5-1fa8fe1d771a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7317c295-2f20-49ae-a947-1d991c74e18d",
        "cursor": {
          "ref": "a22624d0-6936-463c-8ebf-12877e4366a9",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "965aa5eb-4323-4c20-8f31-45da117f7dc8"
        },
        "item": {
          "id": "7317c295-2f20-49ae-a947-1d991c74e18d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d16a1d42-966a-40a0-bca4-a770fd613852",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415363ee-8b28-4475-a53c-200a1c17e7a6",
        "cursor": {
          "ref": "dc2ac487-566a-44f4-b925-9008ffdfaf1f",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5fae9f83-f2b9-4edc-a573-6a9d0a84e8ce"
        },
        "item": {
          "id": "415363ee-8b28-4475-a53c-200a1c17e7a6",
          "name": "identifiers"
        },
        "response": {
          "id": "e4859b16-870c-47af-a5cc-f66174a14bf8",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e4fe5d-17d0-466c-b8c9-c3b20966d49c",
        "cursor": {
          "ref": "2aa275ba-5fb4-4655-8260-e33079deb201",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "07f61acb-4378-4219-ae64-1f2ba1c89468"
        },
        "item": {
          "id": "f9e4fe5d-17d0-466c-b8c9-c3b20966d49c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3af80467-e5a4-46e3-9d61-dd9462f4b522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06aeff4a-711a-460f-9892-a33d5482d49f",
        "cursor": {
          "ref": "ad2aa7da-7b7c-4f5f-93e8-0a2db92b1853",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d52937cb-30ee-47ff-acdd-c94335114ffe"
        },
        "item": {
          "id": "06aeff4a-711a-460f-9892-a33d5482d49f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ac54e010-c090-4fc1-b1da-aa4043d8a810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6490de76-6920-47bd-b99c-060e672458d5",
        "cursor": {
          "ref": "12344b78-95d4-4ac5-9267-9fbd41ee63c4",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fa545b63-207d-4b56-8631-bd14f7400c34"
        },
        "item": {
          "id": "6490de76-6920-47bd-b99c-060e672458d5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9040cc47-ceef-423c-8732-1387b28f51f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0e4a1e-a212-4461-b9d5-0eea4ac70ecc",
        "cursor": {
          "ref": "3a873a9b-29d2-42f3-a18b-ade864d7c6ac",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c336eff5-e110-48ce-9c8b-d5f6d0707435"
        },
        "item": {
          "id": "4d0e4a1e-a212-4461-b9d5-0eea4ac70ecc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c08978e4-24e2-46b2-8b8e-ee66b5f70703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9b9e5c-b08e-43f8-bb78-e9c16bbd9419",
        "cursor": {
          "ref": "d38a7c6f-f3ac-48bd-9603-23c2e7bb9f4a",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "439b71c8-00cd-40f5-8e4d-ba43b5077d56"
        },
        "item": {
          "id": "5b9b9e5c-b08e-43f8-bb78-e9c16bbd9419",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "333cb589-c622-49b3-8358-046316a0865b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15bcb341-5d50-450c-876f-d66d476bbf44",
        "cursor": {
          "ref": "a48854b2-127e-4254-9688-00cb00dbd3a1",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3b828072-02c8-44e8-9789-0fa606cb7b44"
        },
        "item": {
          "id": "15bcb341-5d50-450c-876f-d66d476bbf44",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e3e4b7d5-51e6-4abc-bba7-c53191f318ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e74cbb-342b-45d9-8a5b-5d3d388337f9",
        "cursor": {
          "ref": "66fd2388-6174-4edd-a544-0e575461c395",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "69c0d051-4333-4724-88f0-12365677c4d8"
        },
        "item": {
          "id": "46e74cbb-342b-45d9-8a5b-5d3d388337f9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "893f3792-90a4-4b40-8572-e4a900c4e1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fbb346-7213-4de1-b6bd-9d75a80abc1a",
        "cursor": {
          "ref": "3c107783-277a-4ad9-863d-4f0672902dd3",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e6c700fa-5462-4d57-ad2d-9b08ce4c16c4"
        },
        "item": {
          "id": "38fbb346-7213-4de1-b6bd-9d75a80abc1a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6552a6a6-5472-47eb-a932-242f622f3e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830e4f11-76f3-4d8a-8eb8-6d5256b15a23",
        "cursor": {
          "ref": "538e79bf-926a-4ba8-8163-a07e9028018d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b3bb05bd-a6d9-4ea3-892a-ffe63ca31e1c"
        },
        "item": {
          "id": "830e4f11-76f3-4d8a-8eb8-6d5256b15a23",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f6edcab1-e00d-4dc2-9fde-040ffdb38d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61103dcc-320e-400e-8306-0111496916a5",
        "cursor": {
          "ref": "48cd6c79-6d01-4c1a-9e4e-21376cc4ec72",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a083cd66-3c59-45ed-b18c-bca3a9cfed35"
        },
        "item": {
          "id": "61103dcc-320e-400e-8306-0111496916a5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9516a62c-c8f9-433d-a085-0365e65bbb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc93e21b-bc6f-4853-bd86-9dd2201262a0",
        "cursor": {
          "ref": "afa3d271-b912-4e30-a00a-4f96226b8db7",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3ea98b9d-38f3-478f-b182-36309b201124"
        },
        "item": {
          "id": "cc93e21b-bc6f-4853-bd86-9dd2201262a0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "543c3057-927b-4816-a0a2-9e225d436a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa6af7c-c1e2-4b66-a1eb-709a0f0c3288",
        "cursor": {
          "ref": "44a20725-729d-4433-becf-fefe5a0c3e60",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f0b36bc2-652a-4477-9b37-6fea40ad4323"
        },
        "item": {
          "id": "dfa6af7c-c1e2-4b66-a1eb-709a0f0c3288",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "fa62ee42-22b6-4740-9680-f985774234ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f58855-19dc-4f4d-9ab7-e712fd972647",
        "cursor": {
          "ref": "7bf2fb3f-0f40-4781-bc9c-b9457531021e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2473e003-ee36-43e9-bacf-6dd2f180693f"
        },
        "item": {
          "id": "76f58855-19dc-4f4d-9ab7-e712fd972647",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "955820e8-bf14-442d-acfc-a5aa500148f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c3edcc-6291-463c-a149-f7a253efb64c",
        "cursor": {
          "ref": "3c67b247-97f9-4b57-af51-6faef202cb67",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b35c6d92-2fe0-4d3e-baee-e87a6870505d"
        },
        "item": {
          "id": "66c3edcc-6291-463c-a149-f7a253efb64c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "075d597b-d6e2-42a4-9169-f26a7f4a5a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "125eb272-9e36-4916-8f87-b0c35f0262e2",
        "cursor": {
          "ref": "c43a124e-4043-475c-b969-b93cb559110c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7089b009-05d3-4921-9c09-117734b61bb0"
        },
        "item": {
          "id": "125eb272-9e36-4916-8f87-b0c35f0262e2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "96514847-b265-4efa-a868-2712c040d611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a18ac4-f993-48e7-a619-220a08eca3ad",
        "cursor": {
          "ref": "35ca5121-c9bc-460c-a490-294ca26f4ebb",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ae5c45dc-e9b1-440a-b47a-037af2db071d"
        },
        "item": {
          "id": "24a18ac4-f993-48e7-a619-220a08eca3ad",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2d5b19a9-71ba-4085-b86b-7e1a83d56936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894de7bc-e3ba-4954-9659-e7d2e6d9de9e",
        "cursor": {
          "ref": "d4ea2ed3-edb6-4976-807a-c254cb3976b1",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6faf1e63-3937-45a4-9586-b8447107809a"
        },
        "item": {
          "id": "894de7bc-e3ba-4954-9659-e7d2e6d9de9e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1281180c-40b9-493f-ba01-2cc637bd3388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b50875d-c052-4da0-846a-05d52d05bdfe",
        "cursor": {
          "ref": "b60af856-cfb7-4b0c-b0cc-266e387592c8",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6e59bb7c-bff7-4743-8d9c-a53cdcf3242a"
        },
        "item": {
          "id": "4b50875d-c052-4da0-846a-05d52d05bdfe",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "91efc647-c6a0-42d6-9245-6c3fbe0a2119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6128d07b-d3c8-4735-9bc3-c84bb1f6cae4",
        "cursor": {
          "ref": "5a3481cd-db86-4fc1-a72e-c9d271cd6c3a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cae0ce1e-6ff0-4254-8abb-372f8f35ad81"
        },
        "item": {
          "id": "6128d07b-d3c8-4735-9bc3-c84bb1f6cae4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5491dab4-0981-487d-8d30-a4cc8664a456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad84063-18a7-427b-ab11-d59a43b34c5e",
        "cursor": {
          "ref": "ea27df3d-b041-4e6d-94b6-d959dc94c631",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2cb545b1-a930-4f88-9b64-75d3b877a264"
        },
        "item": {
          "id": "fad84063-18a7-427b-ab11-d59a43b34c5e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "39f8269a-d476-40dc-ac7d-9c34babc24a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7ad615-599c-4164-948f-7b3a028bd5dd",
        "cursor": {
          "ref": "d8ead7f4-08bb-4d19-ad0a-98adf39bba4f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "42b4c6a7-f20d-4a98-b241-9146967ed72d"
        },
        "item": {
          "id": "6a7ad615-599c-4164-948f-7b3a028bd5dd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6aa00abb-c3b3-4d3a-9b7a-f87ee6b327b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c043c5b-437c-4770-a8e6-bf35c28fef35",
        "cursor": {
          "ref": "4105f2fc-e469-4b83-b7ec-57dc1386664f",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5382092f-ba35-413d-9f9f-24385e10059e"
        },
        "item": {
          "id": "5c043c5b-437c-4770-a8e6-bf35c28fef35",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d857b075-141c-42ef-b4d4-c0e997641a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f68c82-bc39-4349-8978-56b07132b669",
        "cursor": {
          "ref": "8ac6a37d-04f7-4f37-ad9c-ab1859389d47",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "027e2bcd-82ee-4501-ab7f-dfa3a27c54cd"
        },
        "item": {
          "id": "82f68c82-bc39-4349-8978-56b07132b669",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7cd9099e-b3a6-46e9-9249-0da668b5dcf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3cbda4-cb32-4718-9e11-6fbfcfeb8d4a",
        "cursor": {
          "ref": "b32ba0f6-9584-4b45-ac34-f995e8ded5a3",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f99d9289-7e4f-4f34-99da-121ca6a0c2c0"
        },
        "item": {
          "id": "4d3cbda4-cb32-4718-9e11-6fbfcfeb8d4a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7868f9cd-b2af-4f7e-89e7-67e613405b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0488ba-09b5-4c36-96a1-c0a1a02068d3",
        "cursor": {
          "ref": "c661b717-cfec-4be1-b3bf-4b730f33f31d",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0cc9ddae-cd9b-4bf7-b4a6-610d78f98909"
        },
        "item": {
          "id": "ff0488ba-09b5-4c36-96a1-c0a1a02068d3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "46be492a-4968-4b57-b8f8-19a7550098fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c2517d-c067-4460-9dea-1f5e8a2aac5c",
        "cursor": {
          "ref": "bdbcf6c4-f235-40a1-9322-a416d9156c9e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe83fdfa-d33b-4cb4-8579-d7a977326770"
        },
        "item": {
          "id": "b5c2517d-c067-4460-9dea-1f5e8a2aac5c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "574c7cdd-b448-4106-b235-29b19352e425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0212adc-10a0-402e-a1cf-38436ed04862",
        "cursor": {
          "ref": "9cf3a58b-4032-40be-bc70-f0896f760651",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0f53d0be-1fd0-4d11-89a9-c7053b26f1f3"
        },
        "item": {
          "id": "f0212adc-10a0-402e-a1cf-38436ed04862",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "dac96640-9e06-477d-b586-45b93f549166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32143422-df26-4b16-89e8-66c2c6300c92",
        "cursor": {
          "ref": "91fe9081-065c-491e-8b05-39d0235072ac",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "78d75188-bfef-4e09-9ac0-29139b15944e"
        },
        "item": {
          "id": "32143422-df26-4b16-89e8-66c2c6300c92",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "101effc1-ccd5-4ec4-b666-d59f97e58003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5a4f42-816c-40fb-bdbd-f0d8ca04d277",
        "cursor": {
          "ref": "d70a914a-a25b-48db-a4b7-8345650f4892",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c8cfc350-eee8-40ac-853b-ab7cd87b7f20"
        },
        "item": {
          "id": "ab5a4f42-816c-40fb-bdbd-f0d8ca04d277",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e4543dcb-90c3-48c6-8886-810bb735085f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e40dae-d7a7-4b96-8fe7-c895f294af90",
        "cursor": {
          "ref": "16d464d8-e54d-48d9-85fa-e0aa6e1823b3",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "80499105-299f-4004-95e8-7d166bb77c8e"
        },
        "item": {
          "id": "87e40dae-d7a7-4b96-8fe7-c895f294af90",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "37cc8a8b-c404-402d-8c36-939a60c3eadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d0a183-231c-423e-8da5-850c3a2014d1",
        "cursor": {
          "ref": "eaf37c64-4458-4d5f-bbf8-ed8927a9ccda",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b15e8290-1721-4f3b-9cab-c0c62d16e24e"
        },
        "item": {
          "id": "75d0a183-231c-423e-8da5-850c3a2014d1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7438e9f2-c693-4ffe-abda-ad6ab66c9752",
          "status": "Created",
          "code": 201,
          "responseTime": 511,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b0837e95-cb3b-4470-864e-3757baa7d136",
        "cursor": {
          "ref": "38c111d1-1e90-4b35-bb0f-9e76f3bd985b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ae997c38-2ec4-44ab-8cac-cadb2d5dc9d4"
        },
        "item": {
          "id": "b0837e95-cb3b-4470-864e-3757baa7d136",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7b0bb32a-c38e-4b42-b092-299f840047cf",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b11fc348-a1fa-499d-9cae-a93e56cd4e0d",
        "cursor": {
          "ref": "751dcfd1-b9b8-4369-91f1-67741eb5b8a0",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e42f56d7-df81-4cb5-abf2-b9e3f7d1e5ee"
        },
        "item": {
          "id": "b11fc348-a1fa-499d-9cae-a93e56cd4e0d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "63f66496-cb91-403b-9872-53902cd18c4c",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "469d3051-4848-414d-93f9-ca98bc7a30f8",
        "cursor": {
          "ref": "f6f7d4f6-88d0-4632-bc93-355ca2de036a",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1aa3a6d5-8f92-4566-a4a0-8009ef744572"
        },
        "item": {
          "id": "469d3051-4848-414d-93f9-ca98bc7a30f8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "22d250c3-6ed2-45d8-baf9-f57bfab72d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff60f879-2f0e-4a49-8df4-444b712ae06e",
        "cursor": {
          "ref": "5bac449e-2a9a-4c05-af22-a316abc4843b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0b57fc4b-b5db-4c00-a982-6b7e72743525"
        },
        "item": {
          "id": "ff60f879-2f0e-4a49-8df4-444b712ae06e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "68eda720-f74d-43f9-834a-25a4ab9b3918",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c4675d6e-06d9-4be6-afc0-c1a72a0119ea",
        "cursor": {
          "ref": "904e40dc-5940-4653-b433-016d437b70a5",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d98f5818-9e93-46cb-831d-2d0de3bb69d4"
        },
        "item": {
          "id": "c4675d6e-06d9-4be6-afc0-c1a72a0119ea",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d33e7949-add4-4d9b-9781-592bf8ce81dd",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "72abd135-e868-4eec-ba32-6c40347c6831",
        "cursor": {
          "ref": "ad16d437-ac86-485b-9939-8b1c63dee842",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "dae0f621-db9c-469b-8480-be466c20b7d5"
        },
        "item": {
          "id": "72abd135-e868-4eec-ba32-6c40347c6831",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "218b126f-86ae-4c33-ac04-542f0bd1934e",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b45538f3-1da2-4a35-b2d2-820a530ccf87",
        "cursor": {
          "ref": "7fc8068e-efe0-4077-bf6e-8abe81adc2e4",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e9550987-4fc3-49c9-9c99-42b244fe38d8"
        },
        "item": {
          "id": "b45538f3-1da2-4a35-b2d2-820a530ccf87",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1f559eaa-99d7-4da5-83d9-08b8cc91d01a",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0f1bba86-312e-4f96-a154-99daae8d6210",
        "cursor": {
          "ref": "daea0169-ec86-4b9d-8535-ed8fadd29ee0",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0a6feb3e-bd86-4b99-9a81-c9e48802d7a6"
        },
        "item": {
          "id": "0f1bba86-312e-4f96-a154-99daae8d6210",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1b14c281-d6d2-49e7-a3bf-397bf27d4de2",
          "status": "Created",
          "code": 201,
          "responseTime": 217,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b1a6e5a0-8154-47b4-aa6e-826773d5aaf8",
        "cursor": {
          "ref": "3aed2e1a-ecd9-44e6-951e-98dd7a3afaf9",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2719dd0a-72fa-4857-ae35-d4931885f25a"
        },
        "item": {
          "id": "b1a6e5a0-8154-47b4-aa6e-826773d5aaf8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "31ae6eec-fd54-4523-84e4-9d016872c6cd",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8af988a9-297e-4614-bb86-af5ba2a040c5",
        "cursor": {
          "ref": "830d301f-a7e1-4d43-9947-3763a9ea165f",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "eb032452-fd68-4274-b778-6203cc86bb3e"
        },
        "item": {
          "id": "8af988a9-297e-4614-bb86-af5ba2a040c5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9df31322-8c53-4107-bf25-a00d55bb45e4",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7c330ba9-1891-4b26-b2f9-dc6bf28c4c00",
        "cursor": {
          "ref": "cd7db5e8-0835-4497-833e-435d073b1f72",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6a0c8528-bc72-48e7-b46b-8f595f61914d"
        },
        "item": {
          "id": "7c330ba9-1891-4b26-b2f9-dc6bf28c4c00",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f7e9fb94-d174-4188-8a01-0a6a831abb20",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "889d4da3-257a-4c19-a233-4df84fed9db0",
        "cursor": {
          "ref": "996504d7-181e-4ff3-8002-a8b47eeef79a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "21412ed6-8c7a-4c1f-9d73-4abbcb88aef4"
        },
        "item": {
          "id": "889d4da3-257a-4c19-a233-4df84fed9db0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0423cf48-340f-45e7-b106-0d6bd0038d24",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "99da741c-b4c0-4266-b051-0f452b266552",
        "cursor": {
          "ref": "a465713a-5a2f-4b9f-8b64-bfd83f238cae",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ebefcc3d-2ac7-43de-9588-f2d9ba15b1db"
        },
        "item": {
          "id": "99da741c-b4c0-4266-b051-0f452b266552",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "54ba9ad3-666f-44ca-b9bb-0cf54a6114d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c220eca-01f0-481c-85cb-a6f7adbd41cd",
        "cursor": {
          "ref": "2456bf29-4897-43f2-9d18-44409c640123",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5c37c8ff-638e-4cd9-beab-cae6cb13a0c5"
        },
        "item": {
          "id": "0c220eca-01f0-481c-85cb-a6f7adbd41cd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4a6b1722-2f40-4e6c-ab1f-698357b1bae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a1231b-f9c4-41fc-8ac2-aeb151a0a46c",
        "cursor": {
          "ref": "012a2b97-7114-4462-bf07-0a44fed7175b",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "27f11f67-3060-4d4d-ba4b-eebc909acd8b"
        },
        "item": {
          "id": "34a1231b-f9c4-41fc-8ac2-aeb151a0a46c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "48f5cd26-7712-4552-8aad-681601631341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc24a5e5-1cc3-429c-8a05-843dbba48ca5",
        "cursor": {
          "ref": "03bb531d-fd37-4bc6-97b5-e5624499ed4e",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "81435013-06d4-4422-ad1a-597f8042854d"
        },
        "item": {
          "id": "fc24a5e5-1cc3-429c-8a05-843dbba48ca5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "22cc1afc-6e51-4d22-a354-a1daa87236e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce8e02b-a069-45a8-b879-b30ce91e7981",
        "cursor": {
          "ref": "21cd2a30-4e4e-443d-b6d5-70832488be1d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f34b99cb-51c1-47de-9b3e-0fcd3d604feb"
        },
        "item": {
          "id": "8ce8e02b-a069-45a8-b879-b30ce91e7981",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8c21052d-dbaf-4531-b1cc-3775517f22d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd14ce8-8248-44fe-b573-26387aae9925",
        "cursor": {
          "ref": "2b361556-6229-44a7-a630-f2db11a93e44",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9f568c2d-9313-4b0c-9476-b92558426fc3"
        },
        "item": {
          "id": "fcd14ce8-8248-44fe-b573-26387aae9925",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c54427c8-936a-4662-8ff3-03074d7db52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d165f96-4c7e-411c-8c41-d1dd98f1e7ed",
        "cursor": {
          "ref": "812214a6-efd6-43a1-8f43-4c2bcb4463d1",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "881af532-670a-4eee-bfb5-c3c243a672ef"
        },
        "item": {
          "id": "9d165f96-4c7e-411c-8c41-d1dd98f1e7ed",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9c658fd9-755a-478e-be12-2bb1864fbf58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d73b68-2e9f-4331-908d-6dc204922e85",
        "cursor": {
          "ref": "ef02cdf0-bd29-40f2-a65f-4716405bb2bc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2eb766da-8d29-434e-8916-7f0738953ab2"
        },
        "item": {
          "id": "38d73b68-2e9f-4331-908d-6dc204922e85",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "27c8dd6a-2cf6-4968-9a17-eebc568201c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d567cb-33d3-4467-ab5d-eb62d5a98ffc",
        "cursor": {
          "ref": "8bd63b0c-3099-4de8-9624-14b281fd175b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f3c20779-46a7-4952-bd39-39618450bd58"
        },
        "item": {
          "id": "90d567cb-33d3-4467-ab5d-eb62d5a98ffc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7b5148af-3909-4004-91ce-03caa1806f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ff78d3-4f8c-4c4a-b911-6b40671ab4a5",
        "cursor": {
          "ref": "8d799306-0393-4b3f-9d69-e7a4aff205d2",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8b633bc8-37ab-4457-afc0-affbc1e4d3c0"
        },
        "item": {
          "id": "15ff78d3-4f8c-4c4a-b911-6b40671ab4a5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b9daef2a-5753-4ee0-b50a-03bc48290b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eca99cb-ba26-4e8e-94ca-68a6b243cb38",
        "cursor": {
          "ref": "10dd3c6b-5f76-4f14-9865-8704fb8396b9",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e42ee810-092d-49cc-89c9-98a177121725"
        },
        "item": {
          "id": "5eca99cb-ba26-4e8e-94ca-68a6b243cb38",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d19a6105-4c4b-458f-bb90-636c92f42858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b7c34b-548e-43d6-8300-fab90c28e344",
        "cursor": {
          "ref": "d19f9569-af5b-446a-b2ca-42d3d06fb98a",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a0a82e67-d830-49bf-ac5d-dc0e6e9b264c"
        },
        "item": {
          "id": "65b7c34b-548e-43d6-8300-fab90c28e344",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ff4d9f6d-3da4-412b-9cdd-c778b89c9b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfe2149-a7a1-4427-a6de-35f4eec03661",
        "cursor": {
          "ref": "665eef82-535e-4edc-9295-3e0adc308781",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3d14e05f-d05a-4f75-b684-9bae67965220"
        },
        "item": {
          "id": "6cfe2149-a7a1-4427-a6de-35f4eec03661",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f4f33f47-515a-4e10-b437-8ebba72b8a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a30beb9-467c-4f32-9c00-745066fbe545",
        "cursor": {
          "ref": "fa4b9be1-a394-42ca-bd3f-10b31d1b844f",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "73674418-0a05-4fd7-9738-ede0158eb955"
        },
        "item": {
          "id": "2a30beb9-467c-4f32-9c00-745066fbe545",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d62b4329-c9e2-4d8f-a8d4-708f895bb134",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "58f997cb-e83e-4306-8461-1f42308a7152",
        "cursor": {
          "ref": "d997446d-1472-4b57-a5d9-45de0b6092bd",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3ee78faa-a1e2-49d4-a119-16c2f149f2ab"
        },
        "item": {
          "id": "58f997cb-e83e-4306-8461-1f42308a7152",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "090fc759-5b91-4c39-861b-914ef6f3fed0",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d2468941-5e59-4f87-93d4-cde744b54390",
        "cursor": {
          "ref": "ba88dd5e-6d8a-4a8f-bfbb-0af4d183719d",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "33a8d45a-d455-4178-b012-590cfc58b192"
        },
        "item": {
          "id": "d2468941-5e59-4f87-93d4-cde744b54390",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3b372cd0-dfc3-4829-8f5d-2373dac8727d",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1a4d655b-5dba-4e70-b09b-a575cb91016f",
        "cursor": {
          "ref": "632bf14a-9636-4c02-b76d-b0b3ad8565d0",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cb65404c-1a63-4f9a-b71c-8c04d2831ee6"
        },
        "item": {
          "id": "1a4d655b-5dba-4e70-b09b-a575cb91016f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4b15ff19-543e-43de-8a7a-9fac4bce8f9b",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2002ab24-e347-429b-b7fe-4e984e23b5fd",
        "cursor": {
          "ref": "0c3e2e7c-dd81-49cc-a376-7d5809b8d046",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "da089f2c-a858-4a55-844a-de23673089e0"
        },
        "item": {
          "id": "2002ab24-e347-429b-b7fe-4e984e23b5fd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "594a8a3d-2e72-4c36-b7ec-12efc4e1881a",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4cc45265-6911-4fac-9de1-1bfee27e7910",
        "cursor": {
          "ref": "7c408eca-9c23-4ff7-9835-adc2a5712636",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "56196e87-4748-4e29-a64d-1c8c280255eb"
        },
        "item": {
          "id": "4cc45265-6911-4fac-9de1-1bfee27e7910",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1203e603-02aa-43f8-bcd8-2d7fbff201f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1538e1b4-18de-4ae5-9dff-2dfdba4efa0c",
        "cursor": {
          "ref": "e0356d93-a3be-4fa7-8afb-e31570647fff",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "109223c6-c49d-4464-9366-6c450c804bb6"
        },
        "item": {
          "id": "1538e1b4-18de-4ae5-9dff-2dfdba4efa0c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "21ca2ebd-9cf2-4c01-84b5-d9064464816c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb01fec0-5954-4f6e-bbbd-b6083fc8d973",
        "cursor": {
          "ref": "d23f1709-961b-458b-9663-108e06a12304",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b02e9c9b-75a5-4f00-9095-656f2e633a42"
        },
        "item": {
          "id": "eb01fec0-5954-4f6e-bbbd-b6083fc8d973",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c9f6b31f-c4f2-4998-b8b5-861ea8178b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c490148-803f-4fa7-8c8c-8fad8b68522f",
        "cursor": {
          "ref": "ee1699ad-7dc0-4ab2-b2b6-f7b29847fbc4",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "50b9c9f5-232c-4e05-a4b7-f2bd65fa5aa6"
        },
        "item": {
          "id": "8c490148-803f-4fa7-8c8c-8fad8b68522f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "767ece29-eca7-441f-8450-6ceebe03f9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8d204f-d81f-4a89-843e-fbed83f0c715",
        "cursor": {
          "ref": "939bf7e3-c3e4-48a7-80b4-955362f2ab61",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "51cac93a-2d6f-48ee-9804-8bcc28ad8226"
        },
        "item": {
          "id": "5f8d204f-d81f-4a89-843e-fbed83f0c715",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "02001725-4cac-4f2d-9790-c7866862d904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7670160-1ad2-4c94-badc-92f0a14414a5",
        "cursor": {
          "ref": "428c5187-2bff-4658-9083-3b3ce3e64664",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a0b3ebf2-fd2e-4a4f-9c78-348f074e7564"
        },
        "item": {
          "id": "e7670160-1ad2-4c94-badc-92f0a14414a5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "485daabe-2687-4bd8-86c2-d8cd341327d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bdf37d-e06e-4784-8cf3-8d8f3691401e",
        "cursor": {
          "ref": "d0cfb18a-b74a-4444-8bc1-0de7e4620555",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e86de122-77fd-4fc7-9491-ada5f37535ad"
        },
        "item": {
          "id": "10bdf37d-e06e-4784-8cf3-8d8f3691401e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6b80020f-906e-4f31-9ffd-c1046a577625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcc905a-7e61-47c1-b428-e304ab66d2cc",
        "cursor": {
          "ref": "e845466d-12ef-41d8-94e6-1a7ea7910fb4",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e3b165eb-c520-4fc0-ac05-6a43a05bbf11"
        },
        "item": {
          "id": "8bcc905a-7e61-47c1-b428-e304ab66d2cc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1de2222a-4f04-4be2-bd88-7e00b37b27c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44ad88d-f63a-4d22-9542-790563351ca9",
        "cursor": {
          "ref": "19e0c6bc-2b9f-4493-9227-6764e99f87fc",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d8dc6eac-efc2-466f-8518-c1b9ad38c466"
        },
        "item": {
          "id": "b44ad88d-f63a-4d22-9542-790563351ca9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f337a1ef-10f2-4466-b1da-98da1080d101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926b81f3-a303-411c-b662-a8a09b237f1b",
        "cursor": {
          "ref": "fa91e253-a4a3-4006-9120-3bbf8cf3d63e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3f6eb3a2-5f33-44f2-8840-f18025229e7d"
        },
        "item": {
          "id": "926b81f3-a303-411c-b662-a8a09b237f1b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d898b3cc-2da0-4f93-9baa-ce59f5b5019e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089035b5-d3cf-450e-ad0b-41b2022ba0fb",
        "cursor": {
          "ref": "c9abee6c-8aef-4625-882f-abc24ed9baf4",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "82b04e44-fb01-42a2-b9c4-f232f11f5015"
        },
        "item": {
          "id": "089035b5-d3cf-450e-ad0b-41b2022ba0fb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8ef1e222-fb5f-4c32-b346-3264a9bd4d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23916547-392c-43ac-8bbf-191472548ade",
        "cursor": {
          "ref": "1cdea4cd-0b6b-4ddc-8671-80d3353ee6ef",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c5285692-e847-4097-afd8-5a7a8e1c9144"
        },
        "item": {
          "id": "23916547-392c-43ac-8bbf-191472548ade",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b0e91269-bad7-437f-9a7f-8bba78566f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5737f7-2e08-4155-9151-9b62ffc877e1",
        "cursor": {
          "ref": "fb154ff8-333a-4856-bb07-5978323ee1de",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5d0c93b6-43ab-46b8-bb82-483c59f25bc7"
        },
        "item": {
          "id": "2c5737f7-2e08-4155-9151-9b62ffc877e1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cdfabd4b-0c82-4af3-87a1-72ca5b70b844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c564051-a836-4878-a94b-10648d489509",
        "cursor": {
          "ref": "7b86d071-6762-4667-b260-e0e585f2b799",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "55826cbc-75d2-4882-9336-b9dad9c23ece"
        },
        "item": {
          "id": "3c564051-a836-4878-a94b-10648d489509",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f200ac00-8eca-4f01-b7ee-40c26aff93f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdd9157-add2-4f00-89a0-24aa2761b517",
        "cursor": {
          "ref": "f0343d67-9ce9-4f85-87fe-86892c844c45",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "23192d56-e50f-4cd9-86ad-4b4598824abe"
        },
        "item": {
          "id": "6bdd9157-add2-4f00-89a0-24aa2761b517",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b564f586-a04b-4140-83e5-05d3f0df3506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7d9b2b-a62f-4c84-a524-de69c2638a48",
        "cursor": {
          "ref": "4e9f8868-b532-45a4-8595-f6a31514f519",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3503fa5c-3ad3-4424-b90f-0da4ec12cb78"
        },
        "item": {
          "id": "5d7d9b2b-a62f-4c84-a524-de69c2638a48",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "070685ec-bdc1-4360-8a29-342a9e936284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6728f6-332c-476f-8b67-5e8642bf12c8",
        "cursor": {
          "ref": "12fc6c53-b879-4aef-891c-6c1e9f1a25c8",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7071dff4-e4fc-4258-9f72-8535bb2acd7c"
        },
        "item": {
          "id": "dc6728f6-332c-476f-8b67-5e8642bf12c8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1e786161-8134-4209-944e-97fbc234c705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4ef851-1f47-4a03-bdf4-fe8fa1e5d135",
        "cursor": {
          "ref": "84c8d36a-f0bd-48dc-b4b9-0364eaa4f615",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6b6dbcf6-93ed-4d85-83ce-5bb65df0b2b3"
        },
        "item": {
          "id": "7e4ef851-1f47-4a03-bdf4-fe8fa1e5d135",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "48eb5ebe-a3b0-4e84-bb51-5025a5f0ba6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2949da12-0888-4d54-b6cc-22f072a5bd7a",
        "cursor": {
          "ref": "6655d2e7-b187-4f0e-b4d0-a3d7562afaa7",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f3df1e66-7248-4a60-b3db-72bab3d986fb"
        },
        "item": {
          "id": "2949da12-0888-4d54-b6cc-22f072a5bd7a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b0a22a65-a1ab-47c5-bcaa-595bec44d256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b85f934-01f7-47f9-ad74-2986f5bcf3b5",
        "cursor": {
          "ref": "f34d890c-c213-43d6-937e-f4b6f63fd55f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "21672a84-22ae-4242-b75a-6dbb8135f8fe"
        },
        "item": {
          "id": "7b85f934-01f7-47f9-ad74-2986f5bcf3b5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f4e2cc82-95b2-4b2f-8e04-151ff7659fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca370b58-d75c-41ad-9e4a-453dfba1eabf",
        "cursor": {
          "ref": "65f54520-c7cc-425f-a766-2392e5d93d94",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b1f4023c-5a89-4865-8254-c5dc7a73d9c4"
        },
        "item": {
          "id": "ca370b58-d75c-41ad-9e4a-453dfba1eabf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d62dca4a-e33c-4d51-847c-5b9a6272dad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9279ab4-e0e9-454e-b448-7d97d2900bea",
        "cursor": {
          "ref": "1686af62-f23e-4e35-9d34-ece404982617",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "050dc2a2-f174-4d4f-b1cf-86719e3b4b69"
        },
        "item": {
          "id": "a9279ab4-e0e9-454e-b448-7d97d2900bea",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "93663535-f953-4a34-9d4f-0015d5f9a4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92e2bcf-42ab-463f-b93f-b8b006f68288",
        "cursor": {
          "ref": "d8f7a37d-1f46-40fc-8355-2e7f87174e5a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "46113fda-88d4-4867-bd84-b34802d17ad8"
        },
        "item": {
          "id": "f92e2bcf-42ab-463f-b93f-b8b006f68288",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "693901f2-e615-4ed9-8d3f-52c7badab26e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e931afc-8cbe-4c1e-a161-dcdbebee75a5",
        "cursor": {
          "ref": "1c73e446-84d5-4128-9ece-24bd0fdde574",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f9a4c93c-c050-48b8-8354-dad7386a1429"
        },
        "item": {
          "id": "6e931afc-8cbe-4c1e-a161-dcdbebee75a5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "46d614f7-2a8d-4df6-8813-e338dc7d5f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc90d0eb-e1c0-4156-baec-d77537dfebcd",
        "cursor": {
          "ref": "806540ed-082c-4a3a-873f-02e8bbaa1fa4",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "60b50589-c2c4-4791-bf40-648c3f871ec3"
        },
        "item": {
          "id": "dc90d0eb-e1c0-4156-baec-d77537dfebcd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cc0c0463-0e3a-439d-8e23-9fded8fd635f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59f885f-fc97-4b7e-9bcd-46cfddb0839f",
        "cursor": {
          "ref": "debf88fd-9136-4aad-a742-95d52b926072",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7ec37152-9cf3-4f2b-ad1c-8bcd9d4e295b"
        },
        "item": {
          "id": "e59f885f-fc97-4b7e-9bcd-46cfddb0839f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1c57c984-7362-4906-b1d3-009d92e42d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c472f3-8585-4c2c-a3a1-4598ad4e5a7c",
        "cursor": {
          "ref": "0c041980-666c-48ed-8db4-e109839c9c10",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7a55ad28-d030-4b3a-883c-8166837749ac"
        },
        "item": {
          "id": "b2c472f3-8585-4c2c-a3a1-4598ad4e5a7c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cf3b7e6d-8171-4671-bd25-e1705791bce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fd1f59-8215-45e5-b3a8-d1b7f58d7d2f",
        "cursor": {
          "ref": "d6c4ce1d-f350-4698-9d6f-1b6eb60f0fda",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3b239e34-5150-4d96-8ef3-8b3234a04bfa"
        },
        "item": {
          "id": "b3fd1f59-8215-45e5-b3a8-d1b7f58d7d2f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8b4b6374-e6f0-4994-a844-c516adf0a92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274f99de-70f3-4596-b1d7-9405912f2609",
        "cursor": {
          "ref": "a650517a-8e58-4be7-a616-59697927c770",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6ea7ce14-ca93-4455-ab88-0b88bb995f51"
        },
        "item": {
          "id": "274f99de-70f3-4596-b1d7-9405912f2609",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2d12fb96-2727-4948-8b23-00f57501995e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec76ab31-fe5e-4bca-8b8c-f0d2f97d8899",
        "cursor": {
          "ref": "c159ab75-cd6e-4b48-85a5-b4a1516bb22c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "85f6c79d-8ae9-4daa-93f6-d8a77565ff06"
        },
        "item": {
          "id": "ec76ab31-fe5e-4bca-8b8c-f0d2f97d8899",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "01db5d2b-d45c-4261-b394-8816baa78281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6abd47c-cb61-405a-92be-8b7c95f5a9a3",
        "cursor": {
          "ref": "b68980e7-2ef6-4fa2-8d33-75ffa332dd3f",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "59b061dd-e7cb-47cf-b8ca-92ad6e97443a"
        },
        "item": {
          "id": "f6abd47c-cb61-405a-92be-8b7c95f5a9a3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3f57c873-8e6b-47e7-8dba-6fdd7fa37565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf454cc6-8686-4eac-93f5-56c95103af04",
        "cursor": {
          "ref": "2ef5804b-3b6c-4ce3-9bc6-37c3c04e9545",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "13c72fd1-ff60-44e5-9f21-926878e4d838"
        },
        "item": {
          "id": "bf454cc6-8686-4eac-93f5-56c95103af04",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cb93a592-ccf2-40ab-8742-c97ee6abd7ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa75fa0-d76a-4325-bea9-23a74571ee63",
        "cursor": {
          "ref": "062c8513-9ffa-4e6b-b593-4c7adc4e4355",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "01b1c866-6b12-4475-8259-76ee7da2e90f"
        },
        "item": {
          "id": "dfa75fa0-d76a-4325-bea9-23a74571ee63",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "0544ad35-0899-4247-9c5b-d917d3c5c86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9b837a73-9ad2-4b05-ac40-d1875c93b127",
        "cursor": {
          "ref": "1233e9f3-d6ff-4727-9efb-9e6647bb4ed3",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b86b4106-6aeb-41c2-875c-ead42d700ba4"
        },
        "item": {
          "id": "9b837a73-9ad2-4b05-ac40-d1875c93b127",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8452361f-6d62-44d2-8c9e-c36d91d22ae1",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d52dc91-335f-4c06-acd0-679a276ba804",
        "cursor": {
          "ref": "aaa04cdb-fa17-4183-bbd8-adb95bc426e9",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7378fa13-f310-4727-a2ec-268e13f52d14"
        },
        "item": {
          "id": "7d52dc91-335f-4c06-acd0-679a276ba804",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5c0f657a-16ac-49f1-95c5-8d087fa6be5d",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c479a948-98fe-4808-b863-ef494fb31643",
        "cursor": {
          "ref": "8e7a8a7b-fc91-4e4a-8658-5e3133f1e166",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "226830a6-9376-449b-b8b7-2d390befa5b6"
        },
        "item": {
          "id": "c479a948-98fe-4808-b863-ef494fb31643",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c0cccc76-146e-4656-a0be-c8af6d5755ee",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f16c34-2f75-44c1-809e-aa66974df9e3",
        "cursor": {
          "ref": "9da530a4-a9c5-425d-892f-1322b1865442",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "120af69e-10bc-4e70-870a-51b49b5e35cf"
        },
        "item": {
          "id": "f9f16c34-2f75-44c1-809e-aa66974df9e3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3580bba9-530e-4920-9711-0d543a052487",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "820aa9aa-d441-4347-802d-2017a0c864b3",
        "cursor": {
          "ref": "22dd6e3a-1eca-4120-9c3f-5362b1aa1fc1",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d2f4fef3-56f4-4215-8a15-d3fcaffd6186"
        },
        "item": {
          "id": "820aa9aa-d441-4347-802d-2017a0c864b3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5c16430b-717f-4be2-9fa2-e1ced029bfb4",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-30T00:34:19.263Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-30T00:34:19.263Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "90511dfc-2a23-427e-a67a-16ba31c373fd",
        "cursor": {
          "ref": "39d28cb4-0cf6-4adf-8ca3-e98f138621df",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d23f5753-65fd-456c-9231-8e35a26600df"
        },
        "item": {
          "id": "90511dfc-2a23-427e-a67a-16ba31c373fd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ee6926e2-962e-4094-afab-ec9d27dcdf90",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b84f035-abbc-4f81-a7f6-6c9895bcd587",
        "cursor": {
          "ref": "d2b3abbb-cfb2-44ff-bd4a-85572bff260d",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ad639369-6721-43e3-83a2-0ba35b764d93"
        },
        "item": {
          "id": "2b84f035-abbc-4f81-a7f6-6c9895bcd587",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "eec69027-0e74-4cf9-a935-6e542f9104f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1c31d0-f976-4165-bed4-42c9f4a2eaba",
        "cursor": {
          "ref": "315c11a2-f6f7-4393-8cd0-3cef02cef2db",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8a16a2c1-456e-4b97-96d8-fa39bdea8011"
        },
        "item": {
          "id": "ba1c31d0-f976-4165-bed4-42c9f4a2eaba",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "722240e9-8414-45af-bcb2-d246754df36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a3a966-f532-49a1-ad5e-3096474b0594",
        "cursor": {
          "ref": "925b6adc-ef8f-4c1b-8090-e59a6a44e400",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b8749d20-f50c-46f1-a607-1336df87a317"
        },
        "item": {
          "id": "f6a3a966-f532-49a1-ad5e-3096474b0594",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "29dd1ca6-7498-4364-92f4-fd5a7a1da8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e929b2-4487-4408-bef4-04554762b0f2",
        "cursor": {
          "ref": "c606bf68-0a55-4288-a2a3-abeb18eed3ab",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "31e2423e-6138-4197-ad3d-2475bd13a497"
        },
        "item": {
          "id": "32e929b2-4487-4408-bef4-04554762b0f2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2754dfce-891c-4c2b-b8e1-cabb53d2c1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10041c50-115b-402a-8e55-3616945b1793",
        "cursor": {
          "ref": "9da9b46c-cad1-4cc9-9845-da7ce0ab0bff",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0bb9aa79-0e96-4fb5-ab7e-3e6356320047"
        },
        "item": {
          "id": "10041c50-115b-402a-8e55-3616945b1793",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "21f0fb04-95b5-4c11-900f-2e5506b0345a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d122a43-bcfb-4054-a548-c99666eefc74",
        "cursor": {
          "ref": "cf9c520c-33ef-4bbd-adf2-dd88c00a1566",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6216375b-58dc-48f1-9dd3-6c08704f8ef8"
        },
        "item": {
          "id": "5d122a43-bcfb-4054-a548-c99666eefc74",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "373bbca2-761f-46bf-bec5-76474e440dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b4e421-ad78-4c4f-9bf0-2b73cd9d7dff",
        "cursor": {
          "ref": "8295972c-f634-4e8a-901a-73efe14c020a",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "de8cad84-c20a-44ef-a053-b2d036aeabbe"
        },
        "item": {
          "id": "63b4e421-ad78-4c4f-9bf0-2b73cd9d7dff",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e5f8b0c1-6e4a-4e5d-b32a-e127d8d16d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2557c164-ee76-47b1-a324-071cd5f788d9",
        "cursor": {
          "ref": "68c60ede-778f-4170-9ee4-be77a4472549",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3dbcd42c-e6e5-4642-a857-c4631f6fd956"
        },
        "item": {
          "id": "2557c164-ee76-47b1-a324-071cd5f788d9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ed150a5e-48f7-4ee6-9738-c3d9860ebd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f89a97a-749c-4987-ab99-8f3f77ba272c",
        "cursor": {
          "ref": "1bfb9d52-e81e-4c83-9987-879a33f9ad27",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e4d32c2b-3624-4a94-a66a-416f7e131ff3"
        },
        "item": {
          "id": "6f89a97a-749c-4987-ab99-8f3f77ba272c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "19bd4a76-7dcd-44fb-9c89-7338883337b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3de60e6-09e3-4c9a-ad3a-668ea87fbc48",
        "cursor": {
          "ref": "fb82988f-7de6-4396-9e7c-39bff2c91206",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a5b381b1-c6d2-476c-a974-ee039b6424d5"
        },
        "item": {
          "id": "e3de60e6-09e3-4c9a-ad3a-668ea87fbc48",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f06fd993-3b0c-46f4-9e03-0264838deed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6feb9e17-b97b-49c3-a66c-fc2979f9133c",
        "cursor": {
          "ref": "285e1331-5d63-4bf1-a7fe-cdeb08f66e00",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ddb1ea20-1a93-403e-a73b-0d8941a318d7"
        },
        "item": {
          "id": "6feb9e17-b97b-49c3-a66c-fc2979f9133c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c9107247-4767-4a72-a05e-9d003e089e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6d6431-5bb8-414c-8f42-ebaf57c85ff8",
        "cursor": {
          "ref": "e383b41d-af03-4688-ab28-df13118d6005",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3236058f-1a0b-44af-b024-dd9fe7744f57"
        },
        "item": {
          "id": "db6d6431-5bb8-414c-8f42-ebaf57c85ff8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2c57f2d7-6733-474d-8e12-f6c0354822f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b49bdeb-d759-4cb0-95b1-3f2e0d5c2bf7",
        "cursor": {
          "ref": "0fc0c18c-9c48-467a-82d8-8c0357ce16c1",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "491df653-3c30-444d-a123-f8e7a578b02f"
        },
        "item": {
          "id": "3b49bdeb-d759-4cb0-95b1-3f2e0d5c2bf7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f67ce2b2-d1de-4628-94a8-8645841478f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "13dd972f-e541-4ca3-a622-66b78c97f256",
        "cursor": {
          "ref": "432c6fa7-dc66-45f3-b2d3-b014fabed8b1",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "54b56e35-09a4-42e9-a512-1cd0446d3ce3"
        },
        "item": {
          "id": "13dd972f-e541-4ca3-a622-66b78c97f256",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7e4998cb-658b-4c5a-8775-1437561703ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a9229482-4609-4ad3-a2a7-65eb160631d0",
        "cursor": {
          "ref": "14aec53a-f406-4ad7-b180-7cc1cf9e2a78",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a34c9b98-ee58-4e40-ac0d-3f42fc378826"
        },
        "item": {
          "id": "a9229482-4609-4ad3-a2a7-65eb160631d0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6a5d49fb-319d-4ec4-8701-683569250972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c8aadd-2e0b-42ac-b266-e3b28865de52",
        "cursor": {
          "ref": "1aff1b0d-a500-40f0-bd0a-2154604ec27f",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5f7e63f7-285f-4d3d-8532-1b6bc7af3277"
        },
        "item": {
          "id": "f4c8aadd-2e0b-42ac-b266-e3b28865de52",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fd63c7c1-0d9f-41d0-aaca-c0b8dc6a631b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f25154b-d376-42a7-ae0e-8d78279453af",
        "cursor": {
          "ref": "7c5c301d-e081-4df1-be3f-6cf3b29b12d8",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d0745e45-572a-4c77-82a1-7d9fe6ec3a81"
        },
        "item": {
          "id": "4f25154b-d376-42a7-ae0e-8d78279453af",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2d0cf2ca-edaa-45e4-ba77-41ef5d55c581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e723b4-5a2e-44d6-a468-aa7f9669bb0c",
        "cursor": {
          "ref": "f177fb8b-9777-464d-927d-36b4e33b563e",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7427382e-e606-4903-9dd5-bc76d43841f8"
        },
        "item": {
          "id": "47e723b4-5a2e-44d6-a468-aa7f9669bb0c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0b4dd233-135e-4000-bf18-b79f4cab6dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acad42a-e5dd-47f6-966d-12031a60c559",
        "cursor": {
          "ref": "dfe11db9-3f27-47df-86b5-d21ac03e3665",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "21edefb5-2c90-4794-8942-114b58905ae1"
        },
        "item": {
          "id": "8acad42a-e5dd-47f6-966d-12031a60c559",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c5664b39-528b-4aef-ad87-f1320e469616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff2f26b-080f-45b3-92d2-db7be3d5af73",
        "cursor": {
          "ref": "ae465eaa-b8cd-461c-a0c5-51ebbcaa01ba",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "764da07c-10a3-4a5a-9029-3aab755adb8d"
        },
        "item": {
          "id": "eff2f26b-080f-45b3-92d2-db7be3d5af73",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3c98faf9-d9bc-4e51-9ed9-aa0cc8523daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24e0e7b-6829-4201-9312-cefb5eb3460d",
        "cursor": {
          "ref": "3884d9b2-7005-4836-8743-5deec541d222",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4dc530cf-9940-4345-91b3-50a7d0af150d"
        },
        "item": {
          "id": "b24e0e7b-6829-4201-9312-cefb5eb3460d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "38faa91e-0802-4b12-ba58-f11bf0e06161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6f0ea4-9d8f-4a63-956d-efbadd0f9530",
        "cursor": {
          "ref": "83580e8d-fe41-4f98-a8f5-29f1eb0ff317",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "749ec291-b06a-41c2-a0f9-23cad73ef0dd"
        },
        "item": {
          "id": "2b6f0ea4-9d8f-4a63-956d-efbadd0f9530",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a3a5e634-b8d7-4771-9705-34e24c47f0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbfe80a-3dec-4cf8-8eea-3e390cf5db9f",
        "cursor": {
          "ref": "47a5495e-f7c9-484b-97e9-7cbf16420c67",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "cb9d0457-897e-42b2-a758-f4e81b5a39ba"
        },
        "item": {
          "id": "1bbfe80a-3dec-4cf8-8eea-3e390cf5db9f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "690e5b14-4d8c-4b95-b07f-7ef3f7cc27cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7cfaf5-5b5e-4cc9-bc0e-1b0c6fea521e",
        "cursor": {
          "ref": "16797141-4b9e-4b96-b37f-c1496fae3ff0",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b202082e-6171-4839-a493-b1d2cd1c604a"
        },
        "item": {
          "id": "8f7cfaf5-5b5e-4cc9-bc0e-1b0c6fea521e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b0748ec3-5ccb-4d60-84a8-ea12b75ee032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42c2dbc-7074-40e4-996a-bab729817b48",
        "cursor": {
          "ref": "9356a445-449b-4705-8b5e-29a7c54729c6",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2f025dd6-73f8-4a11-abfa-c620b06d53d0"
        },
        "item": {
          "id": "e42c2dbc-7074-40e4-996a-bab729817b48",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4c9d9b09-ffd4-42c6-8a33-35429d3289de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44d9e5e-3456-437b-9af8-072685c6b23c",
        "cursor": {
          "ref": "25c0313f-4206-483c-adb0-901e34b02a98",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bf7fa25a-3fab-4d05-bb5f-e5173efed1b7"
        },
        "item": {
          "id": "a44d9e5e-3456-437b-9af8-072685c6b23c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2eb5405a-9872-4505-9a6b-7cc7ddabca0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf5d33f-37bd-4c4a-9be6-7a55de02362c",
        "cursor": {
          "ref": "6e894d0f-8a0d-4002-9446-b53ee6ebd5bb",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3179c7f9-2121-45a4-8516-6990bf076c4c"
        },
        "item": {
          "id": "3bf5d33f-37bd-4c4a-9be6-7a55de02362c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d3edbe7e-5e72-4eaf-b73a-dae5787fd45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf37ee8-9cf5-4858-ac9d-84515ed9a313",
        "cursor": {
          "ref": "415d74f7-43ff-4312-b646-88518e01e36a",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "241ec7a8-b3ca-46b2-9c29-4978f45ef16c"
        },
        "item": {
          "id": "caf37ee8-9cf5-4858-ac9d-84515ed9a313",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8f024740-9ebc-4806-b0bf-76fd93f15094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39dd162-fc45-47f6-b127-078bcd1a134d",
        "cursor": {
          "ref": "c4138f0c-0e44-433e-85f4-d671e58f807b",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d7637144-b132-4de1-8147-59128aeb8ef7"
        },
        "item": {
          "id": "c39dd162-fc45-47f6-b127-078bcd1a134d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a2153205-979a-42ca-a399-c7281cf4b114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24a7245-66d2-4b9f-940d-e2c3244a4fbc",
        "cursor": {
          "ref": "e3e671d0-e104-4a74-8e48-66a32194d18b",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1580e977-c3e7-4673-8fd0-6bf418308a2d"
        },
        "item": {
          "id": "d24a7245-66d2-4b9f-940d-e2c3244a4fbc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3b276d33-6960-4ff5-815d-67b089dea767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc5bccf-066f-4bc0-9cda-7d604dac2ff5",
        "cursor": {
          "ref": "6d7a3a63-d688-4240-b1de-2a564bc5ac2e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "aae7b19c-9a95-4936-8f29-a2ad417eab91"
        },
        "item": {
          "id": "8dc5bccf-066f-4bc0-9cda-7d604dac2ff5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d2f7e9be-481c-4bae-a049-50e89a48262d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06d1296-f161-4b86-a88a-f7d4bdbefe59",
        "cursor": {
          "ref": "87c3ca5d-42e5-4c51-8ab0-ed7c8e47743a",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "89ac19db-dc42-4a6e-aad2-95579ec5e982"
        },
        "item": {
          "id": "a06d1296-f161-4b86-a88a-f7d4bdbefe59",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e8344ade-61b0-4d7c-aa6a-92a574ffac60",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "cdbca2f2-1bd4-4c1b-be5d-3c37ba96ed7b",
        "cursor": {
          "ref": "fcd000b5-9c0b-4001-94dc-3947e8f79546",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7d54fc40-8d38-44e3-8b06-5f036f386438"
        },
        "item": {
          "id": "cdbca2f2-1bd4-4c1b-be5d-3c37ba96ed7b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "743d9988-e913-4810-9e7f-e6e492633ad3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1140b2-9401-4764-9acd-edd5e04d1c9b",
        "cursor": {
          "ref": "5cf1e8ff-7e64-42af-88f7-6f92946b5e62",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "49caa718-85de-4060-ba1b-ec02bf02e279"
        },
        "item": {
          "id": "9f1140b2-9401-4764-9acd-edd5e04d1c9b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2cf5b4f5-f2fd-45cf-86d5-bd156e3b557a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018f6ff9-e5f7-4182-a0d9-528ce14da44c",
        "cursor": {
          "ref": "283a6689-0a7d-42e2-9e07-77f64c4884be",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2bc8d589-9f49-49e8-aca9-9ca859765f4d"
        },
        "item": {
          "id": "018f6ff9-e5f7-4182-a0d9-528ce14da44c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a48db856-488b-48dc-bd09-4e523755377d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef895c5-350b-4c87-b5b2-9229121d95e7",
        "cursor": {
          "ref": "fa7db3b9-b449-4b25-8fa1-4c38e2158bc6",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2c6b0d09-bcdc-4ba6-9466-0461b70b5dc4"
        },
        "item": {
          "id": "0ef895c5-350b-4c87-b5b2-9229121d95e7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "26003309-1b65-408c-8f96-1e3b14b42858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6879fe97-dfa1-4cfd-9641-a8905b67eda8",
        "cursor": {
          "ref": "e4571c09-1fa0-4e2f-a07d-52b1fee130c5",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5298a2c8-b1e9-41c2-a4a9-046204c96bf8"
        },
        "item": {
          "id": "6879fe97-dfa1-4cfd-9641-a8905b67eda8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "16100664-4d8a-4f33-bf44-bd81542e6aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6fc6cf-2666-49c2-b7f0-6b08ff6d5f1c",
        "cursor": {
          "ref": "1fba1ec7-1d02-4e8f-a809-a0ecb07f2d8c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2e2d8021-2b5f-4f28-af49-57e0db4fa917"
        },
        "item": {
          "id": "9b6fc6cf-2666-49c2-b7f0-6b08ff6d5f1c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a62289db-7d02-491f-bb5b-ce6b12f1e0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e40093-5bb9-444f-a5cd-62c6aa7fe830",
        "cursor": {
          "ref": "1a9efc09-e4fe-4339-9b0d-684e2cf8ec71",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b9173274-758e-4bd9-a8c3-4d85e4a9d191"
        },
        "item": {
          "id": "11e40093-5bb9-444f-a5cd-62c6aa7fe830",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fb88ffd4-4faa-4f54-a093-0a2757c7d762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453a6e10-d56a-469c-90d2-ae8b7cfeeb26",
        "cursor": {
          "ref": "007ee46d-a094-436d-91dc-d47b0f0a1c58",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0d75eb8a-b3cc-4072-bdd7-183213604d42"
        },
        "item": {
          "id": "453a6e10-d56a-469c-90d2-ae8b7cfeeb26",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "74dfd7e1-5b84-413a-a4fe-196f5abc9053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2146411-274f-47ab-9ce0-f4bdefd05760",
        "cursor": {
          "ref": "0464a6aa-d583-4b8f-887d-89efabe26844",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b5624466-462f-4e5a-9304-7f41c258ac86"
        },
        "item": {
          "id": "b2146411-274f-47ab-9ce0-f4bdefd05760",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7d37f51d-2fb1-4acd-86ec-017a2d33c56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2bb25eb-21aa-433d-83b0-03a46d4006a9",
        "cursor": {
          "ref": "43b7a3e6-7b77-4bf2-afe0-c46ef52f3c07",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f8aae718-3df7-4b68-98d7-5673118e72bb"
        },
        "item": {
          "id": "f2bb25eb-21aa-433d-83b0-03a46d4006a9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ac24e170-aef7-44b7-86d0-48efb271dd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f477c4-f82c-4bea-b903-0f0eb22c6c71",
        "cursor": {
          "ref": "180954f7-9685-45e8-8e21-e515d419f92d",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4ff0862f-d5d1-4b8d-b9ed-db6df5ca8cad"
        },
        "item": {
          "id": "f2f477c4-f82c-4bea-b903-0f0eb22c6c71",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "87df6d68-d229-4245-8bd8-54d1ace48d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0541a4e-b6ff-406b-b5e0-6007a0a2d916",
        "cursor": {
          "ref": "45e94b1a-74a3-4716-854c-42ed2b126d93",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "afc31a50-62f3-4651-a3fd-5f20a4566354"
        },
        "item": {
          "id": "b0541a4e-b6ff-406b-b5e0-6007a0a2d916",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "13446caa-210b-493c-b81a-0cc87f369481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f909d2-f8e5-4f18-a363-f02837880568",
        "cursor": {
          "ref": "2d3f16e7-c95f-40ea-ad3d-3403d921a28d",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6b7d83e9-4e56-4d7b-952c-0d7b5539262d"
        },
        "item": {
          "id": "24f909d2-f8e5-4f18-a363-f02837880568",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "51f6668e-730b-4320-af9f-233eda3d7553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8334afa8-7b73-402d-9752-df589d2b5de9",
        "cursor": {
          "ref": "9b2c725d-d950-4c41-8b1e-01094c8b5a68",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fb0a2f3e-3164-4db1-97d3-9065b60a07ac"
        },
        "item": {
          "id": "8334afa8-7b73-402d-9752-df589d2b5de9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "01692f97-6f68-434c-83e3-a3c1334c28a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592734d5-9638-410e-9165-a5dfa1982496",
        "cursor": {
          "ref": "5735c969-624f-43e6-891c-053bd844eead",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5f891504-6afe-4926-bc5f-ba7a2fb37371"
        },
        "item": {
          "id": "592734d5-9638-410e-9165-a5dfa1982496",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "371884d6-ff21-452a-8e04-163e3c44765b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "d0b29717-0d6e-4def-a1d4-572d17bf554b",
        "cursor": {
          "ref": "391b2e65-a9aa-4257-989a-e4133de18c9a",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8385e0b5-7589-4f57-9562-8c4678f6b959"
        },
        "item": {
          "id": "d0b29717-0d6e-4def-a1d4-572d17bf554b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7ea570a8-cc59-4951-8c47-fcde9d94b70f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bf6bce-2867-4b23-8f80-2f0e3894d801",
        "cursor": {
          "ref": "6b8d59d7-adf0-439d-ac87-b70222687bd2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fab1d3fe-18f7-4278-9351-a4eb53cae991"
        },
        "item": {
          "id": "f6bf6bce-2867-4b23-8f80-2f0e3894d801",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "43d911d3-067c-4f14-a272-1c516baa00ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74850671-615c-4710-86ce-93b42be32951",
        "cursor": {
          "ref": "652a00b9-2cc1-42f6-a488-7526e146e338",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "626bfe74-9a59-45f5-b8b0-8807e894d459"
        },
        "item": {
          "id": "74850671-615c-4710-86ce-93b42be32951",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1cb10aa5-1b02-4363-bfae-6114b4042f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e2ce4b-76de-4908-b7ad-afe1ae6c0ab6",
        "cursor": {
          "ref": "76cec444-23a3-4ae2-ba86-f25aee231021",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "74bf0edb-d05e-4e41-a6ea-38a265592a47"
        },
        "item": {
          "id": "37e2ce4b-76de-4908-b7ad-afe1ae6c0ab6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "079a94b0-0436-4868-bf7a-0d526ff81a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04f02e8-dbbd-48d2-b70e-126c7d6c1d55",
        "cursor": {
          "ref": "c47d6c59-5793-499c-bcc0-cdb16b9337ac",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "bffe97c7-69b9-493c-96dd-0ddf02959c0e"
        },
        "item": {
          "id": "a04f02e8-dbbd-48d2-b70e-126c7d6c1d55",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "02400102-dbc0-4142-a429-7cb6c7172122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c37686-2c43-4a67-8afb-51ddac47fb3e",
        "cursor": {
          "ref": "ba65cf24-f232-457e-bb64-f70bf84808ec",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a758ad2c-9c83-484c-b163-fb6ad235368d"
        },
        "item": {
          "id": "25c37686-2c43-4a67-8afb-51ddac47fb3e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ad004a12-d623-4d79-ab34-91f0a8d4b8e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec90112e-e8fb-4339-98b5-8e27ae25f11d",
        "cursor": {
          "ref": "5cfb1af7-dba9-4fa0-9946-1692d2fdea96",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cab87df8-1413-4200-873a-ea86bcde9067"
        },
        "item": {
          "id": "ec90112e-e8fb-4339-98b5-8e27ae25f11d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c93a76cc-1373-4a87-aa5e-d90651ea2dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38960ede-b563-47c3-8d01-11253b669f36",
        "cursor": {
          "ref": "305ae872-d806-45ee-8f34-1780cef235d3",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5c7f5136-32b5-47f5-9a12-abb056c5a5e8"
        },
        "item": {
          "id": "38960ede-b563-47c3-8d01-11253b669f36",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "29db8bc4-1e7f-44c7-bf74-02fb3cefd23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fba1f9e-d2e4-4d86-b444-255db50462cc",
        "cursor": {
          "ref": "d578923a-3cd9-4582-98da-e225c7c32c66",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3c6ea4b6-715b-40b3-97ee-0c66f50ae5e7"
        },
        "item": {
          "id": "9fba1f9e-d2e4-4d86-b444-255db50462cc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e0585d7d-25f3-4e02-8a9a-a32a7849b960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3c239f-1f8b-4c56-93ea-81d202deeab7",
        "cursor": {
          "ref": "89336389-044e-41a7-87ac-1b574b12178f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7ee48464-374c-45ff-9dc1-b28a1c44b731"
        },
        "item": {
          "id": "3a3c239f-1f8b-4c56-93ea-81d202deeab7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f3d2de61-af04-486a-8b4a-f75330eaa39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc7c60e-4f22-456f-b023-c98ebb8c2ab0",
        "cursor": {
          "ref": "f6595d39-3778-4f22-aaf1-3dc0e18b50bc",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "77141a49-67b0-475d-a562-bcef5a44003f"
        },
        "item": {
          "id": "0cc7c60e-4f22-456f-b023-c98ebb8c2ab0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "948acd48-d203-4882-8b67-f778650c8913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9e36f5-24ab-468f-a782-679ea043a7c4",
        "cursor": {
          "ref": "e181da36-75d9-4a1a-841a-42dac831c87f",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "79b8e434-1522-45ea-bf4c-4e0997c3d2d4"
        },
        "item": {
          "id": "7b9e36f5-24ab-468f-a782-679ea043a7c4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c6e36b1e-7023-45a3-88e0-6a519bd3feee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fac984-d5c9-4163-a096-322e7cae556e",
        "cursor": {
          "ref": "cad36244-691e-4962-a7db-753233e74a27",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1b9c6c19-d950-4761-aca6-3089ccfb254e"
        },
        "item": {
          "id": "74fac984-d5c9-4163-a096-322e7cae556e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3c772c0a-db95-4193-9abc-e0949c0bf16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d079306e-0783-4b72-9d1c-7d9bfaabed51",
        "cursor": {
          "ref": "b67774bb-3e7b-4b05-98d3-76eb05960464",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f61198a5-2994-40e7-b47e-6a437c6543fe"
        },
        "item": {
          "id": "d079306e-0783-4b72-9d1c-7d9bfaabed51",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dd8528c8-eb3b-4deb-9788-8cd3cdbfe93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ea6035-481a-441c-98a9-ca85abf691e7",
        "cursor": {
          "ref": "0235d278-ea7c-45ef-8553-9960036b90ac",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "514cdb7d-9b31-4209-8595-50d264131a05"
        },
        "item": {
          "id": "a6ea6035-481a-441c-98a9-ca85abf691e7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "894f383c-33e2-4470-b190-61489bedf59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d3d8d0-e9e3-45be-b1f7-bc0039934728",
        "cursor": {
          "ref": "00082ba3-0074-4315-8fbf-d082d48c694e",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8c2eee20-a1e0-4ad3-8bcb-3f76a12e4adc"
        },
        "item": {
          "id": "44d3d8d0-e9e3-45be-b1f7-bc0039934728",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c53e1cf9-20e5-450e-a743-cf690d425411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ce9b08-dec4-459d-aa16-ad38df6bd02f",
        "cursor": {
          "ref": "270e2d0e-c58c-4247-8309-1b66e76c4e54",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "26b254d3-6026-4395-beef-98adc77a2ae5"
        },
        "item": {
          "id": "92ce9b08-dec4-459d-aa16-ad38df6bd02f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6503fb49-55f1-4b12-9429-903e2c96fcb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43935844-1158-4aee-a34c-6cd426fa8964",
        "cursor": {
          "ref": "728bb099-bebb-49ca-9034-404117eede93",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2f056a21-bafa-40ec-9264-253cc68e5b18"
        },
        "item": {
          "id": "43935844-1158-4aee-a34c-6cd426fa8964",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4b241ec0-6f4b-4b3e-910b-127c418ff0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8076f1-5f0c-4345-b334-9411f2ce2539",
        "cursor": {
          "ref": "37539fd0-1fa6-4e44-86e9-aabd6f79350a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e42c23ad-08f4-4c09-a5f1-d73e85b1a64a"
        },
        "item": {
          "id": "2b8076f1-5f0c-4345-b334-9411f2ce2539",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f3f970a7-06d1-4c11-9d62-ced93d36cbc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbbd483-ef8d-4931-9446-9e24955b143d",
        "cursor": {
          "ref": "c0e220b9-a6ec-46ad-aed2-f7f46dedaded",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "16f6be22-a583-4a4a-805d-00ff126a9ded"
        },
        "item": {
          "id": "bdbbd483-ef8d-4931-9446-9e24955b143d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c0b565be-bccb-4e94-a69d-86158a3574c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5622d423-8c52-4211-8114-26c893f2896a",
        "cursor": {
          "ref": "45823d92-28bf-40a2-9ba2-5dca9252ba84",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "40290ce0-0acc-4ba9-93f4-11f830b08de8"
        },
        "item": {
          "id": "5622d423-8c52-4211-8114-26c893f2896a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "da16a50f-c931-43ca-86d3-3ec5d1790aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a04b5d3-ac1d-4244-90f1-7662861e1b19",
        "cursor": {
          "ref": "97527ef0-2aa2-4067-82db-76333ee81959",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "20c72835-2af8-48b7-84fc-a5a40f57e0e7"
        },
        "item": {
          "id": "6a04b5d3-ac1d-4244-90f1-7662861e1b19",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2886b0f1-7971-430c-83dc-74e09ab54466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6269e0-ad56-4e31-ad3a-ddfc33bd5bdb",
        "cursor": {
          "ref": "7476c55e-0088-42d8-9e04-dbd0dce10d32",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ce588586-d94d-4a83-849b-671fa28b524e"
        },
        "item": {
          "id": "4e6269e0-ad56-4e31-ad3a-ddfc33bd5bdb",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "aab9831d-0449-42d4-9e46-01c671f9d0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8f7894-92ff-41df-9b3a-294b47380df3",
        "cursor": {
          "ref": "a06c17c6-8be1-4e80-8040-fb114fed9e5e",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0b72bc4f-72fe-4883-ba9f-1a2239e22abc"
        },
        "item": {
          "id": "ce8f7894-92ff-41df-9b3a-294b47380df3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6989c089-11d9-4f99-96ab-17663e9aea20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bdec62-ed08-4e22-986e-cb51eef29d41",
        "cursor": {
          "ref": "9d70fe5c-883f-4fe2-83ad-d745beaeb2f8",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9fd16079-3f26-453b-9948-857646726866"
        },
        "item": {
          "id": "d6bdec62-ed08-4e22-986e-cb51eef29d41",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0428c3d9-36fa-49d9-bc63-c7ede0942383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb824906-791d-4d91-aca0-ea3de3fbd644",
        "cursor": {
          "ref": "b57c615d-7991-4409-be69-33e4e47b05a8",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ebcb97d6-0fc0-4e6e-843a-a1a6785e15c7"
        },
        "item": {
          "id": "fb824906-791d-4d91-aca0-ea3de3fbd644",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9427bb16-53d2-439d-bc5f-1f56b4793618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9b565c-684d-4acb-a802-19216de37b23",
        "cursor": {
          "ref": "dbe96907-1d84-4e4c-8242-4d3ef990f205",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7fd57ac0-9144-454b-87d6-dac512237ec5"
        },
        "item": {
          "id": "cf9b565c-684d-4acb-a802-19216de37b23",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4486819c-346d-4c24-8581-290a6320ee86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eff4827-48ed-4960-a510-a1cbdb19afbd",
        "cursor": {
          "ref": "b155dd4a-8b5c-4aa9-b998-5200dc816a2e",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "62d3c2d5-c99d-48c0-b879-938b249b8580"
        },
        "item": {
          "id": "6eff4827-48ed-4960-a510-a1cbdb19afbd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3c209d42-83a9-4e06-92fc-95111f9a1d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9683fb6d-0985-4f32-87f2-60cc9ce5cebf",
        "cursor": {
          "ref": "eb7cae49-3893-4c7e-8c22-d1672ea20ec4",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "02a0fe3c-724a-4f06-ab2a-90478907811e"
        },
        "item": {
          "id": "9683fb6d-0985-4f32-87f2-60cc9ce5cebf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "caa41186-a22b-4cfc-824c-feb80f8dfcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f499fb0-cdbc-4b95-83ce-69186d8eef71",
        "cursor": {
          "ref": "e1392830-55f0-4e88-839f-d90606efc51b",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dd80470f-10b4-421b-8e6c-3e0ac26d95d4"
        },
        "item": {
          "id": "3f499fb0-cdbc-4b95-83ce-69186d8eef71",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e98cbe58-9998-4a80-924c-3a0d5362efcb",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c24839a3-cc79-4dd1-8487-ec0c9adc1da3",
        "cursor": {
          "ref": "637867d1-db7a-4435-8c8f-3e46149e8d11",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b77e7576-e110-4675-a387-4c5cd4c43795"
        },
        "item": {
          "id": "c24839a3-cc79-4dd1-8487-ec0c9adc1da3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "458281e7-abc7-47d9-ba51-47794066ef53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec364969-2c78-4c53-abc5-51bc828bf91d",
        "cursor": {
          "ref": "22a51552-231f-435e-afa7-d3ab74577444",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fa430ce1-a9e3-4518-ad45-8497fa4c64bd"
        },
        "item": {
          "id": "ec364969-2c78-4c53-abc5-51bc828bf91d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "783eb788-f775-4ff7-a64f-f481aa1614ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5b2efe-bbef-4c17-818c-24686e51c52a",
        "cursor": {
          "ref": "8938ac5e-6098-420e-bd87-16e8a64d208c",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0683a0d1-0602-4b8f-8c25-16ea8783a35e"
        },
        "item": {
          "id": "6b5b2efe-bbef-4c17-818c-24686e51c52a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4d26af96-73b7-4b51-aa41-8d8b02f6adec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d378b625-ee6b-4098-8b83-b5ceb3c561d1",
        "cursor": {
          "ref": "7f51b8a7-ab1f-41a1-b9c7-7f443c37025c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bd2dfacc-9a90-4cb6-8cb8-03e26f698690"
        },
        "item": {
          "id": "d378b625-ee6b-4098-8b83-b5ceb3c561d1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9120220d-9b0a-4a75-b124-83edd6653f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3827cd-c2aa-40b3-8932-48f049b45392",
        "cursor": {
          "ref": "c94f5b59-17f5-4bc4-bf2e-3b2aa379b75f",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "629577d9-e062-4911-84fc-c4a60ee31ccf"
        },
        "item": {
          "id": "5f3827cd-c2aa-40b3-8932-48f049b45392",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "576d7a0c-aa37-455e-aa73-65c9ee02970d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f70402-dad1-470a-99a0-66ba17cf8342",
        "cursor": {
          "ref": "b3da8fc5-46c3-4564-95bc-e6385b6e2763",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "77e08e7b-08c9-4175-95a0-441c1957296e"
        },
        "item": {
          "id": "d8f70402-dad1-470a-99a0-66ba17cf8342",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f9cfa6c2-82a0-4816-9635-3d85d22b8c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877999d7-909c-4d41-bd68-3b6529fb1d5b",
        "cursor": {
          "ref": "4a3bea71-8016-4cda-aa83-7e4d59295973",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9e0e368d-5016-4b71-a8ea-7fe9dd9a45c4"
        },
        "item": {
          "id": "877999d7-909c-4d41-bd68-3b6529fb1d5b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8df95572-675d-4bce-8f68-0aef4b14d752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084eed96-592b-4bbc-ab45-1b1c3cdfb4ea",
        "cursor": {
          "ref": "4a331b74-0aca-4b2b-a698-f68cecfe1f11",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7c566943-c2ef-4f88-9d24-59398083c2dd"
        },
        "item": {
          "id": "084eed96-592b-4bbc-ab45-1b1c3cdfb4ea",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b455c6fc-9b50-4e63-aee0-923bcfac3c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fd6dec-7dc0-4c78-bfba-979c0bd51ac2",
        "cursor": {
          "ref": "bd424f8e-4c77-47bd-b3f2-5af683ed7f88",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c41a1d1d-bbd8-4e91-b593-021bf3a1fbac"
        },
        "item": {
          "id": "e2fd6dec-7dc0-4c78-bfba-979c0bd51ac2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "10ee1fd7-88c0-400a-96ff-fd255b9593d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de23e78-136c-479d-8af9-9a8f79b91107",
        "cursor": {
          "ref": "b2ad0a15-aa96-4fe2-900a-d389a68486c5",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "37b6c9a4-fea5-4a68-8d81-26685f617beb"
        },
        "item": {
          "id": "7de23e78-136c-479d-8af9-9a8f79b91107",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "908d941f-fe8e-45a3-9cdf-7b531b0981f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782a0e09-caac-4385-b27a-88417482b066",
        "cursor": {
          "ref": "939ed940-8a62-4833-b8a7-f6e3a4939e84",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e14477cd-3108-47c4-bc82-dbb9da98e5e6"
        },
        "item": {
          "id": "782a0e09-caac-4385-b27a-88417482b066",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2b1b87a2-5180-475b-b6a4-986293058c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3ca22b-75bc-4850-9a8f-8686f13f72c6",
        "cursor": {
          "ref": "21d92584-3c7d-4730-bf72-d1877b246a2d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "50eb2715-5b8a-4ada-b56d-1980287869d9"
        },
        "item": {
          "id": "de3ca22b-75bc-4850-9a8f-8686f13f72c6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3a58f62f-a95d-4175-9544-fb01f6cc26f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c0c7da-4126-4a32-8e81-a2bdc7913016",
        "cursor": {
          "ref": "341cb30b-3c0b-479f-a9c8-ca41ad33779a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "846db173-0ec4-4602-aef3-b0f2b4531fad"
        },
        "item": {
          "id": "61c0c7da-4126-4a32-8e81-a2bdc7913016",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0f832fd6-79c8-433e-9cb0-16db3410285e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddd0d3c-7c3d-4378-9488-cdac74dc1cfa",
        "cursor": {
          "ref": "192faf4e-ecd6-44d5-a231-888ba52cf0d6",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9a1cf34b-8ba3-429c-a82f-874f40f99f88"
        },
        "item": {
          "id": "5ddd0d3c-7c3d-4378-9488-cdac74dc1cfa",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ad943c79-cf25-4a46-b389-44d286e59bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391f8cf1-6f87-4ba2-a262-e71301118815",
        "cursor": {
          "ref": "dedcf984-701d-42e0-8055-cb8be45c946b",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cd9e3150-fd6a-4d11-80ee-022c87764ce8"
        },
        "item": {
          "id": "391f8cf1-6f87-4ba2-a262-e71301118815",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9fb02b2e-3018-4b27-9fbf-90636ee5bf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6987e6ee-552c-4de3-85fe-6fae81f732be",
        "cursor": {
          "ref": "2cf36432-610e-4f7b-9444-33a89552e23e",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "519653a5-08aa-402a-98e2-699d211c7563"
        },
        "item": {
          "id": "6987e6ee-552c-4de3-85fe-6fae81f732be",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "51b3ca7b-a285-4cba-93ec-dc1c3eea90d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b7566e-412f-4425-ab65-66183c429d33",
        "cursor": {
          "ref": "2bf083cb-38f5-4262-b962-3a3a7ee3a012",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "021adeca-a96c-45ce-a0d6-4799f087937c"
        },
        "item": {
          "id": "c9b7566e-412f-4425-ab65-66183c429d33",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b2b6f4a3-919a-4c61-8cd1-8565bd2f3528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2ac965-15c3-47e9-9a1a-ca46c26f03a0",
        "cursor": {
          "ref": "8a6768e1-9b52-441f-8923-cabfb2b4e55e",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2d74eb8c-0c1a-4645-86e9-258b35b0cb78"
        },
        "item": {
          "id": "2f2ac965-15c3-47e9-9a1a-ca46c26f03a0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cc93cc5e-01fb-4b0e-986d-3887befa5779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2a3a11-133c-42e0-9ca9-326d90e408d9",
        "cursor": {
          "ref": "f8e4350b-6d67-4a96-8c20-64550cbfe3db",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "feda5455-c7f2-4eea-8279-c3282c55dc31"
        },
        "item": {
          "id": "4e2a3a11-133c-42e0-9ca9-326d90e408d9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b36b884b-6347-4138-99ea-1035c38ed3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1203f456-0c57-4488-aceb-ecc09e18c5ce",
        "cursor": {
          "ref": "db9b57f9-3b92-492b-b4f7-f74b2d4f9ff7",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3207116f-2038-45ef-9d24-655a19ad8963"
        },
        "item": {
          "id": "1203f456-0c57-4488-aceb-ecc09e18c5ce",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6eef0cc1-27d8-43c3-b896-a4293111d967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9d4129-d34d-424d-9ec1-8a8a1e2bbb53",
        "cursor": {
          "ref": "3ad6f967-2225-4203-ae21-35659a656ba5",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ef4e12da-2108-48cc-9c6b-2e971be3e2cb"
        },
        "item": {
          "id": "1a9d4129-d34d-424d-9ec1-8a8a1e2bbb53",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cba2a265-97f0-4d96-b138-a84d7772a15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec999ddc-25cb-4815-b891-5e566232c7e2",
        "cursor": {
          "ref": "d6a4a975-24da-4073-ba97-6b27bd5144f6",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a4ed26a5-3da3-42f6-acf3-2273d0234d41"
        },
        "item": {
          "id": "ec999ddc-25cb-4815-b891-5e566232c7e2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ad789bb6-172d-4f64-b850-e9be70652a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceedf9cd-990e-4164-8d49-f0ab7c53f9ec",
        "cursor": {
          "ref": "68375b43-cfba-4465-8462-2674f602bbe3",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d7803233-da3b-4cc3-8202-180217606f9b"
        },
        "item": {
          "id": "ceedf9cd-990e-4164-8d49-f0ab7c53f9ec",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "32c11e8a-f822-4ce2-b9fb-05f582e9896f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c527b72e-956b-4843-a4fa-938f7d2c7355",
        "cursor": {
          "ref": "4f3a23d6-f805-4e1f-9465-c34a05a4bf9b",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f2cbd0eb-237c-4e91-b245-cb9eac9a9563"
        },
        "item": {
          "id": "c527b72e-956b-4843-a4fa-938f7d2c7355",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9d56d4bc-dcda-48b8-99aa-971c3e18d5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d60e95a-3f43-473b-986c-4b1185757125",
        "cursor": {
          "ref": "73ef4547-25d4-4212-aff5-93e6d7dc079a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "20a445f7-db3c-480c-a4db-a14f8bc4138b"
        },
        "item": {
          "id": "1d60e95a-3f43-473b-986c-4b1185757125",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cbd90985-7545-4e85-81b5-b17257131a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f551cd-5959-4030-bd45-2aebd7b1490a",
        "cursor": {
          "ref": "3a08e057-ee29-4466-83c9-108a7b0d6086",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c2ec5394-5972-4aee-8448-08f7ab67bacc"
        },
        "item": {
          "id": "36f551cd-5959-4030-bd45-2aebd7b1490a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "eb191c65-c131-47d3-a151-c993df18e23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0de56b9-7649-417f-bc80-6727d36ca06e",
        "cursor": {
          "ref": "11b839d6-8ca1-43cd-8073-08340fa6971d",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "cde60ac7-d66d-4b0a-95c9-37f960f9e424"
        },
        "item": {
          "id": "c0de56b9-7649-417f-bc80-6727d36ca06e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7d46e169-e27f-4b97-bc64-315d715cc966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648e4835-5433-4464-9961-f674246e1fd3",
        "cursor": {
          "ref": "30750352-b22d-4c69-8e1f-65e349d04bac",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5fe9d7b4-657f-4351-bf27-8c084689eabf"
        },
        "item": {
          "id": "648e4835-5433-4464-9961-f674246e1fd3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8144555d-b328-4bb6-842d-590bd58c39bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5de8b8-3d07-40ce-bea8-6a62ad79e578",
        "cursor": {
          "ref": "596464fb-0e4a-4340-b87d-8cc0845b0b45",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "320a2c3c-cc35-4bbe-9809-4c77dd903c65"
        },
        "item": {
          "id": "eb5de8b8-3d07-40ce-bea8-6a62ad79e578",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bb2d7ba8-71d0-4958-9098-4edddab0239d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bbcfcf-e1a0-4845-8667-27157961b650",
        "cursor": {
          "ref": "69a4bfd3-8cb7-4791-970f-f06936001e98",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e8bc8885-505c-49e3-a3ba-aee7d9e54f08"
        },
        "item": {
          "id": "e8bbcfcf-e1a0-4845-8667-27157961b650",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "43fff6e5-7804-4a85-9af1-9c89477dd709",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "463604e6-9dc0-44f0-8485-fccd9ddd69ef",
        "cursor": {
          "ref": "c8cca347-e629-4ecf-b37e-52729735aac0",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8fc29cfd-5833-4c22-b20c-c7d5a1a50d62"
        },
        "item": {
          "id": "463604e6-9dc0-44f0-8485-fccd9ddd69ef",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ec82f0b9-100c-42ec-9142-5a52f7c358b9",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cea1adef-99e6-4425-ab6c-933932afd9f7",
        "cursor": {
          "ref": "aa3145aa-4017-4286-98bf-6ed90e28732e",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6ffa5ced-94ee-4c0c-bdbe-1406f720207e"
        },
        "item": {
          "id": "cea1adef-99e6-4425-ab6c-933932afd9f7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ca53d3a4-f57d-48e0-8540-82c6ee0b6a5a",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b601775f-583c-49f5-8bd7-f8d77f623905",
        "cursor": {
          "ref": "cc5d532a-e3fe-4ce5-b0bb-ac1c7785c2af",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "529f7f9b-025d-4a6a-a2e7-9484d4fa4c1f"
        },
        "item": {
          "id": "b601775f-583c-49f5-8bd7-f8d77f623905",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e7a3034d-8fa3-48ea-a89a-4f082d092bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09df6ab-5cab-4e14-839e-0e5015b03aeb",
        "cursor": {
          "ref": "faa1a63a-74dc-4e56-95ea-6bbcf1b017c8",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "80ab4bca-5cd5-442c-9345-e43672d5b3ae"
        },
        "item": {
          "id": "e09df6ab-5cab-4e14-839e-0e5015b03aeb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9ca76590-e270-448c-af0e-19c0734b0346",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "bd1f106f-4d12-466a-8f4a-d81bf1d8d9a7",
        "cursor": {
          "ref": "a038bab8-addb-4cce-9eb5-87087b541a8a",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d3dc1fe8-c73f-487c-abd1-64f0c2572ae8"
        },
        "item": {
          "id": "bd1f106f-4d12-466a-8f4a-d81bf1d8d9a7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7025de00-c324-4672-9fdc-48302eb2bdd2",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5dbd5af1-6ff6-4bb4-b12a-8f20fbb470b6",
        "cursor": {
          "ref": "71aa39b3-eb45-4204-9393-481a04997c03",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4511706a-cff0-488c-9816-b6de411630ef"
        },
        "item": {
          "id": "5dbd5af1-6ff6-4bb4-b12a-8f20fbb470b6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2bdb3d35-d3c5-41f7-81c4-5fc225d0504f",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ad11d1e1-e7ec-49bd-9c6f-e74daa45f6e9",
        "cursor": {
          "ref": "c142bfb6-5a65-44e0-8986-27df727ac73c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8e91b771-0a3e-44b3-9e01-4de0650243c2"
        },
        "item": {
          "id": "ad11d1e1-e7ec-49bd-9c6f-e74daa45f6e9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d54285ff-441b-4202-9415-5c9fbd5643e1",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "5de5cf30-3334-49db-a27a-3d5b094520f8",
        "cursor": {
          "ref": "67196f56-d183-4b6a-96b9-783159396dac",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cbd7c9eb-2fc0-4094-a376-7b01da727dd1"
        },
        "item": {
          "id": "5de5cf30-3334-49db-a27a-3d5b094520f8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "61f77066-1e9c-4d91-9d0f-952771ba17db",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "785fec42-8d88-4185-a383-6a975aa12bc4",
        "cursor": {
          "ref": "6a410350-b832-4826-b677-36f245c391d5",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b1f79666-3923-4ab0-9b9c-0ddeaaacb7d8"
        },
        "item": {
          "id": "785fec42-8d88-4185-a383-6a975aa12bc4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "eb732e0e-df1f-47e7-afb7-2abf457fed05",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "b6edfd17-45af-4628-9fc3-7ac3f039ccce",
        "cursor": {
          "ref": "85e8c76f-36e0-42ba-a752-e403953f62f9",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9e346a8a-be22-477b-99ea-2ad836d6160b"
        },
        "item": {
          "id": "b6edfd17-45af-4628-9fc3-7ac3f039ccce",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4028b9e5-1b06-4e5f-92d0-4b11bf061cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5615784a-225f-4a50-ba22-ace71f578ba3",
        "cursor": {
          "ref": "4e4ebd17-90ca-4902-8690-fbe771161dd2",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "226c7a23-0e81-4a84-b1d2-f3a1aa2ce740"
        },
        "item": {
          "id": "5615784a-225f-4a50-ba22-ace71f578ba3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f5c2ae19-13b3-4e8f-8f4c-c0d31bf7952d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea379bd-0894-4ca3-9ff2-015ab429b831",
        "cursor": {
          "ref": "00fcd746-c658-4048-a5e4-056996390f94",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0de31c8d-99b8-4b53-afd4-08eb8f1c4757"
        },
        "item": {
          "id": "eea379bd-0894-4ca3-9ff2-015ab429b831",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8f19ec9a-1657-4052-bd93-0094c2e85ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e937e8-9a71-476c-aa64-c66f3f10f0cf",
        "cursor": {
          "ref": "ce630d5c-4cad-483f-a477-7f7b62e6d821",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ef3679b9-b2fa-46bb-909f-a4b7ea1cd02e"
        },
        "item": {
          "id": "30e937e8-9a71-476c-aa64-c66f3f10f0cf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1f6caab0-58ec-471d-8e40-cda2f5d22712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50981610-8006-4946-ab3c-a6c119a1865f",
        "cursor": {
          "ref": "994504e2-a624-4f26-91a6-6ecf702f3ea3",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "633ee77c-2e9d-4f15-a1eb-fd7ceeea09a1"
        },
        "item": {
          "id": "50981610-8006-4946-ab3c-a6c119a1865f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a2706957-0340-4565-ae05-2e7ae65ebdb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b531c8-96ec-414d-8590-58089e1addf4",
        "cursor": {
          "ref": "15dcabe2-9b4c-496d-9df5-1205c6d14283",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "90ca0210-3be8-4425-b8ef-73750508d2e4"
        },
        "item": {
          "id": "20b531c8-96ec-414d-8590-58089e1addf4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e70dee31-3810-4242-af1f-eab536fe0d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca7c181-a515-44ed-9056-748df1f620fc",
        "cursor": {
          "ref": "891e5722-85a3-4fdb-a5db-c47d78b46774",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0d7301e9-fcc7-47ba-acff-ab0f62bc3f04"
        },
        "item": {
          "id": "4ca7c181-a515-44ed-9056-748df1f620fc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "266c1376-b801-4525-8438-b4d5af71cf96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f29e7f-f12f-464d-8433-443444b2a0a3",
        "cursor": {
          "ref": "be85952f-6c12-481e-838b-b32d3c1de4f1",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5c82efc2-e16b-4870-a55c-bd2a159204df"
        },
        "item": {
          "id": "40f29e7f-f12f-464d-8433-443444b2a0a3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8be2b745-3501-4d2b-ae5b-64829de74b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9684ae3-b6a1-437a-93e7-15d622aca15f",
        "cursor": {
          "ref": "9d4c4a73-fb0c-4d52-8939-bdba531b35b7",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6100ff48-b41a-4e44-bab8-9eb385086b9b"
        },
        "item": {
          "id": "a9684ae3-b6a1-437a-93e7-15d622aca15f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fe94d75f-5cf9-4dd6-8151-9e8c6b96e328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa656c40-8d3d-40fd-af08-eedfa57408e1",
        "cursor": {
          "ref": "24ae79e8-e02b-4c0c-909b-d9b9036f343f",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "54656337-f81d-4dfb-9da5-95623c6375e6"
        },
        "item": {
          "id": "fa656c40-8d3d-40fd-af08-eedfa57408e1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e8bca04c-0363-4f9b-94f3-c26831b45647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36baafbd-190b-46f3-b1e7-874a29bed78f",
        "cursor": {
          "ref": "c18480a5-117e-40c4-812d-39af8d77682e",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bb025b2a-85de-452a-8159-68a508075a74"
        },
        "item": {
          "id": "36baafbd-190b-46f3-b1e7-874a29bed78f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f29a2a6e-c326-4e3e-9d10-b1e9189a26d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ea7631-5b62-4e48-a263-69d6cfbad1a9",
        "cursor": {
          "ref": "f38365a9-c570-40bb-8ff9-ad754c108816",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "82572f38-7df2-4fcb-b07f-99b609155f10"
        },
        "item": {
          "id": "e3ea7631-5b62-4e48-a263-69d6cfbad1a9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b0e09438-4a0d-4404-86da-5577f1675c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9381b457-6c0d-4bf7-98dd-04ac4080ad9a",
        "cursor": {
          "ref": "24d05ccc-961f-422a-87b5-1629e52922ce",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9920a0d3-7c05-4669-add7-aedd0104f501"
        },
        "item": {
          "id": "9381b457-6c0d-4bf7-98dd-04ac4080ad9a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5fbee40a-848c-4dfc-98d9-d2f20ecc86ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97659209-5eb9-4592-9664-27f633b9971f",
        "cursor": {
          "ref": "237e13d0-5b43-495b-8713-13963b682aa1",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c2264a85-8f7e-4015-ab9d-cf69b2e3b852"
        },
        "item": {
          "id": "97659209-5eb9-4592-9664-27f633b9971f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a7ed81d4-65e1-42f0-bde8-3bbb42157721",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d5b41d65-e456-480f-9ff7-4ef9a433335b",
        "cursor": {
          "ref": "03fc96fa-92c1-4390-b60a-e59210a4ac27",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5ad58813-1af9-4803-bd5f-729e7202604c"
        },
        "item": {
          "id": "d5b41d65-e456-480f-9ff7-4ef9a433335b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8a687c91-a5a4-4f91-aee6-fbb460f4c64c",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "5575addf-d683-465f-93e8-be8b70d7d263",
        "cursor": {
          "ref": "185a8669-cc08-4aaf-8295-1bc1d08c7de8",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b6a814cb-3bad-4863-8aa2-b338009b4642"
        },
        "item": {
          "id": "5575addf-d683-465f-93e8-be8b70d7d263",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "efd6935c-344a-4bc7-8dbb-1080086414c5",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "9f48c794-a308-4d01-ae40-8dde7d471302",
        "cursor": {
          "ref": "4ac5d233-dc19-4f41-b4e7-096d4c492e47",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7ed37291-519c-4627-82bb-7c489c9dba86"
        },
        "item": {
          "id": "9f48c794-a308-4d01-ae40-8dde7d471302",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "67bf3906-d0ce-40ec-8de6-75b2aa3616e7",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "78710b00-07bc-433c-982c-03f394d72fa6",
        "cursor": {
          "ref": "2e8f53e1-1d8b-42f3-8869-bed268d17ecb",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "196f49e2-f3b4-4dea-a4ed-b3ef45d7e693"
        },
        "item": {
          "id": "78710b00-07bc-433c-982c-03f394d72fa6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5afb7ecd-5e84-405e-a8a1-bee7fbaa178d",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "de24995e-d344-4810-bc94-8150ac5bbf88",
        "cursor": {
          "ref": "a7c889a0-6109-4c52-b901-db7b49f0b292",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d93ebcbe-924b-4267-a7d9-8b3d0aa99367"
        },
        "item": {
          "id": "de24995e-d344-4810-bc94-8150ac5bbf88",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ab746848-d053-4331-8cc0-c0b726e3a05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b6dbe8-a9fd-442f-b727-1c51e5a7c7f8",
        "cursor": {
          "ref": "af90bfcd-39f7-439c-8050-25842f5df3fc",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "30c27c7f-b047-4224-9bf6-f234f9df121e"
        },
        "item": {
          "id": "f3b6dbe8-a9fd-442f-b727-1c51e5a7c7f8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d7dd3a15-3410-4ba6-ba86-dcce29a8f55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9b441c-d76a-47a5-8ea9-9e59059df3b5",
        "cursor": {
          "ref": "a179e547-51f9-41d8-a8ea-6005be18501b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7da3beae-b7a5-492b-b11e-a56c9413697e"
        },
        "item": {
          "id": "bc9b441c-d76a-47a5-8ea9-9e59059df3b5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "baeb55b6-fab6-4c11-8f4d-4033ef6c5a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5b492d-5040-4e40-956a-8cd8517414f6",
        "cursor": {
          "ref": "b49e6292-245f-4857-bddb-68dddc609ace",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ef5f560f-edd9-49e4-8425-ac865505f4c5"
        },
        "item": {
          "id": "db5b492d-5040-4e40-956a-8cd8517414f6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5c469183-bfda-4fef-8551-a7c529569665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27babe1e-ab3a-4ea9-8024-dc43ccba3add",
        "cursor": {
          "ref": "96a7a9d4-e297-419c-97d7-216d96b96705",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ab1e338d-8c72-4d58-9ff6-9ce237acdb91"
        },
        "item": {
          "id": "27babe1e-ab3a-4ea9-8024-dc43ccba3add",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2ea84985-d657-480e-acce-7a511c6e259a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cca035e-4f09-42e6-ba70-e37a3eec6b73",
        "cursor": {
          "ref": "e46009a6-b718-40dc-bb69-2986aa917695",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "65479c54-7b22-4ff4-b1c2-3856930d9e0d"
        },
        "item": {
          "id": "8cca035e-4f09-42e6-ba70-e37a3eec6b73",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "dd425afa-cb1e-44a4-ba81-fb90f5f38336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c928dc9-a135-4575-a2a7-8601f0bd7ff9",
        "cursor": {
          "ref": "5058d80e-3bf4-4281-9099-92f7c9c36cf5",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e4747600-f3e8-44da-85d8-888e123772e8"
        },
        "item": {
          "id": "3c928dc9-a135-4575-a2a7-8601f0bd7ff9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "dab2636d-b702-49ab-9aed-cde5701c0414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23b252e-90c3-41a1-9112-e4cc505ab669",
        "cursor": {
          "ref": "d11f718d-a8e9-4950-84ec-2f6b0cc74a07",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d1179938-8d24-418b-b0b0-b42c99aca555"
        },
        "item": {
          "id": "b23b252e-90c3-41a1-9112-e4cc505ab669",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "aa0f581c-3799-4426-a0d6-82aec9d902db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f123d2f-ddfc-4548-b0f5-a4f88e5a5b2a",
        "cursor": {
          "ref": "43f1f4de-6522-44d4-9da2-9af94e24c23e",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "dea722de-3e80-442d-ad0e-7faa1fc717a4"
        },
        "item": {
          "id": "1f123d2f-ddfc-4548-b0f5-a4f88e5a5b2a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2e2b6832-d17e-48e1-a7b1-617417aaae36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3382951b-675b-4ca1-92ca-c29cc1ab102d",
        "cursor": {
          "ref": "71fd130a-e9aa-4268-9735-e6346de3f1c5",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "85b7eb4e-30c8-4e64-aa7b-ba0d1b8ae699"
        },
        "item": {
          "id": "3382951b-675b-4ca1-92ca-c29cc1ab102d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "466bfbf4-28c9-4dd0-b5d7-4c3b29f1a6df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcdc115-9023-4aaa-a721-453c55bc6e7e",
        "cursor": {
          "ref": "0b246c41-0ca0-418b-a00c-d01cce7bfd20",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2e5a2a62-aff9-4108-b2c6-e73ea90ce1a9"
        },
        "item": {
          "id": "4fcdc115-9023-4aaa-a721-453c55bc6e7e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "51a89f0b-b166-4a4a-86c0-f0bc350819cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0fa810f-3920-4432-a4a6-f5c8878aaa50",
        "cursor": {
          "ref": "db82e621-593d-4b9b-b514-e847a6b69377",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8b923f1d-a2af-40a8-9550-237dece29d38"
        },
        "item": {
          "id": "c0fa810f-3920-4432-a4a6-f5c8878aaa50",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "38599f36-f1de-49f1-a2cc-147a6e1feac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b03d40-5b56-453c-a9dd-bbabe1a672ec",
        "cursor": {
          "ref": "25cbce2c-a2e7-499b-85cd-45d12739b479",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d00cfc0a-c8d4-4493-9024-b6f1a7c9c6da"
        },
        "item": {
          "id": "e0b03d40-5b56-453c-a9dd-bbabe1a672ec",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "44c4adea-00f5-4a5f-9517-8fd2c770b494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2b28b5-dd7f-432f-94d3-6f7e9ced01f7",
        "cursor": {
          "ref": "745d3cdc-d249-49b7-8401-bd36e059183b",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "026a6eb8-c4e8-4ed1-b13a-228e8e8db19a"
        },
        "item": {
          "id": "8c2b28b5-dd7f-432f-94d3-6f7e9ced01f7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "37b89d5c-e9e0-4896-9d42-575c76f77793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b668a4d-6b67-4854-99ed-4ff8d8ac91a0",
        "cursor": {
          "ref": "502afd68-9821-44c5-b965-7e7d49d7c312",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "75694a7a-50f6-46af-858f-e5fb978ecb2b"
        },
        "item": {
          "id": "6b668a4d-6b67-4854-99ed-4ff8d8ac91a0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "40aaa714-332c-47be-b6ba-59a2f27bb62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec8ec3c-2b05-42ab-975b-84c9ce790dbc",
        "cursor": {
          "ref": "9f7dcf8e-62ad-4fcd-83a4-6e37dd19bcc7",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "50143ef1-bc16-44b7-b585-3106186c54cd"
        },
        "item": {
          "id": "dec8ec3c-2b05-42ab-975b-84c9ce790dbc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d591be23-e0aa-48b1-b502-36f2ad05d079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c06408-ef65-4793-9f38-3023d60656cc",
        "cursor": {
          "ref": "66fd10b1-1dcd-446a-b83b-f1728a434cb7",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7ca9c8a2-52e5-4b60-ac46-827f9bb5c052"
        },
        "item": {
          "id": "e8c06408-ef65-4793-9f38-3023d60656cc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "308638f8-8267-4746-b273-41d7b1f89071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af821cd-e58b-4b1d-9a7a-9499b93ca988",
        "cursor": {
          "ref": "a2459d92-7d18-47ce-b149-ab726bc01020",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "7cb267fa-a63c-4084-8d1e-406391d89c65"
        },
        "item": {
          "id": "9af821cd-e58b-4b1d-9a7a-9499b93ca988",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "40ea6f99-c3e8-41d6-9631-96ebf2346a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c28f5b3-1e04-46d1-a07e-8db6fa2b40cf",
        "cursor": {
          "ref": "1c51f992-e036-4ac5-b9d4-c9d79745bbc4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "53eb2d75-a962-4da9-9e72-794a55128811"
        },
        "item": {
          "id": "9c28f5b3-1e04-46d1-a07e-8db6fa2b40cf",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6b9c71c5-aa0b-4812-90d4-faf2b6a7dafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed9a64c-2973-4af0-b325-7cc838df2195",
        "cursor": {
          "ref": "0d75163a-b5a7-4f5c-be91-ff487b2df02e",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3a6b8a6f-83e9-4987-89fd-1798d69de46c"
        },
        "item": {
          "id": "eed9a64c-2973-4af0-b325-7cc838df2195",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "835cc017-1452-483f-b471-292baab46060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91e42b3-a3ea-4528-bc77-f863fae8d91d",
        "cursor": {
          "ref": "fe0e568a-2f4a-4585-8753-78f76f8d050d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c434dc8e-4442-4649-bcc4-580ad6e186f2"
        },
        "item": {
          "id": "e91e42b3-a3ea-4528-bc77-f863fae8d91d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b2cb91b7-b582-4004-926e-eb4c2c522eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335e8093-41a3-4b53-9740-04b117f21665",
        "cursor": {
          "ref": "f758895b-8c79-4414-ac97-69797c19e83e",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d81cbb9c-6d39-4652-8033-3b585af946dc"
        },
        "item": {
          "id": "335e8093-41a3-4b53-9740-04b117f21665",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7b0f9c72-eaeb-4a3a-b25c-84c9a9b2ecc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca99595-bc0d-4fea-84e2-4e109b60fa98",
        "cursor": {
          "ref": "dbd93772-59de-459d-bb44-af3913735dba",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "f6c8ca74-5a47-4069-a4dc-93ab606529c6"
        },
        "item": {
          "id": "7ca99595-bc0d-4fea-84e2-4e109b60fa98",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4677b982-78f6-4bdd-8c98-e4ba6398a40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e59fece-f83e-47e7-8540-502a0fc41ed0",
        "cursor": {
          "ref": "854a0f72-3d19-4728-97da-38c1d391bc9c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f69d7a7e-5a0f-4d29-9949-b58690312063"
        },
        "item": {
          "id": "9e59fece-f83e-47e7-8540-502a0fc41ed0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2308451c-2bea-4f63-91eb-1da776947aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367e4887-4c21-4122-9369-453e35586912",
        "cursor": {
          "ref": "81e0e26e-0e0d-43c5-94f5-97ebebd9cec7",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "eae689d5-c347-4b29-8b53-5f7bac5cc1aa"
        },
        "item": {
          "id": "367e4887-4c21-4122-9369-453e35586912",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f6f830b6-ecd3-45cd-87a5-b6b5a33393cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb97bfd3-11b7-4799-8e54-ec848bd1eee8",
        "cursor": {
          "ref": "fd8d7818-af09-40d4-b72d-48e0fb295eb0",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ea450f4a-08da-4f50-bb76-7bd73f48816e"
        },
        "item": {
          "id": "bb97bfd3-11b7-4799-8e54-ec848bd1eee8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7e7c853a-d24a-48dc-b452-e08870b48098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef48769d-9823-45ea-bdb1-dc2e9d31322c",
        "cursor": {
          "ref": "53ccf316-0da8-4b37-9fd1-c474f0a58a8f",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "01045513-f07e-48d4-9c90-71e510df2093"
        },
        "item": {
          "id": "ef48769d-9823-45ea-bdb1-dc2e9d31322c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9616a68c-f9f1-4548-a2e2-0a542333852a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5411c8bb-55c7-4325-acfd-ab842cc1f16e",
        "cursor": {
          "ref": "428ddc5d-4968-4495-842f-d793913b0e34",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b2971316-648e-4279-81bf-f6efc9be8976"
        },
        "item": {
          "id": "5411c8bb-55c7-4325-acfd-ab842cc1f16e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "99156e55-2645-4f75-8b76-99033a7d7be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03af600-ddf3-48d0-aac6-0b6c1eeddc87",
        "cursor": {
          "ref": "ea605d57-f8b3-47e0-b216-aa1cc70b8fc7",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3b46ebf2-4f1a-497a-b948-36910ae180ca"
        },
        "item": {
          "id": "d03af600-ddf3-48d0-aac6-0b6c1eeddc87",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "25198972-9932-4226-a9c4-aa844297973b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939839d3-032a-447c-b4b3-6104c91ef4e3",
        "cursor": {
          "ref": "2bca6208-4617-4389-b13f-cbcc2d4abc84",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e71081a1-eda1-4d5c-857e-89ff0d54508d"
        },
        "item": {
          "id": "939839d3-032a-447c-b4b3-6104c91ef4e3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d83f87f3-670b-4880-80b3-dae775c0093c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4251c8ab-7910-4905-bd4f-e5289256a6b8",
        "cursor": {
          "ref": "1c83954f-9392-447c-b62b-fa383bbfcefe",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "bc7cd6cd-eeca-41d8-9340-b6245f947bc6"
        },
        "item": {
          "id": "4251c8ab-7910-4905-bd4f-e5289256a6b8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c505d648-5066-4a43-a4a1-5a449c21f383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e10c75b-6ef6-4686-9e37-7e04a5b42271",
        "cursor": {
          "ref": "e94c41d7-efa3-4c0a-81a2-2ddae358d3b0",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "27a5523d-4176-4c05-92be-97c98b9274f3"
        },
        "item": {
          "id": "2e10c75b-6ef6-4686-9e37-7e04a5b42271",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5607a5be-44d6-4456-b691-f141817b61d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e8cff0-0757-4e27-9fc7-4876e93b23e1",
        "cursor": {
          "ref": "8777800f-d6bb-4325-bfb6-4206bfff3f92",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b4752325-a29e-42fe-a751-b73cfc08a147"
        },
        "item": {
          "id": "60e8cff0-0757-4e27-9fc7-4876e93b23e1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "66fd166f-1526-42ad-aee8-581b6aea5aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232dfd51-ccf2-4411-918d-1ae08e66243a",
        "cursor": {
          "ref": "f4d4f11f-9fb6-40e5-8096-a966c35caccd",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "823ba184-3801-4a62-8e5b-adca56155067"
        },
        "item": {
          "id": "232dfd51-ccf2-4411-918d-1ae08e66243a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3d9f708d-d968-49e9-a71b-aa5c167ef876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26fe254-6f38-4879-b057-f47bc6606d7f",
        "cursor": {
          "ref": "63cca0fe-2f15-494d-a1f6-738951984098",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "4a414b54-e7d9-49c2-b7b9-d3b796dbfcf4"
        },
        "item": {
          "id": "a26fe254-6f38-4879-b057-f47bc6606d7f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "802b9f87-aef7-42bb-9128-9fd6e29cb4d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1123a4-7cb6-4b81-ae5c-3990e2dfe32f",
        "cursor": {
          "ref": "9351bd61-87b2-496e-9983-06e769724160",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0cdd11e7-9309-462d-8335-fe5792e7e956"
        },
        "item": {
          "id": "cb1123a4-7cb6-4b81-ae5c-3990e2dfe32f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "acd33683-6beb-4bb8-bf77-d69abc7fed22",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "8a5f26c7-d0f9-4bae-ab29-11e8eeeef375",
        "cursor": {
          "ref": "2d7c723f-7fde-4826-b07d-f437e954d1fe",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "95ddee93-d0c3-4c9e-943c-674df87362c2"
        },
        "item": {
          "id": "8a5f26c7-d0f9-4bae-ab29-11e8eeeef375",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dc6b69e5-4388-411f-b945-b41e970b9e15",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40f9ad6-dba6-49db-a9fa-4f578f387501",
        "cursor": {
          "ref": "924259d6-8ea2-4083-8556-d0b618f4f284",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "72b970a0-2936-4a7b-b9c0-44214cd0a146"
        },
        "item": {
          "id": "d40f9ad6-dba6-49db-a9fa-4f578f387501",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d4a36a68-4b1d-47e3-a95e-cbb39593a55f",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3306628a-bc11-4527-b349-c0d1d3c27fd1",
        "cursor": {
          "ref": "c7c064df-ad76-433e-ab82-718d9022e7df",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ba5e8dc0-3e77-4b96-9cc3-64c150a41dde"
        },
        "item": {
          "id": "3306628a-bc11-4527-b349-c0d1d3c27fd1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c45e095e-4608-43d8-afb6-8b402886f4c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3306628a-bc11-4527-b349-c0d1d3c27fd1",
        "cursor": {
          "ref": "c7c064df-ad76-433e-ab82-718d9022e7df",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ba5e8dc0-3e77-4b96-9cc3-64c150a41dde"
        },
        "item": {
          "id": "3306628a-bc11-4527-b349-c0d1d3c27fd1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c45e095e-4608-43d8-afb6-8b402886f4c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d2cc1b-52b7-496a-99de-4263dd7712e4",
        "cursor": {
          "ref": "01bc9ffa-de2f-4552-afca-3c96fa014658",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "03ee2492-b94c-4488-89a0-eb8317980f07"
        },
        "item": {
          "id": "27d2cc1b-52b7-496a-99de-4263dd7712e4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2dd2bd6c-ce78-4bce-8cee-8ae5e69db10f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9410a9fa-973c-4da3-92f3-7d4ea2fbd933",
        "cursor": {
          "ref": "b1f1c2be-6d8e-41ab-b261-c05479c3acca",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "ecc45b23-8d7c-47ff-bdd2-ce80db5b886f"
        },
        "item": {
          "id": "9410a9fa-973c-4da3-92f3-7d4ea2fbd933",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b355e4b2-bfba-46b5-a39b-0ed82386e8f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}