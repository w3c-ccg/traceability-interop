{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "44b61d49-2476-47f7-b1c2-232d16c0ce95",
        "name": "Clear Cache",
        "item": [
          {
            "id": "20a0b413-c31b-49e8-bd78-3a071213bf52",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a916d396-10b5-4c1c-8d5f-466b24c65bb5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2d06be27-c66e-40bb-b8c0-b2b5996a4c71"
                }
              }
            ]
          },
          {
            "id": "6466d834-3774-4335-82b5-cbda5f2c3e6b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "361a76e4-7884-4e56-a708-a9d5f59eaa51",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6566249b-9374-4b91-81cc-dc121c54d9e2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "377b0361-8ada-467b-9127-89288e12ccb0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "49fe3fce-8f48-4877-98fe-340b7bf1707d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "268e6dac-ccf4-4628-ae47-38f6582ca43f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "835e3be7-44df-4cd6-9db2-d4fe53df9b6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fd7af5a1-7210-44cb-9a8e-0a46c6311625"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e886c1eb-2c7b-48a9-a9d2-66fef594de24",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c5ffcdf5-76a3-41fa-a690-9b3a40f5ca63"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dbc64772-73b2-4658-a598-b3ae0882510e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "985ec84f-6ffa-4fe6-9fd4-bf63509aca07"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d4299a0-ffaf-41c5-b325-66c0c0727aa3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a98c788e-db92-4651-a613-90a898f09339"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7bacf73-ade5-417a-b734-6b678c915756",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76486f13-574b-4bab-9dde-99e751c9791a"
            }
          }
        ]
      },
      {
        "id": "4bb1c992-3bc9-4012-8528-e3882e180255",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3215e526-5d0b-45d8-bbcb-5f10bd879ba3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cdb8f518-4e92-40a9-9bcf-d39dbab8af9b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "efc2b27e-76ad-4aa3-9942-163d9cc8d4ee",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ccd05b-1463-4bc2-bc6f-17caa3e00c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "669433fd-046c-405e-b012-a57861662264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f941b6-777c-43a4-80ce-2916232ae7c8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac57805-5998-4427-8a09-00ffed795ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c95a4fc3-fb6f-4463-844e-c7c374e6f981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb021039-2d3b-4c00-b602-fa1a1687f476",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "293a684a-81f7-41c2-83a0-464cbb38682b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be0b89c9-6cc7-4187-9939-e9b6f877575d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c836772-274c-4305-9a49-b0409978436e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce69d040-1b69-4ec7-8434-8164161faa8a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d530b704-4023-49d4-97fd-64684a9c93e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "032c23a5-0103-44f2-9272-4662f46118c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3b1c8b-5364-4c9c-9996-45f7a62a259d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93166a2e-c5b9-4341-988c-9ad65762167b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0fce37ef-4cd6-4c2c-8b17-bdc213e2e8a7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d9160d8e-2310-4a1d-bae8-756bb3402569",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "976b1f9b-5236-4db7-8a64-0465ceb80622",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "34590cde-d008-4ec1-92a0-23a27220b6b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b73ec6d-14c0-4ad6-9529-a24e73d8271c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5c98c249-fe4d-4578-a1ef-27376c7a9f14"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f9bc65c-db64-465a-babb-20b3ab32e6d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dea03955-77f3-41b5-be2a-dc231067e87d"
            }
          }
        ]
      },
      {
        "id": "ed10dca4-5846-486e-a188-32e985973fea",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "192ad94f-9bf0-41e0-b12e-f080251a7a5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "890afb8d-d121-40b5-ae6c-e8caeaaa0752",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a1442f4d-9d1e-43e8-bff2-60bae6a5605a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e403a92f-f016-4c6b-9e2f-f3858ac8db75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742bb325-c8b0-47d5-a656-bb33a6c5df0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44ee20d-3e99-4bd4-a566-d0bb9737e7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be08744f-5771-44ed-bb1c-2287fdd8508e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7750e9e8-e8e5-41a8-9397-fa363bbd14b6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837b51d1-2152-4a8d-b529-ac02ea3d3258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3d71b7-f243-4584-af91-93026950e7be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266e3cae-44d0-464f-811b-195915fb5b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71b50741-1276-454e-ad68-50cdbcbce512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44656d0-6fde-43b8-bc35-61cc85a4b1de",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19bb68f-4fc2-49a3-8859-f429507c761c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99af1ce2-e575-4703-bc73-22389534447a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7644630-2983-4be2-aa97-4ca981924655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1fd1a0b-e054-454a-aa93-e76476a4685c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2dc11e5-60d5-40f6-93ab-4107e59c0ce3",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ffd3ee-073c-4981-a095-32218b2d2229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a078b56-01a9-4e13-b837-83874d87f3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a075ca58-d9d5-4b8b-9c49-e98d714aaa0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6d04b19-1923-42d9-a430-96e2bd657f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a2d3f8-a49b-4f0e-a141-9edc005ca359",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198bf824-7044-4e11-afa3-11cd2e4c132d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fafae28-20d3-4723-9256-989ded38bef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815d3657-6cd0-4599-9b05-a122f6d8a064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b90af913-af9e-40ce-93a0-820769490186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb36542b-a9b2-4b74-8af9-5524bed7486c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc420577-d026-45ed-9578-2fd6b172c821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d9b55c-cfbc-4bd5-a457-d0924ad253aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bacf50aa-16b6-427c-8a98-49cc8b5d1428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fefab686-7e96-428b-965c-bbe7f44537bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c945e057-6701-4a35-9398-69078226e738",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc93410-f28b-49cd-af87-b564400e7989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f2f087-caa5-42c5-b9aa-72d3e7a03d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a422743d-d294-4e88-bc2a-2ed60c4b38ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f21dd33-db94-4879-b074-1a080f5971d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfed0bf-8162-4653-827c-af5d5267ce5a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4566c96c-9670-4d48-91e2-bcb1c2d18f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47991429-8b0c-4eec-b437-1569ad8ab69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2e4d6f-2f74-4428-bd32-b06a0f2dcadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56b7904d-1088-4c08-9816-2e24ab016a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21556faa-d85f-45de-986c-8c47d5da3381",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21835c09-3e93-4829-b88a-51dcbd971f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1cf094-9c48-49ac-bf5a-1ce600a6f00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e348a409-918b-49ab-97af-aa4e6ceca101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1fa135a-006a-4c48-961f-14e4e329ae27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bd9d31-45bb-4025-a303-7c366b91c546",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bfe101-6417-485c-9673-e9da349381a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0913b5d-4377-4cc6-a968-a564e1be0767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6758a757-178c-42ac-9b02-db3362cb31bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "741b762c-ae00-4e33-9bdb-e82d7cc4bc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba7d52e-772e-49ee-9a75-7ffa224ae0ec",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dca0a53-b9c3-479c-80df-cad877d1ccb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5156c3fe-f244-4241-be09-cc0f3a117949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a785dcdf-6bed-403c-864b-0c483e677e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6817b78f-334d-4d4d-a5ba-a4300239c669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858ed195-a3de-4481-936e-642e96d139ac",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f674d0-f276-462b-bfa5-7d118d4fc95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b00cbf-278f-4cb0-b4af-0130d4e53393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe2e93b-41f8-4cc1-93f7-0a8aab03fd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d640dfc8-4448-48ea-bcf0-3b17449ea7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7808e318-4435-47e8-8166-5bed851732fa",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7a9d14-9d9b-46de-96ab-e46534011b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cdd2cb-93cc-4228-b538-312d92d281bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab83323-e582-413d-a5a2-67bfc6955d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95bb1aeb-04e7-495f-b33d-0944f6e678db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1ac346-b6b9-442b-bbed-06f30fba204a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5273ff-3d20-4f61-b65b-3fc2aa5d81ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f186558-8159-43aa-ae16-5db6f31cde57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444ce091-95aa-416d-81bd-850e9da0739e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adcd75ba-5b09-49af-a1c4-b945de03f3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3443245-a8f3-4aed-ac50-bf9491aa4586",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd38af4-d7ed-4058-a199-eba2099bc49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521b7f6c-4fa8-45f3-9a65-6c1aefacf2ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb67b4eb-adbe-41f2-98d6-0a228b754cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87212336-54a2-4e73-ba17-050812240468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba28d99-387c-40ba-a0b7-fc9b3d40c776",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f293fe4c-524f-416a-b6e8-286d98639338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d8a265-8e43-4dc5-abda-0d0d2d01dd3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a4900b-9a9d-4bb5-a7dc-bd2eb8915229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d506ca6-e234-489e-a52e-751a5ec2587c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f415f84-154b-4526-9f41-f73f82308101",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c82a4c-498c-4b3d-802b-c7579b5a87ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29d3af7-e6ce-4179-b105-960b0822f30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84e06cb-67d9-4051-828c-d840c5dc6599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7c4a2c6-9b55-4eaa-8d35-41c0b7194563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2717ba8b-4ef2-4b19-bfb6-57f7c4937bed",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa1edf0-4573-4708-8de2-6ae7c87b23ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615ea925-1212-4e45-b57a-f9201a4136ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3653f994-c5d2-46d3-92c8-bda8aa65d785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0775b60f-af2f-49c0-92c3-84aa2cd6c00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8148f2b4-5ca0-4528-ad22-fe7c40b779b7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddc36ac-75e7-4c2d-a715-741dc21eeb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8d84e77-d775-4385-bbea-acfd4375a6d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2caf99-0ff7-4ec9-897c-425b0491caf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d74dfa86-6cc8-4b35-a8d8-4ea8835a3669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0762f63-ea46-4874-beda-4fff4f834198",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb3a2f5-6078-4d1d-b3d7-a99312229fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f1df7a-f3c6-44f6-93b2-4d94bae09067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9795b86-651f-4375-a1cd-497c3f81b70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9668b327-69e9-4293-b1e8-2957852389ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24012ae6-11ee-4cba-8cf2-777f13e00211",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c50105b-ec3a-4b41-9ab0-f6c4ac04324b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a3bcc4-42c7-4a7e-b298-077f8aa78172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da915ef0-c1b5-4010-b2b4-b9933344842d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "40524c84-7834-43fe-9284-7a85cd86bf17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26336ce5-3c11-4ad1-81ab-8faafa958156",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec55620d-041a-4515-860d-f92afebf73d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e6b90b-f829-4fdd-b72a-eee932e75a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77de2682-437c-465c-87a4-1c95e26d65ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "abc63142-d2a0-4a3e-8f0b-52487346fd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9075b8b-db74-49b0-b412-2a92f793d5e3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32f3cce-44b8-4fd2-a2d6-6958b1fe9c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41067f3f-2578-464d-a7a0-ba81c0121ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd924a6e-6971-42e9-8b4f-386fb06879c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7daf0fe7-8da3-4e79-ad4f-51aa85147af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d19fde-8d5a-4945-9d7a-b97b9774200b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fa643c-f5b4-4d6d-8d35-041bb1e765ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6a91ff-dbec-49b8-b802-b7aaab393f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46105ab7-89ec-434e-8172-fda0464c3f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "14cb9926-63ec-442b-9fef-bcbe213f314a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ad8d2d-49fa-4088-bab1-1be0ae59d999",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66492285-7706-474d-9dd0-24dc93b0f554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891553b0-8024-46ed-9676-1f54b93b2d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0c60a2-d637-4da1-933c-430877be4c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6432c0d-aa53-4393-86cc-50220f38f6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5819e7-529d-4c5d-9ef5-8b9f0ed203a2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec23f5a-27ab-4f39-bb75-927dcc57df78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c52dcd-8725-44eb-809d-8a8ca4574504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e9994a-3b4a-4ad5-acde-361038528072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1d373b-1bc2-4116-b922-ce4287efcba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6e908a-5ecd-4ecf-ac58-6532e46ed9c8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55dfbdb4-e412-48ae-83ac-175df30230f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb2f359-7b0f-4e04-acfa-c53428f968f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81958ae2-b632-4b1b-95d5-29b6fe7373f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1caf566-056e-4abd-ad92-562fa3735071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64251aa9-9196-47f0-8519-ceef55716799",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c925791-880b-4e5b-904c-e1f0ef26ed31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d79cde0-fb02-42e7-9aae-d725982a3038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ca3c81-9fa8-427e-844a-30536ae7337b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d17e00be-88b7-4bdf-8e51-f2a6ca2999d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195d098d-8c90-4480-a1f4-c9e2435a1c03",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17886cd5-329e-4e4f-a19e-dd6b323d86a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee43963-dc0b-4cb9-93cc-f6a7c9aea5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660bb6e3-706d-4a82-924f-8dca271682fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d30740b-f5c7-4e97-a610-bc41313884be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a25918a-3272-4e4e-a8b7-e98530dbc77b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c715de-ed3a-477a-ab9f-efa3aeec7b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203f458b-8659-46b6-be57-6a3caa93e54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee6345b-01d5-4bd3-a765-f5af2d523d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad104a5-561a-427c-82ef-38d733c5ce8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d7efa9-9d09-40a8-ae52-10238ed28872",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5e5e11-8e2d-484b-976f-46f46764891b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0beaee0-5308-48e9-ab1a-baff0ecbb473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d4c06c-1e1c-4be5-9202-443ccaabfe33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af6c63d7-2ac1-4c6b-b0e8-b3c18398adde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5e56a4-e802-4fe1-be4d-c90640f27875",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7656e95-6135-4507-9990-bf1205e70e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d642571-b8e4-4457-8b0c-d69f6864e1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd19f24-bc08-491a-acf7-12479050e7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e45043f-abc5-475c-93e4-d28cddf08846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe95f4a-d72f-4501-afc1-bed861004342",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07761429-9fe4-4e8c-89ec-6842de49b552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260e02b9-8b45-47d1-a6d6-8428bfbf89a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719712d7-8cfd-4247-966d-45c504e17447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd895a02-d6fd-4196-9b0d-faf6286817dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6ab9a5-733f-484c-8e92-398c4340253e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f2de28-f4cc-4d47-9d5a-50731707401d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc042b94-f766-41bd-be49-98ef587a9550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af28d40-86de-4342-9c40-2849d6de696b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a4e3e22-9fff-4e7b-82a3-afdbb8301d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256e5699-ed76-4de3-b7cc-d6b740374d66",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f25043b-7c40-4fa6-b5ec-9a82f96fd6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9915f6a-ad65-4d64-a053-ee2dc2c0f1fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1fa710-8a93-4947-a96f-18d101947a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba10d14-7811-41bb-80e5-0340ef9d5e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f92c159-5d4d-434c-821c-df0735e1c30c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2832be4-fb83-409e-8fa9-c8ad9a02cd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af60a2d4-d8fb-4870-9554-0d9f6ceaaf43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7033af1-a6d9-4ab3-89cd-87f4d9a17c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b04eba-99fd-4374-a585-9863ca8ca27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b27a1f4-9669-4f05-8837-7d73baaa2442",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40340348-6b02-4933-9d28-6b5473c08752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae12deeb-f86a-412a-9e33-7603e27c01bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79213b3a-c31b-49a2-bac0-d38829ebb060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebb3dc5-54cd-4802-a2c3-200f5acad730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342793d6-fc8c-4e62-b476-10c18655db29",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17380da5-a7fc-4af8-a3be-701798e8c696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81afa469-22c9-432c-b8be-f50af24eeead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092b6c93-28d7-4d5f-b879-ea5579261c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "deebf926-477b-45c5-9e30-d0896511147c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec115ff-6d37-42d0-8c01-ca89604ccc22",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5602efaf-0e75-43de-ba48-ad814ca783ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea92a6b9-4afc-40a2-8b62-40f6190d97df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9835b95-1121-4577-af9f-fe3968bb1b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bdf8a17-6de2-4f1f-ae06-6705d6946f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ce7d38-e332-47a0-854a-e8091a2daa8a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abd30a5-ce0a-4dd7-af55-85a8e585d624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f341c7-c57a-4198-b806-fe49d5ca4531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354fc80a-710b-4fde-9c07-99e839e55cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4673f1-b5e6-4c0c-8d73-120dc360b39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0414ef3b-5c7e-48ee-8c23-4c31b0618364",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb8861b-ca1b-4d71-a8fc-0f4dd574ffd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e5c0d2-c86a-4c67-9bf0-61fb79e0fc26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c37058a-6e77-4119-aa51-dcd3ae3b73ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf5beb82-3fed-4bd9-93f7-6554d9e3495c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6073232a-728e-42df-bcff-2413b4ddb64b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c307ba5-f140-474a-90da-e81c704ca442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38fcbe8b-6da0-47e7-be1b-f77e7ddb89c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a97750d-b2b4-42db-bd42-d3655fdd7d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "404f6e0a-7bc1-4cb4-b2d9-288a2acc52fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fc9cce-da7b-44ff-8ea2-6aeb254b1ef5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b9cba2-cc65-4937-9aea-0bf917372c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93df6840-9527-40f6-b412-41bba19a4f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a69f731-6b46-448e-ab54-c6f557997c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9603966c-5f65-48e4-8e6b-8b0f1197722f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be026c66-6c54-40b1-a2cb-ea077240e0ac",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88cfc4a-e6a5-45df-afbf-f8369eaada8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71768070-9b9e-46a8-be07-a752dbc9cd65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5719ee-4cc2-4cf3-af15-45a97d9ddacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf025a8d-6745-414d-816c-7ede62737053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41fe57d1-b640-4fa7-8b80-0dcdb31a40b1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2ed6ad-b564-4f61-853d-d4f0ea711b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23a4e3d-8314-42d8-8a47-bb85d4369bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c255f9ee-1a13-43b1-b5fd-100b96a05be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aab57a0-99b4-4ef5-a42c-d72395285e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a197064-f0d3-438b-9dd7-3e20b98b4422",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1173a4f-09c7-46d4-806c-e723d07489d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49fcfc79-a897-422a-ba4d-44726748cd1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816c95ea-abd8-4b49-a0d7-33e669c70c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6383b29f-a2ad-4f60-b588-aa03347e719f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee3f5af-0154-4b8a-a23d-1e18929e6075",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5580e8d-716c-495e-a993-bedb1c3408ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84889de-454a-46f1-8351-75ccf9f97704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c798363d-27f3-493d-96f9-8f82a83c19a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "554b10b2-1e9f-4b21-b3b2-5c0eae112fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dc6e47-1de4-4572-8e37-c78c05a8b156",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e543b53-8fc7-4c13-ba32-cc935d14bd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc10633-d313-46eb-8e95-7b5fe56d1b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce257ba-b7e9-400b-aa38-c8e86dd3d6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c11817ac-8cc5-4b41-9f69-ef102c572ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f81847-4d54-4d35-811d-7edf43c91ced",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "851037ba-2144-4483-806a-36e200b8d34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "238bec3c-1e76-44ee-816d-474778b814bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8276a7-1ffa-4fa5-91cb-eec297edcad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "002e8a7a-06d8-40a9-8b04-bda5d35287a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55efbc6a-7e95-4619-8210-5d6debedba81",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721d9f15-2fa9-46cc-8a18-1d6a29b6ee8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d5b6d7-b410-4f68-a4bc-189c2da32b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb0b309-5eb0-45cb-aa93-c04654d7e962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d488d50-5f4a-4cad-b623-b41675a5724d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b48ce46-31e0-41a6-aef2-475fb394bfef",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac67d52c-00f7-4239-936e-9b94983264ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e306037-c884-43e1-b46b-c65b98ba1576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5568c4c7-d252-4aa3-8947-a31475b191e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd41469a-9a25-4a4c-a252-7dd41783854c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ef8c28-4b6f-4aa8-85c8-724d21f8dfa9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24149ac-7a1d-4848-8765-6f07cfcd8330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a89a962-9d33-49bc-974d-639b7cf36c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70133924-f66e-4e91-a183-00ff508f82cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed6576a-380d-4fdf-b6cb-f2027388f11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3028055-5b3e-401b-a660-dc10fc607abd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc421bdd-0a4c-4818-a220-ddb67ecc42f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547f8312-490c-44c4-9ebd-756f87687c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c0b1e7-c737-420d-964b-6c3d23380bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55eb6735-5f3d-4414-88df-baf383eb2d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fdabd7-74e8-438f-9207-e0fff344a4c2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67205b0-9f71-40d2-99db-199783166fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5d6b9eb-c808-4e87-858f-b4e510954ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6c2bd8-e699-431e-8918-2f16c29b4e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6810b592-75bd-4b87-a9cc-000730b6d1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c95b68-bd66-4647-9725-3ecd462e9af7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a84ea74-03b4-465b-a431-2151ce987e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859d7b11-c7a6-45da-b0c2-204624578921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d2c908-11fc-4b60-9db5-008b2c31ecfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36121d7c-712f-4324-9e5d-d8e32c3061ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8da4a3-9013-4a92-b6e8-bd0eac698d12",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca31b8b5-4dfc-42fd-845b-fa2fa7c83007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802adaed-4791-412d-9f7e-9e4fb3bc0255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59160074-56c9-4ad8-9b4c-355ae554557f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef099c8-82bd-4cb7-8351-63fe93ad2ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e7fbc1-d616-4f7d-8143-cc8a2ad2fdd6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1ddb8f-9243-42bb-b6a1-476be4e7d7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3cea61-4605-4efb-a158-df76d4a0734e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a31b39-a6d0-4f43-9632-e35bc6635582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef2822c-bd60-445a-8e66-70fefa2d4448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73968210-9d86-47aa-8dc5-c31311b15105",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66429e1e-1493-4c2b-89a2-3771303f3627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6d4c71-5cf1-4251-a40a-82e05d5d26d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c7a2b1-c645-4c85-9a72-9644337ec6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c6875c-6bce-4b32-bbef-8b5bbe35c2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad0d6ec-114e-4bdc-9faf-5932990d80e1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e1b92f-dbc1-45dd-abde-dbe84f863942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6fa163-7857-45f6-ba9e-f62b41f7f0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4231268-c671-4573-95e4-5b4364d897fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "379ca95e-e799-4e6e-9dea-5716d666192a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e684504-00a0-44d7-a3c7-509d8dd663d4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c80641a-db22-4d2a-8def-812a3e5a6855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a595ca41-c17a-41c4-becd-c1cac5a54ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd53bf5a-be71-4ca6-a2ec-23b1ab66feef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "24930b66-d24c-42b8-8ac4-20850b13696c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa6388b-8d7e-4e10-8dd6-1bd1e1c725b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c30e65-84f1-45a8-ae6b-c3dac374d51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12be6aeb-f8a0-4a6f-a421-0ea814ebc159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4156224f-7663-41ae-bc9c-7f4d390e6d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "92652598-5515-4c29-8df9-fbf610bbef8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f4ace0-0432-4439-8453-4f8553880cb0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd1b7cf-962f-46b7-9f73-04beac93967d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58ab4ae-c458-46c5-8d15-4616b24a8ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e684119a-c0f6-415c-af7b-e1dc110cabb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5676a52-387a-43b2-a003-30698e10faab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff606994-9b6e-41fc-9418-ebb4909df146",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3725df8-02c6-4ef8-bc00-6cea400672b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa6e56a-fa23-4f81-813f-092de7f516f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7e672b-085b-4bde-af15-cfc2b17bca61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b773491c-b242-4630-ae98-9ef069924d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31f9eb1-1b95-44ef-b846-51be03c1264f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a897d918-d409-43ae-a648-1e74aa6d318f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1d0f69-30db-423f-b79d-d19de9417c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb21fc7-4a64-44be-90e3-5e781f2b91da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3daaa9b0-61d7-4d7c-8fcb-5766ea7d0916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d05792-f33d-436d-b8cc-8a0fbd940054",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ca1cde-79d6-4db6-bd25-40e44f27a1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63b4475-3f2d-463f-b211-904231bde6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79aa8d9e-1368-4860-a0a9-95c665b3c758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82385969-690c-4156-891d-4a261b902036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3d0c7b-898c-4f9f-900c-a108f8a4bb6b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91af5aa7-48a3-4a5e-b059-f2f7e9fb6531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647ba931-76ce-4789-b309-40558dd1433b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2186e3a-488d-42a5-8f79-aab0643520ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf1dd959-71a4-4eaf-961a-337fdff9fa23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025458fb-a23a-4f56-9bc2-bf5f09a1199f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae135d2-8cf3-415e-9bc9-87736a908a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6296e7c-dffc-4553-b628-29e5dc7485f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41c771c-307c-46e2-a7a6-32939512cc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b695d67-617b-49ad-8bb0-1c09dddaa0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb6802a-439f-4d41-93d8-b1eb0c98aedb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9787eef1-9029-43d6-8ea8-6e99a71f157c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9741c115-0ddc-4d37-83bd-95c968dc2ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37124808-08f0-4094-8d9d-3b0e5852614d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "10034bc3-cdc5-4684-a2c6-b6c60d833dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17a3075-69ce-4844-b91d-35fd5d852401",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6154c173-2d1d-4f08-8f6f-b9880d5b04a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ef60ee-21d7-4302-9894-51a93b816d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b877f6-2e6d-48cd-857d-01a96149e028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd177b8-3181-478a-a69c-900d1efa2b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76e2bb5-a314-47bb-ba2d-3e29b6d5e13f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e94a8fe-f9f1-429f-b64e-62fe99013321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf49d93e-dea7-45a8-91a8-e4b2146cb3d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d509878-5b68-4f47-ae0a-ed1e0f66b411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01e3ba61-b2f8-439e-801d-2ea08dc395b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b97280-6a3d-4c43-8032-6039a579948b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a3287a-d101-4c7b-a183-e7682bd38773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e115b5-6e4f-4648-8c18-12faff2cc397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670dd1a1-ce31-4863-b4ba-a2b1bf3b7be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f66571cb-46b7-418d-ae4b-4332fd95ffbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12e5303-edcd-41e7-8d59-7bcef4ef5807",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d16b8bd-502f-49aa-ac31-8fb9db9cbba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766fefab-0abf-4c72-b91d-944988305b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420c16aa-8c25-4d2f-82a1-294b37d38d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f647a8-fc83-4fa7-ac1e-5ef31b539c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1def8b14-c86c-417d-a062-2f3883d7680c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0b75ad-958c-4fd7-9e86-b67c1d7294ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e525c2ac-2e9b-4a31-b606-4992b740d001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd01fa0-e3fe-4e70-af11-005e55c3d5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "082f7003-12b7-438f-88f8-e6c79260ed16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1792ed16-a25c-46d6-ab3e-ffcd9c2266d7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3202bfd-92b7-4548-b37d-c1c209fed588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d228a2-14c0-4c71-8cfb-2d2cc829d16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338b138e-9489-44b9-9fa7-6d3cf32c4584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d12fa161-3b90-4d1e-aa09-5c63323cdca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ada59a-d1e0-4aec-8160-e7207404f6fe",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a58820c-dbdb-4aa3-8fb1-bd5c09bbb18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e68275-dec7-4c42-8983-e28fd04ca1fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ca3408-97a5-4796-93f8-cc3b90f7127d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e55901b-dea9-41ce-b156-15d35b610e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1ed878-b17b-4520-9eda-908cce4b79b6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e866995-cc89-466e-bff3-702074310c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a4f36e-df90-49d5-abef-f259ade13376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a8fc11-ee19-477e-94cc-314c92f2f037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2d9e8c-4cbe-438e-913d-9c243ea0dcd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8f9daf-f002-4389-888d-5d5b3c28ddd9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50185f1-28c3-4d5f-94bb-5ce01e4bd6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f21df6-23a3-4531-8f5d-028248deaf95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1f8ced-a380-43fe-85d2-5056cded2269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2acd95af-e751-401b-bc11-a11c62002f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6345983d-e2ab-4874-8b0c-eb16c11df26c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7072020-e484-4e41-85d0-e13fde08af09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eefe265-15ac-427e-9b23-434582619328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f94ea5d-fb8a-4cca-bb1c-ab47c963304e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8480cc1-dfd7-49fd-a47e-63b2a76dbdd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5b1b30-4d89-4bc5-89f8-24f044f01f65",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6130843-f9bd-4203-8ed0-2ab328e355c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b021c924-23c3-456f-96ba-253104782b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dab45bb-e561-4f94-83a3-4f5f7e2c0443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc33c8df-9f41-4203-bcc7-ba0212776c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fdbef8-64bb-4baf-98e3-b3f5cd7b8d9e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30637370-239e-4b22-96e8-1079fff8a82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27f4903-1bfc-4a7c-a7f8-8a71cf2df3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7668c103-9bb6-4775-b3c5-daa81474740e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c040834b-4539-466d-8f1d-356b8c9a23fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d040663-032c-40f0-8ece-e28a803dbf92",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613f3e13-0ecd-4a23-b3d2-79b9ac4e2dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7bf86bd-9222-4c07-a249-f16b81a28bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f8a418-49ea-48ce-87ae-b27e62638250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "873b929e-cf3c-4d35-b13f-81577240445b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b38579-592a-49b0-875b-036ea5d607a4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4690680c-669e-4223-86fa-2fdf380db1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677aefa3-9008-44e6-ad6e-c21decfb78cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010c7f9c-01fa-482a-b852-5eb242447a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d692ca9f-9886-42d2-b385-9cecdea6d5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800e2697-e448-4b47-9571-41adc70f79d7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c1aaba-6be9-457c-a8f3-13215622552c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e266a999-e505-4443-88d7-c385b21e1c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecf3259-b946-465f-9564-33cf93f30b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a06dc5b-6a14-4bc9-97c6-b44185205034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f1fd9a-4701-425f-8d36-3a6429c736c8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90e5503-f55c-4ad3-90ac-7ad50235636e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2770e50-641f-460d-8e94-388de083b243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a53428-48f6-4518-8c7d-e9aa2b8c3ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c27ad1-e519-4eec-b515-02065dd44be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c64d6cf-9ac0-44a8-8178-8859b6b2ffea",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64da176f-fd63-4c33-9f89-9b6b2718e446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef3e162-6bd0-4613-99b0-79851e3ee122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5c3c36-5014-4806-bb41-bc4f4abf122c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0899ac-d4e1-4b28-9243-95e06706b5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878667e1-cb72-4136-b43e-2a7f91f8ffba",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3207541b-4f38-4d5c-95b6-5eb0d41cc089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8804de-1bd2-4918-afa0-679f3ff37650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fe8d45-cb32-4afe-ab85-c2b3394b92b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b45dc9-f895-4557-bec4-09bd4b917ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d7c2e2-611c-4dcc-80f4-4505549bce58",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fca828-ab9a-44c3-94db-eb263f0bdf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50905152-d83e-43a6-81a5-555d9e95f20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdeba668-3d66-49ac-bce1-415c740326f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5fa7aa2-62df-4066-a932-6506c19029b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fac4ac9-f4c5-4d52-85bc-b48d6b4011df",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12612b0-6402-4ca2-afc7-d0ff8610a8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1d9b33-e14b-4e2b-8d33-cde3e654a526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f78bff4-82d9-40b1-90e8-7629e64b263b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e873ff-b695-42ca-ac83-b5af10285166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4baf394c-d894-4c14-937e-ec88b6dca3c3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec02958-ccdf-4f99-94a0-22b0c862c64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b6578a-249c-4925-b643-4154888220fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347db918-1c60-4ae2-9270-04c177bdc77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "494fb667-9558-4f3f-9d02-e986e92e1083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a98533e-0bec-4fa5-abb7-934f167a306e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4242235-f61b-43ad-a266-35a131475e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc398bb7-6740-4d24-b365-23bc47637330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a433c413-7b50-44e9-8afb-9da8e271e6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "55983a9b-5643-4de3-8e7f-24f8cad92de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d699be93-1ca6-48e9-bbb2-cb72f33ea4b6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479806a1-881b-4b7f-9daf-60c6f3ca0cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012122b5-c6ee-4bca-8e7f-cbc6c5118b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116bc234-3e5a-4302-bc8e-76d8e7ce6563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "beb224f0-3cbc-4f8e-8f58-a952b66645a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368f50e4-e821-4a87-8a1a-bc7f7b7c6857",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b5e177-a3de-4c5e-bc12-a993bbf8025d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3c6220e6-6333-4cb8-bc8c-cbdf14e14608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fad727-80c7-45ed-af64-58267703e054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4075d35-fcc8-455f-bcf3-5ca9246b470b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7de23e37-5b83-4e56-ad3a-9e01d47f6ecc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "292d4dc2-e7e2-4267-84f4-6790e0a1bba4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958ea78b-3523-4ea9-b132-7acabbeacc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02734468-0389-4fef-851e-87f4c927ed8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89215d4b-b2c4-4f2c-91c2-705e29d81fcd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89277e55-a995-496a-8a94-879564fd0309"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d3dccba-27f4-4682-b1b8-2200648c4391",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "395a3e5e-60c4-426a-a7c7-8a7475e2d4a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0834865-0f92-4fd8-9db1-ea818fd97c3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b521970-e9fa-419f-a71b-ea78c7cb3f91"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "528c2de2-5c6d-48ae-a3fa-28fa63b7428b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "faaaccda-4154-4106-8cd7-14bf2ec5390d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "35ab58ae-a6ca-4fea-86f6-92d8749f503b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b9ad9ec0-cd0b-4b19-a244-a87e14e9d6a7"
                }
              }
            ]
          },
          {
            "id": "7c8e1e43-43bd-4616-9fc4-6c9a1d508a79",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e80857b-601a-43ed-8001-b75c3d15662f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5f442223-ec59-4181-b2d1-120cbf3f7820",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658e49df-8a6a-4edd-ab0c-8d555a159a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b63579bf-0a08-4b95-9638-6b7467cb1499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2433eabd-849e-4150-9f80-832d8e73f61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e3279e-2915-4044-ac70-feffcdebb3e5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6f93ea11-40f4-4c32-b50e-c8e073cb2247",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "601d98fc-eebe-4975-9b45-cec08315bd70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a52418e-6828-4a04-8714-4aa2b2a063fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a959dca-e181-459c-a8ee-1930c18a3ef4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b4879c76-8082-4570-8cf3-e546464f6e36"
                    }
                  }
                ]
              },
              {
                "id": "e90b15cf-608a-47fb-a630-5b71742de2a5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c959b64-6e8a-4005-ac52-94e8c164f604",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f438007a-239c-48ec-a536-7446b0173372"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55a4b11c-0895-421e-a88a-ddb4d34bc5a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b31d1d7f-5515-4a99-b58c-0f246be06685"
                    }
                  }
                ]
              },
              {
                "id": "6fceb6f7-c46a-4c04-956f-c50e6a33835f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a10f3619-5262-4380-88bc-c3382d786156",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c19eac7-708e-4573-ade1-fafd4050a76d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc45a0d9-91ab-4fd4-bd27-616486a78731",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8ae7409-24c6-45c0-9352-4c63b8c1882f"
                    }
                  }
                ]
              },
              {
                "id": "66238272-7c32-4038-abef-7d87c1504ffc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c5468d1-a5e4-4f17-a7fb-7ef9eb17acee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2e19106-9819-4b04-91bb-bcaca08390a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff3bc118-5558-4a4e-9673-fc51407013bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "feab13dd-7c26-4368-9de9-47f0c153c6e7"
                    }
                  }
                ]
              },
              {
                "id": "1ec57f0a-8f55-4fd0-84fd-8db6d3d06505",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f38ae96f-6765-49bf-8f03-f40b04b5eb06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "27bdacc7-8f8f-4731-973b-d243629f4582"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb5b70e4-4986-4bdd-aa1d-761189e11629",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "73181d6e-9ee6-4809-955a-ae1af37bdf91"
                    }
                  }
                ]
              },
              {
                "id": "d4c9891e-8b16-4021-ac91-d10906b734a3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32040396-829c-4e56-b625-05fef2688d31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "822dc1ff-a5ac-4d7a-87a0-25483154a3a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c373eea-8aee-4ea5-bf58-c2ec87f26d6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ed75121-09d7-47d0-9b2c-0d73ba99c345"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d6f3fb3f-9f95-4993-852e-210b33e8fa19",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e3be20c9-06aa-475d-bddf-0c2885843547"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1018ca86-e8bd-4296-8dcb-1ec52cba3dc5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f5572daa-1e17-489d-a561-422e2d59e392"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db9780fb-6419-40bf-b85f-0ce22c8699e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "06e67c1e-0617-4ea7-8854-6bf3e979fa79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "685456c2-d909-4ab5-a4c6-6ca4f35af944",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f80fc5a-0b3d-48e7-b01f-ccdbd5d556a0"
            }
          }
        ]
      },
      {
        "id": "c1d9e374-2e07-4b4e-bffa-c03aa4e988de",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "de7fd8b4-b7bc-4680-a6f8-b6ba7e5dc7da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "136e4ea5-5b2c-4d5a-9777-2eb1aa726b74",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7da6e5e9-56a1-4fea-bcf7-b07c1b8966d6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1486a7a2-01f9-475f-be8a-065bcbeb6d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d82340-c22f-43bb-a405-e48d1fe7cb1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d82b684-718e-4f9e-ba27-eef8ce49d859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dfdcbfe-c9f2-4b7f-b6a0-90eafc69ce90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f145ce-1807-47c5-844c-bf598b955e2f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f74c9a-b5ce-4f7e-8521-49df1d142afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a626a5-7926-4841-84e8-ced2b30c75ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d70640c-643d-4cf0-9b43-3ea2cd33585a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c19cf233-8d27-48b6-8ef7-b51b916e111c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5613d327-c3f5-435a-a5ed-8a5c73c8f454",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc27b85-8082-4875-bf0b-359e89e131c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eff640c-0eab-4f83-b66b-104713727d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80eb9822-3c29-4207-8296-e9e505d9f279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69a06696-fe30-43a2-8b44-8b0316e2de71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cab7a60-46de-43a0-8096-3cccedf903c2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df185564-0bdf-4b91-ba8b-ee0c5c035ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337176bb-0fee-4c03-8136-1ffc1a2e1701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202dec7e-0f55-4c60-8797-56b136d55740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c05f0167-885d-4574-84c5-09bf525fbb65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4533e080-8849-472d-ba72-b66201bd28a0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adc5f76-7a69-4262-a5c6-bccfc5592633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed36ce0b-82fd-4813-80ba-ad6e9c4c452b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db379238-093a-49f1-b024-b903100d3636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8af9e2-fcbc-4bcf-bb63-3cde39504b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cdf826-c762-4c80-ae7d-7f5a665d4cbe",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a07909c-854e-4904-b635-0da2aeb8260d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f32546-a4bc-4257-acf9-47c82610f75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c6f279-65a6-4a83-9182-582e9b834e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11541e89-0c7b-4eec-9d8b-767bd02a4e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71efb45d-09cf-418e-9764-e8cb154f86eb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4050b0-c09b-4ab3-8765-97a5cfcd834c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d7e57e-1e6a-42da-96de-2045733e4682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35863a6-0ea5-4676-9e59-2227b2a32b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9dc70b8-6acb-42a1-a87a-eee60a245a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674e4170-eb0b-4ad2-9aca-a62c63f0c8ef",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976bf9fb-2128-42e5-99e7-42959dc54b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2ffa32-9d88-494c-9414-78bd8d9ff8cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe215c3-3773-4c21-aaa0-10cda51dec7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb1082a-53c7-4d2a-ae74-cd6cc30a2084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d47560-ccd0-4f70-88ee-2e197d81ee3d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab6656c-23b7-45bf-bf7a-ba3297c50f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd4fdb5-8d84-4dda-b988-388e1fa0d5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7583abd1-254f-4081-b0e8-6d4cda7db3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "289d93c9-6c61-4c9a-83e8-a5f97d9ae3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6518e7-efcc-4f5a-8838-22bd16a6ed61",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08564450-27d5-426e-b6fd-77d073d712d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36242e1-9afc-4e77-8f8e-ea8eb87bcbac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234628a7-dbdd-47b0-a83a-cee0e15fe39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d64b56d-9948-4d2e-94d7-e6ee3ebdfa01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4202e6cb-08c6-48a3-b669-68fb412f9872",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a813dc-1aa1-4821-95b2-4eb0a4b0d54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "401e889f-8216-441b-bfcf-e2fb23fa22ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9a006c-a191-47d5-8b92-81045a8871e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b75ce1e7-4396-43b9-acd5-c68722eb4317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fda52c5-57ee-4594-aa23-94e0809ad964",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fd7dc5-3c7e-4c7c-90cb-7122da3f91f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "301ecf9c-9c37-45ee-be33-c14b40ff1999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33917cc3-da14-4cd0-8809-ae70bca3c802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79583a01-5a11-4d4f-9a25-ba925c3f5fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac45b70-91fd-4060-a344-da97e251f245",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee26b6c-df13-470e-bafc-ffad8df2b67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d3e8d1-1d4c-4fc4-82c1-6e35fd02096f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2efa1a3-c89e-417c-9432-a897436ed699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7944994f-7e7d-4031-8f22-48783f9c0ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d985256-bd0f-4e52-9c80-07f5fb5bf6ef",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c45b71f-8a84-41bf-b6a2-917ea4786e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9ad057-ebb5-4b2d-b6e4-9cbe07a7aa1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaca6f9-568a-4f03-90b1-d95479cc8b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3537b1-f724-4cf3-bb76-733954dab1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19df948a-1623-4843-a3f5-9fd4341c56fb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d986a5-c6be-492e-91d4-9cc4bf878282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03611a78-c0b6-425c-bfe8-c1f315c4541c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c5bd0e-836c-422e-b9d1-7a79bbca881f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b30c2d5-c341-42eb-afcf-1caa95dcdabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873f8bf1-6fbf-4953-9f40-fe8d0562edf4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf04139f-81d2-48cc-b5cd-19c806bc0878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f12f32-982c-4097-85bd-d6348bf8ba7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709a7645-0677-4a42-b288-708e4f462092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "87b6f28a-efc0-414a-931c-503683d38814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15096a67-21e7-431a-93ff-8741fd2f679d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283a109d-f179-45b5-8ac7-7c1116a829d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db559a41-4f9e-4481-9e7f-a3bd063f2b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731e5926-b6f3-4d63-bec0-163ad695c342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "229a9ef8-b135-458b-ba05-34884e694f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbd3a56-cd24-4657-8850-206b20ef57f1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a7d0ad-fb7c-4606-b3d0-c52bf3f0f423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c4633e-52fe-434c-ac9a-28760050545e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a14815-9554-4648-88d3-50b37ff1dba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "22cfeee3-5e6a-4973-9930-b0d4d0bb7521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c34410b-7226-430e-a9a3-eea23ce750a7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503fc3f1-81bc-40df-9fc7-5855e8261f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1de51658-7680-48a1-b9dd-d0b245d1880a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ef20ec-ec30-4dd5-aec8-67f10e3c05a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "812f1c7d-1af5-4118-9bbf-751444b57ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d038b5ae-53e3-4d36-a93c-87063154708a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05d6d44-ab63-4a13-88e2-6862ba189439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0f4701-8fb7-4eda-bafe-86a23c3a427f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682f3fb4-e1c2-4c70-94d5-5a561a5d0f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2e7023-2ff0-44fe-a710-43add72bd54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8208cd1-5fa4-4c7e-ad38-559d3e15157b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5371962-7a36-4f66-959b-c998cf37b0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd5a191d-b5fa-4f16-a2a4-d9c9ec0935ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2faafa9c-5744-489c-b12c-663734a4d50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7196172-7d27-4665-9875-8666b791d2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f442295-5d79-4f02-83c8-a771a9ce516d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa98b49-f4d1-4f3b-8cb3-995c251a6c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f4d286-ef6a-4a2f-8df8-a8e56f06feab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ded2ba1-e046-42fa-ac1e-2906431a57e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b149db99-9b45-429c-ba28-61ff315a5b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3e3559-d37f-464d-8ba7-86df06896838",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ca05fe-4490-4304-b068-b22f7ee51a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3638d9-14fd-4b8f-8ffd-9425f863e01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd3c3ab-33f9-42cd-b947-813e2a46d48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02a29a15-95c4-439a-aa12-a58c3d0da7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9b075f-5894-48e3-b01c-d057e6d77b1f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370477d6-c3d4-4bdc-9234-13baf1a4cbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9566fb0a-7444-47e1-bae2-1f632160fa6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b652b9-a7ce-4e5d-86d7-882cef624d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33c586c5-dc71-4996-9313-1f744cfad8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c72222-6a82-49a9-86cd-ac37f8dfedba",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e37c85-1cfb-4e94-ace5-b87f50b9c9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949f352d-9a50-4190-b350-91350ee5d56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73364fb-ccff-492a-8f73-67d0902947d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8143a7a-8f25-4a39-9e87-d52c640734d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5c383a-9abe-4a11-9c9d-6c5a5f08c105",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27270baf-c4eb-4121-91a5-aceb8e1cd6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438589cb-318a-4c81-b88d-b34f300568d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b428fae5-010d-458c-8cf0-404b04d49f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "959cbc9d-7fa6-48d7-90dc-0309bac44af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81103f7d-32c5-4413-9173-f287651b0022",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b309fc00-d0ff-49ea-85b2-b7396d6a87dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9377ce87-8ccf-4e38-8c17-ee2741bc9183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c40e2ba-d898-4015-a9eb-a5efb8a8c99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42812668-921a-4a8d-b472-d8f4d2aa4624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e75e71-2801-4f91-9847-8776599579a6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b799a564-aa68-4429-937d-64934a9f2133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d638db3-3a61-4df0-b970-3fc58e8e4d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f22ddf0-8582-490d-b55b-c84442154c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14c29416-4c1a-427d-b2c0-ccae430da410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6658a2ec-209f-494b-9e39-fb5c2f63774d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4b6475-3967-49a1-a7a3-b8bad294504f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9f6b0f-4eef-4eaf-82bc-857a8b5f1785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1cd56f-f19e-40e3-8acd-3838b73bd29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aebd91e-06a4-4805-a83b-c1cd48bfd3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d84b45-34ec-44ab-a79d-88f77173154b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ee02fb-c52c-45e3-9552-3158261b7362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0780859f-0670-48ef-925b-415015e99fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b94ac3-8d79-4f8f-9021-20b1c42d3c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20b3eb6a-db76-4e5a-baac-601178c36b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81119072-5fd7-4048-b352-73ea5a54b010",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba1dae1-3a08-4b6e-960c-b97fa6a5f2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347b5054-7597-47f3-baa1-5c75b0c91555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf4f3b4-606d-444d-9ba8-b3b3bbb77b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a39f7c3-7c90-4d4b-bc9d-ecd8b6edd496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6f7cd3-20f3-43e3-84f5-0dc8b4a1d9c3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c9407a-866b-4cc6-82dc-0c010ebeefd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841c068f-059a-4805-a6ea-ee1a4752c611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40053281-c8ad-4f2f-b969-c47264ab2674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4799ffc-63c3-481f-8a6f-a34080918d11"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cec1b07a-0f55-4375-9a92-a1d7194263f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5cba7563-7ba0-4ff2-9a37-fd6fc53c59e7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f17381e-b037-4cfc-ab51-d576a4c80c17",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "90e3b97e-a704-4b57-bcd7-ef77a764dbfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2705ef91-c1d1-4308-b519-2370188a251c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c34ad062-10ce-4045-b0f0-0b68b711c6b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d13aa7d-71b3-485b-b25d-7ad563c0d6cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "005aec5d-4c0b-4bf3-999a-b1c187cef74d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76bf5da1-f122-4708-8cf1-cb1f4abd076b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edd36c56-3ee8-4fbe-a55e-9987ceed1069"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e75b317-d758-4768-a452-c2bc8ce775d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5b7bf2e1-686d-4625-a127-aab13d694002"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "037b2e50-939c-402b-9831-c812b70126fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "088093eb-9bb6-4f2d-aa30-a4b5381ffbc4"
            }
          }
        ]
      },
      {
        "id": "ee7d8bad-3aa8-4ebf-a6b7-bfd6f3f96a20",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "5b5e5399-1949-4fb2-847f-5be1c68a9354",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03653b04-37e1-491b-8951-dc4becb80ac9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "66f97b41-0673-4026-b156-0f833c7efb89",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0716b9-6839-4e9b-b86e-e1c7610f5e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8fab3c-b0a3-4671-ae8b-0fe8ffc74575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ad7c68-b606-4250-aea6-659bacfc2e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6468d533-084f-4430-a649-a2bbeb495e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d21f58b-6117-42fa-bb88-d39043b74af3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce750eb-e8ac-4449-84a6-ff31549c9026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b7c740a-0af0-4985-bae1-7e97aae7c711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b084ab-024d-4d12-b641-ca5f7e9900e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b2a61d-302e-48ba-a54f-b9108257f825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3c1ae7-20c0-4b3d-92c3-899b73a55236",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9624406-8b3c-4057-9e63-c68626166a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a398903-e574-4114-bd40-0f734b63bf7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7403f304-5152-4829-b0c6-59375360a7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c78bbd6c-42d4-4542-8a18-d262eebf2a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9f1af4-ff3f-4a9d-9d0e-437aadb25845",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a547bba-adfa-4858-85fb-14b6c08f5e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e7bdab-d93c-4dd7-bad4-f1c129aa4a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa6a927-1020-41ff-9c38-43a02cd258f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7074f4-55c9-44cc-ad7a-63940c737bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48754333-5b43-43f9-b65d-b691624fa18d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a80e41f-51bb-45aa-a228-ebebd4b8381c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4964c2a4-8b82-4881-8fd1-cbe96745fa90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fe0005-be07-414b-9042-5841b59dfef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59c32eee-7eb7-4cda-badd-536a5ac90ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a7fd47-d43d-4bde-9842-749d924be8f6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39025df4-4af9-4e04-bcf8-6239dbc87c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6fe6f0-2deb-48ce-8faf-7316c4f52a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac51d59e-e6f9-44ae-878a-73c850066a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ece46906-310c-402c-aeb0-6b876d2e3c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eab0eed-4a2b-44a5-a737-fcf088dde6be",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0307a8f-0877-498e-8dc9-0b8469a509ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ed8180-3d44-4f5b-b7ad-e28319e98a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797836f8-ba3b-42f7-8938-a8bf7bfa00f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d063621e-1b5d-4933-aab1-aff6f8d0b4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0eb49b-d9e0-40c2-b8b3-eb313476bbc4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e154ca72-4df1-46ed-8b3b-497f0163f6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f5e9b3-c6f1-4057-9936-b24709d6be9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53481cf-23b4-40b9-94b2-f5e72e50f16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d75499c9-c23e-4d4e-a6e5-c2d2db197d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b983bf-2fbe-4b09-b72f-0aa170c8cefc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ff0872-f2c5-4f43-9da4-55bdfd68cc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705040f4-cecf-4e1d-8180-856904f8150c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d232d018-8f80-4baf-871b-0cfe59907b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94a71902-a794-4121-a317-b481a873c1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9999986d-068b-4a2e-936d-3117942a1d1a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942ce8fa-975f-4321-92b1-40082014702c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61a4f3d-232e-4596-957a-aca881684014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1096cf8a-d2cf-4699-aa39-f3de7ea7768f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5763b668-dbe0-4007-bffb-789845989490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520b8824-53db-4edd-92c2-acb2e5751d99",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9701acb6-9d69-4539-85d0-1c4cefc2a6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92775779-4291-40fb-bf40-6d2e3b510705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb16e19-65f0-422c-8df9-a71378c647dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3e546b33-13bc-4881-90d9-7dd4a802c3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505ee1ed-db4f-4ad8-a56d-2bbbba0455d6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c86ffea-5c35-420e-b5e0-e534566531a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14388110-7220-4f0f-a60a-020ea1b8d5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54815928-21a5-4d82-bc73-ab016e398897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47a41107-334b-49c5-81fa-98672b23b1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3838d2d3-a6ed-4ef5-9ec6-795586ee6e38",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cca775-2a0c-4457-8872-4d593226a3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e50703-c4d0-4142-8a45-10d0131373df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9993582-ad4d-4134-9267-c5c3b902aa77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb25ccf0-b356-4d5a-882a-c8d636a70130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a8d208-be08-4c6c-90cc-9db4203717a7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a70bd5-64f9-48a4-b551-a80beb4906b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c7cc41b-f9d1-490a-a641-29a875ad00d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168c360b-1e43-4ef8-9c4d-1b606d519f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4eba7c4-6f1b-45a5-b899-dff5c3609ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24e1ce3-cdec-4acc-9d9c-d18b18426122",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc81c69-4d44-4fc6-8747-b25ff020b51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63a1f225-2ee9-4c9a-a1a6-7c7cf14526b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1d2b18-9f2c-4ede-8c9a-1d43dc586c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "19aba533-84d3-43ac-8663-4c3d5dc6a893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daaf88be-8ea4-44d2-abd1-3e1f03caffd4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33635577-aff2-42d6-927a-2543ef0dee69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5864183-3dc5-4100-8e9f-db3135e11acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbc1dbf-06ef-4a8d-adc1-d16fc1b99522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b22bf98-a29e-4c7a-8767-eb17638a97b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1f697f-5626-4f50-bd91-a646ae6c2bc6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef522d2-f830-44aa-8244-00da88eee60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c3627b8-97f8-4899-813c-fdd98db48ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7736dbbf-4f09-47d6-804b-c5443b8f5615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a51e6862-31f7-47ce-8f8f-e01455f91a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4aa4996-c8f9-470a-909f-fb0f986c7c94",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ccf051-d698-46e0-8446-9c6567b10cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f9f97a-46f4-479c-8952-a1e2e8baa446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58dca1c-8068-46ca-afe7-1122f8b66e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f8e02a-2ecd-48c9-a365-3f1e1fecc12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce8c500-0156-43ab-adf6-520c9ec039bf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1408f9a1-3838-4149-ab62-b8d0bea5e349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc71aac7-6e0a-4619-80a9-afb17d70dad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f532b16-16a4-4e44-8742-3bac3b68eae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc9d26d-1a5b-49cb-9054-890a5f3e6682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a20da1a-9b1a-4852-9505-f1ec16e9d6a3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4193bc-ac82-4922-8a13-eb07c8869e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927434e9-22d0-4acf-8235-9b768c90aaa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0122daf0-0443-4e9d-b0f6-15b73a4a3842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4550198a-d649-4b9c-a97c-ead4fbfa8869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e665caf-915d-4a3a-b089-473d73991ae1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6738c7a2-c2b6-4f02-b7cd-58f98764a9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88bde520-20fc-4f58-9ddf-201103655c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eef1486-9764-4a44-a9f5-85b9b9f84efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34c8bb86-08da-4d52-bb3e-294f980f0bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b48e55-fe65-4c1c-a320-4f4c8bd61928",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb1201a-d84d-4a4b-83e9-0d337dd97fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5959a957-07e3-4ffd-9b6c-6c482cf82320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335e454d-f4d0-4849-84c0-f1f1c13f47a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c08ca06f-6a48-4863-baf1-da5043767aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da468e0-4fb3-4bde-9604-db107cee3443",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb9a8e5-8cdc-42e3-9973-bfc2f02cc16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72c0549-4456-4e99-be50-33d10821f886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a234c9-f0cf-48a0-8abe-948eb5f863b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd77137a-990e-449b-891d-784b25ccc375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef3b519-9356-4d29-94f1-06f0f1cb477b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2215c51-455b-4933-b33c-52d785b0eb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa979c98-7c6a-4f68-a0d3-668e29439cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518592fd-84ab-4cf1-b8b7-9ee307292567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "baa84883-a2e6-4e98-ad39-e8305bfca6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec046b6-2b3a-48d2-ad5d-9783e8c48c4a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1024aa-357b-48ed-9aad-089997fb25c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ba2a0a-b6c6-4e7d-919d-690ef41b3d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda7ae06-1cf8-4d9d-af7d-04047ffaaea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02d9b4a6-c7f8-467c-a365-03663d1068a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd63d2e7-76c7-45ce-80b5-5ecf79ef8ebc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca007e6-09fb-4b7e-8e14-975154382e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3969d3a8-2fb6-434c-8439-03736d71d949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebb5fe2-3ebc-4e75-b5fc-98919294e5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb96fbe3-faf2-4af0-8044-822c6d98b1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f587674-bb93-416e-8554-9b453e29dcbb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4288b38-4a21-4a9e-8fc5-65f83d44107d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f95f30-16d6-4510-ba26-a1a4531b0916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44778e4f-f5bf-4f42-9775-1207e1bef335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4550dceb-1529-4f4d-a03b-336aa384aa1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4794a6-2838-482a-8b7b-9bf918651b9e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8661d3a7-64a9-4886-8e29-741e67da8a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc97be1f-8b25-4785-a4b3-7d82605e13e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f7a4d5-d338-4702-bda3-cfe6f6dbee0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc996a79-744d-4ea9-a763-3707801e6643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05514947-722f-42b7-be30-b7417da0ddd7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9cd0cb-b976-4558-be6d-432f98c3caca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34aff8b1-8c04-4d70-be35-d23f216d3648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5fb7d3-d193-4a64-b62b-b5311c5655d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20cd3d35-53f5-44e9-a5f4-18ca1cd4322d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef90a0d-4ce4-451a-80d8-dd20e5e6b648",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2adddc3-eacd-4b8a-bcc0-d66d6f577916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0981fba3-fed5-4e93-8d3f-0a9a7da1de9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8657ff-2ec4-4fa5-ab8c-c75860f42dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06a6cc8a-3600-49f8-abb9-92ffb35104ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f24f990-117b-443e-a957-ca9de2629ed7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2b000b-781e-42a9-a8d6-610326af268c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a99116-03f7-4804-a7c8-abfca30d4c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a773993-fafa-4a5e-97ef-169d7daebbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f361fff3-7196-4b21-96f7-136f0ac96abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9d2340-4279-4639-bc2a-ad8e69f68c49",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2914a47f-40d6-4083-a173-bdbe7c781d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac51353-1c5e-42e0-8937-8de5616d3d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7c9ff6-0277-410b-b286-6caf355b8906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dae361e-e08f-4ef6-87d0-1e2fe7da9e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c63027f-6d87-4302-8220-313ed58e2808",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2853d1bf-6b71-4107-9d11-6bbd1b421a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4a2016-2d3f-4350-a16f-0da436d4a66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18afb59f-2ff8-44c9-98c9-c8d76f883744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc8e0ab-5bb6-4359-90ed-f759e7eb6b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0202814f-0676-4cdc-9e18-e203788adcf5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5dd359-4f67-41df-9a29-9760830b71d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7615286-fc93-4fda-93e6-ade62f434fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b310b091-e56f-4bb9-b0f2-91e63fd65d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20d7a89d-b462-4cdc-8cf7-0f36a09e02f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ac56b0-e886-465a-87e6-1903c743bee3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb8506e-f29e-48d5-9016-17c0ec688aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3397b189-5315-42b2-a0ac-6202e448ed70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c1b416-0831-4126-b99e-3d4008d776b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57298ade-3b5e-48cf-b116-1bfcb3da33b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e714e62-e354-4f1e-ba8b-d45f0fade14b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738ed1e1-514b-4c78-9e64-9f3791dbd6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270c30cc-f218-4bc4-a33a-ff023b67616a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367335f7-63e2-4c48-a57a-561f01983787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4047ff5-9ca4-40ba-b5fa-0e7db32182f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2407d39c-06e1-470b-b795-cbdd450392b1",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428fca69-150b-4680-a835-4974933ed9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47bf040e-8840-4b5f-86a1-f0e82fc58919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70f8cec-af4b-40f2-8b9c-6408146e7881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bfb2292-4900-40a2-9f58-99a288c5a568"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3c8d43a1-02c1-4c41-a40a-49b4e190c26c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd6ecf1a-8d4e-470e-a9a4-85a4bf3af405",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d445276c-ff65-4b3c-94f3-8902acfdf72a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e94dd0-bbde-42a0-9467-1c68b3982a76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3463e913-4a10-4cd4-b117-e699d352eaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98c3cfc3-e941-4484-b63b-7c1744523376"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a34ad984-3ac5-4a3d-8ce3-8be8ecb5fe67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1608ce0c-3c0b-45e8-a839-c39fc76b3346"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "201c68d3-43cc-4d2f-a290-1b3ddbeb786c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db4236b0-f673-42d9-b5d1-e12135dabadd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7010ae92-73a7-4833-bc5e-e8c9d787e93b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d1456b8f-9db8-49b3-8998-a37975cb0fd4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19697134-dadf-4ee5-8a19-28fb5ad6557d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10d9826f-ef4a-4904-bc4a-365fa68f45d6"
            }
          }
        ]
      },
      {
        "id": "cd3efefe-68be-49b0-ae01-7779a9bb6b37",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fa368ed1-387f-4921-96e6-6fb2b84f0dfa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bae34e1f-b72c-4b6b-8cab-5b48aa3cd2be",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eb64fc95-f3bb-4759-a8dd-22168bd8c4a9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9a8f75-1406-4206-8765-10630adc1829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6bd4e9-4a80-4bb5-928e-04414d759168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334d964d-2949-4b7b-9fc1-f16238c3d832",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a1cddb-724f-4d78-81d2-80ab5b43dc44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8572d1c9-8a13-43f8-aec5-c4379c4cba41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf89497-4f20-4057-82f2-a589ba292482",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea88f1b4-c174-4acc-99f4-cd7c70653f46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846e2fcf-978f-44a5-b3b2-6152fffcd3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6046a88a-ec31-4033-87ca-1d5061439a47",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a4ce71-1540-4a85-9d3a-644fc4fcc637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38db4ff2-cc6b-4626-96a5-8af40555c667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3baff855-7bd0-44c5-ae8d-7df22879f083",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2d717e-05f4-4117-9a9b-f57df1e2182d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f06b198-a08f-49bc-9220-150fe32769f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dfadd6-7f83-423c-ace8-b879619fa0ad",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb51b90c-c70f-45ff-9577-e4c3cc125c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8b84cb-115d-4045-8cc9-593d1c12e99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80fb794-b45a-48d7-b26a-4b261b010390",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb911be-60db-45bc-928e-61b8dd673fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c655dbe-6725-4433-8b6e-cc9dd471f12e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb1ab97-a005-49cf-a2df-88b59ec3d8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df64d9ef-a204-4085-8e5d-d885a0d9de59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d6f353-239a-453d-b796-cdc5918f7761",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d52fe5d-673b-4e60-9295-a0f535689dad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30522bef-b6d8-41c3-ae01-f8521e0c29be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d254b9-d868-489a-88e9-943561d11448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0326d1a-11d8-4845-a0b2-e16a34e5b541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83329e0f-a8f9-4c6f-a327-05c64986de64",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9dd6dd8-aeb3-465e-ad99-3cc25a3cbeff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1690c16d-2845-4026-8712-947d4591cbe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adff348-34cb-464d-9592-5eec55316c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192c3871-57a1-40a2-8cb5-0dcdac434494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087f7563-b38d-40e6-945e-728cad95c8c6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ddb242-6e00-41b9-9a8a-f80884937f8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2faa360-37ad-49a8-8d72-92f308431159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f476f10-bbfa-4bb1-b818-18cfc32111c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0b35d2-936b-40b3-890d-ecb25279d035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b9af19-f27d-45b0-a3bb-865ba7c4ed4a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a928932-c1d8-4cfa-a31a-6760963d5a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62750072-6b60-4d07-bd53-389f37c1434b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3445bf-46fb-4ae5-a990-81c1d13692a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099cd690-7cae-4ce6-906d-62d3137bfa12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04012ec5-e0e7-46c1-8ee1-538e05b9e971",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c64351-44df-4ecf-a4ce-275d7c7036fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b8c47d-1226-416e-9b74-3ab1664d374d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df32a62-abec-4676-a2f5-b79b6a89183b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6c40d7-67d7-45aa-9245-94f992e324a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9818ef-855d-4b01-845a-e878f06d4eb1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3622723b-a603-4d2a-a460-dd57dd4f395e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87fa95dc-fd33-42d1-848a-91d4e53b1fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a09ec88-6e85-440e-9288-ca358f6117b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45118215-f95a-4801-a1cd-9d8e60751664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be259f4-a03d-442a-ab43-e81af9ae3c8e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19246b4-5c05-4689-b3e1-3d03087ed686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79a75680-a32c-42a5-8248-5a78eec5d2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60f4938-af63-44d5-842d-410f72f36fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf11e4ec-6a75-434c-9a99-7ec25f28002b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d6d71f-15ed-43bd-8eac-f39a67cecbb9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab0f501-c1ba-42ba-b381-04deab97ca17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87c55874-cba6-4ded-8044-9c9e04842f9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521f045a-0cee-40f7-bf43-fa4679155e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f33c76-45f2-41f2-9e75-44f5cfe9240e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83d4669-3f8e-4563-822d-4232b7cc6a0c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee7d5f2-be1b-4fee-93e4-6920440d8f43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "242ed1bc-3625-4f57-be50-dfff01267c0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afadcf1c-27f9-4b44-b3df-f6b5eb1a34d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9805af-097f-4185-a5a9-10bed79c89a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd4451e-2a1b-4acc-8a86-1ea8250df7ff",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3c9ee5-6152-41ea-8f09-d5806abe912d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb31586-bcc6-43cf-86cd-a61e46753d8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd382372-39c9-463d-ae82-9db0a9ae7e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38bc890d-187c-4afb-acd1-b36a5a8fdc73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768dee49-84c3-4d69-8ad1-c1d1abd00232",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db17b094-76ea-4194-ad9a-34be41dfb68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71bc9059-af9c-41d8-8b01-d02f41d950b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "721181c3-5b0e-4d03-a8fb-1029e50f4686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3634bfb1-5cb0-4773-97ed-e02e7f8fd7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e68b23-f4ca-4ce7-b1fc-cd589dbfcff1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d558e5-8445-42a4-a38d-66d54e2d09fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896a35c3-8f8a-42ee-9389-8cc1a0edd362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbc7a97-6c73-485d-b9ef-e315582d4036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3124e7e-9141-463a-b47b-3fb4738eeee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c2ac97-022a-49e1-b459-b136521a3fcb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26baa4e8-9a82-4a22-8960-dede9136e970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f88682d-2144-4d04-9971-d529592ed151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68875ae5-f2df-4c92-afbb-2d718a7e201e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cad3993-dc8d-49a8-91df-0ca79a14ee1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b72ef7-4299-47b3-8b18-5227fdf4cd9c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f3f3e8-49f1-4561-826a-95e7b921d296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3fbfd3-c61c-42af-9078-1c04f5766e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931151d6-899b-484d-9c42-2234028fae7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bdc0285-5aac-42b5-81db-266bfabb2693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a966e4c8-ba4e-449b-b4ad-7cda7005549b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf972cf-3649-4c08-aeb3-63ade5031451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd544ff6-8840-4a21-a741-fcc273a78573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a49e94c-4338-4cde-a99a-bc24f84a01f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61469d9-8f73-472a-bc0d-de0a6efd48e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ed93f8-6b77-4f89-abac-0b27aacbafc2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee2fbeb-0e25-4fbf-840c-c9377e82ae05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221d0daa-5389-4ac2-84a5-4b5902f3b5cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7370d2da-b81c-4807-8fc0-d6de076800da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b15954-158c-4205-882e-21487474b5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5871e662-015b-48c6-b3d6-71209578540b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa92a126-0754-4859-b8db-904e6e2a8322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21d61785-6d8c-4ead-860a-7c43b0450160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99121f89-9b2f-4f7c-a8e3-aa087070485f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0a03e3-736a-47ea-9b87-08f5cdcf3864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7be0d5-9548-4318-b735-ec8112521a7a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c253699-86cb-4f41-81b8-5bc6bc815393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a75c2f2-672c-4b5c-a827-ad3d41131401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1e4df1-6022-46f2-9415-911c1a6954d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6847199a-4cbd-4093-b667-86c7aeac51e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668a649e-1982-4c62-8b72-47746b0be82e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01be1d38-cf3b-449f-9b80-459d08ca1b10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcb27267-bf47-4a4f-bb36-77e7af2f81bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa8346a-b3eb-49d1-a0e2-278d7279c9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06121f5-d4d7-482d-b42b-cc365020a32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee70a87-d52c-441d-b4f7-4e4a7f24d8ab",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27b83f0-8f8e-4d67-bf9e-d0933dd4d640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8933b77-2c92-4b06-bceb-91b456499c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df36018-e66a-43db-90be-b6028420fc61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfbe8d69-278a-4ad0-b735-9d7afd789f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d29afe4-8241-4b44-84dd-731aab2f2575",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f7880a-3ee4-48cc-ab5b-49e676c8cbbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6326bb-e6d3-4abb-971f-2f82b367597b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8098cb47-c36b-447c-80dd-48fbc7cfb0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c8c479-811c-4dae-8d20-028ad8b33cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd407fd6-b4f4-4601-b997-c54ef5550d10",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b25d8b7-db99-43f9-bfde-3f6575111f61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fb456fc-8597-42da-b453-3ce3dbfd1912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80ff8fe-a513-413d-a495-900604259c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbc440d-a8c2-4d4b-9a27-8840908d5ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98f97cf-f648-4a36-8dc4-069106f3881e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7dd449-873d-421a-b6d8-64ec62fc62ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10f6e10b-0577-49b1-ba8c-649d9bc3a6de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f9e06e-eefe-4e3e-914a-cbb93241db41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f512d2e8-5279-4760-9830-e9453d13cdf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd6f0ab-e03b-43e0-924d-1ab6634b4287",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb4b4c0-02a3-4b1f-b3ac-3b1adda55a0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01032838-d230-4c41-8a61-18fc07271fa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f113508-793f-4248-a841-633b2c3afd40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7b5983-6bff-4bb7-9d78-18204eb08d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8557e3b7-bb6e-4b8c-abfd-96e31345ffa0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f29ae6-4056-4ab6-b02e-709b7e833708",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c61fe2e-8f14-4225-b251-2b12472a715e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80ff085-09b4-4345-a6de-768c4a86889c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e024e9e-5754-49d6-9d97-e5370cd225b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00e9e7b-93e4-4ffc-83c1-fb80c70f2dc2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ed927c-f9b5-4792-a654-f77e55db9798",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20f2de9c-67d9-43fb-9e62-7513d3bba33e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d78be3-b84f-4eb7-bee1-4551ff8c8f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c6d6903-eafe-425b-817e-0fa0dff40cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d653c1ee-add6-4859-9415-07fcc5360b64",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ade12bb-f56c-4111-9970-79d445c1a727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c509a57-1713-4cba-abc5-1931c22afa9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c830f2-b97d-46fc-bdb2-5af899e8dfd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd9c925-3516-495d-9021-7393ec17c8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eced1caa-d764-4917-ac4c-d65c0313c292",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d33fed-ef93-4f70-9feb-376cdd293ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ae975b-6483-4b99-94e8-59e78f796b8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7332412-3e4e-48c0-9210-27562b96a339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e1ac12-33c7-4b98-9c85-4c7b566e21a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccf5817-c7a2-4a5d-b7e6-abfed9d1da36",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4797a7cd-838a-45f5-b44a-3435592246f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1d9c77-1c54-40b8-b846-6aa484bd3e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36740ba-f03f-4241-9ac3-e2ccba87ac78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c10301a6-8474-4e33-b803-faaac5342bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0347dde7-8b4d-4c2c-b27f-127a969da08e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febc0c70-7c75-467a-9443-6309dba4cc34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd40fee5-6e1d-40ef-8db2-68a8bd323d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91844f1f-4e5b-4307-93a5-ccddfbb1b3c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2ab5ab-bb57-4610-878b-65ea7a6b4d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630b0820-7657-442d-8038-839f83944daf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e37980-afa9-4433-a78b-67779e2afbfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ad88a9-a64b-4b24-81f3-fac34b72443f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b73e7bf-935a-4c41-80ea-71ff8d6dd473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "408a86d5-6113-49b4-aa99-d8c82abbaae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9acab7-ad2b-4d9f-bba5-a6c1544efe0a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb392d1-b251-46e4-92d3-42cf7862cb9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e559fc-f6a2-4c6f-b328-5fe5d81fbfc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdf92de-c919-4799-aad3-6a038f863f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51e36692-47f7-4789-aee7-3d2ee7290b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4917088d-4664-4c21-b746-2a48becc9a9f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d64b040-b242-4821-9221-78f69f7597db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88a5a5d-8252-485d-805b-87ecd918c333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a28a14-a940-4380-8279-05f746df99c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030042a4-da27-4574-a0a0-5efe76695abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a204dc5-76cc-496b-a9bb-d7ab9010697e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326e6cc5-6008-43a1-94a0-fdb5b2becd7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d479a8-5bea-495d-a764-d6152848bc60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0d923b-826f-41c2-8b17-07199213df94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22bfb29-3f71-429c-bacb-2fa4f5166a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a61bbe-15b2-4ccc-a900-d22f29ea0f51",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262d4011-4012-41a0-a7dc-60b3f45a8f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea69e91-cff1-4496-a909-2fa02e94e47d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cfdec9-0782-457e-b339-b4f1d47d8229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e7f6eb-3598-4ab6-a964-2508ab11267b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc62d1c4-d9e6-47a4-9eb7-37fa2b3e6734",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e512887-ba8b-4bc3-b39c-6bb281e0468c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08002444-ddba-460e-95c9-093baea67644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9965a6e6-43ae-4e19-860c-21e0bf0471b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e0bd8fa-60e6-48aa-8d6a-4dbaf556fb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0444da0-4f56-4b1d-b80b-048b2c0e1750",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde45f25-e5e2-4089-b67b-1136e54049d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1bc946d-a618-48f1-af74-49496f141e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2a7329-cb56-4985-aa14-2ac35b149c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e41aa2c-57e6-441b-8b92-25a602ffcb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2128fc-d85a-4911-a51f-f5a66963d6eb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a135295-8f55-4e61-956b-3383e036ff60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819da6c9-7bbe-49ab-ab91-acbcad163357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d3bcb8-2ed7-4fb5-ace1-d929dd539d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0039892f-446e-4997-a8bf-ad0db35cb020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c35cf2d-5324-41a0-a633-50f6b481f7ff",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a104aa-f392-479a-ad43-710b39f8ce83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7850307d-47ee-4e5b-b169-b9e8076a9322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e203314-a777-4aaf-873d-0f977aebead6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ccb45c-7377-4d0b-9714-b8511a8549a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30438e44-1eab-412e-8e4c-27134fdb2ae9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7249761-f0cf-43c6-be4f-c2b51521a3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0847a6d-0542-425b-9b8f-2726277b5a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e0e330-cf6f-45f9-9e6f-0bccf693820d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8e39d0-fc40-45e0-8e80-72076cf94376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a3acd1-0674-4ee9-8279-411e0da92d07",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78baabf-2a76-49c1-b1fa-5340aefdc79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3410145-158f-464d-b878-3011cd679659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b586a71-cbd2-4a7a-9dca-53e11f9c5dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11fb4c6d-a79c-4b5e-a258-9b3a3ff2ef10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd421e7-73f0-42fc-902c-9a07bb9282ac",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2e1007-140a-4ae4-a70a-c8c375da877f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf8960db-ea3a-4502-acfe-e131a89a0079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad8a5ad-655c-45ae-b782-62d991158314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f99a09e-1271-4152-9c16-0aed823e0182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405a2e74-93ca-42e8-bbe5-2e0dec42d80a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423f0e21-713a-4558-b024-71042616e726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd1442a-8a9d-4c58-9260-7db45c648d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f14d465-e2dd-4c63-a5b9-3b597871f61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f13b693-d2a6-4536-854e-0d2821fa6829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50362b3b-70bf-4409-91b6-ea3d205cb6fb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cc7497-95fd-4286-b97b-137b7b3cb3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e654626-a3dd-4949-9c61-578869fea271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdc79dc-620c-41ef-818a-ec3eaeeab7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6342a4d-42cd-4c6d-b254-ca9d6229aab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719bcd2b-3364-4c16-a943-3e731b9c2b3e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28d48c0-fcb1-43ef-ba6a-171aded2a292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49a6ac4-ae7b-4829-ba0c-759f23fa0692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf22f55-f423-4ef9-a8b0-b9180afadae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9eed59a-8e26-452a-b2bb-8a0520781323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe9bc66-c70e-4bd7-a8e2-c2f97c49ad21",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eaf284f-6b2d-4f3b-8fe5-f35113fd90bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f29036-626a-4b74-aa79-47bd54c490bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b523d56-4fb2-4f3d-bab6-064163d9aae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd6e00e2-9c7a-494a-be06-f43f81303e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1ffeeb-7fab-45e8-a864-2f0eaa6715fe",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894821a4-b8d2-4e86-912e-6d3512228f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1db795-e256-466d-af98-2a13c6739319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e63b854-fd0d-4dd0-b716-0d7c10da342c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aacd3ce9-2206-44f5-99fb-9111836f56b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891ed619-4f32-4de3-8bf0-e0331e74393f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31fa0b7-d16e-46ae-aeef-a3fbf135b101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee6be70-3c27-42b5-a8d6-30b7c0a948c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1dd665d-479b-4b44-9baf-5c7a14f585c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5888424-cdae-41fd-a0f3-b2f70956bea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba6e1ae-db93-4e4e-a71a-058d160c5b2f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b90882-b22c-4c8d-9dfe-42616abcb43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18f7166-1413-4b7b-9067-e375c3f6bd1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da512ce-d09e-4c3b-9588-44c8075568c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678b84de-8f94-4f5f-ae8e-f23720aeb7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96f19de-fde0-435f-947a-f6fd724fab53",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315eaaad-24a4-404c-8bdd-37598252369e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9634c1-000e-43f6-abd3-d8778d507fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce198022-27da-467d-87b3-4d399fdcf0ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de5d295-7f30-4aa4-9868-b39406c8b332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56610c34-a00b-4334-a240-ae5020613016",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03d8ac7-6604-459d-a32b-7c6f827e8106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80a31b1-96fd-423b-927c-49fd501a35a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb63223-0f63-4165-ba1a-e499aa2b7a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dab87a2-71b9-4763-84ea-4aab4768cb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3568c7d5-e0c3-41b0-a7d5-5d6b8c639b8c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0a65ee-0072-4c4b-a35f-2c1dc89984a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff4098b-a40f-49a3-92de-682ac8915055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dfdab9-e1bc-491a-a3b2-c068ff1a0241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e512aa-d24c-4e6a-85fb-8c0413c03b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b869d7-5cbd-4e87-afd4-77da35c7d693",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14767d8-2dc8-488a-8f31-81cd4063993c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40af44ae-391e-4003-9476-b8103e547904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20dde6ba-a9ee-4550-b1d7-7312001765ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ecc87b8-3724-4864-a587-0fd6fe3f04f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f95ad61-1335-475a-99c4-6c1f7922dd97",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b52f8b-500b-4918-8d87-330550c4a45e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4384452d-c14f-4198-9416-14329f524f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860c7fc0-9ff3-4841-9f1e-f96444ee35bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502c23dc-0577-4a6a-a9c9-8e97116397c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c328765-91f6-4c13-bdbe-f2536a29a73d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de090fff-b3f2-446c-88ce-b3668c9a58f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c54c6b-3b9a-4e00-a076-02084c89e3fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1349a598-0d4f-455e-bc4d-20fdc9f1fca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0ee69e8-b62c-4c2c-b994-fb514d6a499b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee3dc7d-6ea2-40bf-af32-570e34e37e7c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf8e81e-4440-44ff-b4f4-df3fee580bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75cd739d-5794-45f1-acb1-104bd3ab62c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32f14d2-14cd-4f98-8322-3aeaa9174d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb28739-f785-4e36-8276-9cc3c8d65daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3dc4429-a949-4c4c-a552-0c09dcae7cb5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713ba1f2-46b8-4650-a244-48350d147d50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89e48dff-8e92-4964-b771-9af48f277e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b49630-7149-487d-94d4-29e01784e7f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db6c553-b36e-42cc-a23d-0a5579376d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6bc822-fb06-4ed1-81e3-457b1a3b9e3b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b45f402-e7ea-4e54-8508-7e58848d3d77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40e93ebd-3a20-47ed-b5dd-94ded5d4b329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d709c4d-10bb-4b04-910a-a602cccd8e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f651b3bb-9576-4828-acf0-df2bf3724698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e516910c-aef9-4c37-b3c2-f0876e179796",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00469fa4-1633-4eb6-b950-ab0301db31d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64bdfe97-5ca7-4d88-9707-7f7873f80c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d44e341-504b-4b6d-b276-b1ffc3f9e317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ba5425-2086-4f3e-a47e-e45652ab995f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41b7abc-4fcf-4082-8cdc-9179f95b6f03",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fef251c-3902-4de6-9f88-b6929272cb4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc59eca2-58e1-40ee-8076-658ed54b6ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96708ea-0f5f-412e-b581-c096560f89d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97af813d-f4a3-4c86-aed9-28569879afc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ec881b-7797-4191-a9be-bdf30d91019c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41e2e69-97ee-4802-9175-20443bf4c1da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47b94a06-04aa-4c08-bdf4-0b737d27b115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71119e9d-7a0b-4880-8364-9cb775993c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb49db1-fd20-4c65-8bf5-dc1ff96a3a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595eb06b-8460-400b-8bfc-3ce5c8c90e11",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de15a6a4-f039-4688-a5b7-16718b73f0ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "367e4c13-3b88-4184-8c75-dcd3b82d03ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7278883f-a849-4351-ada2-d598b2935056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab315ada-7623-4998-b6ca-4a32b07b93fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3881dba6-bc7c-4615-a490-4db0f4f1e53a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bddb67c-2481-4487-8874-a1d769c01d42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "589d68e8-5732-4454-83e6-d609e8bf4fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5342fe2c-d120-464d-80f2-f85c5eb1a081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221d6064-ae2e-45ab-8c4c-5f03e0c533e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3535cdf-c845-49dd-8bdb-e62044e07b40",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7283fce6-eb07-4edf-9d9b-7f0c961bdab1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fcadbcf-5315-4173-a847-07418bb6d431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5e5478-1e82-48d1-a345-3fbfb2bf6308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcedcec6-edaf-4538-b840-27f03c60d07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fedce35-35a3-47a5-ace9-ddc24b2752fc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304f5b1b-f7aa-4a05-8b9c-c4bd222dd44c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25040f47-3e93-4672-aa50-2fdbfbe210da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "764ae8e2-d19d-40aa-ba94-25e1151404ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61506fef-4c12-43ff-be35-946aff227052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc65345-9ecb-491d-8999-c2ae855bad3a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666c2749-b163-4454-a8dd-a6ab5e0b80da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5a68b1a-15fe-4ab7-aa02-de565bdc3d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3605f00b-d160-47f2-b55a-18db761b9698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5fa467-04b7-4055-8e66-c2ccfa446e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f6f644-2a67-4196-9ced-adb76cf81935",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d829ef-1ac2-4270-88cf-6f5cbaa9509a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a3610a9-63f7-48b4-a86c-d88360c8d6f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ea3c9b-8e2e-4513-9fa0-8a726d5b365a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fafbd1a8-6427-4b43-97eb-b6576713056c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633a172b-1afc-440a-8579-a49bf2b8f8ab",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fd89ab-3e7e-4200-a228-81e6f37e56d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a066ab1-bfd3-43af-aa0c-bc16050aef21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b4a8f7-1a42-402a-95cc-78b7af121e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c698785b-c680-452b-b3fd-824f67f0c1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169d2ab9-7571-4393-8362-52ec55e88697",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7138337-3d6e-4392-aee8-6c038ac38248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6249eff-fb9a-45cf-9d42-7506d939fd86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b86cc5-3613-4d4b-b3c2-2ca2e8aabcc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474d0a33-8826-4d10-8ee6-2897a7123dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36db6a4-d32a-469b-9b0a-e5c676c47a05",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23238183-9b0b-4329-af31-686fa3414633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3e87175-8d79-46eb-a7d8-c2b852d3183d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725983d7-568e-4469-b86b-5c2ae4db7415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fffb804-f504-48d0-a78c-0c7ddbce0a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6b29a1-eb63-435e-b12a-b27e464d8b28",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4289d14c-3de5-448b-9fc7-ad3b10904c50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edc44f0b-0faf-466f-bd55-96db9787d5b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7185edd-f911-40c6-bd85-7c7efe4a769c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f44b0293-cf0f-4e31-8a59-ea93942bebf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a723747d-5c12-4f82-9e49-e5011e62ef00",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99161890-b1f2-4287-a02b-9fab0e9a2f70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0e824a3-3910-496b-88d9-91c00bb4d944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb959abb-1c17-4eae-b66f-be765909f721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b0bbec-8e58-4f93-b6c1-07899d39fa3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a405722f-be90-4df7-a742-a072fa80da1f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a65925a-116a-42c9-bb08-fe6339b5e0a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61640382-2bae-4398-a866-daa9126b9694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "047e8b1c-9611-4fdd-b072-1466a37fd277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c910a95-61e5-400a-8ce5-cce6a3487de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d31a38c-599e-4d5b-8648-64b947de5654",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba312f6-aeed-4774-8cae-5a03e2999af3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90814020-cf9c-48ec-9b68-516452449dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce5dcc2-40d0-4035-b686-6ddc7d373146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd70cee7-d0db-44fd-9468-264bac0f7c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c117990f-e693-4bef-9f51-83ff42f61954",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c289ea-e1af-4363-9254-798d2e782455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18de20fb-c8e3-4208-97c4-759b069664c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b8f401-c285-4238-aa03-a0ca358dfc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c81baf8-b550-4cae-910f-fbc92816c644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a58efc-bdf3-4e43-a6b8-9842a33ce699",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af36807-38e5-48f2-9840-5a801e16f07d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c153456-7f01-48d1-9584-7445d8385326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d99c692-21e8-476b-91eb-42573accd2d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac0126d6-dfc0-4db5-9f92-25c6a91bdf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b53afa-9b40-4ae4-a51a-61a60be0addb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf7fab9-ba14-42e0-9c94-f04c2e090a29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7db7388c-e058-4046-bf71-ef7643e86ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69fdfa4-fe01-4f30-953d-6ccbd3f87801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7b6983-3b47-4bed-a458-d4945e096088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bcaa9f6-395d-4267-ac15-9612a6225312",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a59f71-4f13-421d-bf70-4fc0ecb43c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47361ca3-f070-4812-9860-e2a0974119d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4f57be-9896-4be1-8f13-aec43f5007f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b39b0bea-e84e-4863-b360-3fbc774c054c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f941ac31-8128-400e-bda9-475833c96c9e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347a1133-d61f-4412-9bd2-67564fe18f5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48789180-828e-48dc-a17f-a6cfa6bb6c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e034f3d0-1b9f-409d-855a-cb37e0d414b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33e5c99-6c0d-4ec2-8ce1-2e1675c1ffea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3a374f-4133-49cb-a761-a8cdb3dbb42f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5af866-3819-43ac-ad74-1a378429a34c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba5f6a84-0ec9-4fb8-a0ea-dc14e32538ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dc3379-703c-4630-a27c-70641643e387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb50aaf-5819-4de3-91f7-b6333d23d58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe2b92a-4d7d-463f-83c0-953a6e670211",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8096227e-98b0-4262-9166-14673d85ff8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95b2cdf0-95af-44f1-86db-07efcadb3e79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95bc691-397b-4fd0-ab81-425c0e8310ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfda18a-2d23-4da6-a05e-88fbd30fce03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61ae632-ee7e-49b3-b43e-c9979d82e7e6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d68f3d-f043-40e0-8d29-6fa352c9fd60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c5d0829-a9a1-427c-86f2-9c89f7f0ca10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6c363a-18fc-4aef-af9f-c227d149e38a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b464a0-d224-4a45-a05f-8d27a98a9466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e88878e-4682-4b9c-92f3-e3b61fdc986c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c89a38c-63a6-42c8-9868-0d0ad2b32162",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2090d8b-2f5d-4bcb-8861-5b67d9316401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f986732b-953a-413d-b599-1bbf76273f20",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2553ade-e5e5-4541-858d-4f49932abe2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4df4df-18a2-4b32-bb67-49fb193c5896",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48299904-ca35-44a3-8da3-c9b782ca04dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02059d72-ad72-434f-9703-c301ba8804e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87838cba-6116-4e18-bcb7-5efd2e5959df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e39cb4f-12ef-4a7c-ac17-e1dbb09aae5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3732dd-7742-4e6e-85bb-84e362b6d9b4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b99855-c322-49e3-85cf-d4e4d0bf7a8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b493b5d5-b4ec-48ed-b56e-96fae546516c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f11d96-1c91-4975-ab1b-4ab9e916af65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c41a6b-2af0-47a4-bf67-0734804cd03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256a5a4d-71ce-417a-8a4e-80d05a762152",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd931a7f-8aee-420d-a748-aaf2ce4146a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31e81138-cc32-4a71-8e8e-d3d7d47cbd5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "150f7bd9-b85f-4576-9b29-86af896ffbfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4265e7-b3fa-43d1-adca-372413823d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf5a47c-a8b8-455a-930b-7af7c335b2c0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31576b21-83c1-47c0-a8be-5bc7731ae9f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "162a7355-7080-4c4c-9741-5ed819340550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3278e4d7-3639-4c60-814c-ed20a0b33761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73bc98a6-51d0-450e-9989-9a207d199124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b9085f-ddbd-4294-b8a6-84eb6d064cbe",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2744bad0-89ef-4316-b807-87678e705589",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1dd50ae-39d2-410b-a2ee-c95c37bb31cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3282c56b-e635-44e2-974e-cd1ff0c3216d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9c9c9d-8356-4bd0-9ca3-41cb25970c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451f55fd-b598-4010-8cff-9028f78edebb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b0464c-aaaa-473d-8925-46819477f1a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fa51945-d7f5-4da7-b039-3d98a52ea32a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67335ac6-35df-4dca-a855-48d37300ee9f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb95186-f5e9-477c-9162-4d902cfccaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2b1715-4c1a-4bb6-be05-e821c26c13c6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb8b555-9b8b-487d-aaa2-5b297d9ab7a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "322eaeae-39ae-4ff0-b53e-3b866e57f6ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a0b176-7b67-4a01-ae02-0a392d2e5c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6176ce5-edde-4d23-804f-cce9abcaa92d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2faad9eb-6a3c-4445-a874-2be40a19f462",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7012355-eadf-4094-b6ec-f74c787c371e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08e2e00f-4282-4d5d-866a-45767bbe78c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a89a10a-0f7a-49b5-8afa-68fba9a9cd82"
                    }
                  }
                ]
              },
              {
                "id": "a17d8b58-0faa-49a6-beb4-ea9d9326afa2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8642a4a7-ee6a-40ff-9434-f302eb0a0669",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5539adef-0998-44b7-bb45-008813694880",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e4a8216d-7841-4682-a9e1-e5c60d71049a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d80d4a2-0a3e-4237-a949-8694b2992747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "897d122b-2910-4ea6-9ea6-3a5107780753"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d10aae0-f9f2-4124-8245-c55d57ca7dcf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbb0d005-3b3a-4ace-89ee-c166f5ebec8b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "875b8f66-3534-4db5-be26-12d48c3ced02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "755ed54f-0489-465a-a116-558d37f357fc"
                    }
                  }
                ]
              },
              {
                "id": "e6c41c18-58ae-478b-bb79-b9a8cdd21f4e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "384fc07e-665a-428c-963a-856cb02a3d77",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2171b83f-f780-42fc-99c1-73d1b15ac79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "47792d9a-2cfa-4c93-bad1-e05583169cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321817ef-aece-4f71-93d4-d6bd752f64a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63401b0e-a291-4558-918d-284f9639f2a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4f0f483b-3de1-418c-b01b-be2a237e49b8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "22e2f316-abe1-4fc3-97d4-10ca7f3d1c56",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0f6ae3e-14b7-42d5-8b19-aeac3e52121b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c5a3805f-fd62-43fe-91ab-f152d6346d1e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79e860c4-f941-4873-844c-3692ec8963ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "402e1b6a-bf6f-45c8-abb3-c886d427e3df"
                    }
                  }
                ]
              },
              {
                "id": "180aec01-f272-4753-99fc-f44a1a609c6a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "199577b5-6d23-426f-be1c-83e001f1097a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "85dec45d-88d6-4ccb-9ee0-c2cdb3d15ac1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dde0a573-acd3-433c-b715-f507c8e58cae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a53c0954-a31f-4f2c-8953-f7be7373e3d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ee52aae-daa1-4e92-bf2f-cd728be2b9e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0ea8eab6-82e4-4136-a8dc-6cd7c84d026d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "acd49909-52da-4670-9135-381dcd2bcb3d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ee82f47-4dcc-41d9-afa8-3099faa391f1"
            }
          }
        ]
      },
      {
        "id": "57f52b9f-0d0d-4e0f-86fd-bba475c8fce2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e1e8134b-ad10-4d2c-b3ca-70b181bb8b82",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd4055d1-ba5c-4077-be28-94c95306c373",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "68ed0b49-4fe9-4211-b297-befb12c32f36",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb58b5b6-8344-468d-97f7-ef82db7bcc3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "00e311be-4a1f-4324-8f4c-6bc3f49a616e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca6b1a8-70f7-469a-9213-92a1e2aa0b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38d2df13-3669-4b28-b383-2ec9f0d0760d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aadfcec6-8cb5-469f-8f48-d6b3c8a7f2dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c177ec8-3bfe-44f1-a062-aeb8e415cff2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e6e7445-2acc-4019-9c2b-8803c51b9aca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ef16e6e-9526-4456-a449-f4f0efe28a11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8a60bb8-1457-4887-90cf-c05207e19d49",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6c17a0bd-167d-4029-b6c0-581acc884552"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe24e000-945c-48d2-92ec-158f8f212434",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e0cf9d9-fd00-470e-bc51-26ab051b9f5d"
            }
          }
        ]
      },
      {
        "id": "476c89e8-b7d9-4c93-aed5-d1b0669d9d86",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "005e5b28-a6a2-4978-a94f-d87fa59ed30b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2b0ad7e7-23cc-48c1-9bd6-e2805ff56753",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b967c25-204b-4d54-b2f6-ff9c6422bc3f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479de585-1696-4005-8e84-5393aa861400",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25dff822-7374-438d-8987-c5eb0a47be7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f32377a-4ec5-4f59-9f62-588a5c448008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5d1f0d2-5b32-4212-8cc2-43b58c85ff76"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a825d92-3a60-474c-8765-e8b5fc48851d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c3d762f-d699-41ad-97b2-d016cee4de4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48c03978-20ea-4ffb-83e6-1230ac77c2fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87a808d0-3b0b-43fd-97a1-c9b371512122"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46451e52-2f59-4428-aadc-d7a19accda46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "64bc17c8-9c7b-4e0a-a42a-733febb486ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40a29c4f-2c15-4a9d-ab12-79382324d4fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3594b4ed-66f6-4595-8f18-47e9912a7aba"
            }
          }
        ]
      },
      {
        "id": "199016b3-4aeb-45ac-b6e0-94c537714ebb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c54d5637-26f9-4944-af9c-053bb3e2707a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a3549be-4930-4075-b29e-d36038475146",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2e3940e-52d1-4a58-a273-46dc3beb84dc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e5241d-4ee4-48f8-a0e7-9ce2bf29e673",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "311b1063-8db4-4f8e-9f92-7ce0ed9c32c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c655d1d7-9bfb-4fe1-b005-9cfb59474e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5dcf225f-9b5e-4f66-9596-4e5d3bde1430"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d0e9945-394d-4424-bce9-5e37f44c39c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd8303ff-bc72-4b5e-bbc1-b67a65966fba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eca02a02-2ac0-42e9-9b47-f675847825a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb332127-91e3-4972-9df3-6958deb9ef5b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a3d8e61-95a1-4f87-bba4-76ecf1b1d5df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a66f8a73-c643-4a8b-a37f-fba557228efe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf202b37-de5c-4f94-b9f8-731c77cd04ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75550864-4447-453d-a4c7-e32c9e6d4793"
            }
          }
        ]
      },
      {
        "id": "02a83168-67d0-4713-9839-2d34bbee4f34",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea77b0a4-2c01-44af-86ac-d9b75783c9dd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3591a69-59e4-4243-b4c0-633b8e35ec82",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a199cbb8-e0ef-46aa-9122-5f8d843122fd",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c01cb678-5d3a-4a5c-8746-9fcee6aeb784",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94a1ebec-7f64-432d-838e-b5595642ad62",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 91.80673758865242,
      "responseMin": 4,
      "responseMax": 1187,
      "responseSd": 51.87245566514618,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706574849295,
      "completed": 1706574911039
    },
    "executions": [
      {
        "id": "20a0b413-c31b-49e8-bd78-3a071213bf52",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ffdda566-3385-4428-86e6-1018ad137339",
          "httpRequestId": "15d2c08a-c68a-42a3-8732-003418424535"
        },
        "item": {
          "id": "20a0b413-c31b-49e8-bd78-3a071213bf52",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "86acac45-2fa3-480b-ba92-2f312ce4ed24",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "6466d834-3774-4335-82b5-cbda5f2c3e6b",
        "cursor": {
          "ref": "7fd8c1d4-df23-44be-ae29-f74cc8e5345a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c80139c1-cf2b-49b3-a99e-8b1421c60a51"
        },
        "item": {
          "id": "6466d834-3774-4335-82b5-cbda5f2c3e6b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9d8a0056-3dad-4932-afeb-09870cad8b4a",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 0
        }
      },
      {
        "id": "268e6dac-ccf4-4628-ae47-38f6582ca43f",
        "cursor": {
          "ref": "d3727a5f-6b29-44b8-8639-50e84c62aff1",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "99378cf9-a485-4dac-9cac-e076b3ad2180"
        },
        "item": {
          "id": "268e6dac-ccf4-4628-ae47-38f6582ca43f",
          "name": "did_json"
        },
        "response": {
          "id": "3a1ac9e0-8801-424d-95a1-ab2d0e8b688f",
          "status": "OK",
          "code": 200,
          "responseTime": 1187,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc2b27e-76ad-4aa3-9942-163d9cc8d4ee",
        "cursor": {
          "ref": "35ca3595-c0ae-4ddb-93e0-27fa297b712d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1c590c0d-a0ae-4fd4-af12-732f5cf2be7a"
        },
        "item": {
          "id": "efc2b27e-76ad-4aa3-9942-163d9cc8d4ee",
          "name": "did:invalid"
        },
        "response": {
          "id": "b9231b0d-7550-4875-8c4a-e6024b4cc1a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc2b27e-76ad-4aa3-9942-163d9cc8d4ee",
        "cursor": {
          "ref": "35ca3595-c0ae-4ddb-93e0-27fa297b712d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1c590c0d-a0ae-4fd4-af12-732f5cf2be7a"
        },
        "item": {
          "id": "efc2b27e-76ad-4aa3-9942-163d9cc8d4ee",
          "name": "did:invalid"
        },
        "response": {
          "id": "b9231b0d-7550-4875-8c4a-e6024b4cc1a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f941b6-777c-43a4-80ce-2916232ae7c8",
        "cursor": {
          "ref": "6f3de78f-c08a-4efc-b38a-fb07679f5554",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "20f4a3b0-c87e-45bc-8f10-403bbeef8044"
        },
        "item": {
          "id": "d5f941b6-777c-43a4-80ce-2916232ae7c8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9d8c8711-b69d-40f8-b135-852754bf648a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f941b6-777c-43a4-80ce-2916232ae7c8",
        "cursor": {
          "ref": "6f3de78f-c08a-4efc-b38a-fb07679f5554",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "20f4a3b0-c87e-45bc-8f10-403bbeef8044"
        },
        "item": {
          "id": "d5f941b6-777c-43a4-80ce-2916232ae7c8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9d8c8711-b69d-40f8-b135-852754bf648a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb021039-2d3b-4c00-b602-fa1a1687f476",
        "cursor": {
          "ref": "33171fce-e845-4ed0-89c5-ab260cc7fc52",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fbf9b7b4-5cd6-46e8-b6af-90d0dd679be6"
        },
        "item": {
          "id": "bb021039-2d3b-4c00-b602-fa1a1687f476",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e182bac2-8586-4dc6-995f-c23849e2d709",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb021039-2d3b-4c00-b602-fa1a1687f476",
        "cursor": {
          "ref": "33171fce-e845-4ed0-89c5-ab260cc7fc52",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fbf9b7b4-5cd6-46e8-b6af-90d0dd679be6"
        },
        "item": {
          "id": "bb021039-2d3b-4c00-b602-fa1a1687f476",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e182bac2-8586-4dc6-995f-c23849e2d709",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce69d040-1b69-4ec7-8434-8164161faa8a",
        "cursor": {
          "ref": "c72e923d-97b9-4dbe-8cb9-21bf032d642b",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "51debe6f-14d2-47fe-8001-222bdd07f1af"
        },
        "item": {
          "id": "ce69d040-1b69-4ec7-8434-8164161faa8a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0d1de21e-a99c-4b60-a804-57809a2d5f23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce69d040-1b69-4ec7-8434-8164161faa8a",
        "cursor": {
          "ref": "c72e923d-97b9-4dbe-8cb9-21bf032d642b",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "51debe6f-14d2-47fe-8001-222bdd07f1af"
        },
        "item": {
          "id": "ce69d040-1b69-4ec7-8434-8164161faa8a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0d1de21e-a99c-4b60-a804-57809a2d5f23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9160d8e-2310-4a1d-bae8-756bb3402569",
        "cursor": {
          "ref": "91409cf7-6707-4b0e-87b7-69ae21b2d746",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4598102-ed2e-4936-bba9-a873382065eb"
        },
        "item": {
          "id": "d9160d8e-2310-4a1d-bae8-756bb3402569",
          "name": "identifiers"
        },
        "response": {
          "id": "8fc37fb4-2d2a-45b4-8bee-dbff9708af16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d9160d8e-2310-4a1d-bae8-756bb3402569",
        "cursor": {
          "ref": "91409cf7-6707-4b0e-87b7-69ae21b2d746",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4598102-ed2e-4936-bba9-a873382065eb"
        },
        "item": {
          "id": "d9160d8e-2310-4a1d-bae8-756bb3402569",
          "name": "identifiers"
        },
        "response": {
          "id": "8fc37fb4-2d2a-45b4-8bee-dbff9708af16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a1442f4d-9d1e-43e8-bff2-60bae6a5605a",
        "cursor": {
          "ref": "ee7e91f1-f174-415d-a875-da7146e00d75",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "62e5a621-601c-45cd-91cf-c49f80606098"
        },
        "item": {
          "id": "a1442f4d-9d1e-43e8-bff2-60bae6a5605a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "446c945a-8afe-4d7b-a364-e0b932836435",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1442f4d-9d1e-43e8-bff2-60bae6a5605a",
        "cursor": {
          "ref": "ee7e91f1-f174-415d-a875-da7146e00d75",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "62e5a621-601c-45cd-91cf-c49f80606098"
        },
        "item": {
          "id": "a1442f4d-9d1e-43e8-bff2-60bae6a5605a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "446c945a-8afe-4d7b-a364-e0b932836435",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7750e9e8-e8e5-41a8-9397-fa363bbd14b6",
        "cursor": {
          "ref": "f8ee3712-2338-49a8-acc9-6b438c9f62be",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f6647d0e-5f3f-4f0c-bb3b-3eb5e69109ec"
        },
        "item": {
          "id": "7750e9e8-e8e5-41a8-9397-fa363bbd14b6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f3d8d748-efb3-422c-b390-72857f6b7517",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7750e9e8-e8e5-41a8-9397-fa363bbd14b6",
        "cursor": {
          "ref": "f8ee3712-2338-49a8-acc9-6b438c9f62be",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f6647d0e-5f3f-4f0c-bb3b-3eb5e69109ec"
        },
        "item": {
          "id": "7750e9e8-e8e5-41a8-9397-fa363bbd14b6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f3d8d748-efb3-422c-b390-72857f6b7517",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44656d0-6fde-43b8-bc35-61cc85a4b1de",
        "cursor": {
          "ref": "cff210bc-1b4d-4dc1-844e-36bee19e24b0",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5943674d-707e-464d-9582-3f8751c359e4"
        },
        "item": {
          "id": "c44656d0-6fde-43b8-bc35-61cc85a4b1de",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "58be8506-cfc9-48af-a916-fef927765006",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44656d0-6fde-43b8-bc35-61cc85a4b1de",
        "cursor": {
          "ref": "cff210bc-1b4d-4dc1-844e-36bee19e24b0",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5943674d-707e-464d-9582-3f8751c359e4"
        },
        "item": {
          "id": "c44656d0-6fde-43b8-bc35-61cc85a4b1de",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "58be8506-cfc9-48af-a916-fef927765006",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dc11e5-60d5-40f6-93ab-4107e59c0ce3",
        "cursor": {
          "ref": "d6e03784-f449-4b02-9ebd-e4476a86ca16",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c250177c-d814-49ee-9b7c-cb97fd35fbbb"
        },
        "item": {
          "id": "c2dc11e5-60d5-40f6-93ab-4107e59c0ce3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cd1235d1-f433-4270-a951-56da2a2d6571",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dc11e5-60d5-40f6-93ab-4107e59c0ce3",
        "cursor": {
          "ref": "d6e03784-f449-4b02-9ebd-e4476a86ca16",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c250177c-d814-49ee-9b7c-cb97fd35fbbb"
        },
        "item": {
          "id": "c2dc11e5-60d5-40f6-93ab-4107e59c0ce3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cd1235d1-f433-4270-a951-56da2a2d6571",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a2d3f8-a49b-4f0e-a141-9edc005ca359",
        "cursor": {
          "ref": "49c26b5c-c72d-463f-a549-402e24bb6c45",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cbaa5c3b-6bc8-40e4-ab55-11d6e185e87b"
        },
        "item": {
          "id": "04a2d3f8-a49b-4f0e-a141-9edc005ca359",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "616457bc-394f-403f-b790-cd99a1086354",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a2d3f8-a49b-4f0e-a141-9edc005ca359",
        "cursor": {
          "ref": "49c26b5c-c72d-463f-a549-402e24bb6c45",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cbaa5c3b-6bc8-40e4-ab55-11d6e185e87b"
        },
        "item": {
          "id": "04a2d3f8-a49b-4f0e-a141-9edc005ca359",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "616457bc-394f-403f-b790-cd99a1086354",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb36542b-a9b2-4b74-8af9-5524bed7486c",
        "cursor": {
          "ref": "8abe0a96-bb3d-4721-ac35-9f06164897d0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "37644eb4-dd8b-4520-9e18-05bff34203d0"
        },
        "item": {
          "id": "cb36542b-a9b2-4b74-8af9-5524bed7486c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0dd764bd-9d06-46fd-b2fb-9790b46cb9a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb36542b-a9b2-4b74-8af9-5524bed7486c",
        "cursor": {
          "ref": "8abe0a96-bb3d-4721-ac35-9f06164897d0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "37644eb4-dd8b-4520-9e18-05bff34203d0"
        },
        "item": {
          "id": "cb36542b-a9b2-4b74-8af9-5524bed7486c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0dd764bd-9d06-46fd-b2fb-9790b46cb9a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c945e057-6701-4a35-9398-69078226e738",
        "cursor": {
          "ref": "aeead2be-22de-4926-832c-3a3bb63451a6",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0063a212-b274-4c7b-ac9d-fdcafac1601f"
        },
        "item": {
          "id": "c945e057-6701-4a35-9398-69078226e738",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "50384cb3-01db-408c-976f-ec370f81b861",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c945e057-6701-4a35-9398-69078226e738",
        "cursor": {
          "ref": "aeead2be-22de-4926-832c-3a3bb63451a6",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0063a212-b274-4c7b-ac9d-fdcafac1601f"
        },
        "item": {
          "id": "c945e057-6701-4a35-9398-69078226e738",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "50384cb3-01db-408c-976f-ec370f81b861",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bfed0bf-8162-4653-827c-af5d5267ce5a",
        "cursor": {
          "ref": "754e819c-9ea1-469c-b600-e11533a06f00",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6b2e0cf4-d3bb-400a-b7a3-d14e90086d69"
        },
        "item": {
          "id": "6bfed0bf-8162-4653-827c-af5d5267ce5a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "70d637dd-cb33-481d-9575-840a6833c8a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bfed0bf-8162-4653-827c-af5d5267ce5a",
        "cursor": {
          "ref": "754e819c-9ea1-469c-b600-e11533a06f00",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6b2e0cf4-d3bb-400a-b7a3-d14e90086d69"
        },
        "item": {
          "id": "6bfed0bf-8162-4653-827c-af5d5267ce5a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "70d637dd-cb33-481d-9575-840a6833c8a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21556faa-d85f-45de-986c-8c47d5da3381",
        "cursor": {
          "ref": "62d1a482-b47f-4ab8-a8ca-278c093a7c13",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5c597853-8430-48b2-9cc5-f2605810234e"
        },
        "item": {
          "id": "21556faa-d85f-45de-986c-8c47d5da3381",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c3e39200-3e13-4bf9-b8a2-fa0833302e1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21556faa-d85f-45de-986c-8c47d5da3381",
        "cursor": {
          "ref": "62d1a482-b47f-4ab8-a8ca-278c093a7c13",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5c597853-8430-48b2-9cc5-f2605810234e"
        },
        "item": {
          "id": "21556faa-d85f-45de-986c-8c47d5da3381",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c3e39200-3e13-4bf9-b8a2-fa0833302e1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bd9d31-45bb-4025-a303-7c366b91c546",
        "cursor": {
          "ref": "59d4b3c2-d1f1-4d8f-92f9-63dfb9c6ca1d",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "836ee873-e613-450d-ab7a-a02ad187e0cb"
        },
        "item": {
          "id": "10bd9d31-45bb-4025-a303-7c366b91c546",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "96ef211e-bbf4-47e6-b612-e7df22fba7e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bd9d31-45bb-4025-a303-7c366b91c546",
        "cursor": {
          "ref": "59d4b3c2-d1f1-4d8f-92f9-63dfb9c6ca1d",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "836ee873-e613-450d-ab7a-a02ad187e0cb"
        },
        "item": {
          "id": "10bd9d31-45bb-4025-a303-7c366b91c546",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "96ef211e-bbf4-47e6-b612-e7df22fba7e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba7d52e-772e-49ee-9a75-7ffa224ae0ec",
        "cursor": {
          "ref": "08e46bee-3a4f-408e-bd0b-168d36290edb",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6cd84641-a2f2-4eb2-8969-dcf3eb5b5d1c"
        },
        "item": {
          "id": "cba7d52e-772e-49ee-9a75-7ffa224ae0ec",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "47f0b21b-34b0-4ce1-b6b4-d386892a9642",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba7d52e-772e-49ee-9a75-7ffa224ae0ec",
        "cursor": {
          "ref": "08e46bee-3a4f-408e-bd0b-168d36290edb",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6cd84641-a2f2-4eb2-8969-dcf3eb5b5d1c"
        },
        "item": {
          "id": "cba7d52e-772e-49ee-9a75-7ffa224ae0ec",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "47f0b21b-34b0-4ce1-b6b4-d386892a9642",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858ed195-a3de-4481-936e-642e96d139ac",
        "cursor": {
          "ref": "0d1c1547-44ba-43a9-b15b-3064b9fae232",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5a895ca5-43af-4eda-880b-d18b22ed61ac"
        },
        "item": {
          "id": "858ed195-a3de-4481-936e-642e96d139ac",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2adf800e-43f3-4608-9364-952194063498",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858ed195-a3de-4481-936e-642e96d139ac",
        "cursor": {
          "ref": "0d1c1547-44ba-43a9-b15b-3064b9fae232",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5a895ca5-43af-4eda-880b-d18b22ed61ac"
        },
        "item": {
          "id": "858ed195-a3de-4481-936e-642e96d139ac",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2adf800e-43f3-4608-9364-952194063498",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7808e318-4435-47e8-8166-5bed851732fa",
        "cursor": {
          "ref": "660d5b7a-4ac4-474c-abaf-02a85862d98e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c503319b-29f0-4a93-b8bf-9aee9f1a088f"
        },
        "item": {
          "id": "7808e318-4435-47e8-8166-5bed851732fa",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "55ce1833-db23-43c4-a6dc-4263d79b41e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7808e318-4435-47e8-8166-5bed851732fa",
        "cursor": {
          "ref": "660d5b7a-4ac4-474c-abaf-02a85862d98e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c503319b-29f0-4a93-b8bf-9aee9f1a088f"
        },
        "item": {
          "id": "7808e318-4435-47e8-8166-5bed851732fa",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "55ce1833-db23-43c4-a6dc-4263d79b41e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1ac346-b6b9-442b-bbed-06f30fba204a",
        "cursor": {
          "ref": "6edccf1d-7488-44f6-9dca-97dcd4f31484",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bf8e7d10-ad09-46f7-9b12-ca9051be48a4"
        },
        "item": {
          "id": "db1ac346-b6b9-442b-bbed-06f30fba204a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bb634559-2d6e-486e-92b2-f08ac6c55094",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1ac346-b6b9-442b-bbed-06f30fba204a",
        "cursor": {
          "ref": "6edccf1d-7488-44f6-9dca-97dcd4f31484",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bf8e7d10-ad09-46f7-9b12-ca9051be48a4"
        },
        "item": {
          "id": "db1ac346-b6b9-442b-bbed-06f30fba204a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bb634559-2d6e-486e-92b2-f08ac6c55094",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3443245-a8f3-4aed-ac50-bf9491aa4586",
        "cursor": {
          "ref": "017ecab6-789a-4a97-bc13-4ad6bfe19be8",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "25126383-449b-460d-ae2f-282655be3111"
        },
        "item": {
          "id": "d3443245-a8f3-4aed-ac50-bf9491aa4586",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "896cde4f-f2ec-4057-b962-7aa0948f809a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3443245-a8f3-4aed-ac50-bf9491aa4586",
        "cursor": {
          "ref": "017ecab6-789a-4a97-bc13-4ad6bfe19be8",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "25126383-449b-460d-ae2f-282655be3111"
        },
        "item": {
          "id": "d3443245-a8f3-4aed-ac50-bf9491aa4586",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "896cde4f-f2ec-4057-b962-7aa0948f809a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba28d99-387c-40ba-a0b7-fc9b3d40c776",
        "cursor": {
          "ref": "aa29c914-f682-4902-8686-dca0b4bdda01",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a2db194d-5a73-4f29-97a4-d9182664de40"
        },
        "item": {
          "id": "5ba28d99-387c-40ba-a0b7-fc9b3d40c776",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "801346bd-696f-451b-aa35-b5cf6947c020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba28d99-387c-40ba-a0b7-fc9b3d40c776",
        "cursor": {
          "ref": "aa29c914-f682-4902-8686-dca0b4bdda01",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a2db194d-5a73-4f29-97a4-d9182664de40"
        },
        "item": {
          "id": "5ba28d99-387c-40ba-a0b7-fc9b3d40c776",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "801346bd-696f-451b-aa35-b5cf6947c020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f415f84-154b-4526-9f41-f73f82308101",
        "cursor": {
          "ref": "bafbcb36-6bfc-40bf-b962-b29843f09266",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b406e586-9bb0-4aa5-8ea4-cacd8e798a73"
        },
        "item": {
          "id": "5f415f84-154b-4526-9f41-f73f82308101",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "10bc79b3-ee36-46f8-b70e-e4b7d980d454",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f415f84-154b-4526-9f41-f73f82308101",
        "cursor": {
          "ref": "bafbcb36-6bfc-40bf-b962-b29843f09266",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b406e586-9bb0-4aa5-8ea4-cacd8e798a73"
        },
        "item": {
          "id": "5f415f84-154b-4526-9f41-f73f82308101",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "10bc79b3-ee36-46f8-b70e-e4b7d980d454",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2717ba8b-4ef2-4b19-bfb6-57f7c4937bed",
        "cursor": {
          "ref": "b0b0669b-4e4e-42f3-a8cc-8f59d5565364",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "00859291-4b7c-4716-b53d-fc357e6be279"
        },
        "item": {
          "id": "2717ba8b-4ef2-4b19-bfb6-57f7c4937bed",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "35b9f78f-4eac-4674-ad10-4bdc2a3b7c80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2717ba8b-4ef2-4b19-bfb6-57f7c4937bed",
        "cursor": {
          "ref": "b0b0669b-4e4e-42f3-a8cc-8f59d5565364",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "00859291-4b7c-4716-b53d-fc357e6be279"
        },
        "item": {
          "id": "2717ba8b-4ef2-4b19-bfb6-57f7c4937bed",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "35b9f78f-4eac-4674-ad10-4bdc2a3b7c80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8148f2b4-5ca0-4528-ad22-fe7c40b779b7",
        "cursor": {
          "ref": "5c4ec3e1-53b9-43c9-9dc8-d7ad5c947a65",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "32798ce5-9f97-4bb5-a2be-4a71f9c55309"
        },
        "item": {
          "id": "8148f2b4-5ca0-4528-ad22-fe7c40b779b7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6d776327-b10e-4518-8da3-fc6ac923490a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8148f2b4-5ca0-4528-ad22-fe7c40b779b7",
        "cursor": {
          "ref": "5c4ec3e1-53b9-43c9-9dc8-d7ad5c947a65",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "32798ce5-9f97-4bb5-a2be-4a71f9c55309"
        },
        "item": {
          "id": "8148f2b4-5ca0-4528-ad22-fe7c40b779b7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6d776327-b10e-4518-8da3-fc6ac923490a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0762f63-ea46-4874-beda-4fff4f834198",
        "cursor": {
          "ref": "3ccb0bf8-37d5-4397-b8f8-cf109d826eef",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ce187370-c827-4f06-bffe-b84868d30adb"
        },
        "item": {
          "id": "f0762f63-ea46-4874-beda-4fff4f834198",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9c19a4d1-af72-4808-aea1-be2dff77d742",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0762f63-ea46-4874-beda-4fff4f834198",
        "cursor": {
          "ref": "3ccb0bf8-37d5-4397-b8f8-cf109d826eef",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ce187370-c827-4f06-bffe-b84868d30adb"
        },
        "item": {
          "id": "f0762f63-ea46-4874-beda-4fff4f834198",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9c19a4d1-af72-4808-aea1-be2dff77d742",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24012ae6-11ee-4cba-8cf2-777f13e00211",
        "cursor": {
          "ref": "09c539d0-1fe4-43bc-a0f2-b6b81746e065",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "67ceb558-fee0-4feb-b03d-477b2e54238a"
        },
        "item": {
          "id": "24012ae6-11ee-4cba-8cf2-777f13e00211",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ea6fb23d-b279-4ef0-905a-a966060ac679",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24012ae6-11ee-4cba-8cf2-777f13e00211",
        "cursor": {
          "ref": "09c539d0-1fe4-43bc-a0f2-b6b81746e065",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "67ceb558-fee0-4feb-b03d-477b2e54238a"
        },
        "item": {
          "id": "24012ae6-11ee-4cba-8cf2-777f13e00211",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ea6fb23d-b279-4ef0-905a-a966060ac679",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26336ce5-3c11-4ad1-81ab-8faafa958156",
        "cursor": {
          "ref": "d9990fcf-c441-463d-a5ee-a23978e0b1bf",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ff46d6de-5fdf-4008-93e1-1f1c62540ae6"
        },
        "item": {
          "id": "26336ce5-3c11-4ad1-81ab-8faafa958156",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a0003ddc-b20f-42dd-8f30-f102f926803a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26336ce5-3c11-4ad1-81ab-8faafa958156",
        "cursor": {
          "ref": "d9990fcf-c441-463d-a5ee-a23978e0b1bf",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ff46d6de-5fdf-4008-93e1-1f1c62540ae6"
        },
        "item": {
          "id": "26336ce5-3c11-4ad1-81ab-8faafa958156",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a0003ddc-b20f-42dd-8f30-f102f926803a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9075b8b-db74-49b0-b412-2a92f793d5e3",
        "cursor": {
          "ref": "009ffee5-57bc-4ed5-af3a-f48ceb640221",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4cafdd18-6d95-4b1d-aefd-c6822edc7283"
        },
        "item": {
          "id": "f9075b8b-db74-49b0-b412-2a92f793d5e3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c78ded50-5e23-4996-a7ed-5f9268955ab8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9075b8b-db74-49b0-b412-2a92f793d5e3",
        "cursor": {
          "ref": "009ffee5-57bc-4ed5-af3a-f48ceb640221",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4cafdd18-6d95-4b1d-aefd-c6822edc7283"
        },
        "item": {
          "id": "f9075b8b-db74-49b0-b412-2a92f793d5e3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c78ded50-5e23-4996-a7ed-5f9268955ab8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d19fde-8d5a-4945-9d7a-b97b9774200b",
        "cursor": {
          "ref": "a9dd4cfd-a29a-4fc5-adb6-612171e2c17c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9e52c308-cf31-4b0d-a6b2-7dc77a83ba0a"
        },
        "item": {
          "id": "55d19fde-8d5a-4945-9d7a-b97b9774200b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "79fa1b41-a2a4-434f-b7f2-01216e6d1c2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d19fde-8d5a-4945-9d7a-b97b9774200b",
        "cursor": {
          "ref": "a9dd4cfd-a29a-4fc5-adb6-612171e2c17c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9e52c308-cf31-4b0d-a6b2-7dc77a83ba0a"
        },
        "item": {
          "id": "55d19fde-8d5a-4945-9d7a-b97b9774200b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "79fa1b41-a2a4-434f-b7f2-01216e6d1c2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ad8d2d-49fa-4088-bab1-1be0ae59d999",
        "cursor": {
          "ref": "b64b53b6-7104-4237-8673-681f18cef93d",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0a6cddd9-60e8-4167-b7d5-7987deefd3dd"
        },
        "item": {
          "id": "f6ad8d2d-49fa-4088-bab1-1be0ae59d999",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "89203e6e-9d27-4340-8c90-ae2bc60a9b7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ad8d2d-49fa-4088-bab1-1be0ae59d999",
        "cursor": {
          "ref": "b64b53b6-7104-4237-8673-681f18cef93d",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0a6cddd9-60e8-4167-b7d5-7987deefd3dd"
        },
        "item": {
          "id": "f6ad8d2d-49fa-4088-bab1-1be0ae59d999",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "89203e6e-9d27-4340-8c90-ae2bc60a9b7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5819e7-529d-4c5d-9ef5-8b9f0ed203a2",
        "cursor": {
          "ref": "2968edf1-c62f-4551-8748-e954612df23b",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "090a8f25-2566-4527-9160-dae152d939b2"
        },
        "item": {
          "id": "0f5819e7-529d-4c5d-9ef5-8b9f0ed203a2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "953b37f3-73c5-47d4-9e0d-bb1552f135d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5819e7-529d-4c5d-9ef5-8b9f0ed203a2",
        "cursor": {
          "ref": "2968edf1-c62f-4551-8748-e954612df23b",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "090a8f25-2566-4527-9160-dae152d939b2"
        },
        "item": {
          "id": "0f5819e7-529d-4c5d-9ef5-8b9f0ed203a2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "953b37f3-73c5-47d4-9e0d-bb1552f135d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6e908a-5ecd-4ecf-ac58-6532e46ed9c8",
        "cursor": {
          "ref": "173bf504-f100-4e02-a526-96956b91938f",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "da7921c3-0492-418a-a199-2b6611caa25e"
        },
        "item": {
          "id": "8d6e908a-5ecd-4ecf-ac58-6532e46ed9c8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a7aff2a4-6fa1-4afc-a910-5e5e12a4f333",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6e908a-5ecd-4ecf-ac58-6532e46ed9c8",
        "cursor": {
          "ref": "173bf504-f100-4e02-a526-96956b91938f",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "da7921c3-0492-418a-a199-2b6611caa25e"
        },
        "item": {
          "id": "8d6e908a-5ecd-4ecf-ac58-6532e46ed9c8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a7aff2a4-6fa1-4afc-a910-5e5e12a4f333",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64251aa9-9196-47f0-8519-ceef55716799",
        "cursor": {
          "ref": "9a8c5db5-46c3-4f05-ac5e-65f74a22bb9f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f507ff67-b248-43d0-b1f4-02cc46d7736e"
        },
        "item": {
          "id": "64251aa9-9196-47f0-8519-ceef55716799",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "46ed4f15-8daa-4aae-b622-c17014613c62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64251aa9-9196-47f0-8519-ceef55716799",
        "cursor": {
          "ref": "9a8c5db5-46c3-4f05-ac5e-65f74a22bb9f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f507ff67-b248-43d0-b1f4-02cc46d7736e"
        },
        "item": {
          "id": "64251aa9-9196-47f0-8519-ceef55716799",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "46ed4f15-8daa-4aae-b622-c17014613c62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195d098d-8c90-4480-a1f4-c9e2435a1c03",
        "cursor": {
          "ref": "6ef4240d-69e1-42fb-9720-c00b95209374",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "989b5505-39c4-4024-9b7f-4a88e6f44d9c"
        },
        "item": {
          "id": "195d098d-8c90-4480-a1f4-c9e2435a1c03",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7b94bbd5-6f10-4e07-8726-aee6619f2dfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195d098d-8c90-4480-a1f4-c9e2435a1c03",
        "cursor": {
          "ref": "6ef4240d-69e1-42fb-9720-c00b95209374",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "989b5505-39c4-4024-9b7f-4a88e6f44d9c"
        },
        "item": {
          "id": "195d098d-8c90-4480-a1f4-c9e2435a1c03",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7b94bbd5-6f10-4e07-8726-aee6619f2dfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a25918a-3272-4e4e-a8b7-e98530dbc77b",
        "cursor": {
          "ref": "ad5ee9b1-c7af-4c50-8485-759661925526",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "18624c40-091d-464c-84ca-6d5557843d67"
        },
        "item": {
          "id": "9a25918a-3272-4e4e-a8b7-e98530dbc77b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "40a8b3da-3718-4bc9-89bb-0efaf6be60e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a25918a-3272-4e4e-a8b7-e98530dbc77b",
        "cursor": {
          "ref": "ad5ee9b1-c7af-4c50-8485-759661925526",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "18624c40-091d-464c-84ca-6d5557843d67"
        },
        "item": {
          "id": "9a25918a-3272-4e4e-a8b7-e98530dbc77b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "40a8b3da-3718-4bc9-89bb-0efaf6be60e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d7efa9-9d09-40a8-ae52-10238ed28872",
        "cursor": {
          "ref": "6daff9ae-9570-4483-b3d6-df67ac9901a2",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "066188d3-1c87-4e15-80ca-75ecc00669c3"
        },
        "item": {
          "id": "02d7efa9-9d09-40a8-ae52-10238ed28872",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "52975916-65af-4748-b439-8a702feee4f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d7efa9-9d09-40a8-ae52-10238ed28872",
        "cursor": {
          "ref": "6daff9ae-9570-4483-b3d6-df67ac9901a2",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "066188d3-1c87-4e15-80ca-75ecc00669c3"
        },
        "item": {
          "id": "02d7efa9-9d09-40a8-ae52-10238ed28872",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "52975916-65af-4748-b439-8a702feee4f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5e56a4-e802-4fe1-be4d-c90640f27875",
        "cursor": {
          "ref": "033458d2-9b09-4e90-8b59-ce5db9c0b473",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "20a349bd-8961-49c9-b6bf-91e2a0356de0"
        },
        "item": {
          "id": "5f5e56a4-e802-4fe1-be4d-c90640f27875",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b7649146-50e4-4651-86ca-0c8f2d229ff4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5e56a4-e802-4fe1-be4d-c90640f27875",
        "cursor": {
          "ref": "033458d2-9b09-4e90-8b59-ce5db9c0b473",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "20a349bd-8961-49c9-b6bf-91e2a0356de0"
        },
        "item": {
          "id": "5f5e56a4-e802-4fe1-be4d-c90640f27875",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b7649146-50e4-4651-86ca-0c8f2d229ff4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe95f4a-d72f-4501-afc1-bed861004342",
        "cursor": {
          "ref": "b67eab2e-f023-4b75-b7ed-654b4c543201",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bbb3141b-8652-4842-b33b-1d2fd0353a53"
        },
        "item": {
          "id": "efe95f4a-d72f-4501-afc1-bed861004342",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b77b3964-a652-4e34-a2d5-3e0220784426",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe95f4a-d72f-4501-afc1-bed861004342",
        "cursor": {
          "ref": "b67eab2e-f023-4b75-b7ed-654b4c543201",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bbb3141b-8652-4842-b33b-1d2fd0353a53"
        },
        "item": {
          "id": "efe95f4a-d72f-4501-afc1-bed861004342",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b77b3964-a652-4e34-a2d5-3e0220784426",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6ab9a5-733f-484c-8e92-398c4340253e",
        "cursor": {
          "ref": "66cae98f-60ad-4e47-8722-502f254495c2",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0d695c6e-b429-4f4c-872c-37fac1e179c7"
        },
        "item": {
          "id": "1c6ab9a5-733f-484c-8e92-398c4340253e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8f51d801-ac44-44a8-8b0c-ff96b7c4de98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6ab9a5-733f-484c-8e92-398c4340253e",
        "cursor": {
          "ref": "66cae98f-60ad-4e47-8722-502f254495c2",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0d695c6e-b429-4f4c-872c-37fac1e179c7"
        },
        "item": {
          "id": "1c6ab9a5-733f-484c-8e92-398c4340253e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8f51d801-ac44-44a8-8b0c-ff96b7c4de98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256e5699-ed76-4de3-b7cc-d6b740374d66",
        "cursor": {
          "ref": "4e3e6af7-6f2a-426b-a86b-0197bf5c0418",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "13e5470c-6b36-45c6-b130-7532120255f0"
        },
        "item": {
          "id": "256e5699-ed76-4de3-b7cc-d6b740374d66",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9e8f31b2-0dd2-4497-bbb4-3cc2147ffbe2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256e5699-ed76-4de3-b7cc-d6b740374d66",
        "cursor": {
          "ref": "4e3e6af7-6f2a-426b-a86b-0197bf5c0418",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "13e5470c-6b36-45c6-b130-7532120255f0"
        },
        "item": {
          "id": "256e5699-ed76-4de3-b7cc-d6b740374d66",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9e8f31b2-0dd2-4497-bbb4-3cc2147ffbe2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f92c159-5d4d-434c-821c-df0735e1c30c",
        "cursor": {
          "ref": "d07c346a-7e86-431c-925b-24afe90decb6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b22d3348-0483-45c6-9d08-8764bbd6181c"
        },
        "item": {
          "id": "6f92c159-5d4d-434c-821c-df0735e1c30c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6a12e6ef-1a90-4560-a3dd-cd2689c6fd4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f92c159-5d4d-434c-821c-df0735e1c30c",
        "cursor": {
          "ref": "d07c346a-7e86-431c-925b-24afe90decb6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b22d3348-0483-45c6-9d08-8764bbd6181c"
        },
        "item": {
          "id": "6f92c159-5d4d-434c-821c-df0735e1c30c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6a12e6ef-1a90-4560-a3dd-cd2689c6fd4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b27a1f4-9669-4f05-8837-7d73baaa2442",
        "cursor": {
          "ref": "c68e5661-a432-4912-83ca-868d2727e1ce",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6cfc33a2-7f9a-4448-b7fc-94421f758ddc"
        },
        "item": {
          "id": "0b27a1f4-9669-4f05-8837-7d73baaa2442",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0c80d640-5272-432f-83d4-977ecf1c1de3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b27a1f4-9669-4f05-8837-7d73baaa2442",
        "cursor": {
          "ref": "c68e5661-a432-4912-83ca-868d2727e1ce",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6cfc33a2-7f9a-4448-b7fc-94421f758ddc"
        },
        "item": {
          "id": "0b27a1f4-9669-4f05-8837-7d73baaa2442",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0c80d640-5272-432f-83d4-977ecf1c1de3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342793d6-fc8c-4e62-b476-10c18655db29",
        "cursor": {
          "ref": "34d24d26-414b-4ccb-9065-112cf902d1c2",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "668fd41d-90b3-4269-a674-98001ba98cdc"
        },
        "item": {
          "id": "342793d6-fc8c-4e62-b476-10c18655db29",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "657873ca-46b7-4659-b089-a4be3d383eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342793d6-fc8c-4e62-b476-10c18655db29",
        "cursor": {
          "ref": "34d24d26-414b-4ccb-9065-112cf902d1c2",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "668fd41d-90b3-4269-a674-98001ba98cdc"
        },
        "item": {
          "id": "342793d6-fc8c-4e62-b476-10c18655db29",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "657873ca-46b7-4659-b089-a4be3d383eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec115ff-6d37-42d0-8c01-ca89604ccc22",
        "cursor": {
          "ref": "0411ee52-541a-4ca8-a4ec-ab9b8258d11e",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1cd64ae4-6b33-4f0f-926f-b3baa30eb44e"
        },
        "item": {
          "id": "8ec115ff-6d37-42d0-8c01-ca89604ccc22",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "80c9aefc-4f55-47eb-8850-4ad1e091600f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec115ff-6d37-42d0-8c01-ca89604ccc22",
        "cursor": {
          "ref": "0411ee52-541a-4ca8-a4ec-ab9b8258d11e",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1cd64ae4-6b33-4f0f-926f-b3baa30eb44e"
        },
        "item": {
          "id": "8ec115ff-6d37-42d0-8c01-ca89604ccc22",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "80c9aefc-4f55-47eb-8850-4ad1e091600f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ce7d38-e332-47a0-854a-e8091a2daa8a",
        "cursor": {
          "ref": "7eb14aff-4c23-4c05-8e9a-59f8ccbdef7c",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d069246e-c7e6-4754-b8c1-33e0918410ad"
        },
        "item": {
          "id": "b6ce7d38-e332-47a0-854a-e8091a2daa8a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0cd6f47f-fb72-4fe4-83a4-36818d76ab50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ce7d38-e332-47a0-854a-e8091a2daa8a",
        "cursor": {
          "ref": "7eb14aff-4c23-4c05-8e9a-59f8ccbdef7c",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d069246e-c7e6-4754-b8c1-33e0918410ad"
        },
        "item": {
          "id": "b6ce7d38-e332-47a0-854a-e8091a2daa8a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0cd6f47f-fb72-4fe4-83a4-36818d76ab50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0414ef3b-5c7e-48ee-8c23-4c31b0618364",
        "cursor": {
          "ref": "7a26e423-4466-4629-b734-6498f249e31d",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "72f73364-e0bf-48af-9288-8ebcc9f99aeb"
        },
        "item": {
          "id": "0414ef3b-5c7e-48ee-8c23-4c31b0618364",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1999a45d-502e-448b-a99c-7a11377ad677",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0414ef3b-5c7e-48ee-8c23-4c31b0618364",
        "cursor": {
          "ref": "7a26e423-4466-4629-b734-6498f249e31d",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "72f73364-e0bf-48af-9288-8ebcc9f99aeb"
        },
        "item": {
          "id": "0414ef3b-5c7e-48ee-8c23-4c31b0618364",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1999a45d-502e-448b-a99c-7a11377ad677",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6073232a-728e-42df-bcff-2413b4ddb64b",
        "cursor": {
          "ref": "623167b6-8813-4bfb-bd37-2bc248d1e734",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1a9aff2f-d9e3-45fd-8691-4fc007e0211f"
        },
        "item": {
          "id": "6073232a-728e-42df-bcff-2413b4ddb64b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f4d8b61e-5ecb-4622-b683-e9f92c1f4dd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6073232a-728e-42df-bcff-2413b4ddb64b",
        "cursor": {
          "ref": "623167b6-8813-4bfb-bd37-2bc248d1e734",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1a9aff2f-d9e3-45fd-8691-4fc007e0211f"
        },
        "item": {
          "id": "6073232a-728e-42df-bcff-2413b4ddb64b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f4d8b61e-5ecb-4622-b683-e9f92c1f4dd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fc9cce-da7b-44ff-8ea2-6aeb254b1ef5",
        "cursor": {
          "ref": "53161850-e025-42ab-b87e-a117829f6001",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "db317fbb-a146-4a6b-bdfb-4ef7872c0dd0"
        },
        "item": {
          "id": "77fc9cce-da7b-44ff-8ea2-6aeb254b1ef5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bf655f83-589e-4ac0-bdc3-cbb1d1858526",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fc9cce-da7b-44ff-8ea2-6aeb254b1ef5",
        "cursor": {
          "ref": "53161850-e025-42ab-b87e-a117829f6001",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "db317fbb-a146-4a6b-bdfb-4ef7872c0dd0"
        },
        "item": {
          "id": "77fc9cce-da7b-44ff-8ea2-6aeb254b1ef5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bf655f83-589e-4ac0-bdc3-cbb1d1858526",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be026c66-6c54-40b1-a2cb-ea077240e0ac",
        "cursor": {
          "ref": "2e3e47f9-5f8f-4d9a-9842-047f27700b68",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "006c1813-d5f2-4c8a-a2f8-5862bd7b97b9"
        },
        "item": {
          "id": "be026c66-6c54-40b1-a2cb-ea077240e0ac",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cd92c637-87e8-4d05-b733-65743e443ee2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be026c66-6c54-40b1-a2cb-ea077240e0ac",
        "cursor": {
          "ref": "2e3e47f9-5f8f-4d9a-9842-047f27700b68",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "006c1813-d5f2-4c8a-a2f8-5862bd7b97b9"
        },
        "item": {
          "id": "be026c66-6c54-40b1-a2cb-ea077240e0ac",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cd92c637-87e8-4d05-b733-65743e443ee2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fe57d1-b640-4fa7-8b80-0dcdb31a40b1",
        "cursor": {
          "ref": "daaa519f-c127-42c0-af8d-c302322068de",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d2562cba-209f-4b6a-a5bf-5d6fae37b3ff"
        },
        "item": {
          "id": "41fe57d1-b640-4fa7-8b80-0dcdb31a40b1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9649cc55-5db2-4e55-867b-db1fa1f89e66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fe57d1-b640-4fa7-8b80-0dcdb31a40b1",
        "cursor": {
          "ref": "daaa519f-c127-42c0-af8d-c302322068de",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d2562cba-209f-4b6a-a5bf-5d6fae37b3ff"
        },
        "item": {
          "id": "41fe57d1-b640-4fa7-8b80-0dcdb31a40b1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9649cc55-5db2-4e55-867b-db1fa1f89e66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a197064-f0d3-438b-9dd7-3e20b98b4422",
        "cursor": {
          "ref": "9bfa5566-e1dd-48dc-9e77-ca6b1a100458",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b296d46b-6600-4558-9763-af9fd67e8ac1"
        },
        "item": {
          "id": "6a197064-f0d3-438b-9dd7-3e20b98b4422",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "62296190-f288-4319-83eb-20203652f8fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a197064-f0d3-438b-9dd7-3e20b98b4422",
        "cursor": {
          "ref": "9bfa5566-e1dd-48dc-9e77-ca6b1a100458",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b296d46b-6600-4558-9763-af9fd67e8ac1"
        },
        "item": {
          "id": "6a197064-f0d3-438b-9dd7-3e20b98b4422",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "62296190-f288-4319-83eb-20203652f8fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee3f5af-0154-4b8a-a23d-1e18929e6075",
        "cursor": {
          "ref": "5bb53ff1-85be-4581-8613-b3243cd31df6",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "89ffa2c2-e880-415e-8eb3-66f1e466979a"
        },
        "item": {
          "id": "eee3f5af-0154-4b8a-a23d-1e18929e6075",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e379619e-9a37-49ae-ad2d-730f39b66241",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 159,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee3f5af-0154-4b8a-a23d-1e18929e6075",
        "cursor": {
          "ref": "5bb53ff1-85be-4581-8613-b3243cd31df6",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "89ffa2c2-e880-415e-8eb3-66f1e466979a"
        },
        "item": {
          "id": "eee3f5af-0154-4b8a-a23d-1e18929e6075",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e379619e-9a37-49ae-ad2d-730f39b66241",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 159,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dc6e47-1de4-4572-8e37-c78c05a8b156",
        "cursor": {
          "ref": "a9a03b0f-223f-42b8-8919-76d28ed341cf",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6d29df21-3831-4a38-8c29-4241635ee67f"
        },
        "item": {
          "id": "d9dc6e47-1de4-4572-8e37-c78c05a8b156",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2be878e5-5ee8-4a56-a667-11b71594697f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dc6e47-1de4-4572-8e37-c78c05a8b156",
        "cursor": {
          "ref": "a9a03b0f-223f-42b8-8919-76d28ed341cf",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6d29df21-3831-4a38-8c29-4241635ee67f"
        },
        "item": {
          "id": "d9dc6e47-1de4-4572-8e37-c78c05a8b156",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2be878e5-5ee8-4a56-a667-11b71594697f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f81847-4d54-4d35-811d-7edf43c91ced",
        "cursor": {
          "ref": "01a9dc96-c8c8-401f-8e53-4742d2ad7f24",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7a61d9f3-3b13-4f2a-a686-4dafb20d765d"
        },
        "item": {
          "id": "63f81847-4d54-4d35-811d-7edf43c91ced",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8cb30b6a-d349-49b4-85c4-811087e7be76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f81847-4d54-4d35-811d-7edf43c91ced",
        "cursor": {
          "ref": "01a9dc96-c8c8-401f-8e53-4742d2ad7f24",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7a61d9f3-3b13-4f2a-a686-4dafb20d765d"
        },
        "item": {
          "id": "63f81847-4d54-4d35-811d-7edf43c91ced",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8cb30b6a-d349-49b4-85c4-811087e7be76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55efbc6a-7e95-4619-8210-5d6debedba81",
        "cursor": {
          "ref": "1ff8480e-3acc-421a-9008-564328afd646",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "aea01a05-12b6-4b6e-a0d8-677442968497"
        },
        "item": {
          "id": "55efbc6a-7e95-4619-8210-5d6debedba81",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3f1584a5-1d06-4aee-a1ab-1c5c8dca557e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55efbc6a-7e95-4619-8210-5d6debedba81",
        "cursor": {
          "ref": "1ff8480e-3acc-421a-9008-564328afd646",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "aea01a05-12b6-4b6e-a0d8-677442968497"
        },
        "item": {
          "id": "55efbc6a-7e95-4619-8210-5d6debedba81",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3f1584a5-1d06-4aee-a1ab-1c5c8dca557e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b48ce46-31e0-41a6-aef2-475fb394bfef",
        "cursor": {
          "ref": "b643fe3f-cb9c-4cd8-9d4d-a981933eef8a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fbe3cc49-eef1-49ad-a83d-eba9b06a32d5"
        },
        "item": {
          "id": "0b48ce46-31e0-41a6-aef2-475fb394bfef",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3779ee29-0f0b-495c-b772-f96c451c21d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b48ce46-31e0-41a6-aef2-475fb394bfef",
        "cursor": {
          "ref": "b643fe3f-cb9c-4cd8-9d4d-a981933eef8a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fbe3cc49-eef1-49ad-a83d-eba9b06a32d5"
        },
        "item": {
          "id": "0b48ce46-31e0-41a6-aef2-475fb394bfef",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3779ee29-0f0b-495c-b772-f96c451c21d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ef8c28-4b6f-4aa8-85c8-724d21f8dfa9",
        "cursor": {
          "ref": "901f2b16-dab7-4e6d-8dd5-f67d86aa5e38",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ef96fea9-8c96-435b-9f49-2b0d98dc511e"
        },
        "item": {
          "id": "e2ef8c28-4b6f-4aa8-85c8-724d21f8dfa9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d07ce204-7099-493f-a766-8afb7ade4a89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ef8c28-4b6f-4aa8-85c8-724d21f8dfa9",
        "cursor": {
          "ref": "901f2b16-dab7-4e6d-8dd5-f67d86aa5e38",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ef96fea9-8c96-435b-9f49-2b0d98dc511e"
        },
        "item": {
          "id": "e2ef8c28-4b6f-4aa8-85c8-724d21f8dfa9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d07ce204-7099-493f-a766-8afb7ade4a89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3028055-5b3e-401b-a660-dc10fc607abd",
        "cursor": {
          "ref": "107baeb0-9824-429d-8abe-d0f2e29f0fcf",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3e8d2895-6153-4432-b246-c985644dd237"
        },
        "item": {
          "id": "b3028055-5b3e-401b-a660-dc10fc607abd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ac975567-df3f-4719-8c2c-15cba02c45ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3028055-5b3e-401b-a660-dc10fc607abd",
        "cursor": {
          "ref": "107baeb0-9824-429d-8abe-d0f2e29f0fcf",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3e8d2895-6153-4432-b246-c985644dd237"
        },
        "item": {
          "id": "b3028055-5b3e-401b-a660-dc10fc607abd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ac975567-df3f-4719-8c2c-15cba02c45ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fdabd7-74e8-438f-9207-e0fff344a4c2",
        "cursor": {
          "ref": "a30b51b3-50be-46b8-9870-58620e9f14da",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "606caa1a-3e39-429c-a436-ab6bc01781e3"
        },
        "item": {
          "id": "16fdabd7-74e8-438f-9207-e0fff344a4c2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0bf59d18-96a0-44b9-a9a6-efa94b09ac93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fdabd7-74e8-438f-9207-e0fff344a4c2",
        "cursor": {
          "ref": "a30b51b3-50be-46b8-9870-58620e9f14da",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "606caa1a-3e39-429c-a436-ab6bc01781e3"
        },
        "item": {
          "id": "16fdabd7-74e8-438f-9207-e0fff344a4c2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0bf59d18-96a0-44b9-a9a6-efa94b09ac93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c95b68-bd66-4647-9725-3ecd462e9af7",
        "cursor": {
          "ref": "9faab01c-7d5b-4235-9e99-527ec1dee076",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e3f4d607-dac8-4e8d-a99f-5c8ec0f8b8b7"
        },
        "item": {
          "id": "15c95b68-bd66-4647-9725-3ecd462e9af7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6d969358-e0e3-4c84-a6de-959d8edb54e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c95b68-bd66-4647-9725-3ecd462e9af7",
        "cursor": {
          "ref": "9faab01c-7d5b-4235-9e99-527ec1dee076",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e3f4d607-dac8-4e8d-a99f-5c8ec0f8b8b7"
        },
        "item": {
          "id": "15c95b68-bd66-4647-9725-3ecd462e9af7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6d969358-e0e3-4c84-a6de-959d8edb54e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8da4a3-9013-4a92-b6e8-bd0eac698d12",
        "cursor": {
          "ref": "73b87d6d-7b39-4025-b663-3d1424a228c5",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "76e39142-e77a-49c0-803c-e4c956d5d8e7"
        },
        "item": {
          "id": "cd8da4a3-9013-4a92-b6e8-bd0eac698d12",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "48314054-6a81-4f22-894b-37af47998fa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8da4a3-9013-4a92-b6e8-bd0eac698d12",
        "cursor": {
          "ref": "73b87d6d-7b39-4025-b663-3d1424a228c5",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "76e39142-e77a-49c0-803c-e4c956d5d8e7"
        },
        "item": {
          "id": "cd8da4a3-9013-4a92-b6e8-bd0eac698d12",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "48314054-6a81-4f22-894b-37af47998fa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e7fbc1-d616-4f7d-8143-cc8a2ad2fdd6",
        "cursor": {
          "ref": "b855e1a5-bfdb-4d2f-bc3a-68f7c753f267",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "15048be2-b469-4732-9fe5-e12a4bd9e29b"
        },
        "item": {
          "id": "65e7fbc1-d616-4f7d-8143-cc8a2ad2fdd6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0c0b7d9d-6ba4-45f8-a2de-3e8ff0964de8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e7fbc1-d616-4f7d-8143-cc8a2ad2fdd6",
        "cursor": {
          "ref": "b855e1a5-bfdb-4d2f-bc3a-68f7c753f267",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "15048be2-b469-4732-9fe5-e12a4bd9e29b"
        },
        "item": {
          "id": "65e7fbc1-d616-4f7d-8143-cc8a2ad2fdd6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0c0b7d9d-6ba4-45f8-a2de-3e8ff0964de8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73968210-9d86-47aa-8dc5-c31311b15105",
        "cursor": {
          "ref": "8f894458-50a5-4e5b-a39b-ee07884fb8ed",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "58f1e829-65a1-457d-b39a-ec88960770b1"
        },
        "item": {
          "id": "73968210-9d86-47aa-8dc5-c31311b15105",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6976ebd7-f668-474b-b082-551165d9c522",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73968210-9d86-47aa-8dc5-c31311b15105",
        "cursor": {
          "ref": "8f894458-50a5-4e5b-a39b-ee07884fb8ed",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "58f1e829-65a1-457d-b39a-ec88960770b1"
        },
        "item": {
          "id": "73968210-9d86-47aa-8dc5-c31311b15105",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6976ebd7-f668-474b-b082-551165d9c522",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad0d6ec-114e-4bdc-9faf-5932990d80e1",
        "cursor": {
          "ref": "d535ea25-9d97-4e34-a605-6d3a3a4b044f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "efd60c24-210d-4b1a-b844-de85c61c93a8"
        },
        "item": {
          "id": "0ad0d6ec-114e-4bdc-9faf-5932990d80e1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a36e06bf-9551-46aa-8c56-7fdeee125e36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad0d6ec-114e-4bdc-9faf-5932990d80e1",
        "cursor": {
          "ref": "d535ea25-9d97-4e34-a605-6d3a3a4b044f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "efd60c24-210d-4b1a-b844-de85c61c93a8"
        },
        "item": {
          "id": "0ad0d6ec-114e-4bdc-9faf-5932990d80e1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a36e06bf-9551-46aa-8c56-7fdeee125e36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e684504-00a0-44d7-a3c7-509d8dd663d4",
        "cursor": {
          "ref": "13877ec9-5b47-42c9-83d6-42fa40d0f306",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fab6fc77-95a3-4ff2-bcff-2f5e8258f17e"
        },
        "item": {
          "id": "2e684504-00a0-44d7-a3c7-509d8dd663d4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ea40d54a-1a4c-4c6a-9bd3-71f7e7982579",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e684504-00a0-44d7-a3c7-509d8dd663d4",
        "cursor": {
          "ref": "13877ec9-5b47-42c9-83d6-42fa40d0f306",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fab6fc77-95a3-4ff2-bcff-2f5e8258f17e"
        },
        "item": {
          "id": "2e684504-00a0-44d7-a3c7-509d8dd663d4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ea40d54a-1a4c-4c6a-9bd3-71f7e7982579",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa6388b-8d7e-4e10-8dd6-1bd1e1c725b6",
        "cursor": {
          "ref": "dda52972-6770-499e-9509-3c6ae38b57f1",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9f776d37-a161-44d9-ba48-697250ade706"
        },
        "item": {
          "id": "0aa6388b-8d7e-4e10-8dd6-1bd1e1c725b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "150921ae-6fbb-4dfe-bb42-87e72cdf0cb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa6388b-8d7e-4e10-8dd6-1bd1e1c725b6",
        "cursor": {
          "ref": "dda52972-6770-499e-9509-3c6ae38b57f1",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9f776d37-a161-44d9-ba48-697250ade706"
        },
        "item": {
          "id": "0aa6388b-8d7e-4e10-8dd6-1bd1e1c725b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "150921ae-6fbb-4dfe-bb42-87e72cdf0cb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f4ace0-0432-4439-8453-4f8553880cb0",
        "cursor": {
          "ref": "07dc4bab-f5e7-45b5-9318-4a98ce5a485c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1d92d0a8-0924-4aa7-bcf8-d152f754be1b"
        },
        "item": {
          "id": "47f4ace0-0432-4439-8453-4f8553880cb0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bab2eb0b-5557-43e4-93c8-df51073ef6de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f4ace0-0432-4439-8453-4f8553880cb0",
        "cursor": {
          "ref": "07dc4bab-f5e7-45b5-9318-4a98ce5a485c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1d92d0a8-0924-4aa7-bcf8-d152f754be1b"
        },
        "item": {
          "id": "47f4ace0-0432-4439-8453-4f8553880cb0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bab2eb0b-5557-43e4-93c8-df51073ef6de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff606994-9b6e-41fc-9418-ebb4909df146",
        "cursor": {
          "ref": "115a0a0c-69df-4ace-bd54-a9e25cdd4ff3",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "39529a47-a54d-4ffb-b6ee-5e13b4aca3e2"
        },
        "item": {
          "id": "ff606994-9b6e-41fc-9418-ebb4909df146",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ccbd2d27-dccf-4148-8998-52d8f10c970a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff606994-9b6e-41fc-9418-ebb4909df146",
        "cursor": {
          "ref": "115a0a0c-69df-4ace-bd54-a9e25cdd4ff3",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "39529a47-a54d-4ffb-b6ee-5e13b4aca3e2"
        },
        "item": {
          "id": "ff606994-9b6e-41fc-9418-ebb4909df146",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ccbd2d27-dccf-4148-8998-52d8f10c970a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31f9eb1-1b95-44ef-b846-51be03c1264f",
        "cursor": {
          "ref": "90576c0d-cc54-4f4c-a62c-bf212066a847",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "587f078b-1cad-4a2e-90d7-8b1a1be82084"
        },
        "item": {
          "id": "c31f9eb1-1b95-44ef-b846-51be03c1264f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fe2de98f-a5e9-433c-ae36-a456deb2a7c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31f9eb1-1b95-44ef-b846-51be03c1264f",
        "cursor": {
          "ref": "90576c0d-cc54-4f4c-a62c-bf212066a847",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "587f078b-1cad-4a2e-90d7-8b1a1be82084"
        },
        "item": {
          "id": "c31f9eb1-1b95-44ef-b846-51be03c1264f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fe2de98f-a5e9-433c-ae36-a456deb2a7c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d05792-f33d-436d-b8cc-8a0fbd940054",
        "cursor": {
          "ref": "39a17a67-5bdb-40fa-abc4-fcfbab501da8",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5be75c33-2e7c-4397-a477-812da8d24512"
        },
        "item": {
          "id": "d3d05792-f33d-436d-b8cc-8a0fbd940054",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d4a872a6-d579-4c88-acda-629ada662435",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d05792-f33d-436d-b8cc-8a0fbd940054",
        "cursor": {
          "ref": "39a17a67-5bdb-40fa-abc4-fcfbab501da8",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5be75c33-2e7c-4397-a477-812da8d24512"
        },
        "item": {
          "id": "d3d05792-f33d-436d-b8cc-8a0fbd940054",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d4a872a6-d579-4c88-acda-629ada662435",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3d0c7b-898c-4f9f-900c-a108f8a4bb6b",
        "cursor": {
          "ref": "57e3a3c6-272b-41e9-a8a3-48fed658628c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f572bb9e-6558-4964-baf5-761ebb851b48"
        },
        "item": {
          "id": "6d3d0c7b-898c-4f9f-900c-a108f8a4bb6b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e7a80b74-33b7-4b7a-affc-43f43142ecfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3d0c7b-898c-4f9f-900c-a108f8a4bb6b",
        "cursor": {
          "ref": "57e3a3c6-272b-41e9-a8a3-48fed658628c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f572bb9e-6558-4964-baf5-761ebb851b48"
        },
        "item": {
          "id": "6d3d0c7b-898c-4f9f-900c-a108f8a4bb6b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e7a80b74-33b7-4b7a-affc-43f43142ecfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025458fb-a23a-4f56-9bc2-bf5f09a1199f",
        "cursor": {
          "ref": "4f6e9406-76e5-41e7-aaa7-41556f16fae9",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e2cd2fac-576c-4453-a4f7-86c91134b512"
        },
        "item": {
          "id": "025458fb-a23a-4f56-9bc2-bf5f09a1199f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7145419b-ed21-4a5b-94a5-e7ba9a1216bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025458fb-a23a-4f56-9bc2-bf5f09a1199f",
        "cursor": {
          "ref": "4f6e9406-76e5-41e7-aaa7-41556f16fae9",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e2cd2fac-576c-4453-a4f7-86c91134b512"
        },
        "item": {
          "id": "025458fb-a23a-4f56-9bc2-bf5f09a1199f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7145419b-ed21-4a5b-94a5-e7ba9a1216bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb6802a-439f-4d41-93d8-b1eb0c98aedb",
        "cursor": {
          "ref": "8301d935-a842-491a-904f-f5646499629f",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b324d0ff-e368-4be3-885d-5ad74109a909"
        },
        "item": {
          "id": "1fb6802a-439f-4d41-93d8-b1eb0c98aedb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1d511559-45a9-491f-99f8-4fbffa14a6eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb6802a-439f-4d41-93d8-b1eb0c98aedb",
        "cursor": {
          "ref": "8301d935-a842-491a-904f-f5646499629f",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b324d0ff-e368-4be3-885d-5ad74109a909"
        },
        "item": {
          "id": "1fb6802a-439f-4d41-93d8-b1eb0c98aedb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1d511559-45a9-491f-99f8-4fbffa14a6eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17a3075-69ce-4844-b91d-35fd5d852401",
        "cursor": {
          "ref": "5f2dd2d3-2949-47ab-908a-398d39036df5",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1232dd21-5644-41dd-8cf9-10a3c8e573ec"
        },
        "item": {
          "id": "c17a3075-69ce-4844-b91d-35fd5d852401",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f7fa19ca-58e2-40e2-99d9-5d8aa4790ace",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17a3075-69ce-4844-b91d-35fd5d852401",
        "cursor": {
          "ref": "5f2dd2d3-2949-47ab-908a-398d39036df5",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1232dd21-5644-41dd-8cf9-10a3c8e573ec"
        },
        "item": {
          "id": "c17a3075-69ce-4844-b91d-35fd5d852401",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f7fa19ca-58e2-40e2-99d9-5d8aa4790ace",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76e2bb5-a314-47bb-ba2d-3e29b6d5e13f",
        "cursor": {
          "ref": "85b39a77-faed-4a1d-908b-690e5cce6cec",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "afb150b3-44b2-48c8-b744-09e97e73b67a"
        },
        "item": {
          "id": "c76e2bb5-a314-47bb-ba2d-3e29b6d5e13f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5786f75f-9b88-49da-a8a2-c1bc20fffc00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76e2bb5-a314-47bb-ba2d-3e29b6d5e13f",
        "cursor": {
          "ref": "85b39a77-faed-4a1d-908b-690e5cce6cec",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "afb150b3-44b2-48c8-b744-09e97e73b67a"
        },
        "item": {
          "id": "c76e2bb5-a314-47bb-ba2d-3e29b6d5e13f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5786f75f-9b88-49da-a8a2-c1bc20fffc00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b97280-6a3d-4c43-8032-6039a579948b",
        "cursor": {
          "ref": "6a8048a8-3bc3-417c-9daf-f1fc368e3a91",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "29a67511-5025-451b-a179-28a13fbf0272"
        },
        "item": {
          "id": "b2b97280-6a3d-4c43-8032-6039a579948b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e2f75805-822f-4741-8138-62255034d557",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b97280-6a3d-4c43-8032-6039a579948b",
        "cursor": {
          "ref": "6a8048a8-3bc3-417c-9daf-f1fc368e3a91",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "29a67511-5025-451b-a179-28a13fbf0272"
        },
        "item": {
          "id": "b2b97280-6a3d-4c43-8032-6039a579948b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e2f75805-822f-4741-8138-62255034d557",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12e5303-edcd-41e7-8d59-7bcef4ef5807",
        "cursor": {
          "ref": "e232cdac-4fce-4073-8e78-4b87f8db3203",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "094cb710-d70b-402b-a897-7531ecba6a12"
        },
        "item": {
          "id": "f12e5303-edcd-41e7-8d59-7bcef4ef5807",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "95c6aeb1-e9c7-4934-98a7-54c91a30d00d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12e5303-edcd-41e7-8d59-7bcef4ef5807",
        "cursor": {
          "ref": "e232cdac-4fce-4073-8e78-4b87f8db3203",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "094cb710-d70b-402b-a897-7531ecba6a12"
        },
        "item": {
          "id": "f12e5303-edcd-41e7-8d59-7bcef4ef5807",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "95c6aeb1-e9c7-4934-98a7-54c91a30d00d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1def8b14-c86c-417d-a062-2f3883d7680c",
        "cursor": {
          "ref": "0b35f388-cda2-4fef-b4a1-35b35ef2ec04",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3af68e65-03c3-4b48-81c9-46562bc698f1"
        },
        "item": {
          "id": "1def8b14-c86c-417d-a062-2f3883d7680c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "80748af1-8ed6-4b7e-8afe-38b7c4e97eac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1def8b14-c86c-417d-a062-2f3883d7680c",
        "cursor": {
          "ref": "0b35f388-cda2-4fef-b4a1-35b35ef2ec04",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3af68e65-03c3-4b48-81c9-46562bc698f1"
        },
        "item": {
          "id": "1def8b14-c86c-417d-a062-2f3883d7680c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "80748af1-8ed6-4b7e-8afe-38b7c4e97eac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1792ed16-a25c-46d6-ab3e-ffcd9c2266d7",
        "cursor": {
          "ref": "c3e3c34b-bf7b-46df-b554-507e5cba1a51",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9ed757cf-89ca-496b-b118-991cc23aee2c"
        },
        "item": {
          "id": "1792ed16-a25c-46d6-ab3e-ffcd9c2266d7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9751a664-d2d2-479b-8a5e-1542fa42aa19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1792ed16-a25c-46d6-ab3e-ffcd9c2266d7",
        "cursor": {
          "ref": "c3e3c34b-bf7b-46df-b554-507e5cba1a51",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9ed757cf-89ca-496b-b118-991cc23aee2c"
        },
        "item": {
          "id": "1792ed16-a25c-46d6-ab3e-ffcd9c2266d7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9751a664-d2d2-479b-8a5e-1542fa42aa19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ada59a-d1e0-4aec-8160-e7207404f6fe",
        "cursor": {
          "ref": "740fd8c7-9683-40f2-9b71-44fdbb3124b1",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38b7129e-ff0e-4cf9-b9cf-3b3fb4e8db63"
        },
        "item": {
          "id": "d8ada59a-d1e0-4aec-8160-e7207404f6fe",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5f6ff8f5-516a-4f3b-b118-7269babc0476",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ada59a-d1e0-4aec-8160-e7207404f6fe",
        "cursor": {
          "ref": "740fd8c7-9683-40f2-9b71-44fdbb3124b1",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38b7129e-ff0e-4cf9-b9cf-3b3fb4e8db63"
        },
        "item": {
          "id": "d8ada59a-d1e0-4aec-8160-e7207404f6fe",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5f6ff8f5-516a-4f3b-b118-7269babc0476",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1ed878-b17b-4520-9eda-908cce4b79b6",
        "cursor": {
          "ref": "5ecfed03-5f94-4b1c-88c4-e1921d44c714",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6175eccd-1408-42fd-ad6a-976f00084b33"
        },
        "item": {
          "id": "3a1ed878-b17b-4520-9eda-908cce4b79b6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f234e1cd-6ab4-43c7-b99d-06c56e3d3d06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1ed878-b17b-4520-9eda-908cce4b79b6",
        "cursor": {
          "ref": "5ecfed03-5f94-4b1c-88c4-e1921d44c714",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6175eccd-1408-42fd-ad6a-976f00084b33"
        },
        "item": {
          "id": "3a1ed878-b17b-4520-9eda-908cce4b79b6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f234e1cd-6ab4-43c7-b99d-06c56e3d3d06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8f9daf-f002-4389-888d-5d5b3c28ddd9",
        "cursor": {
          "ref": "e008b576-c5bf-4844-8d0b-f9ef63b42455",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7937cb47-33e9-41e7-8711-bbbff45fa3ce"
        },
        "item": {
          "id": "0c8f9daf-f002-4389-888d-5d5b3c28ddd9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c83018d6-5dd6-49d1-8e22-0339259843ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8f9daf-f002-4389-888d-5d5b3c28ddd9",
        "cursor": {
          "ref": "e008b576-c5bf-4844-8d0b-f9ef63b42455",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7937cb47-33e9-41e7-8711-bbbff45fa3ce"
        },
        "item": {
          "id": "0c8f9daf-f002-4389-888d-5d5b3c28ddd9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c83018d6-5dd6-49d1-8e22-0339259843ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6345983d-e2ab-4874-8b0c-eb16c11df26c",
        "cursor": {
          "ref": "99b6ef38-dcb4-4857-bd49-afa2004a4bc5",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c2bbd3ea-aaf4-4ec1-8dde-419f012ce5b2"
        },
        "item": {
          "id": "6345983d-e2ab-4874-8b0c-eb16c11df26c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "541bc423-537c-4eca-b370-f2a2126f4ca6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6345983d-e2ab-4874-8b0c-eb16c11df26c",
        "cursor": {
          "ref": "99b6ef38-dcb4-4857-bd49-afa2004a4bc5",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c2bbd3ea-aaf4-4ec1-8dde-419f012ce5b2"
        },
        "item": {
          "id": "6345983d-e2ab-4874-8b0c-eb16c11df26c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "541bc423-537c-4eca-b370-f2a2126f4ca6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5b1b30-4d89-4bc5-89f8-24f044f01f65",
        "cursor": {
          "ref": "79b20920-79f3-4f21-a5c8-3907c5fa8d3f",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b9f91077-f298-4f8c-8774-711e1b299c0f"
        },
        "item": {
          "id": "ff5b1b30-4d89-4bc5-89f8-24f044f01f65",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b4639e57-62e5-4474-883f-3a78754157b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5b1b30-4d89-4bc5-89f8-24f044f01f65",
        "cursor": {
          "ref": "79b20920-79f3-4f21-a5c8-3907c5fa8d3f",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b9f91077-f298-4f8c-8774-711e1b299c0f"
        },
        "item": {
          "id": "ff5b1b30-4d89-4bc5-89f8-24f044f01f65",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b4639e57-62e5-4474-883f-3a78754157b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fdbef8-64bb-4baf-98e3-b3f5cd7b8d9e",
        "cursor": {
          "ref": "46e7d860-b72a-4308-bc3b-2fcbbc7da13c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5446df57-b24c-46ae-aa9a-1bca48f1e0e2"
        },
        "item": {
          "id": "d4fdbef8-64bb-4baf-98e3-b3f5cd7b8d9e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1e226f5d-5b93-43b6-87e1-c85eea30261f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fdbef8-64bb-4baf-98e3-b3f5cd7b8d9e",
        "cursor": {
          "ref": "46e7d860-b72a-4308-bc3b-2fcbbc7da13c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5446df57-b24c-46ae-aa9a-1bca48f1e0e2"
        },
        "item": {
          "id": "d4fdbef8-64bb-4baf-98e3-b3f5cd7b8d9e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1e226f5d-5b93-43b6-87e1-c85eea30261f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d040663-032c-40f0-8ece-e28a803dbf92",
        "cursor": {
          "ref": "8bdff8eb-f8a3-4954-8203-3779f5c7df37",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f686aa56-e10c-416f-a12f-9f029f94a98e"
        },
        "item": {
          "id": "9d040663-032c-40f0-8ece-e28a803dbf92",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "62752d14-c922-494f-9778-538527adff9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d040663-032c-40f0-8ece-e28a803dbf92",
        "cursor": {
          "ref": "8bdff8eb-f8a3-4954-8203-3779f5c7df37",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f686aa56-e10c-416f-a12f-9f029f94a98e"
        },
        "item": {
          "id": "9d040663-032c-40f0-8ece-e28a803dbf92",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "62752d14-c922-494f-9778-538527adff9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b38579-592a-49b0-875b-036ea5d607a4",
        "cursor": {
          "ref": "59bbf15f-f0d0-49f7-b2ed-4ec4816964c9",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6c57b7a7-85f6-49ed-9594-5bbac51bf3af"
        },
        "item": {
          "id": "e1b38579-592a-49b0-875b-036ea5d607a4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c3baf80c-3ed5-44fc-b26f-8b4dccaa7387",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b38579-592a-49b0-875b-036ea5d607a4",
        "cursor": {
          "ref": "59bbf15f-f0d0-49f7-b2ed-4ec4816964c9",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6c57b7a7-85f6-49ed-9594-5bbac51bf3af"
        },
        "item": {
          "id": "e1b38579-592a-49b0-875b-036ea5d607a4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c3baf80c-3ed5-44fc-b26f-8b4dccaa7387",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800e2697-e448-4b47-9571-41adc70f79d7",
        "cursor": {
          "ref": "77ec7b35-9e30-404b-8bfd-97d6ebe7872d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4f843fc9-ad49-47ed-baa3-75e7c18a3f5d"
        },
        "item": {
          "id": "800e2697-e448-4b47-9571-41adc70f79d7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "65354507-8f8a-45dc-925a-fad4e331317d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800e2697-e448-4b47-9571-41adc70f79d7",
        "cursor": {
          "ref": "77ec7b35-9e30-404b-8bfd-97d6ebe7872d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4f843fc9-ad49-47ed-baa3-75e7c18a3f5d"
        },
        "item": {
          "id": "800e2697-e448-4b47-9571-41adc70f79d7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "65354507-8f8a-45dc-925a-fad4e331317d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f1fd9a-4701-425f-8d36-3a6429c736c8",
        "cursor": {
          "ref": "487112d1-3e4f-484b-a45a-fc05d702c738",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e5984cc8-0033-4255-a61c-915a2d014b4f"
        },
        "item": {
          "id": "41f1fd9a-4701-425f-8d36-3a6429c736c8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a64b65fc-ddd8-43a2-be54-73461e866079",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f1fd9a-4701-425f-8d36-3a6429c736c8",
        "cursor": {
          "ref": "487112d1-3e4f-484b-a45a-fc05d702c738",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e5984cc8-0033-4255-a61c-915a2d014b4f"
        },
        "item": {
          "id": "41f1fd9a-4701-425f-8d36-3a6429c736c8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a64b65fc-ddd8-43a2-be54-73461e866079",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c64d6cf-9ac0-44a8-8178-8859b6b2ffea",
        "cursor": {
          "ref": "c8a5dfa7-9204-4196-a364-b7db6ba81b84",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f366c797-632e-40e7-b770-7c2008b8f916"
        },
        "item": {
          "id": "1c64d6cf-9ac0-44a8-8178-8859b6b2ffea",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c7b79ac5-1d22-4f79-be3f-633d1f3001fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c64d6cf-9ac0-44a8-8178-8859b6b2ffea",
        "cursor": {
          "ref": "c8a5dfa7-9204-4196-a364-b7db6ba81b84",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f366c797-632e-40e7-b770-7c2008b8f916"
        },
        "item": {
          "id": "1c64d6cf-9ac0-44a8-8178-8859b6b2ffea",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c7b79ac5-1d22-4f79-be3f-633d1f3001fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878667e1-cb72-4136-b43e-2a7f91f8ffba",
        "cursor": {
          "ref": "963b5062-8fa9-4556-8fd9-ff29752a3681",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6510f88d-499f-452f-939c-acdf66e60e5f"
        },
        "item": {
          "id": "878667e1-cb72-4136-b43e-2a7f91f8ffba",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "11d901a6-1715-4a3b-a447-4fc33d9a3b51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878667e1-cb72-4136-b43e-2a7f91f8ffba",
        "cursor": {
          "ref": "963b5062-8fa9-4556-8fd9-ff29752a3681",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6510f88d-499f-452f-939c-acdf66e60e5f"
        },
        "item": {
          "id": "878667e1-cb72-4136-b43e-2a7f91f8ffba",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "11d901a6-1715-4a3b-a447-4fc33d9a3b51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d7c2e2-611c-4dcc-80f4-4505549bce58",
        "cursor": {
          "ref": "56bb18f4-b9e7-4456-ada3-39ef3a9bb366",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0cb09573-76a3-46bc-95bc-cb20ecd89f04"
        },
        "item": {
          "id": "12d7c2e2-611c-4dcc-80f4-4505549bce58",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "aed74f1a-6f9d-4b6b-9657-6d8ef5a7af39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d7c2e2-611c-4dcc-80f4-4505549bce58",
        "cursor": {
          "ref": "56bb18f4-b9e7-4456-ada3-39ef3a9bb366",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0cb09573-76a3-46bc-95bc-cb20ecd89f04"
        },
        "item": {
          "id": "12d7c2e2-611c-4dcc-80f4-4505549bce58",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "aed74f1a-6f9d-4b6b-9657-6d8ef5a7af39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fac4ac9-f4c5-4d52-85bc-b48d6b4011df",
        "cursor": {
          "ref": "b208cea2-0758-4059-bcd9-3b621dbd639b",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "28ce57b0-5851-43af-af7e-9ac3b9ab6a98"
        },
        "item": {
          "id": "5fac4ac9-f4c5-4d52-85bc-b48d6b4011df",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6b1e5960-7f43-4124-a144-9c849b15d80d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fac4ac9-f4c5-4d52-85bc-b48d6b4011df",
        "cursor": {
          "ref": "b208cea2-0758-4059-bcd9-3b621dbd639b",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "28ce57b0-5851-43af-af7e-9ac3b9ab6a98"
        },
        "item": {
          "id": "5fac4ac9-f4c5-4d52-85bc-b48d6b4011df",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6b1e5960-7f43-4124-a144-9c849b15d80d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baf394c-d894-4c14-937e-ec88b6dca3c3",
        "cursor": {
          "ref": "77f914f0-8a78-405e-992d-88fe3b003df9",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c70557d7-6b81-4cbe-8a2a-d1906b9cc682"
        },
        "item": {
          "id": "4baf394c-d894-4c14-937e-ec88b6dca3c3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9ebb1968-248c-4c3d-bc95-a242b5867a0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baf394c-d894-4c14-937e-ec88b6dca3c3",
        "cursor": {
          "ref": "77f914f0-8a78-405e-992d-88fe3b003df9",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c70557d7-6b81-4cbe-8a2a-d1906b9cc682"
        },
        "item": {
          "id": "4baf394c-d894-4c14-937e-ec88b6dca3c3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9ebb1968-248c-4c3d-bc95-a242b5867a0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a98533e-0bec-4fa5-abb7-934f167a306e",
        "cursor": {
          "ref": "0b07837c-93f9-4978-b1db-4d1c7a89e063",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f46bbdea-f4f5-4526-805c-4ec058a3fcaf"
        },
        "item": {
          "id": "5a98533e-0bec-4fa5-abb7-934f167a306e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a7bcabc4-7bf3-4cfb-9851-53b73c26f713",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a98533e-0bec-4fa5-abb7-934f167a306e",
        "cursor": {
          "ref": "0b07837c-93f9-4978-b1db-4d1c7a89e063",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f46bbdea-f4f5-4526-805c-4ec058a3fcaf"
        },
        "item": {
          "id": "5a98533e-0bec-4fa5-abb7-934f167a306e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a7bcabc4-7bf3-4cfb-9851-53b73c26f713",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d699be93-1ca6-48e9-bbb2-cb72f33ea4b6",
        "cursor": {
          "ref": "6bce1237-0d05-4637-b8fd-3632fb66d149",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8011c8cc-5729-4ddc-9d05-218ae79fc4d4"
        },
        "item": {
          "id": "d699be93-1ca6-48e9-bbb2-cb72f33ea4b6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b6ca4932-85b7-4943-83f0-d5e3667687f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d699be93-1ca6-48e9-bbb2-cb72f33ea4b6",
        "cursor": {
          "ref": "6bce1237-0d05-4637-b8fd-3632fb66d149",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8011c8cc-5729-4ddc-9d05-218ae79fc4d4"
        },
        "item": {
          "id": "d699be93-1ca6-48e9-bbb2-cb72f33ea4b6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b6ca4932-85b7-4943-83f0-d5e3667687f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368f50e4-e821-4a87-8a1a-bc7f7b7c6857",
        "cursor": {
          "ref": "bce88b10-bb75-43dc-b00d-8d1d5472084c",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d3febc9c-fb13-45f1-bb19-72ccf36b2165"
        },
        "item": {
          "id": "368f50e4-e821-4a87-8a1a-bc7f7b7c6857",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "43846008-839d-4cd2-b9ec-69e97bd140af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368f50e4-e821-4a87-8a1a-bc7f7b7c6857",
        "cursor": {
          "ref": "bce88b10-bb75-43dc-b00d-8d1d5472084c",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d3febc9c-fb13-45f1-bb19-72ccf36b2165"
        },
        "item": {
          "id": "368f50e4-e821-4a87-8a1a-bc7f7b7c6857",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "43846008-839d-4cd2-b9ec-69e97bd140af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292d4dc2-e7e2-4267-84f4-6790e0a1bba4",
        "cursor": {
          "ref": "db168a75-4fcf-48f8-943a-d07d771e0f17",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8821c8f5-a9ba-4e9d-9862-2d4d6e9a9753"
        },
        "item": {
          "id": "292d4dc2-e7e2-4267-84f4-6790e0a1bba4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "93703f4d-1f37-4258-b908-7e81e1854af9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292d4dc2-e7e2-4267-84f4-6790e0a1bba4",
        "cursor": {
          "ref": "db168a75-4fcf-48f8-943a-d07d771e0f17",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8821c8f5-a9ba-4e9d-9862-2d4d6e9a9753"
        },
        "item": {
          "id": "292d4dc2-e7e2-4267-84f4-6790e0a1bba4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "93703f4d-1f37-4258-b908-7e81e1854af9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f442223-ec59-4181-b2d1-120cbf3f7820",
        "cursor": {
          "ref": "b45a1e7c-783f-4aa5-ad14-916ea93f2c84",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f45a563a-b693-4925-a4be-4a7fca3863be"
        },
        "item": {
          "id": "5f442223-ec59-4181-b2d1-120cbf3f7820",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d49b612e-994e-49d9-96bc-1cc487872c22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "5f442223-ec59-4181-b2d1-120cbf3f7820",
        "cursor": {
          "ref": "b45a1e7c-783f-4aa5-ad14-916ea93f2c84",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f45a563a-b693-4925-a4be-4a7fca3863be"
        },
        "item": {
          "id": "5f442223-ec59-4181-b2d1-120cbf3f7820",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d49b612e-994e-49d9-96bc-1cc487872c22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6f93ea11-40f4-4c32-b50e-c8e073cb2247",
        "cursor": {
          "ref": "f3a5ee37-5a38-4b90-8b3a-49bc7f712df6",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7d7bc99e-46e6-4e18-8129-8813795469ab"
        },
        "item": {
          "id": "6f93ea11-40f4-4c32-b50e-c8e073cb2247",
          "name": "credentials_issue"
        },
        "response": {
          "id": "226bbe51-042f-4db9-be4c-506e4ee60539",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "6f93ea11-40f4-4c32-b50e-c8e073cb2247",
        "cursor": {
          "ref": "f3a5ee37-5a38-4b90-8b3a-49bc7f712df6",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7d7bc99e-46e6-4e18-8129-8813795469ab"
        },
        "item": {
          "id": "6f93ea11-40f4-4c32-b50e-c8e073cb2247",
          "name": "credentials_issue"
        },
        "response": {
          "id": "226bbe51-042f-4db9-be4c-506e4ee60539",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "e90b15cf-608a-47fb-a630-5b71742de2a5",
        "cursor": {
          "ref": "5b8602f6-adb3-46a0-8769-e89b8d3922f7",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6100c020-88e7-4c6c-87b5-bf721607c16c"
        },
        "item": {
          "id": "e90b15cf-608a-47fb-a630-5b71742de2a5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4b97a8c2-0524-42d2-9e32-eff0f839cbda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 97,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "e90b15cf-608a-47fb-a630-5b71742de2a5",
        "cursor": {
          "ref": "5b8602f6-adb3-46a0-8769-e89b8d3922f7",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6100c020-88e7-4c6c-87b5-bf721607c16c"
        },
        "item": {
          "id": "e90b15cf-608a-47fb-a630-5b71742de2a5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4b97a8c2-0524-42d2-9e32-eff0f839cbda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 97,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "6fceb6f7-c46a-4c04-956f-c50e6a33835f",
        "cursor": {
          "ref": "590d5c80-2132-4292-8ac8-47b59dfc3539",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a32d5eb0-78db-4cb5-a1cc-fdd17f86e7bd"
        },
        "item": {
          "id": "6fceb6f7-c46a-4c04-956f-c50e6a33835f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1493fe1e-4676-4b6d-9d12-14d360231825",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "6fceb6f7-c46a-4c04-956f-c50e6a33835f",
        "cursor": {
          "ref": "590d5c80-2132-4292-8ac8-47b59dfc3539",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a32d5eb0-78db-4cb5-a1cc-fdd17f86e7bd"
        },
        "item": {
          "id": "6fceb6f7-c46a-4c04-956f-c50e6a33835f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1493fe1e-4676-4b6d-9d12-14d360231825",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "66238272-7c32-4038-abef-7d87c1504ffc",
        "cursor": {
          "ref": "15a86c83-2e2d-4778-8deb-71db943ef7ed",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1dbb6e5c-cea8-49fc-9cd6-86e1622eb3ce"
        },
        "item": {
          "id": "66238272-7c32-4038-abef-7d87c1504ffc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f2f0421b-5e75-463b-8150-0ec06154cb40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "66238272-7c32-4038-abef-7d87c1504ffc",
        "cursor": {
          "ref": "15a86c83-2e2d-4778-8deb-71db943ef7ed",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1dbb6e5c-cea8-49fc-9cd6-86e1622eb3ce"
        },
        "item": {
          "id": "66238272-7c32-4038-abef-7d87c1504ffc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f2f0421b-5e75-463b-8150-0ec06154cb40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "1ec57f0a-8f55-4fd0-84fd-8db6d3d06505",
        "cursor": {
          "ref": "8a7837f8-2346-4f1a-9060-b8caebb9d097",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dd6e949b-7253-449a-b7c5-05c44afc8395"
        },
        "item": {
          "id": "1ec57f0a-8f55-4fd0-84fd-8db6d3d06505",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c17feeee-5ce1-4197-b1e2-f63112c6f768",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1ec57f0a-8f55-4fd0-84fd-8db6d3d06505",
        "cursor": {
          "ref": "8a7837f8-2346-4f1a-9060-b8caebb9d097",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dd6e949b-7253-449a-b7c5-05c44afc8395"
        },
        "item": {
          "id": "1ec57f0a-8f55-4fd0-84fd-8db6d3d06505",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c17feeee-5ce1-4197-b1e2-f63112c6f768",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d4c9891e-8b16-4021-ac91-d10906b734a3",
        "cursor": {
          "ref": "8afb1ca2-047e-4222-951f-fca10d6ab8b2",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8e9654f1-b3d7-41e0-b151-ee462a1a9f5a"
        },
        "item": {
          "id": "d4c9891e-8b16-4021-ac91-d10906b734a3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5e4f1def-f015-44cb-96fb-895537ccacf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "d4c9891e-8b16-4021-ac91-d10906b734a3",
        "cursor": {
          "ref": "8afb1ca2-047e-4222-951f-fca10d6ab8b2",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8e9654f1-b3d7-41e0-b151-ee462a1a9f5a"
        },
        "item": {
          "id": "d4c9891e-8b16-4021-ac91-d10906b734a3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5e4f1def-f015-44cb-96fb-895537ccacf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "7da6e5e9-56a1-4fea-bcf7-b07c1b8966d6",
        "cursor": {
          "ref": "65c05e14-1e69-4220-9fb4-7fd46ca8f6f5",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2687a8b6-7389-4dec-87a3-c55af037065c"
        },
        "item": {
          "id": "7da6e5e9-56a1-4fea-bcf7-b07c1b8966d6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1e3d8a97-3fe9-4af8-91a5-211090ea024e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da6e5e9-56a1-4fea-bcf7-b07c1b8966d6",
        "cursor": {
          "ref": "65c05e14-1e69-4220-9fb4-7fd46ca8f6f5",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2687a8b6-7389-4dec-87a3-c55af037065c"
        },
        "item": {
          "id": "7da6e5e9-56a1-4fea-bcf7-b07c1b8966d6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1e3d8a97-3fe9-4af8-91a5-211090ea024e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f145ce-1807-47c5-844c-bf598b955e2f",
        "cursor": {
          "ref": "29bb6a96-4585-4fd2-83bb-63eebd8d1d3f",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4bcf052d-ca86-4b87-b9c4-a9790188f8c1"
        },
        "item": {
          "id": "64f145ce-1807-47c5-844c-bf598b955e2f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "86b81032-e514-46b4-9fb5-f6f0e88b9904",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f145ce-1807-47c5-844c-bf598b955e2f",
        "cursor": {
          "ref": "29bb6a96-4585-4fd2-83bb-63eebd8d1d3f",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4bcf052d-ca86-4b87-b9c4-a9790188f8c1"
        },
        "item": {
          "id": "64f145ce-1807-47c5-844c-bf598b955e2f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "86b81032-e514-46b4-9fb5-f6f0e88b9904",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5613d327-c3f5-435a-a5ed-8a5c73c8f454",
        "cursor": {
          "ref": "6f63c6b8-b784-4df4-85a6-f54f6afe3d08",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7feb46d2-26d0-4843-8b13-48e71d48ca68"
        },
        "item": {
          "id": "5613d327-c3f5-435a-a5ed-8a5c73c8f454",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0fb4622a-08b6-4b31-a9fb-30aa149dc532",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5613d327-c3f5-435a-a5ed-8a5c73c8f454",
        "cursor": {
          "ref": "6f63c6b8-b784-4df4-85a6-f54f6afe3d08",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7feb46d2-26d0-4843-8b13-48e71d48ca68"
        },
        "item": {
          "id": "5613d327-c3f5-435a-a5ed-8a5c73c8f454",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0fb4622a-08b6-4b31-a9fb-30aa149dc532",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cab7a60-46de-43a0-8096-3cccedf903c2",
        "cursor": {
          "ref": "2dd0d57e-0b60-4312-9390-080014cb7d12",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0bc00384-e0bb-4049-935e-78a7b53a0981"
        },
        "item": {
          "id": "4cab7a60-46de-43a0-8096-3cccedf903c2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "405af22c-5687-436a-bcbe-9b92b2759a4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cab7a60-46de-43a0-8096-3cccedf903c2",
        "cursor": {
          "ref": "2dd0d57e-0b60-4312-9390-080014cb7d12",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0bc00384-e0bb-4049-935e-78a7b53a0981"
        },
        "item": {
          "id": "4cab7a60-46de-43a0-8096-3cccedf903c2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "405af22c-5687-436a-bcbe-9b92b2759a4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4533e080-8849-472d-ba72-b66201bd28a0",
        "cursor": {
          "ref": "6eb3f83a-de22-4000-8313-51da2e589629",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7858f7f9-1dfa-4fe7-bd21-3e6040d6efac"
        },
        "item": {
          "id": "4533e080-8849-472d-ba72-b66201bd28a0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0dd0201e-99ae-47ca-9667-2a9c2d7bcdd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4533e080-8849-472d-ba72-b66201bd28a0",
        "cursor": {
          "ref": "6eb3f83a-de22-4000-8313-51da2e589629",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7858f7f9-1dfa-4fe7-bd21-3e6040d6efac"
        },
        "item": {
          "id": "4533e080-8849-472d-ba72-b66201bd28a0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0dd0201e-99ae-47ca-9667-2a9c2d7bcdd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cdf826-c762-4c80-ae7d-7f5a665d4cbe",
        "cursor": {
          "ref": "ba0259ac-0728-4bd9-b858-7d252161b762",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3e910d23-2f8c-4096-8a80-ad5f653521af"
        },
        "item": {
          "id": "96cdf826-c762-4c80-ae7d-7f5a665d4cbe",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cd453bb2-8974-4bbc-8caa-da38557531f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cdf826-c762-4c80-ae7d-7f5a665d4cbe",
        "cursor": {
          "ref": "ba0259ac-0728-4bd9-b858-7d252161b762",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3e910d23-2f8c-4096-8a80-ad5f653521af"
        },
        "item": {
          "id": "96cdf826-c762-4c80-ae7d-7f5a665d4cbe",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cd453bb2-8974-4bbc-8caa-da38557531f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71efb45d-09cf-418e-9764-e8cb154f86eb",
        "cursor": {
          "ref": "32b933c1-378e-4029-8ab7-9d4b38aa6b39",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "aad2e88b-6308-410c-9622-ebb547f2dd8d"
        },
        "item": {
          "id": "71efb45d-09cf-418e-9764-e8cb154f86eb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "044593d0-a297-4f6d-8233-51341711dae4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71efb45d-09cf-418e-9764-e8cb154f86eb",
        "cursor": {
          "ref": "32b933c1-378e-4029-8ab7-9d4b38aa6b39",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "aad2e88b-6308-410c-9622-ebb547f2dd8d"
        },
        "item": {
          "id": "71efb45d-09cf-418e-9764-e8cb154f86eb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "044593d0-a297-4f6d-8233-51341711dae4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674e4170-eb0b-4ad2-9aca-a62c63f0c8ef",
        "cursor": {
          "ref": "de177e24-f9db-479d-8eb4-87489737ae8d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "580be1a8-12af-4d2f-b8ba-d95f31308c47"
        },
        "item": {
          "id": "674e4170-eb0b-4ad2-9aca-a62c63f0c8ef",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3f98e165-da48-48f3-afb8-7cd16ee6d110",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674e4170-eb0b-4ad2-9aca-a62c63f0c8ef",
        "cursor": {
          "ref": "de177e24-f9db-479d-8eb4-87489737ae8d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "580be1a8-12af-4d2f-b8ba-d95f31308c47"
        },
        "item": {
          "id": "674e4170-eb0b-4ad2-9aca-a62c63f0c8ef",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3f98e165-da48-48f3-afb8-7cd16ee6d110",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d47560-ccd0-4f70-88ee-2e197d81ee3d",
        "cursor": {
          "ref": "47ee3381-49be-4cb8-9c0e-f08d203e6fbf",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2023f467-d13f-45b4-840d-ab243de63880"
        },
        "item": {
          "id": "c1d47560-ccd0-4f70-88ee-2e197d81ee3d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2c7be147-8eed-4133-ab98-a3f57d51f3f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d47560-ccd0-4f70-88ee-2e197d81ee3d",
        "cursor": {
          "ref": "47ee3381-49be-4cb8-9c0e-f08d203e6fbf",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2023f467-d13f-45b4-840d-ab243de63880"
        },
        "item": {
          "id": "c1d47560-ccd0-4f70-88ee-2e197d81ee3d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2c7be147-8eed-4133-ab98-a3f57d51f3f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6518e7-efcc-4f5a-8838-22bd16a6ed61",
        "cursor": {
          "ref": "bb2717f9-d053-4543-9263-8c803165f7f9",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "78153a28-ec9c-4b32-8dab-09f97815043a"
        },
        "item": {
          "id": "dc6518e7-efcc-4f5a-8838-22bd16a6ed61",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bad74378-136e-42b6-a474-b6df782be48b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6518e7-efcc-4f5a-8838-22bd16a6ed61",
        "cursor": {
          "ref": "bb2717f9-d053-4543-9263-8c803165f7f9",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "78153a28-ec9c-4b32-8dab-09f97815043a"
        },
        "item": {
          "id": "dc6518e7-efcc-4f5a-8838-22bd16a6ed61",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bad74378-136e-42b6-a474-b6df782be48b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4202e6cb-08c6-48a3-b669-68fb412f9872",
        "cursor": {
          "ref": "4d2a281d-fd9d-4fb8-829e-ace7e9317e04",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bc4ef150-237d-4aea-9e51-866840dec5da"
        },
        "item": {
          "id": "4202e6cb-08c6-48a3-b669-68fb412f9872",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "52f0cca5-3b16-4723-87ed-e3525377931c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4202e6cb-08c6-48a3-b669-68fb412f9872",
        "cursor": {
          "ref": "4d2a281d-fd9d-4fb8-829e-ace7e9317e04",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bc4ef150-237d-4aea-9e51-866840dec5da"
        },
        "item": {
          "id": "4202e6cb-08c6-48a3-b669-68fb412f9872",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "52f0cca5-3b16-4723-87ed-e3525377931c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fda52c5-57ee-4594-aa23-94e0809ad964",
        "cursor": {
          "ref": "d23063c8-cc21-424b-a97a-9ca44ea6a752",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "756ef0a2-8322-4f1e-85f1-6b3740be641b"
        },
        "item": {
          "id": "2fda52c5-57ee-4594-aa23-94e0809ad964",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b686624a-2e87-4066-87a6-e7dffb03fb07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fda52c5-57ee-4594-aa23-94e0809ad964",
        "cursor": {
          "ref": "d23063c8-cc21-424b-a97a-9ca44ea6a752",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "756ef0a2-8322-4f1e-85f1-6b3740be641b"
        },
        "item": {
          "id": "2fda52c5-57ee-4594-aa23-94e0809ad964",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b686624a-2e87-4066-87a6-e7dffb03fb07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac45b70-91fd-4060-a344-da97e251f245",
        "cursor": {
          "ref": "f34e864d-bac9-4f76-b09b-664bbb268387",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c9544816-05b3-4594-8e02-fab00bfbab04"
        },
        "item": {
          "id": "9ac45b70-91fd-4060-a344-da97e251f245",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "db8eee3b-89c7-4d71-8f76-e2fbcfc81785",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac45b70-91fd-4060-a344-da97e251f245",
        "cursor": {
          "ref": "f34e864d-bac9-4f76-b09b-664bbb268387",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c9544816-05b3-4594-8e02-fab00bfbab04"
        },
        "item": {
          "id": "9ac45b70-91fd-4060-a344-da97e251f245",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "db8eee3b-89c7-4d71-8f76-e2fbcfc81785",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d985256-bd0f-4e52-9c80-07f5fb5bf6ef",
        "cursor": {
          "ref": "348bd3bf-0a61-4982-bb87-2e9cf42bf436",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "af9fb7b0-b1bd-402f-8a1e-d09d500b4a2a"
        },
        "item": {
          "id": "0d985256-bd0f-4e52-9c80-07f5fb5bf6ef",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "847111c5-b4a4-45d8-b17c-29a144b49a40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d985256-bd0f-4e52-9c80-07f5fb5bf6ef",
        "cursor": {
          "ref": "348bd3bf-0a61-4982-bb87-2e9cf42bf436",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "af9fb7b0-b1bd-402f-8a1e-d09d500b4a2a"
        },
        "item": {
          "id": "0d985256-bd0f-4e52-9c80-07f5fb5bf6ef",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "847111c5-b4a4-45d8-b17c-29a144b49a40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19df948a-1623-4843-a3f5-9fd4341c56fb",
        "cursor": {
          "ref": "761462b2-12b9-4451-98c1-1bdf5e0e18b0",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e89d326a-508a-4563-94b6-489c3cd6c54d"
        },
        "item": {
          "id": "19df948a-1623-4843-a3f5-9fd4341c56fb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0e01ef32-9700-4abb-9ef1-fd2a7bb63e4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19df948a-1623-4843-a3f5-9fd4341c56fb",
        "cursor": {
          "ref": "761462b2-12b9-4451-98c1-1bdf5e0e18b0",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e89d326a-508a-4563-94b6-489c3cd6c54d"
        },
        "item": {
          "id": "19df948a-1623-4843-a3f5-9fd4341c56fb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0e01ef32-9700-4abb-9ef1-fd2a7bb63e4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873f8bf1-6fbf-4953-9f40-fe8d0562edf4",
        "cursor": {
          "ref": "aa0c505e-eda7-42b3-83f1-d18ca4d8069e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "23a06156-104c-4350-bc0a-22ad42ef519c"
        },
        "item": {
          "id": "873f8bf1-6fbf-4953-9f40-fe8d0562edf4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "307b25c9-804a-45e2-b93b-a4bb30c34fcc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873f8bf1-6fbf-4953-9f40-fe8d0562edf4",
        "cursor": {
          "ref": "aa0c505e-eda7-42b3-83f1-d18ca4d8069e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "23a06156-104c-4350-bc0a-22ad42ef519c"
        },
        "item": {
          "id": "873f8bf1-6fbf-4953-9f40-fe8d0562edf4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "307b25c9-804a-45e2-b93b-a4bb30c34fcc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15096a67-21e7-431a-93ff-8741fd2f679d",
        "cursor": {
          "ref": "a17c9703-cec5-43b2-a1c3-85fe797af723",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "282e6a2a-f5cc-4896-a96a-cdfe58eb42e5"
        },
        "item": {
          "id": "15096a67-21e7-431a-93ff-8741fd2f679d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "be19b4b0-5386-41e1-b449-b7764afabaf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15096a67-21e7-431a-93ff-8741fd2f679d",
        "cursor": {
          "ref": "a17c9703-cec5-43b2-a1c3-85fe797af723",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "282e6a2a-f5cc-4896-a96a-cdfe58eb42e5"
        },
        "item": {
          "id": "15096a67-21e7-431a-93ff-8741fd2f679d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "be19b4b0-5386-41e1-b449-b7764afabaf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbd3a56-cd24-4657-8850-206b20ef57f1",
        "cursor": {
          "ref": "f78b64dc-b82b-4caa-90c0-2a1d5b5527b4",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "39f95338-4226-4e2b-ae0e-2a9b80e4d6b0"
        },
        "item": {
          "id": "2fbd3a56-cd24-4657-8850-206b20ef57f1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0453bbdf-5a76-46ba-9b35-c6c36723af07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbd3a56-cd24-4657-8850-206b20ef57f1",
        "cursor": {
          "ref": "f78b64dc-b82b-4caa-90c0-2a1d5b5527b4",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "39f95338-4226-4e2b-ae0e-2a9b80e4d6b0"
        },
        "item": {
          "id": "2fbd3a56-cd24-4657-8850-206b20ef57f1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0453bbdf-5a76-46ba-9b35-c6c36723af07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c34410b-7226-430e-a9a3-eea23ce750a7",
        "cursor": {
          "ref": "622d9acc-1b9f-4a95-8b2e-8cdb2726a02d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d7d5ab9a-c874-49c9-8f40-ed1a14b4ba79"
        },
        "item": {
          "id": "4c34410b-7226-430e-a9a3-eea23ce750a7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "aae64215-427b-4740-a75b-f0a5a9b8d927",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c34410b-7226-430e-a9a3-eea23ce750a7",
        "cursor": {
          "ref": "622d9acc-1b9f-4a95-8b2e-8cdb2726a02d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d7d5ab9a-c874-49c9-8f40-ed1a14b4ba79"
        },
        "item": {
          "id": "4c34410b-7226-430e-a9a3-eea23ce750a7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "aae64215-427b-4740-a75b-f0a5a9b8d927",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d038b5ae-53e3-4d36-a93c-87063154708a",
        "cursor": {
          "ref": "58696465-867d-46d3-a99f-f3e21f666ef4",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cb6c8691-1b26-40a4-a06e-e94216cb430e"
        },
        "item": {
          "id": "d038b5ae-53e3-4d36-a93c-87063154708a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "04b0cce7-1abe-49f4-9709-c9ca2fe578a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d038b5ae-53e3-4d36-a93c-87063154708a",
        "cursor": {
          "ref": "58696465-867d-46d3-a99f-f3e21f666ef4",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cb6c8691-1b26-40a4-a06e-e94216cb430e"
        },
        "item": {
          "id": "d038b5ae-53e3-4d36-a93c-87063154708a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "04b0cce7-1abe-49f4-9709-c9ca2fe578a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8208cd1-5fa4-4c7e-ad38-559d3e15157b",
        "cursor": {
          "ref": "bc68f7b1-d92d-43ad-9549-f52d6f66d54a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9a0053e7-c3a8-4700-8e70-29ad7a775d34"
        },
        "item": {
          "id": "d8208cd1-5fa4-4c7e-ad38-559d3e15157b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "00149ed0-05a9-4142-bd8e-97abd6c3770f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8208cd1-5fa4-4c7e-ad38-559d3e15157b",
        "cursor": {
          "ref": "bc68f7b1-d92d-43ad-9549-f52d6f66d54a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9a0053e7-c3a8-4700-8e70-29ad7a775d34"
        },
        "item": {
          "id": "d8208cd1-5fa4-4c7e-ad38-559d3e15157b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "00149ed0-05a9-4142-bd8e-97abd6c3770f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f442295-5d79-4f02-83c8-a771a9ce516d",
        "cursor": {
          "ref": "402db49e-8079-4144-8504-3c48436f0ee9",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "165e4408-9325-4e4a-b4d9-734114101a11"
        },
        "item": {
          "id": "2f442295-5d79-4f02-83c8-a771a9ce516d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "af22dfaa-d3c6-400e-ad19-29233f88999a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f442295-5d79-4f02-83c8-a771a9ce516d",
        "cursor": {
          "ref": "402db49e-8079-4144-8504-3c48436f0ee9",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "165e4408-9325-4e4a-b4d9-734114101a11"
        },
        "item": {
          "id": "2f442295-5d79-4f02-83c8-a771a9ce516d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "af22dfaa-d3c6-400e-ad19-29233f88999a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3e3559-d37f-464d-8ba7-86df06896838",
        "cursor": {
          "ref": "bc107d9b-bfcd-43f6-b6fb-e67f69a56bad",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ce6ebbe7-1b5d-48f7-b40c-45d431aa6837"
        },
        "item": {
          "id": "6e3e3559-d37f-464d-8ba7-86df06896838",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9076d726-b70a-4475-a4ee-ae8ef44c0b54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3e3559-d37f-464d-8ba7-86df06896838",
        "cursor": {
          "ref": "bc107d9b-bfcd-43f6-b6fb-e67f69a56bad",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ce6ebbe7-1b5d-48f7-b40c-45d431aa6837"
        },
        "item": {
          "id": "6e3e3559-d37f-464d-8ba7-86df06896838",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9076d726-b70a-4475-a4ee-ae8ef44c0b54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9b075f-5894-48e3-b01c-d057e6d77b1f",
        "cursor": {
          "ref": "3acc6a84-ef4a-44fd-b067-5047b053159c",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ea120df3-507c-4142-bc82-d579798e037d"
        },
        "item": {
          "id": "cb9b075f-5894-48e3-b01c-d057e6d77b1f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7114a4be-ab00-4028-bcc2-36cfb5b734ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9b075f-5894-48e3-b01c-d057e6d77b1f",
        "cursor": {
          "ref": "3acc6a84-ef4a-44fd-b067-5047b053159c",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ea120df3-507c-4142-bc82-d579798e037d"
        },
        "item": {
          "id": "cb9b075f-5894-48e3-b01c-d057e6d77b1f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7114a4be-ab00-4028-bcc2-36cfb5b734ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c72222-6a82-49a9-86cd-ac37f8dfedba",
        "cursor": {
          "ref": "c1d791c2-7554-4702-a569-2f3cacd67eaa",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6b2ad022-d8c6-4293-bc3a-25b1a4e2073b"
        },
        "item": {
          "id": "86c72222-6a82-49a9-86cd-ac37f8dfedba",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "34fdc79f-a9ae-4df6-aab9-511f891942a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c72222-6a82-49a9-86cd-ac37f8dfedba",
        "cursor": {
          "ref": "c1d791c2-7554-4702-a569-2f3cacd67eaa",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6b2ad022-d8c6-4293-bc3a-25b1a4e2073b"
        },
        "item": {
          "id": "86c72222-6a82-49a9-86cd-ac37f8dfedba",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "34fdc79f-a9ae-4df6-aab9-511f891942a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5c383a-9abe-4a11-9c9d-6c5a5f08c105",
        "cursor": {
          "ref": "12d29d41-64c7-4985-8401-d92e5340acd5",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3dc05143-c038-4d5c-91c5-cfabb70048ef"
        },
        "item": {
          "id": "bc5c383a-9abe-4a11-9c9d-6c5a5f08c105",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "535e5a81-d8fe-401d-8c71-89577a2af770",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5c383a-9abe-4a11-9c9d-6c5a5f08c105",
        "cursor": {
          "ref": "12d29d41-64c7-4985-8401-d92e5340acd5",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3dc05143-c038-4d5c-91c5-cfabb70048ef"
        },
        "item": {
          "id": "bc5c383a-9abe-4a11-9c9d-6c5a5f08c105",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "535e5a81-d8fe-401d-8c71-89577a2af770",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81103f7d-32c5-4413-9173-f287651b0022",
        "cursor": {
          "ref": "1c783cc5-12a5-4376-b389-6867cede1ee5",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "645839fa-f8e2-43d4-9c36-d74310309769"
        },
        "item": {
          "id": "81103f7d-32c5-4413-9173-f287651b0022",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "97bf5c16-6ff8-4b69-9ad1-0f0714e036b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81103f7d-32c5-4413-9173-f287651b0022",
        "cursor": {
          "ref": "1c783cc5-12a5-4376-b389-6867cede1ee5",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "645839fa-f8e2-43d4-9c36-d74310309769"
        },
        "item": {
          "id": "81103f7d-32c5-4413-9173-f287651b0022",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "97bf5c16-6ff8-4b69-9ad1-0f0714e036b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e75e71-2801-4f91-9847-8776599579a6",
        "cursor": {
          "ref": "1c4cf9e7-e2f2-4604-9bd4-d9083e768e32",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "24c9f99f-cdf8-4b33-8640-81b3a085ee3e"
        },
        "item": {
          "id": "30e75e71-2801-4f91-9847-8776599579a6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "58e50852-32b9-4c6d-8c8c-5a86292e6c70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e75e71-2801-4f91-9847-8776599579a6",
        "cursor": {
          "ref": "1c4cf9e7-e2f2-4604-9bd4-d9083e768e32",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "24c9f99f-cdf8-4b33-8640-81b3a085ee3e"
        },
        "item": {
          "id": "30e75e71-2801-4f91-9847-8776599579a6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "58e50852-32b9-4c6d-8c8c-5a86292e6c70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6658a2ec-209f-494b-9e39-fb5c2f63774d",
        "cursor": {
          "ref": "b7b8c5f5-e329-4439-ac45-e49a1fcb9136",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "76dac046-35f6-436f-83f3-03366826fa85"
        },
        "item": {
          "id": "6658a2ec-209f-494b-9e39-fb5c2f63774d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "683764f6-5582-4698-8ff1-3530b5c11eea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6658a2ec-209f-494b-9e39-fb5c2f63774d",
        "cursor": {
          "ref": "b7b8c5f5-e329-4439-ac45-e49a1fcb9136",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "76dac046-35f6-436f-83f3-03366826fa85"
        },
        "item": {
          "id": "6658a2ec-209f-494b-9e39-fb5c2f63774d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "683764f6-5582-4698-8ff1-3530b5c11eea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d84b45-34ec-44ab-a79d-88f77173154b",
        "cursor": {
          "ref": "652ba837-9704-4123-8484-c3ef1ee8d3ab",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "67f4447c-1a89-4fb6-b097-d4fda8604ca0"
        },
        "item": {
          "id": "69d84b45-34ec-44ab-a79d-88f77173154b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "81986b1f-8cac-459c-8e75-ce103856f091",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d84b45-34ec-44ab-a79d-88f77173154b",
        "cursor": {
          "ref": "652ba837-9704-4123-8484-c3ef1ee8d3ab",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "67f4447c-1a89-4fb6-b097-d4fda8604ca0"
        },
        "item": {
          "id": "69d84b45-34ec-44ab-a79d-88f77173154b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "81986b1f-8cac-459c-8e75-ce103856f091",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81119072-5fd7-4048-b352-73ea5a54b010",
        "cursor": {
          "ref": "53d161e6-3e13-4394-aa83-c1295bab3919",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8570b5bb-a088-44e0-bdfb-3ad1c267e176"
        },
        "item": {
          "id": "81119072-5fd7-4048-b352-73ea5a54b010",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5ee647c4-160e-4120-be83-7f8ea65c3640",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81119072-5fd7-4048-b352-73ea5a54b010",
        "cursor": {
          "ref": "53d161e6-3e13-4394-aa83-c1295bab3919",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8570b5bb-a088-44e0-bdfb-3ad1c267e176"
        },
        "item": {
          "id": "81119072-5fd7-4048-b352-73ea5a54b010",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5ee647c4-160e-4120-be83-7f8ea65c3640",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6f7cd3-20f3-43e3-84f5-0dc8b4a1d9c3",
        "cursor": {
          "ref": "a860e36b-686c-49d7-9721-d974fe7a4ade",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b361f8da-ac8e-408d-a84b-1738b641ebfb"
        },
        "item": {
          "id": "ef6f7cd3-20f3-43e3-84f5-0dc8b4a1d9c3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1c24f8a6-9936-4667-9302-fd85ce2ce259",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6f7cd3-20f3-43e3-84f5-0dc8b4a1d9c3",
        "cursor": {
          "ref": "a860e36b-686c-49d7-9721-d974fe7a4ade",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b361f8da-ac8e-408d-a84b-1738b641ebfb"
        },
        "item": {
          "id": "ef6f7cd3-20f3-43e3-84f5-0dc8b4a1d9c3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1c24f8a6-9936-4667-9302-fd85ce2ce259",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cba7563-7ba0-4ff2-9a37-fd6fc53c59e7",
        "cursor": {
          "ref": "f900f059-98b5-4ad1-914d-bd4ae597e3d3",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "42de54e6-87df-4fb2-a816-bfd81fa0ccff"
        },
        "item": {
          "id": "5cba7563-7ba0-4ff2-9a37-fd6fc53c59e7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c4f31292-47ba-4a8b-a08a-27bee509d128",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cba7563-7ba0-4ff2-9a37-fd6fc53c59e7",
        "cursor": {
          "ref": "f900f059-98b5-4ad1-914d-bd4ae597e3d3",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "42de54e6-87df-4fb2-a816-bfd81fa0ccff"
        },
        "item": {
          "id": "5cba7563-7ba0-4ff2-9a37-fd6fc53c59e7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c4f31292-47ba-4a8b-a08a-27bee509d128",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f97b41-0673-4026-b156-0f833c7efb89",
        "cursor": {
          "ref": "2585181f-253a-4202-aadc-4e864af2ec6d",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bd2cc0df-63e1-483a-b858-b2c3de6cea68"
        },
        "item": {
          "id": "66f97b41-0673-4026-b156-0f833c7efb89",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6a8e5396-4122-447f-bd97-ce89278c4e9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f97b41-0673-4026-b156-0f833c7efb89",
        "cursor": {
          "ref": "2585181f-253a-4202-aadc-4e864af2ec6d",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bd2cc0df-63e1-483a-b858-b2c3de6cea68"
        },
        "item": {
          "id": "66f97b41-0673-4026-b156-0f833c7efb89",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6a8e5396-4122-447f-bd97-ce89278c4e9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d21f58b-6117-42fa-bb88-d39043b74af3",
        "cursor": {
          "ref": "25f96f4d-35e4-4963-a39f-3a3a004d13a6",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "097ce451-96ad-49df-9f8f-9adc1e03bf6a"
        },
        "item": {
          "id": "3d21f58b-6117-42fa-bb88-d39043b74af3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "16b33ae0-87ef-49c6-a66f-23130a6b2103",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d21f58b-6117-42fa-bb88-d39043b74af3",
        "cursor": {
          "ref": "25f96f4d-35e4-4963-a39f-3a3a004d13a6",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "097ce451-96ad-49df-9f8f-9adc1e03bf6a"
        },
        "item": {
          "id": "3d21f58b-6117-42fa-bb88-d39043b74af3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "16b33ae0-87ef-49c6-a66f-23130a6b2103",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3c1ae7-20c0-4b3d-92c3-899b73a55236",
        "cursor": {
          "ref": "862c39d4-d67e-4b40-be02-5971a926eca4",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "04982fe2-b3e1-4e57-a17a-78a8f5c52b61"
        },
        "item": {
          "id": "2a3c1ae7-20c0-4b3d-92c3-899b73a55236",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "51250aa0-9440-40f2-897b-ba2479ff8541",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3c1ae7-20c0-4b3d-92c3-899b73a55236",
        "cursor": {
          "ref": "862c39d4-d67e-4b40-be02-5971a926eca4",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "04982fe2-b3e1-4e57-a17a-78a8f5c52b61"
        },
        "item": {
          "id": "2a3c1ae7-20c0-4b3d-92c3-899b73a55236",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "51250aa0-9440-40f2-897b-ba2479ff8541",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9f1af4-ff3f-4a9d-9d0e-437aadb25845",
        "cursor": {
          "ref": "d6010299-7655-48e1-93b4-350f7d0d8119",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d3eace64-165a-4711-baf3-4cd1b15f700e"
        },
        "item": {
          "id": "7a9f1af4-ff3f-4a9d-9d0e-437aadb25845",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7cb734d8-ec15-4352-8980-813a5a94c46d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9f1af4-ff3f-4a9d-9d0e-437aadb25845",
        "cursor": {
          "ref": "d6010299-7655-48e1-93b4-350f7d0d8119",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d3eace64-165a-4711-baf3-4cd1b15f700e"
        },
        "item": {
          "id": "7a9f1af4-ff3f-4a9d-9d0e-437aadb25845",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7cb734d8-ec15-4352-8980-813a5a94c46d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48754333-5b43-43f9-b65d-b691624fa18d",
        "cursor": {
          "ref": "926d37ed-11a1-4eba-838d-ad09ee1dd8d7",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ce34891d-19d7-4cf2-aeda-3b59b873be94"
        },
        "item": {
          "id": "48754333-5b43-43f9-b65d-b691624fa18d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "07727afd-f82b-48db-8d91-364c817920a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 92,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48754333-5b43-43f9-b65d-b691624fa18d",
        "cursor": {
          "ref": "926d37ed-11a1-4eba-838d-ad09ee1dd8d7",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ce34891d-19d7-4cf2-aeda-3b59b873be94"
        },
        "item": {
          "id": "48754333-5b43-43f9-b65d-b691624fa18d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "07727afd-f82b-48db-8d91-364c817920a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 92,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a7fd47-d43d-4bde-9842-749d924be8f6",
        "cursor": {
          "ref": "8bce1edb-1726-48cf-a64f-291e7f9b896e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "abf30dd2-e288-41e2-92f5-59bcedf4cb27"
        },
        "item": {
          "id": "d4a7fd47-d43d-4bde-9842-749d924be8f6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "89e5b27e-1a6a-40bf-89e9-7f4de54be34d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a7fd47-d43d-4bde-9842-749d924be8f6",
        "cursor": {
          "ref": "8bce1edb-1726-48cf-a64f-291e7f9b896e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "abf30dd2-e288-41e2-92f5-59bcedf4cb27"
        },
        "item": {
          "id": "d4a7fd47-d43d-4bde-9842-749d924be8f6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "89e5b27e-1a6a-40bf-89e9-7f4de54be34d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eab0eed-4a2b-44a5-a737-fcf088dde6be",
        "cursor": {
          "ref": "0f9ab34a-4e32-4f51-9ce5-eee3759dd4f5",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bd6193f3-3f8e-4519-bdbf-69c378f62030"
        },
        "item": {
          "id": "8eab0eed-4a2b-44a5-a737-fcf088dde6be",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f329c1c9-5dd0-4997-9990-0be86025e27e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eab0eed-4a2b-44a5-a737-fcf088dde6be",
        "cursor": {
          "ref": "0f9ab34a-4e32-4f51-9ce5-eee3759dd4f5",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bd6193f3-3f8e-4519-bdbf-69c378f62030"
        },
        "item": {
          "id": "8eab0eed-4a2b-44a5-a737-fcf088dde6be",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f329c1c9-5dd0-4997-9990-0be86025e27e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0eb49b-d9e0-40c2-b8b3-eb313476bbc4",
        "cursor": {
          "ref": "dbec2f60-196a-4054-9b95-501088c9c9ff",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "59118861-b615-4015-961d-02853976f10e"
        },
        "item": {
          "id": "2a0eb49b-d9e0-40c2-b8b3-eb313476bbc4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "acf28acb-ec72-47f7-a9da-1c0a2ff8e77d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0eb49b-d9e0-40c2-b8b3-eb313476bbc4",
        "cursor": {
          "ref": "dbec2f60-196a-4054-9b95-501088c9c9ff",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "59118861-b615-4015-961d-02853976f10e"
        },
        "item": {
          "id": "2a0eb49b-d9e0-40c2-b8b3-eb313476bbc4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "acf28acb-ec72-47f7-a9da-1c0a2ff8e77d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b983bf-2fbe-4b09-b72f-0aa170c8cefc",
        "cursor": {
          "ref": "413ddbc8-d336-420b-9ff4-9d2b12ab0fbe",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b741d3f3-3849-415f-ac8a-0bbb3972b8cf"
        },
        "item": {
          "id": "10b983bf-2fbe-4b09-b72f-0aa170c8cefc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "66941dd3-ce40-470a-82f2-5e3682b67943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b983bf-2fbe-4b09-b72f-0aa170c8cefc",
        "cursor": {
          "ref": "413ddbc8-d336-420b-9ff4-9d2b12ab0fbe",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b741d3f3-3849-415f-ac8a-0bbb3972b8cf"
        },
        "item": {
          "id": "10b983bf-2fbe-4b09-b72f-0aa170c8cefc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "66941dd3-ce40-470a-82f2-5e3682b67943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9999986d-068b-4a2e-936d-3117942a1d1a",
        "cursor": {
          "ref": "0b7301ad-bb88-4039-8756-76ef9be0a527",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d0daaf61-c295-4e0b-ad07-066af4d92b3e"
        },
        "item": {
          "id": "9999986d-068b-4a2e-936d-3117942a1d1a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4de6e715-a258-4112-804a-9e5036952bbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9999986d-068b-4a2e-936d-3117942a1d1a",
        "cursor": {
          "ref": "0b7301ad-bb88-4039-8756-76ef9be0a527",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d0daaf61-c295-4e0b-ad07-066af4d92b3e"
        },
        "item": {
          "id": "9999986d-068b-4a2e-936d-3117942a1d1a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4de6e715-a258-4112-804a-9e5036952bbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520b8824-53db-4edd-92c2-acb2e5751d99",
        "cursor": {
          "ref": "d95f2c52-538f-470f-a358-41541e648654",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e5dbf762-1d39-4143-8fa5-7a64dc7e564b"
        },
        "item": {
          "id": "520b8824-53db-4edd-92c2-acb2e5751d99",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1babc112-3ecc-4a74-8c68-af80a763a86f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520b8824-53db-4edd-92c2-acb2e5751d99",
        "cursor": {
          "ref": "d95f2c52-538f-470f-a358-41541e648654",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e5dbf762-1d39-4143-8fa5-7a64dc7e564b"
        },
        "item": {
          "id": "520b8824-53db-4edd-92c2-acb2e5751d99",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1babc112-3ecc-4a74-8c68-af80a763a86f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505ee1ed-db4f-4ad8-a56d-2bbbba0455d6",
        "cursor": {
          "ref": "86b33ee4-fc6b-48f5-8727-3cf5b1c88dcb",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8ff5964b-0653-451e-b8cb-afb474c91400"
        },
        "item": {
          "id": "505ee1ed-db4f-4ad8-a56d-2bbbba0455d6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2499f24a-15c9-41d4-8dba-b7e299c6becb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505ee1ed-db4f-4ad8-a56d-2bbbba0455d6",
        "cursor": {
          "ref": "86b33ee4-fc6b-48f5-8727-3cf5b1c88dcb",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8ff5964b-0653-451e-b8cb-afb474c91400"
        },
        "item": {
          "id": "505ee1ed-db4f-4ad8-a56d-2bbbba0455d6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2499f24a-15c9-41d4-8dba-b7e299c6becb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3838d2d3-a6ed-4ef5-9ec6-795586ee6e38",
        "cursor": {
          "ref": "a6aeb4b6-4af4-4f32-a4fc-a9bcb5ae1bbd",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "07c924c9-08b6-4b87-b944-426e33883439"
        },
        "item": {
          "id": "3838d2d3-a6ed-4ef5-9ec6-795586ee6e38",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7ef7a8b2-104b-4e60-bdb3-79f09a97a3bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3838d2d3-a6ed-4ef5-9ec6-795586ee6e38",
        "cursor": {
          "ref": "a6aeb4b6-4af4-4f32-a4fc-a9bcb5ae1bbd",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "07c924c9-08b6-4b87-b944-426e33883439"
        },
        "item": {
          "id": "3838d2d3-a6ed-4ef5-9ec6-795586ee6e38",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7ef7a8b2-104b-4e60-bdb3-79f09a97a3bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a8d208-be08-4c6c-90cc-9db4203717a7",
        "cursor": {
          "ref": "c6a35c27-3119-4e24-9d92-554d70b8c354",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7e92f65a-c086-47cd-b6fb-946eab7d9759"
        },
        "item": {
          "id": "02a8d208-be08-4c6c-90cc-9db4203717a7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0f6eee49-56fb-45df-9b32-bb4bc4d59710",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a8d208-be08-4c6c-90cc-9db4203717a7",
        "cursor": {
          "ref": "c6a35c27-3119-4e24-9d92-554d70b8c354",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7e92f65a-c086-47cd-b6fb-946eab7d9759"
        },
        "item": {
          "id": "02a8d208-be08-4c6c-90cc-9db4203717a7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0f6eee49-56fb-45df-9b32-bb4bc4d59710",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24e1ce3-cdec-4acc-9d9c-d18b18426122",
        "cursor": {
          "ref": "8e4b18c9-5d7b-4965-b25e-4358efda587e",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "36072926-3f29-4296-81c5-51335495e79d"
        },
        "item": {
          "id": "f24e1ce3-cdec-4acc-9d9c-d18b18426122",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8d87c309-79ed-433b-bdbb-6d65517496e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24e1ce3-cdec-4acc-9d9c-d18b18426122",
        "cursor": {
          "ref": "8e4b18c9-5d7b-4965-b25e-4358efda587e",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "36072926-3f29-4296-81c5-51335495e79d"
        },
        "item": {
          "id": "f24e1ce3-cdec-4acc-9d9c-d18b18426122",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8d87c309-79ed-433b-bdbb-6d65517496e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daaf88be-8ea4-44d2-abd1-3e1f03caffd4",
        "cursor": {
          "ref": "438530c7-bdd4-4510-9d50-ed8b6392e57d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "274cd218-d9f3-4d3f-9a17-c00c168de420"
        },
        "item": {
          "id": "daaf88be-8ea4-44d2-abd1-3e1f03caffd4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "901c5da6-0a23-4c5c-a563-b162d2f71889",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daaf88be-8ea4-44d2-abd1-3e1f03caffd4",
        "cursor": {
          "ref": "438530c7-bdd4-4510-9d50-ed8b6392e57d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "274cd218-d9f3-4d3f-9a17-c00c168de420"
        },
        "item": {
          "id": "daaf88be-8ea4-44d2-abd1-3e1f03caffd4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "901c5da6-0a23-4c5c-a563-b162d2f71889",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1f697f-5626-4f50-bd91-a646ae6c2bc6",
        "cursor": {
          "ref": "e0c9e1a2-34e9-4827-8977-c63da1839345",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d33eadc7-582b-401e-9281-b62c932f63ce"
        },
        "item": {
          "id": "1a1f697f-5626-4f50-bd91-a646ae6c2bc6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5075aa5b-8d5e-4e3c-8d30-f19d5584ea1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1f697f-5626-4f50-bd91-a646ae6c2bc6",
        "cursor": {
          "ref": "e0c9e1a2-34e9-4827-8977-c63da1839345",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d33eadc7-582b-401e-9281-b62c932f63ce"
        },
        "item": {
          "id": "1a1f697f-5626-4f50-bd91-a646ae6c2bc6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5075aa5b-8d5e-4e3c-8d30-f19d5584ea1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4aa4996-c8f9-470a-909f-fb0f986c7c94",
        "cursor": {
          "ref": "eacbba62-2a79-43d8-8d03-7f6fab9bf051",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6e257d18-391d-456c-9dea-488601046290"
        },
        "item": {
          "id": "e4aa4996-c8f9-470a-909f-fb0f986c7c94",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "068f7d84-baf7-470a-a7fc-46b03aeb00ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4aa4996-c8f9-470a-909f-fb0f986c7c94",
        "cursor": {
          "ref": "eacbba62-2a79-43d8-8d03-7f6fab9bf051",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6e257d18-391d-456c-9dea-488601046290"
        },
        "item": {
          "id": "e4aa4996-c8f9-470a-909f-fb0f986c7c94",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "068f7d84-baf7-470a-a7fc-46b03aeb00ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce8c500-0156-43ab-adf6-520c9ec039bf",
        "cursor": {
          "ref": "390f6b04-650d-4484-ac16-c96a36b7ba5f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b2c42d0b-b3ef-4311-a4f5-f32331d3e7a8"
        },
        "item": {
          "id": "9ce8c500-0156-43ab-adf6-520c9ec039bf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0c477a87-7779-4582-906c-e915a68a472e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce8c500-0156-43ab-adf6-520c9ec039bf",
        "cursor": {
          "ref": "390f6b04-650d-4484-ac16-c96a36b7ba5f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b2c42d0b-b3ef-4311-a4f5-f32331d3e7a8"
        },
        "item": {
          "id": "9ce8c500-0156-43ab-adf6-520c9ec039bf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0c477a87-7779-4582-906c-e915a68a472e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a20da1a-9b1a-4852-9505-f1ec16e9d6a3",
        "cursor": {
          "ref": "ef43a0b6-a92e-4cf4-a2e9-2b680d365917",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cc99b297-4b9c-436b-855c-18cac5108e45"
        },
        "item": {
          "id": "0a20da1a-9b1a-4852-9505-f1ec16e9d6a3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "11800da6-1cdb-41b2-b931-21ff778a9113",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a20da1a-9b1a-4852-9505-f1ec16e9d6a3",
        "cursor": {
          "ref": "ef43a0b6-a92e-4cf4-a2e9-2b680d365917",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cc99b297-4b9c-436b-855c-18cac5108e45"
        },
        "item": {
          "id": "0a20da1a-9b1a-4852-9505-f1ec16e9d6a3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "11800da6-1cdb-41b2-b931-21ff778a9113",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e665caf-915d-4a3a-b089-473d73991ae1",
        "cursor": {
          "ref": "bf6dc6d8-6309-4ecd-ab24-38d0bcb7584b",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "767209d7-1ee3-43a8-8624-7446ee6dee43"
        },
        "item": {
          "id": "0e665caf-915d-4a3a-b089-473d73991ae1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "923ad468-b113-4f9c-b54d-1a8d01f3d2fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e665caf-915d-4a3a-b089-473d73991ae1",
        "cursor": {
          "ref": "bf6dc6d8-6309-4ecd-ab24-38d0bcb7584b",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "767209d7-1ee3-43a8-8624-7446ee6dee43"
        },
        "item": {
          "id": "0e665caf-915d-4a3a-b089-473d73991ae1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "923ad468-b113-4f9c-b54d-1a8d01f3d2fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b48e55-fe65-4c1c-a320-4f4c8bd61928",
        "cursor": {
          "ref": "b1c13068-43a5-416e-a679-e9659821f958",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "24c82824-1469-430b-a9bc-62eca6047279"
        },
        "item": {
          "id": "c0b48e55-fe65-4c1c-a320-4f4c8bd61928",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3305882a-2c3b-44b5-8968-c42553ca1ad2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b48e55-fe65-4c1c-a320-4f4c8bd61928",
        "cursor": {
          "ref": "b1c13068-43a5-416e-a679-e9659821f958",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "24c82824-1469-430b-a9bc-62eca6047279"
        },
        "item": {
          "id": "c0b48e55-fe65-4c1c-a320-4f4c8bd61928",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3305882a-2c3b-44b5-8968-c42553ca1ad2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da468e0-4fb3-4bde-9604-db107cee3443",
        "cursor": {
          "ref": "8e74821d-9fc8-4f5f-b338-c71c1093c3c5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9030c221-ebd2-4194-ac2f-461c00a70402"
        },
        "item": {
          "id": "4da468e0-4fb3-4bde-9604-db107cee3443",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "283f5f81-fa6b-41d1-9f1e-ec13850b83ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da468e0-4fb3-4bde-9604-db107cee3443",
        "cursor": {
          "ref": "8e74821d-9fc8-4f5f-b338-c71c1093c3c5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9030c221-ebd2-4194-ac2f-461c00a70402"
        },
        "item": {
          "id": "4da468e0-4fb3-4bde-9604-db107cee3443",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "283f5f81-fa6b-41d1-9f1e-ec13850b83ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef3b519-9356-4d29-94f1-06f0f1cb477b",
        "cursor": {
          "ref": "04c670ab-9f2b-4b5e-9999-ef419e348900",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0aafb391-277a-42b9-87cd-8518c58957e3"
        },
        "item": {
          "id": "eef3b519-9356-4d29-94f1-06f0f1cb477b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9eb653ee-2730-41a8-a38d-39f3afb612c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef3b519-9356-4d29-94f1-06f0f1cb477b",
        "cursor": {
          "ref": "04c670ab-9f2b-4b5e-9999-ef419e348900",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0aafb391-277a-42b9-87cd-8518c58957e3"
        },
        "item": {
          "id": "eef3b519-9356-4d29-94f1-06f0f1cb477b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9eb653ee-2730-41a8-a38d-39f3afb612c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec046b6-2b3a-48d2-ad5d-9783e8c48c4a",
        "cursor": {
          "ref": "e10e1302-caa4-459e-a3eb-ba20e619a0a8",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8e0e8e7a-4ccf-4f48-a726-6865ec290bb8"
        },
        "item": {
          "id": "cec046b6-2b3a-48d2-ad5d-9783e8c48c4a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f3807056-ff31-4cc3-899f-aefe17087d6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec046b6-2b3a-48d2-ad5d-9783e8c48c4a",
        "cursor": {
          "ref": "e10e1302-caa4-459e-a3eb-ba20e619a0a8",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8e0e8e7a-4ccf-4f48-a726-6865ec290bb8"
        },
        "item": {
          "id": "cec046b6-2b3a-48d2-ad5d-9783e8c48c4a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f3807056-ff31-4cc3-899f-aefe17087d6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd63d2e7-76c7-45ce-80b5-5ecf79ef8ebc",
        "cursor": {
          "ref": "5643ae68-f23f-475e-b33a-72d2b4b671fc",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "266c8c88-d277-4cdd-989a-a3a13b0700a4"
        },
        "item": {
          "id": "cd63d2e7-76c7-45ce-80b5-5ecf79ef8ebc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "542d3ef6-7630-4ae3-83ef-9477a85a8bb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd63d2e7-76c7-45ce-80b5-5ecf79ef8ebc",
        "cursor": {
          "ref": "5643ae68-f23f-475e-b33a-72d2b4b671fc",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "266c8c88-d277-4cdd-989a-a3a13b0700a4"
        },
        "item": {
          "id": "cd63d2e7-76c7-45ce-80b5-5ecf79ef8ebc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "542d3ef6-7630-4ae3-83ef-9477a85a8bb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f587674-bb93-416e-8554-9b453e29dcbb",
        "cursor": {
          "ref": "04d1ea0f-b9b9-4754-90ad-80a6b1a8d0f7",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3a372d31-0329-40da-bf89-83a506a1cf42"
        },
        "item": {
          "id": "4f587674-bb93-416e-8554-9b453e29dcbb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ee1aed16-260d-433e-ab7d-a853a84d2dd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f587674-bb93-416e-8554-9b453e29dcbb",
        "cursor": {
          "ref": "04d1ea0f-b9b9-4754-90ad-80a6b1a8d0f7",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3a372d31-0329-40da-bf89-83a506a1cf42"
        },
        "item": {
          "id": "4f587674-bb93-416e-8554-9b453e29dcbb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ee1aed16-260d-433e-ab7d-a853a84d2dd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4794a6-2838-482a-8b7b-9bf918651b9e",
        "cursor": {
          "ref": "e948ecb1-e5c1-494e-aef7-2e4ba9d179b9",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6d575313-8e9d-487a-873a-28da917ddbdf"
        },
        "item": {
          "id": "1a4794a6-2838-482a-8b7b-9bf918651b9e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1635fa0c-9990-4c6d-a68b-f3232bc00460",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4794a6-2838-482a-8b7b-9bf918651b9e",
        "cursor": {
          "ref": "e948ecb1-e5c1-494e-aef7-2e4ba9d179b9",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6d575313-8e9d-487a-873a-28da917ddbdf"
        },
        "item": {
          "id": "1a4794a6-2838-482a-8b7b-9bf918651b9e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1635fa0c-9990-4c6d-a68b-f3232bc00460",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05514947-722f-42b7-be30-b7417da0ddd7",
        "cursor": {
          "ref": "a86d48d8-544f-4a69-895d-20a9b0d42870",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "12c2d687-8b6c-41bd-ba4a-f2313c1f4fa4"
        },
        "item": {
          "id": "05514947-722f-42b7-be30-b7417da0ddd7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f155c460-8738-4f81-b52b-1cf79f91759a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05514947-722f-42b7-be30-b7417da0ddd7",
        "cursor": {
          "ref": "a86d48d8-544f-4a69-895d-20a9b0d42870",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "12c2d687-8b6c-41bd-ba4a-f2313c1f4fa4"
        },
        "item": {
          "id": "05514947-722f-42b7-be30-b7417da0ddd7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f155c460-8738-4f81-b52b-1cf79f91759a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef90a0d-4ce4-451a-80d8-dd20e5e6b648",
        "cursor": {
          "ref": "fd53f496-38fc-45ad-b27b-d5554da176a4",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8bd563d8-4775-4fcc-86f7-991e88d56b6a"
        },
        "item": {
          "id": "0ef90a0d-4ce4-451a-80d8-dd20e5e6b648",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e0a61de5-b6fd-4c10-afaa-d46ea3fdda8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef90a0d-4ce4-451a-80d8-dd20e5e6b648",
        "cursor": {
          "ref": "fd53f496-38fc-45ad-b27b-d5554da176a4",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8bd563d8-4775-4fcc-86f7-991e88d56b6a"
        },
        "item": {
          "id": "0ef90a0d-4ce4-451a-80d8-dd20e5e6b648",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e0a61de5-b6fd-4c10-afaa-d46ea3fdda8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f24f990-117b-443e-a957-ca9de2629ed7",
        "cursor": {
          "ref": "406d54b6-fc0b-4e03-aa23-10096f5bc2c3",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d2992e20-b9d4-4ca8-8a3b-fc8d50a7c2d2"
        },
        "item": {
          "id": "7f24f990-117b-443e-a957-ca9de2629ed7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9b4a1b95-a0ac-4048-add4-f107c88a7cae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f24f990-117b-443e-a957-ca9de2629ed7",
        "cursor": {
          "ref": "406d54b6-fc0b-4e03-aa23-10096f5bc2c3",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d2992e20-b9d4-4ca8-8a3b-fc8d50a7c2d2"
        },
        "item": {
          "id": "7f24f990-117b-443e-a957-ca9de2629ed7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9b4a1b95-a0ac-4048-add4-f107c88a7cae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9d2340-4279-4639-bc2a-ad8e69f68c49",
        "cursor": {
          "ref": "f2ad5f1d-6bef-49b3-bc23-feb059dbf6bc",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "035389c5-fe7a-41d0-867c-44a270b7a726"
        },
        "item": {
          "id": "dd9d2340-4279-4639-bc2a-ad8e69f68c49",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c656a251-4340-4b4a-a198-71e68777767a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9d2340-4279-4639-bc2a-ad8e69f68c49",
        "cursor": {
          "ref": "f2ad5f1d-6bef-49b3-bc23-feb059dbf6bc",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "035389c5-fe7a-41d0-867c-44a270b7a726"
        },
        "item": {
          "id": "dd9d2340-4279-4639-bc2a-ad8e69f68c49",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c656a251-4340-4b4a-a198-71e68777767a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c63027f-6d87-4302-8220-313ed58e2808",
        "cursor": {
          "ref": "344dcc17-f812-4f09-80bc-a7435a1b8647",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "17e1d895-2c90-4a12-9268-4ca13947d5cc"
        },
        "item": {
          "id": "5c63027f-6d87-4302-8220-313ed58e2808",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5587047d-f47b-442f-a35f-adc3ffec26f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 93,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c63027f-6d87-4302-8220-313ed58e2808",
        "cursor": {
          "ref": "344dcc17-f812-4f09-80bc-a7435a1b8647",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "17e1d895-2c90-4a12-9268-4ca13947d5cc"
        },
        "item": {
          "id": "5c63027f-6d87-4302-8220-313ed58e2808",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5587047d-f47b-442f-a35f-adc3ffec26f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 93,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0202814f-0676-4cdc-9e18-e203788adcf5",
        "cursor": {
          "ref": "d23b4a47-3b36-4bf8-9b0a-1c851171980a",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f4efcb86-77b9-4135-be3e-ffdfc8efbe7f"
        },
        "item": {
          "id": "0202814f-0676-4cdc-9e18-e203788adcf5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5fd066c4-49ce-4ca6-9976-2d6bde636365",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0202814f-0676-4cdc-9e18-e203788adcf5",
        "cursor": {
          "ref": "d23b4a47-3b36-4bf8-9b0a-1c851171980a",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f4efcb86-77b9-4135-be3e-ffdfc8efbe7f"
        },
        "item": {
          "id": "0202814f-0676-4cdc-9e18-e203788adcf5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5fd066c4-49ce-4ca6-9976-2d6bde636365",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ac56b0-e886-465a-87e6-1903c743bee3",
        "cursor": {
          "ref": "34b18ca7-be85-4b0f-bcf2-e78ff79b70dc",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a01329e0-c8d6-4e9b-a51f-cf5cea314b5f"
        },
        "item": {
          "id": "d8ac56b0-e886-465a-87e6-1903c743bee3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7d953747-b8ef-42fa-a9c9-e70c9e0ed805",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ac56b0-e886-465a-87e6-1903c743bee3",
        "cursor": {
          "ref": "34b18ca7-be85-4b0f-bcf2-e78ff79b70dc",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a01329e0-c8d6-4e9b-a51f-cf5cea314b5f"
        },
        "item": {
          "id": "d8ac56b0-e886-465a-87e6-1903c743bee3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7d953747-b8ef-42fa-a9c9-e70c9e0ed805",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e714e62-e354-4f1e-ba8b-d45f0fade14b",
        "cursor": {
          "ref": "7f24ad2b-a085-44dd-9b6c-ae63760cb5a7",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8ef15153-0c47-44cf-8808-0b678863e97a"
        },
        "item": {
          "id": "4e714e62-e354-4f1e-ba8b-d45f0fade14b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a1a55bed-27b6-4a4a-8eb4-a2634d9817a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e714e62-e354-4f1e-ba8b-d45f0fade14b",
        "cursor": {
          "ref": "7f24ad2b-a085-44dd-9b6c-ae63760cb5a7",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8ef15153-0c47-44cf-8808-0b678863e97a"
        },
        "item": {
          "id": "4e714e62-e354-4f1e-ba8b-d45f0fade14b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a1a55bed-27b6-4a4a-8eb4-a2634d9817a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2407d39c-06e1-470b-b795-cbdd450392b1",
        "cursor": {
          "ref": "6dfb6896-ebd5-4931-8ed0-e5e78ca95113",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "87d07e14-9514-4b00-8912-6176a59428f4"
        },
        "item": {
          "id": "2407d39c-06e1-470b-b795-cbdd450392b1",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "adcb2061-bf26-45fb-9a58-1304f395bb85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2407d39c-06e1-470b-b795-cbdd450392b1",
        "cursor": {
          "ref": "6dfb6896-ebd5-4931-8ed0-e5e78ca95113",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "87d07e14-9514-4b00-8912-6176a59428f4"
        },
        "item": {
          "id": "2407d39c-06e1-470b-b795-cbdd450392b1",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "adcb2061-bf26-45fb-9a58-1304f395bb85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6ecf1a-8d4e-470e-a9a4-85a4bf3af405",
        "cursor": {
          "ref": "edfb3e27-69a8-4196-9d37-0e21e8aa9c28",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7e57ed02-1819-4cb3-8f7b-c8db66cd4593"
        },
        "item": {
          "id": "bd6ecf1a-8d4e-470e-a9a4-85a4bf3af405",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7753bad3-30fb-43c2-9f61-ba1de11c0cc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6ecf1a-8d4e-470e-a9a4-85a4bf3af405",
        "cursor": {
          "ref": "edfb3e27-69a8-4196-9d37-0e21e8aa9c28",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7e57ed02-1819-4cb3-8f7b-c8db66cd4593"
        },
        "item": {
          "id": "bd6ecf1a-8d4e-470e-a9a4-85a4bf3af405",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7753bad3-30fb-43c2-9f61-ba1de11c0cc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb64fc95-f3bb-4759-a8dd-22168bd8c4a9",
        "cursor": {
          "ref": "6763b696-1a04-4be9-9f80-f53beafdd294",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5de50292-b450-4578-9b18-7de1ff6c995a"
        },
        "item": {
          "id": "eb64fc95-f3bb-4759-a8dd-22168bd8c4a9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9c16be90-291f-41f2-a416-d266db58ec50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb64fc95-f3bb-4759-a8dd-22168bd8c4a9",
        "cursor": {
          "ref": "6763b696-1a04-4be9-9f80-f53beafdd294",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5de50292-b450-4578-9b18-7de1ff6c995a"
        },
        "item": {
          "id": "eb64fc95-f3bb-4759-a8dd-22168bd8c4a9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9c16be90-291f-41f2-a416-d266db58ec50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334d964d-2949-4b7b-9fc1-f16238c3d832",
        "cursor": {
          "ref": "2e8f92c9-cf4d-482d-ba54-51de8d21141e",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6345e3d3-c336-43ce-9439-427320484cc4"
        },
        "item": {
          "id": "334d964d-2949-4b7b-9fc1-f16238c3d832",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d869bbe5-adc0-423b-9a2d-a6ae8c48f20d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334d964d-2949-4b7b-9fc1-f16238c3d832",
        "cursor": {
          "ref": "2e8f92c9-cf4d-482d-ba54-51de8d21141e",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6345e3d3-c336-43ce-9439-427320484cc4"
        },
        "item": {
          "id": "334d964d-2949-4b7b-9fc1-f16238c3d832",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d869bbe5-adc0-423b-9a2d-a6ae8c48f20d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf89497-4f20-4057-82f2-a589ba292482",
        "cursor": {
          "ref": "c501d716-dfd1-48ec-9c9d-ddf62e629432",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "902156a5-5ecf-4599-b511-c4c84dadfb83"
        },
        "item": {
          "id": "5cf89497-4f20-4057-82f2-a589ba292482",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "15245748-c0de-4eb2-a340-ba815e9bc438",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf89497-4f20-4057-82f2-a589ba292482",
        "cursor": {
          "ref": "c501d716-dfd1-48ec-9c9d-ddf62e629432",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "902156a5-5ecf-4599-b511-c4c84dadfb83"
        },
        "item": {
          "id": "5cf89497-4f20-4057-82f2-a589ba292482",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "15245748-c0de-4eb2-a340-ba815e9bc438",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6046a88a-ec31-4033-87ca-1d5061439a47",
        "cursor": {
          "ref": "02526892-d045-476e-99a8-cb25691e2763",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "609e3b3a-4153-4ce5-9408-35b2d5bf88b5"
        },
        "item": {
          "id": "6046a88a-ec31-4033-87ca-1d5061439a47",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4fd4fed9-fdd1-4be6-b04d-bb6dc4d6bad2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6046a88a-ec31-4033-87ca-1d5061439a47",
        "cursor": {
          "ref": "02526892-d045-476e-99a8-cb25691e2763",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "609e3b3a-4153-4ce5-9408-35b2d5bf88b5"
        },
        "item": {
          "id": "6046a88a-ec31-4033-87ca-1d5061439a47",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4fd4fed9-fdd1-4be6-b04d-bb6dc4d6bad2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3baff855-7bd0-44c5-ae8d-7df22879f083",
        "cursor": {
          "ref": "61a47c24-a79a-48fc-9a8a-bb1757244921",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "612931b9-4266-42c8-af9b-e7f8767b4176"
        },
        "item": {
          "id": "3baff855-7bd0-44c5-ae8d-7df22879f083",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f3bc31c1-3750-4db0-ab83-693e7a9ae26f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3baff855-7bd0-44c5-ae8d-7df22879f083",
        "cursor": {
          "ref": "61a47c24-a79a-48fc-9a8a-bb1757244921",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "612931b9-4266-42c8-af9b-e7f8767b4176"
        },
        "item": {
          "id": "3baff855-7bd0-44c5-ae8d-7df22879f083",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f3bc31c1-3750-4db0-ab83-693e7a9ae26f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dfadd6-7f83-423c-ace8-b879619fa0ad",
        "cursor": {
          "ref": "612a090a-6672-4a9b-a4b1-adf75be980c1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3ebe072d-079b-4497-8905-89052ab17ffe"
        },
        "item": {
          "id": "17dfadd6-7f83-423c-ace8-b879619fa0ad",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "25630ad8-77b5-4d10-90dd-aaa4c2ed983f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dfadd6-7f83-423c-ace8-b879619fa0ad",
        "cursor": {
          "ref": "612a090a-6672-4a9b-a4b1-adf75be980c1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3ebe072d-079b-4497-8905-89052ab17ffe"
        },
        "item": {
          "id": "17dfadd6-7f83-423c-ace8-b879619fa0ad",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "25630ad8-77b5-4d10-90dd-aaa4c2ed983f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80fb794-b45a-48d7-b26a-4b261b010390",
        "cursor": {
          "ref": "785b679c-d986-43af-b6de-ae186c2a0342",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e75d4819-3aa0-44de-97c2-aeb2ca6b802d"
        },
        "item": {
          "id": "d80fb794-b45a-48d7-b26a-4b261b010390",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4211cef0-9714-400a-9c20-00e148370416",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80fb794-b45a-48d7-b26a-4b261b010390",
        "cursor": {
          "ref": "785b679c-d986-43af-b6de-ae186c2a0342",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e75d4819-3aa0-44de-97c2-aeb2ca6b802d"
        },
        "item": {
          "id": "d80fb794-b45a-48d7-b26a-4b261b010390",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4211cef0-9714-400a-9c20-00e148370416",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d6f353-239a-453d-b796-cdc5918f7761",
        "cursor": {
          "ref": "b2c784e8-77f1-4d03-b952-f4f0eaf34679",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fc1c6149-9f5c-4c46-8db0-7ced6adc9cc0"
        },
        "item": {
          "id": "67d6f353-239a-453d-b796-cdc5918f7761",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a0609f9c-fe6c-4e6b-a06a-d5f0d9b337b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d6f353-239a-453d-b796-cdc5918f7761",
        "cursor": {
          "ref": "b2c784e8-77f1-4d03-b952-f4f0eaf34679",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fc1c6149-9f5c-4c46-8db0-7ced6adc9cc0"
        },
        "item": {
          "id": "67d6f353-239a-453d-b796-cdc5918f7761",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a0609f9c-fe6c-4e6b-a06a-d5f0d9b337b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83329e0f-a8f9-4c6f-a327-05c64986de64",
        "cursor": {
          "ref": "cc39cf95-8fa1-4cf2-8e28-f9f12c1d3ed4",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c76e2327-27e3-4eef-a290-5e1cbdfa4a58"
        },
        "item": {
          "id": "83329e0f-a8f9-4c6f-a327-05c64986de64",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ba0c08c8-3bd1-4b2c-a468-36723277416f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83329e0f-a8f9-4c6f-a327-05c64986de64",
        "cursor": {
          "ref": "cc39cf95-8fa1-4cf2-8e28-f9f12c1d3ed4",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c76e2327-27e3-4eef-a290-5e1cbdfa4a58"
        },
        "item": {
          "id": "83329e0f-a8f9-4c6f-a327-05c64986de64",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ba0c08c8-3bd1-4b2c-a468-36723277416f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087f7563-b38d-40e6-945e-728cad95c8c6",
        "cursor": {
          "ref": "337d5ccd-5377-47d4-8dba-baa964ac8c5c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cfed6be7-879d-434d-962c-c6fad17782b6"
        },
        "item": {
          "id": "087f7563-b38d-40e6-945e-728cad95c8c6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4dfffba2-5563-4456-b773-5e8c92205cde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087f7563-b38d-40e6-945e-728cad95c8c6",
        "cursor": {
          "ref": "337d5ccd-5377-47d4-8dba-baa964ac8c5c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cfed6be7-879d-434d-962c-c6fad17782b6"
        },
        "item": {
          "id": "087f7563-b38d-40e6-945e-728cad95c8c6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4dfffba2-5563-4456-b773-5e8c92205cde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b9af19-f27d-45b0-a3bb-865ba7c4ed4a",
        "cursor": {
          "ref": "1867d254-553e-467e-9096-c5a79a4a21a2",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a12e8855-40fb-49a1-9b8f-17f82d64b746"
        },
        "item": {
          "id": "87b9af19-f27d-45b0-a3bb-865ba7c4ed4a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3cfedd76-905b-4b44-939e-20cf3cfebe7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 96,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b9af19-f27d-45b0-a3bb-865ba7c4ed4a",
        "cursor": {
          "ref": "1867d254-553e-467e-9096-c5a79a4a21a2",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a12e8855-40fb-49a1-9b8f-17f82d64b746"
        },
        "item": {
          "id": "87b9af19-f27d-45b0-a3bb-865ba7c4ed4a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3cfedd76-905b-4b44-939e-20cf3cfebe7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 96,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04012ec5-e0e7-46c1-8ee1-538e05b9e971",
        "cursor": {
          "ref": "e1b30fe0-cc76-4f25-bffb-a109e00b60c7",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4ac65317-0008-472c-9106-2ea4d2d2e77c"
        },
        "item": {
          "id": "04012ec5-e0e7-46c1-8ee1-538e05b9e971",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "342d1914-b162-4169-9c5f-e305fe50bea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04012ec5-e0e7-46c1-8ee1-538e05b9e971",
        "cursor": {
          "ref": "e1b30fe0-cc76-4f25-bffb-a109e00b60c7",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4ac65317-0008-472c-9106-2ea4d2d2e77c"
        },
        "item": {
          "id": "04012ec5-e0e7-46c1-8ee1-538e05b9e971",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "342d1914-b162-4169-9c5f-e305fe50bea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9818ef-855d-4b01-845a-e878f06d4eb1",
        "cursor": {
          "ref": "24a411ca-cb1f-4360-a875-c3fa2830e2a6",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4935b8a6-4b19-4e70-b4ed-535194583800"
        },
        "item": {
          "id": "8d9818ef-855d-4b01-845a-e878f06d4eb1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0ff7498a-9886-4b28-815b-f99a2ed5bfe8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9818ef-855d-4b01-845a-e878f06d4eb1",
        "cursor": {
          "ref": "24a411ca-cb1f-4360-a875-c3fa2830e2a6",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4935b8a6-4b19-4e70-b4ed-535194583800"
        },
        "item": {
          "id": "8d9818ef-855d-4b01-845a-e878f06d4eb1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0ff7498a-9886-4b28-815b-f99a2ed5bfe8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be259f4-a03d-442a-ab43-e81af9ae3c8e",
        "cursor": {
          "ref": "9056683b-0eae-42d9-92ef-75260e77ab7a",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0ba6eb9f-b7b0-49ba-a870-943526be34fd"
        },
        "item": {
          "id": "8be259f4-a03d-442a-ab43-e81af9ae3c8e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ef98657f-de59-47d7-821c-7200f2af017d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be259f4-a03d-442a-ab43-e81af9ae3c8e",
        "cursor": {
          "ref": "9056683b-0eae-42d9-92ef-75260e77ab7a",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0ba6eb9f-b7b0-49ba-a870-943526be34fd"
        },
        "item": {
          "id": "8be259f4-a03d-442a-ab43-e81af9ae3c8e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ef98657f-de59-47d7-821c-7200f2af017d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d6d71f-15ed-43bd-8eac-f39a67cecbb9",
        "cursor": {
          "ref": "882d93f8-e6bc-49d6-aa92-8909754e7911",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b3853cb0-e793-461c-84e8-bae63fa0dc94"
        },
        "item": {
          "id": "90d6d71f-15ed-43bd-8eac-f39a67cecbb9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3a5d7ad1-4744-495e-97a1-ed558c350f01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d6d71f-15ed-43bd-8eac-f39a67cecbb9",
        "cursor": {
          "ref": "882d93f8-e6bc-49d6-aa92-8909754e7911",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b3853cb0-e793-461c-84e8-bae63fa0dc94"
        },
        "item": {
          "id": "90d6d71f-15ed-43bd-8eac-f39a67cecbb9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3a5d7ad1-4744-495e-97a1-ed558c350f01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83d4669-3f8e-4563-822d-4232b7cc6a0c",
        "cursor": {
          "ref": "1e3a3a17-6245-42cc-be84-0320a15e3dd1",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "641b74bb-581d-436f-bf2f-6b9a80e140f9"
        },
        "item": {
          "id": "c83d4669-3f8e-4563-822d-4232b7cc6a0c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "68e885f5-5455-4a9f-83f2-6309a8cbb446",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83d4669-3f8e-4563-822d-4232b7cc6a0c",
        "cursor": {
          "ref": "1e3a3a17-6245-42cc-be84-0320a15e3dd1",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "641b74bb-581d-436f-bf2f-6b9a80e140f9"
        },
        "item": {
          "id": "c83d4669-3f8e-4563-822d-4232b7cc6a0c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "68e885f5-5455-4a9f-83f2-6309a8cbb446",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd4451e-2a1b-4acc-8a86-1ea8250df7ff",
        "cursor": {
          "ref": "9cf83217-2002-4c8a-b207-ee242339f3e7",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ddd800a6-96e2-456c-b600-f51879d438ce"
        },
        "item": {
          "id": "7fd4451e-2a1b-4acc-8a86-1ea8250df7ff",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9f997914-a91f-4651-b950-45886b8be3c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd4451e-2a1b-4acc-8a86-1ea8250df7ff",
        "cursor": {
          "ref": "9cf83217-2002-4c8a-b207-ee242339f3e7",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ddd800a6-96e2-456c-b600-f51879d438ce"
        },
        "item": {
          "id": "7fd4451e-2a1b-4acc-8a86-1ea8250df7ff",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9f997914-a91f-4651-b950-45886b8be3c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768dee49-84c3-4d69-8ad1-c1d1abd00232",
        "cursor": {
          "ref": "64fbf8b8-20c4-4f08-a7b3-d399e981326f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "56bfdbf1-08ee-43bf-8e42-61315ecd03dd"
        },
        "item": {
          "id": "768dee49-84c3-4d69-8ad1-c1d1abd00232",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bc4a0053-dcb8-48bc-a6de-8b8987654f07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768dee49-84c3-4d69-8ad1-c1d1abd00232",
        "cursor": {
          "ref": "64fbf8b8-20c4-4f08-a7b3-d399e981326f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "56bfdbf1-08ee-43bf-8e42-61315ecd03dd"
        },
        "item": {
          "id": "768dee49-84c3-4d69-8ad1-c1d1abd00232",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bc4a0053-dcb8-48bc-a6de-8b8987654f07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e68b23-f4ca-4ce7-b1fc-cd589dbfcff1",
        "cursor": {
          "ref": "f46d8682-2221-48ca-8c01-18203fe1c431",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "511db378-4030-4663-a969-d4cb22c05528"
        },
        "item": {
          "id": "66e68b23-f4ca-4ce7-b1fc-cd589dbfcff1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7fd701d7-9c6b-4b5d-bd87-4bc53db15e65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e68b23-f4ca-4ce7-b1fc-cd589dbfcff1",
        "cursor": {
          "ref": "f46d8682-2221-48ca-8c01-18203fe1c431",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "511db378-4030-4663-a969-d4cb22c05528"
        },
        "item": {
          "id": "66e68b23-f4ca-4ce7-b1fc-cd589dbfcff1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7fd701d7-9c6b-4b5d-bd87-4bc53db15e65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c2ac97-022a-49e1-b459-b136521a3fcb",
        "cursor": {
          "ref": "f4995825-6716-49b1-bdc9-4b08f46bd3b1",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "476f2023-cf16-4752-90fe-39bc9fb31466"
        },
        "item": {
          "id": "b3c2ac97-022a-49e1-b459-b136521a3fcb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "94c9af38-3aea-483f-b3fa-83e25bce16af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 159,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c2ac97-022a-49e1-b459-b136521a3fcb",
        "cursor": {
          "ref": "f4995825-6716-49b1-bdc9-4b08f46bd3b1",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "476f2023-cf16-4752-90fe-39bc9fb31466"
        },
        "item": {
          "id": "b3c2ac97-022a-49e1-b459-b136521a3fcb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "94c9af38-3aea-483f-b3fa-83e25bce16af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 159,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b72ef7-4299-47b3-8b18-5227fdf4cd9c",
        "cursor": {
          "ref": "8eeffb7e-9199-4ba5-9578-25482a282664",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "80de70e7-3a0a-43d6-9133-a73d58627471"
        },
        "item": {
          "id": "71b72ef7-4299-47b3-8b18-5227fdf4cd9c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dbdeeee5-578d-4e68-a49e-3306859f39e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b72ef7-4299-47b3-8b18-5227fdf4cd9c",
        "cursor": {
          "ref": "8eeffb7e-9199-4ba5-9578-25482a282664",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "80de70e7-3a0a-43d6-9133-a73d58627471"
        },
        "item": {
          "id": "71b72ef7-4299-47b3-8b18-5227fdf4cd9c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dbdeeee5-578d-4e68-a49e-3306859f39e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a966e4c8-ba4e-449b-b4ad-7cda7005549b",
        "cursor": {
          "ref": "4facb947-372d-4017-bdfd-cbbf8551d064",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "07dda69c-fc7a-432d-91fd-d8b814ed05ab"
        },
        "item": {
          "id": "a966e4c8-ba4e-449b-b4ad-7cda7005549b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "32f2c401-d806-4e26-9057-ec1abb201d00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a966e4c8-ba4e-449b-b4ad-7cda7005549b",
        "cursor": {
          "ref": "4facb947-372d-4017-bdfd-cbbf8551d064",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "07dda69c-fc7a-432d-91fd-d8b814ed05ab"
        },
        "item": {
          "id": "a966e4c8-ba4e-449b-b4ad-7cda7005549b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "32f2c401-d806-4e26-9057-ec1abb201d00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ed93f8-6b77-4f89-abac-0b27aacbafc2",
        "cursor": {
          "ref": "38891306-e2ce-41e2-93f8-c31bbb497c32",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f135bb01-18e1-42ff-89af-df29e54d908a"
        },
        "item": {
          "id": "f4ed93f8-6b77-4f89-abac-0b27aacbafc2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b0974691-9cb7-47c1-a7b5-8f56d62a30a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ed93f8-6b77-4f89-abac-0b27aacbafc2",
        "cursor": {
          "ref": "38891306-e2ce-41e2-93f8-c31bbb497c32",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f135bb01-18e1-42ff-89af-df29e54d908a"
        },
        "item": {
          "id": "f4ed93f8-6b77-4f89-abac-0b27aacbafc2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b0974691-9cb7-47c1-a7b5-8f56d62a30a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5871e662-015b-48c6-b3d6-71209578540b",
        "cursor": {
          "ref": "ae35218b-5395-4097-b98c-bdf629f42ccf",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1dd3cd56-d338-4cdb-92a8-43caeb5a2ebd"
        },
        "item": {
          "id": "5871e662-015b-48c6-b3d6-71209578540b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fa1a95b4-e7ad-47a7-b41c-66c399d89c99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5871e662-015b-48c6-b3d6-71209578540b",
        "cursor": {
          "ref": "ae35218b-5395-4097-b98c-bdf629f42ccf",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1dd3cd56-d338-4cdb-92a8-43caeb5a2ebd"
        },
        "item": {
          "id": "5871e662-015b-48c6-b3d6-71209578540b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fa1a95b4-e7ad-47a7-b41c-66c399d89c99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7be0d5-9548-4318-b735-ec8112521a7a",
        "cursor": {
          "ref": "2b1de945-fa0f-4b32-99a7-f1267645550c",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "357dc8d0-6115-4d3c-8865-068b44fa242c"
        },
        "item": {
          "id": "0e7be0d5-9548-4318-b735-ec8112521a7a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9a4322a4-599c-4294-ba89-24066cf2f7fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7be0d5-9548-4318-b735-ec8112521a7a",
        "cursor": {
          "ref": "2b1de945-fa0f-4b32-99a7-f1267645550c",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "357dc8d0-6115-4d3c-8865-068b44fa242c"
        },
        "item": {
          "id": "0e7be0d5-9548-4318-b735-ec8112521a7a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9a4322a4-599c-4294-ba89-24066cf2f7fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668a649e-1982-4c62-8b72-47746b0be82e",
        "cursor": {
          "ref": "031a1d6a-1ec3-40c7-af3d-a3abcc8b99c1",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ce6bc529-e06c-4829-879b-e0876f9a1509"
        },
        "item": {
          "id": "668a649e-1982-4c62-8b72-47746b0be82e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0899b5d3-d140-4843-b51a-f1d7560394d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668a649e-1982-4c62-8b72-47746b0be82e",
        "cursor": {
          "ref": "031a1d6a-1ec3-40c7-af3d-a3abcc8b99c1",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ce6bc529-e06c-4829-879b-e0876f9a1509"
        },
        "item": {
          "id": "668a649e-1982-4c62-8b72-47746b0be82e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0899b5d3-d140-4843-b51a-f1d7560394d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee70a87-d52c-441d-b4f7-4e4a7f24d8ab",
        "cursor": {
          "ref": "9839b5dc-6572-4e9a-832d-7582e33b1d71",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6342ef57-fd41-44da-adb8-432fefa648e2"
        },
        "item": {
          "id": "4ee70a87-d52c-441d-b4f7-4e4a7f24d8ab",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f123d0cb-aa3a-4290-bf68-56ac52c2a92e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee70a87-d52c-441d-b4f7-4e4a7f24d8ab",
        "cursor": {
          "ref": "9839b5dc-6572-4e9a-832d-7582e33b1d71",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6342ef57-fd41-44da-adb8-432fefa648e2"
        },
        "item": {
          "id": "4ee70a87-d52c-441d-b4f7-4e4a7f24d8ab",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f123d0cb-aa3a-4290-bf68-56ac52c2a92e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d29afe4-8241-4b44-84dd-731aab2f2575",
        "cursor": {
          "ref": "16571345-e381-43ea-8274-b2aa1fa1d7e4",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2de1f47d-5e35-434b-8ffe-ecf70d54fbe4"
        },
        "item": {
          "id": "1d29afe4-8241-4b44-84dd-731aab2f2575",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1ebb7751-527c-430b-862a-6edc93f688a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d29afe4-8241-4b44-84dd-731aab2f2575",
        "cursor": {
          "ref": "16571345-e381-43ea-8274-b2aa1fa1d7e4",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2de1f47d-5e35-434b-8ffe-ecf70d54fbe4"
        },
        "item": {
          "id": "1d29afe4-8241-4b44-84dd-731aab2f2575",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1ebb7751-527c-430b-862a-6edc93f688a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd407fd6-b4f4-4601-b997-c54ef5550d10",
        "cursor": {
          "ref": "40110462-d93a-4a17-a75a-48e490f657e7",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "172a611f-1097-4ba8-ba02-dd5a45d744f0"
        },
        "item": {
          "id": "dd407fd6-b4f4-4601-b997-c54ef5550d10",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "80e8af0c-1894-4a33-bae4-9d39058b18bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd407fd6-b4f4-4601-b997-c54ef5550d10",
        "cursor": {
          "ref": "40110462-d93a-4a17-a75a-48e490f657e7",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "172a611f-1097-4ba8-ba02-dd5a45d744f0"
        },
        "item": {
          "id": "dd407fd6-b4f4-4601-b997-c54ef5550d10",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "80e8af0c-1894-4a33-bae4-9d39058b18bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98f97cf-f648-4a36-8dc4-069106f3881e",
        "cursor": {
          "ref": "b9491bb5-1f4a-4691-8d54-02141a228d2e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bd6ae62b-7301-4d92-ba8e-6d916498e967"
        },
        "item": {
          "id": "c98f97cf-f648-4a36-8dc4-069106f3881e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cf381ef7-b44a-4d4f-bc09-e040fb5855c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98f97cf-f648-4a36-8dc4-069106f3881e",
        "cursor": {
          "ref": "b9491bb5-1f4a-4691-8d54-02141a228d2e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bd6ae62b-7301-4d92-ba8e-6d916498e967"
        },
        "item": {
          "id": "c98f97cf-f648-4a36-8dc4-069106f3881e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cf381ef7-b44a-4d4f-bc09-e040fb5855c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd6f0ab-e03b-43e0-924d-1ab6634b4287",
        "cursor": {
          "ref": "60282d93-f921-4d33-b02a-d93416a29905",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "37b371fb-8da0-40a5-a2b7-0e4bff0c8ea7"
        },
        "item": {
          "id": "2bd6f0ab-e03b-43e0-924d-1ab6634b4287",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "17ee025d-18a0-4a0f-b9e1-30cf13a3b767",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd6f0ab-e03b-43e0-924d-1ab6634b4287",
        "cursor": {
          "ref": "60282d93-f921-4d33-b02a-d93416a29905",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "37b371fb-8da0-40a5-a2b7-0e4bff0c8ea7"
        },
        "item": {
          "id": "2bd6f0ab-e03b-43e0-924d-1ab6634b4287",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "17ee025d-18a0-4a0f-b9e1-30cf13a3b767",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8557e3b7-bb6e-4b8c-abfd-96e31345ffa0",
        "cursor": {
          "ref": "30711f67-7679-4e1b-87e2-9fcc96f21a50",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "dd14494d-9735-4994-b26a-cf7659cbcfb2"
        },
        "item": {
          "id": "8557e3b7-bb6e-4b8c-abfd-96e31345ffa0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e088a8f8-fbf0-461e-8654-a73af28f612d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8557e3b7-bb6e-4b8c-abfd-96e31345ffa0",
        "cursor": {
          "ref": "30711f67-7679-4e1b-87e2-9fcc96f21a50",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "dd14494d-9735-4994-b26a-cf7659cbcfb2"
        },
        "item": {
          "id": "8557e3b7-bb6e-4b8c-abfd-96e31345ffa0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e088a8f8-fbf0-461e-8654-a73af28f612d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00e9e7b-93e4-4ffc-83c1-fb80c70f2dc2",
        "cursor": {
          "ref": "86461e1b-6622-4c46-8ec3-3e32f5fd17b3",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "897c910f-111b-4a26-82fe-ecbc5a329dab"
        },
        "item": {
          "id": "f00e9e7b-93e4-4ffc-83c1-fb80c70f2dc2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d5746813-f586-49a2-94e3-d435d3043925",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00e9e7b-93e4-4ffc-83c1-fb80c70f2dc2",
        "cursor": {
          "ref": "86461e1b-6622-4c46-8ec3-3e32f5fd17b3",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "897c910f-111b-4a26-82fe-ecbc5a329dab"
        },
        "item": {
          "id": "f00e9e7b-93e4-4ffc-83c1-fb80c70f2dc2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d5746813-f586-49a2-94e3-d435d3043925",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d653c1ee-add6-4859-9415-07fcc5360b64",
        "cursor": {
          "ref": "8072b19f-e9a7-4c2a-95cb-e4bdf1eb52a3",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "253eb83f-ff7c-4e3f-a8b0-7962521c2e02"
        },
        "item": {
          "id": "d653c1ee-add6-4859-9415-07fcc5360b64",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "16f2627b-6248-41fa-bca0-bf4888b53122",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d653c1ee-add6-4859-9415-07fcc5360b64",
        "cursor": {
          "ref": "8072b19f-e9a7-4c2a-95cb-e4bdf1eb52a3",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "253eb83f-ff7c-4e3f-a8b0-7962521c2e02"
        },
        "item": {
          "id": "d653c1ee-add6-4859-9415-07fcc5360b64",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "16f2627b-6248-41fa-bca0-bf4888b53122",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eced1caa-d764-4917-ac4c-d65c0313c292",
        "cursor": {
          "ref": "81a1564f-ae59-4e0d-be69-1dc74e9da0f0",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "60a1e078-2755-4675-8a0b-fc8b29959fd3"
        },
        "item": {
          "id": "eced1caa-d764-4917-ac4c-d65c0313c292",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a2a32dba-c73b-4e04-93fa-6ab1206bd154",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eced1caa-d764-4917-ac4c-d65c0313c292",
        "cursor": {
          "ref": "81a1564f-ae59-4e0d-be69-1dc74e9da0f0",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "60a1e078-2755-4675-8a0b-fc8b29959fd3"
        },
        "item": {
          "id": "eced1caa-d764-4917-ac4c-d65c0313c292",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a2a32dba-c73b-4e04-93fa-6ab1206bd154",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccf5817-c7a2-4a5d-b7e6-abfed9d1da36",
        "cursor": {
          "ref": "0adb83f9-f511-4716-9dde-d0058f8c85a6",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "28f06f19-077c-4bb9-aa48-cc8a96fa9086"
        },
        "item": {
          "id": "8ccf5817-c7a2-4a5d-b7e6-abfed9d1da36",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6335ebbe-de7c-4719-a421-b715927ab7f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccf5817-c7a2-4a5d-b7e6-abfed9d1da36",
        "cursor": {
          "ref": "0adb83f9-f511-4716-9dde-d0058f8c85a6",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "28f06f19-077c-4bb9-aa48-cc8a96fa9086"
        },
        "item": {
          "id": "8ccf5817-c7a2-4a5d-b7e6-abfed9d1da36",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6335ebbe-de7c-4719-a421-b715927ab7f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0347dde7-8b4d-4c2c-b27f-127a969da08e",
        "cursor": {
          "ref": "ac5d1e10-41d7-4e65-a847-92c7908ed3d8",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "27a3ae64-ef06-479c-a778-f6a79e0cb76e"
        },
        "item": {
          "id": "0347dde7-8b4d-4c2c-b27f-127a969da08e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "54bf19ad-5825-40b6-ba7d-9bd53f347cde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0347dde7-8b4d-4c2c-b27f-127a969da08e",
        "cursor": {
          "ref": "ac5d1e10-41d7-4e65-a847-92c7908ed3d8",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "27a3ae64-ef06-479c-a778-f6a79e0cb76e"
        },
        "item": {
          "id": "0347dde7-8b4d-4c2c-b27f-127a969da08e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "54bf19ad-5825-40b6-ba7d-9bd53f347cde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630b0820-7657-442d-8038-839f83944daf",
        "cursor": {
          "ref": "f052bd64-b511-4014-b122-d00e21fe2d18",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fce0ca92-9498-43c1-a823-12512b9fd62b"
        },
        "item": {
          "id": "630b0820-7657-442d-8038-839f83944daf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7859b72c-b450-47a4-b768-240a9d71cf49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630b0820-7657-442d-8038-839f83944daf",
        "cursor": {
          "ref": "f052bd64-b511-4014-b122-d00e21fe2d18",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fce0ca92-9498-43c1-a823-12512b9fd62b"
        },
        "item": {
          "id": "630b0820-7657-442d-8038-839f83944daf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7859b72c-b450-47a4-b768-240a9d71cf49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9acab7-ad2b-4d9f-bba5-a6c1544efe0a",
        "cursor": {
          "ref": "2c74fb73-b82b-48bf-8e96-ed4787b5b7aa",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a80f2ea6-e503-469a-8095-99a1de4d431e"
        },
        "item": {
          "id": "3d9acab7-ad2b-4d9f-bba5-a6c1544efe0a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "66a87868-7969-4857-b969-444af41f0971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9acab7-ad2b-4d9f-bba5-a6c1544efe0a",
        "cursor": {
          "ref": "2c74fb73-b82b-48bf-8e96-ed4787b5b7aa",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a80f2ea6-e503-469a-8095-99a1de4d431e"
        },
        "item": {
          "id": "3d9acab7-ad2b-4d9f-bba5-a6c1544efe0a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "66a87868-7969-4857-b969-444af41f0971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4917088d-4664-4c21-b746-2a48becc9a9f",
        "cursor": {
          "ref": "3f571adc-9d14-41b7-8aca-2b30d008341d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "04ca24c6-0df8-4a9d-b39b-e68def804c83"
        },
        "item": {
          "id": "4917088d-4664-4c21-b746-2a48becc9a9f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3d6e6df6-593a-4103-8852-fe98a4f20002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4917088d-4664-4c21-b746-2a48becc9a9f",
        "cursor": {
          "ref": "3f571adc-9d14-41b7-8aca-2b30d008341d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "04ca24c6-0df8-4a9d-b39b-e68def804c83"
        },
        "item": {
          "id": "4917088d-4664-4c21-b746-2a48becc9a9f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3d6e6df6-593a-4103-8852-fe98a4f20002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a204dc5-76cc-496b-a9bb-d7ab9010697e",
        "cursor": {
          "ref": "01b32957-1726-4e46-837c-6452f5909de8",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3611d067-d03c-44d1-b6f1-51c12bc3662e"
        },
        "item": {
          "id": "1a204dc5-76cc-496b-a9bb-d7ab9010697e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cd523c7c-766b-4d6e-ba44-c31db67d0c6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a204dc5-76cc-496b-a9bb-d7ab9010697e",
        "cursor": {
          "ref": "01b32957-1726-4e46-837c-6452f5909de8",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3611d067-d03c-44d1-b6f1-51c12bc3662e"
        },
        "item": {
          "id": "1a204dc5-76cc-496b-a9bb-d7ab9010697e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cd523c7c-766b-4d6e-ba44-c31db67d0c6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a61bbe-15b2-4ccc-a900-d22f29ea0f51",
        "cursor": {
          "ref": "853bc4be-4769-467d-b44b-29843c69ee8d",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bf91a9e7-6c36-4f26-bfd2-a8ce43bcaca1"
        },
        "item": {
          "id": "42a61bbe-15b2-4ccc-a900-d22f29ea0f51",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a4f4a92e-9c8e-44a0-b9da-cb8a6d83d1b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a61bbe-15b2-4ccc-a900-d22f29ea0f51",
        "cursor": {
          "ref": "853bc4be-4769-467d-b44b-29843c69ee8d",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bf91a9e7-6c36-4f26-bfd2-a8ce43bcaca1"
        },
        "item": {
          "id": "42a61bbe-15b2-4ccc-a900-d22f29ea0f51",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a4f4a92e-9c8e-44a0-b9da-cb8a6d83d1b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc62d1c4-d9e6-47a4-9eb7-37fa2b3e6734",
        "cursor": {
          "ref": "ddd0e97d-5190-432a-930c-b6ab687aecaa",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "31b975dc-117a-46e6-89a8-563f266273b7"
        },
        "item": {
          "id": "fc62d1c4-d9e6-47a4-9eb7-37fa2b3e6734",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c81d39bf-19ce-4c57-9e00-206a3ff9536b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc62d1c4-d9e6-47a4-9eb7-37fa2b3e6734",
        "cursor": {
          "ref": "ddd0e97d-5190-432a-930c-b6ab687aecaa",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "31b975dc-117a-46e6-89a8-563f266273b7"
        },
        "item": {
          "id": "fc62d1c4-d9e6-47a4-9eb7-37fa2b3e6734",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c81d39bf-19ce-4c57-9e00-206a3ff9536b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0444da0-4f56-4b1d-b80b-048b2c0e1750",
        "cursor": {
          "ref": "97d89264-e333-4ae6-bb2d-f3d9475a96ae",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "899d9418-1e09-4744-8804-e88e7c43eb1e"
        },
        "item": {
          "id": "e0444da0-4f56-4b1d-b80b-048b2c0e1750",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d6b85df9-a494-4a5d-a8cc-fe1def4487d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0444da0-4f56-4b1d-b80b-048b2c0e1750",
        "cursor": {
          "ref": "97d89264-e333-4ae6-bb2d-f3d9475a96ae",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "899d9418-1e09-4744-8804-e88e7c43eb1e"
        },
        "item": {
          "id": "e0444da0-4f56-4b1d-b80b-048b2c0e1750",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d6b85df9-a494-4a5d-a8cc-fe1def4487d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2128fc-d85a-4911-a51f-f5a66963d6eb",
        "cursor": {
          "ref": "459ec619-ab18-46ac-af23-2006b4402615",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0b4c906e-1d7a-41bb-86bc-5d160fe43662"
        },
        "item": {
          "id": "dd2128fc-d85a-4911-a51f-f5a66963d6eb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8584556f-a804-433f-af84-fe8dcf641c4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2128fc-d85a-4911-a51f-f5a66963d6eb",
        "cursor": {
          "ref": "459ec619-ab18-46ac-af23-2006b4402615",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0b4c906e-1d7a-41bb-86bc-5d160fe43662"
        },
        "item": {
          "id": "dd2128fc-d85a-4911-a51f-f5a66963d6eb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8584556f-a804-433f-af84-fe8dcf641c4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c35cf2d-5324-41a0-a633-50f6b481f7ff",
        "cursor": {
          "ref": "a28a4a01-ab58-48d1-b9d0-3262690136f6",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "da376ce2-8eb3-4471-aaf6-5f46f1f71949"
        },
        "item": {
          "id": "5c35cf2d-5324-41a0-a633-50f6b481f7ff",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "352358e7-2158-4ae0-a0bb-c7d3c5ac64a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c35cf2d-5324-41a0-a633-50f6b481f7ff",
        "cursor": {
          "ref": "a28a4a01-ab58-48d1-b9d0-3262690136f6",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "da376ce2-8eb3-4471-aaf6-5f46f1f71949"
        },
        "item": {
          "id": "5c35cf2d-5324-41a0-a633-50f6b481f7ff",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "352358e7-2158-4ae0-a0bb-c7d3c5ac64a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30438e44-1eab-412e-8e4c-27134fdb2ae9",
        "cursor": {
          "ref": "e5f23c6c-ce10-43f2-adb8-8b079a91088f",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ca5447ad-ec1c-4038-b9c9-6d65e5d67228"
        },
        "item": {
          "id": "30438e44-1eab-412e-8e4c-27134fdb2ae9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cd4707ae-3528-484a-b274-745ce8e3e71d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30438e44-1eab-412e-8e4c-27134fdb2ae9",
        "cursor": {
          "ref": "e5f23c6c-ce10-43f2-adb8-8b079a91088f",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ca5447ad-ec1c-4038-b9c9-6d65e5d67228"
        },
        "item": {
          "id": "30438e44-1eab-412e-8e4c-27134fdb2ae9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cd4707ae-3528-484a-b274-745ce8e3e71d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a3acd1-0674-4ee9-8279-411e0da92d07",
        "cursor": {
          "ref": "77e8ae06-81f5-4094-ba26-80311bd10bc0",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9412af3e-f386-4c44-b8c0-379f7750f24e"
        },
        "item": {
          "id": "c6a3acd1-0674-4ee9-8279-411e0da92d07",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "46a6d031-1b52-47fa-8515-681dad468140",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a3acd1-0674-4ee9-8279-411e0da92d07",
        "cursor": {
          "ref": "77e8ae06-81f5-4094-ba26-80311bd10bc0",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9412af3e-f386-4c44-b8c0-379f7750f24e"
        },
        "item": {
          "id": "c6a3acd1-0674-4ee9-8279-411e0da92d07",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "46a6d031-1b52-47fa-8515-681dad468140",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd421e7-73f0-42fc-902c-9a07bb9282ac",
        "cursor": {
          "ref": "2a5b8021-162e-49b4-bba7-be55436b0009",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7da24ded-b854-41f3-a0e3-079376cea898"
        },
        "item": {
          "id": "ebd421e7-73f0-42fc-902c-9a07bb9282ac",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7cd68cf3-5bef-40b3-a85d-28b2b9110d26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd421e7-73f0-42fc-902c-9a07bb9282ac",
        "cursor": {
          "ref": "2a5b8021-162e-49b4-bba7-be55436b0009",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7da24ded-b854-41f3-a0e3-079376cea898"
        },
        "item": {
          "id": "ebd421e7-73f0-42fc-902c-9a07bb9282ac",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7cd68cf3-5bef-40b3-a85d-28b2b9110d26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405a2e74-93ca-42e8-bbe5-2e0dec42d80a",
        "cursor": {
          "ref": "6dfdf1a6-6a2d-45b2-8040-4dd214d5f5ad",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1758fb9e-6de2-4c4a-8d44-3d506d5a1f58"
        },
        "item": {
          "id": "405a2e74-93ca-42e8-bbe5-2e0dec42d80a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "094ccf7b-5180-45f2-bb11-6f24bd7fc4df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405a2e74-93ca-42e8-bbe5-2e0dec42d80a",
        "cursor": {
          "ref": "6dfdf1a6-6a2d-45b2-8040-4dd214d5f5ad",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1758fb9e-6de2-4c4a-8d44-3d506d5a1f58"
        },
        "item": {
          "id": "405a2e74-93ca-42e8-bbe5-2e0dec42d80a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "094ccf7b-5180-45f2-bb11-6f24bd7fc4df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50362b3b-70bf-4409-91b6-ea3d205cb6fb",
        "cursor": {
          "ref": "b97d228b-ae5a-419a-99ad-f290ca60d107",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "32303440-c825-4e23-8a67-163b7a9f901f"
        },
        "item": {
          "id": "50362b3b-70bf-4409-91b6-ea3d205cb6fb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4e923e3d-657a-414b-bfbe-1ba977777a1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50362b3b-70bf-4409-91b6-ea3d205cb6fb",
        "cursor": {
          "ref": "b97d228b-ae5a-419a-99ad-f290ca60d107",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "32303440-c825-4e23-8a67-163b7a9f901f"
        },
        "item": {
          "id": "50362b3b-70bf-4409-91b6-ea3d205cb6fb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4e923e3d-657a-414b-bfbe-1ba977777a1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719bcd2b-3364-4c16-a943-3e731b9c2b3e",
        "cursor": {
          "ref": "e02daa44-8d8c-4ce9-913a-ac7b68322eca",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2cfdadf7-464a-4cbf-be2f-53a8fa2495e9"
        },
        "item": {
          "id": "719bcd2b-3364-4c16-a943-3e731b9c2b3e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3b8490f4-45c4-40c7-8be5-b66bf20ce7b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719bcd2b-3364-4c16-a943-3e731b9c2b3e",
        "cursor": {
          "ref": "e02daa44-8d8c-4ce9-913a-ac7b68322eca",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2cfdadf7-464a-4cbf-be2f-53a8fa2495e9"
        },
        "item": {
          "id": "719bcd2b-3364-4c16-a943-3e731b9c2b3e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3b8490f4-45c4-40c7-8be5-b66bf20ce7b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe9bc66-c70e-4bd7-a8e2-c2f97c49ad21",
        "cursor": {
          "ref": "8919f34d-3a59-4cb4-8135-4d188466d698",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "34aa2918-39cb-4f4a-bfde-def8fb604d31"
        },
        "item": {
          "id": "1fe9bc66-c70e-4bd7-a8e2-c2f97c49ad21",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0c88f5a1-803a-4823-ae61-b7dd0ad7d8a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe9bc66-c70e-4bd7-a8e2-c2f97c49ad21",
        "cursor": {
          "ref": "8919f34d-3a59-4cb4-8135-4d188466d698",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "34aa2918-39cb-4f4a-bfde-def8fb604d31"
        },
        "item": {
          "id": "1fe9bc66-c70e-4bd7-a8e2-c2f97c49ad21",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0c88f5a1-803a-4823-ae61-b7dd0ad7d8a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1ffeeb-7fab-45e8-a864-2f0eaa6715fe",
        "cursor": {
          "ref": "9920fc2e-0d54-4aa7-94fa-41028cc2fb02",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1aee4c8f-7e8d-440f-af4d-14bf68550d6c"
        },
        "item": {
          "id": "1d1ffeeb-7fab-45e8-a864-2f0eaa6715fe",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3cf8ff3d-ffb1-438f-83ce-01a6fb3ec468",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1ffeeb-7fab-45e8-a864-2f0eaa6715fe",
        "cursor": {
          "ref": "9920fc2e-0d54-4aa7-94fa-41028cc2fb02",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1aee4c8f-7e8d-440f-af4d-14bf68550d6c"
        },
        "item": {
          "id": "1d1ffeeb-7fab-45e8-a864-2f0eaa6715fe",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3cf8ff3d-ffb1-438f-83ce-01a6fb3ec468",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891ed619-4f32-4de3-8bf0-e0331e74393f",
        "cursor": {
          "ref": "5a4340c0-fe44-47e5-81df-8c15b4a060d0",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2455d0ef-986f-4ddb-acdf-df0b85101a06"
        },
        "item": {
          "id": "891ed619-4f32-4de3-8bf0-e0331e74393f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4dbc2ffb-012e-4763-afa2-aba20b9d4634",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891ed619-4f32-4de3-8bf0-e0331e74393f",
        "cursor": {
          "ref": "5a4340c0-fe44-47e5-81df-8c15b4a060d0",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2455d0ef-986f-4ddb-acdf-df0b85101a06"
        },
        "item": {
          "id": "891ed619-4f32-4de3-8bf0-e0331e74393f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4dbc2ffb-012e-4763-afa2-aba20b9d4634",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba6e1ae-db93-4e4e-a71a-058d160c5b2f",
        "cursor": {
          "ref": "5a66f9b2-5777-40b7-9124-fd77b5671f8c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "23355025-2b78-4973-b158-285d9fb5194e"
        },
        "item": {
          "id": "3ba6e1ae-db93-4e4e-a71a-058d160c5b2f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5d9873b2-52f9-440a-9475-0a84e6fb7967",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba6e1ae-db93-4e4e-a71a-058d160c5b2f",
        "cursor": {
          "ref": "5a66f9b2-5777-40b7-9124-fd77b5671f8c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "23355025-2b78-4973-b158-285d9fb5194e"
        },
        "item": {
          "id": "3ba6e1ae-db93-4e4e-a71a-058d160c5b2f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5d9873b2-52f9-440a-9475-0a84e6fb7967",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96f19de-fde0-435f-947a-f6fd724fab53",
        "cursor": {
          "ref": "c8b420de-ff50-4369-9b8a-eb5021b63eeb",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "29242bb5-55bb-42ce-a482-7f2c4092cb36"
        },
        "item": {
          "id": "d96f19de-fde0-435f-947a-f6fd724fab53",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ab8afa4b-288a-4a6e-82ef-06be0b4f2b01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96f19de-fde0-435f-947a-f6fd724fab53",
        "cursor": {
          "ref": "c8b420de-ff50-4369-9b8a-eb5021b63eeb",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "29242bb5-55bb-42ce-a482-7f2c4092cb36"
        },
        "item": {
          "id": "d96f19de-fde0-435f-947a-f6fd724fab53",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ab8afa4b-288a-4a6e-82ef-06be0b4f2b01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56610c34-a00b-4334-a240-ae5020613016",
        "cursor": {
          "ref": "42df975c-4c3d-4f4e-8c65-d9892fe44c80",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0b5641e4-8732-4985-8491-3d3a90166f32"
        },
        "item": {
          "id": "56610c34-a00b-4334-a240-ae5020613016",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "08d0e90a-0c0f-4fdf-acf2-9eb76ef5de1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56610c34-a00b-4334-a240-ae5020613016",
        "cursor": {
          "ref": "42df975c-4c3d-4f4e-8c65-d9892fe44c80",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0b5641e4-8732-4985-8491-3d3a90166f32"
        },
        "item": {
          "id": "56610c34-a00b-4334-a240-ae5020613016",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "08d0e90a-0c0f-4fdf-acf2-9eb76ef5de1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3568c7d5-e0c3-41b0-a7d5-5d6b8c639b8c",
        "cursor": {
          "ref": "eff9cf0b-96cb-4571-9a76-0e8e61dd60b6",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bbee3098-e995-405d-a384-9852ddf13319"
        },
        "item": {
          "id": "3568c7d5-e0c3-41b0-a7d5-5d6b8c639b8c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "49a0b379-2b0b-44ed-8e2d-18821ccda7de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3568c7d5-e0c3-41b0-a7d5-5d6b8c639b8c",
        "cursor": {
          "ref": "eff9cf0b-96cb-4571-9a76-0e8e61dd60b6",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bbee3098-e995-405d-a384-9852ddf13319"
        },
        "item": {
          "id": "3568c7d5-e0c3-41b0-a7d5-5d6b8c639b8c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "49a0b379-2b0b-44ed-8e2d-18821ccda7de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b869d7-5cbd-4e87-afd4-77da35c7d693",
        "cursor": {
          "ref": "e331e608-31e4-4281-be0d-3f0732849cf4",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dba5b5ff-c399-4853-8b34-08f71669c81e"
        },
        "item": {
          "id": "28b869d7-5cbd-4e87-afd4-77da35c7d693",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3a85c516-7946-4b04-aded-2386cce5fcc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b869d7-5cbd-4e87-afd4-77da35c7d693",
        "cursor": {
          "ref": "e331e608-31e4-4281-be0d-3f0732849cf4",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dba5b5ff-c399-4853-8b34-08f71669c81e"
        },
        "item": {
          "id": "28b869d7-5cbd-4e87-afd4-77da35c7d693",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3a85c516-7946-4b04-aded-2386cce5fcc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f95ad61-1335-475a-99c4-6c1f7922dd97",
        "cursor": {
          "ref": "b6fb557d-3fba-48c8-9358-cafca40fdfb8",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6e740f59-7d75-4553-89af-7a9cc13b2351"
        },
        "item": {
          "id": "6f95ad61-1335-475a-99c4-6c1f7922dd97",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c68d1963-a282-4c47-a737-a5095147bcb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f95ad61-1335-475a-99c4-6c1f7922dd97",
        "cursor": {
          "ref": "b6fb557d-3fba-48c8-9358-cafca40fdfb8",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6e740f59-7d75-4553-89af-7a9cc13b2351"
        },
        "item": {
          "id": "6f95ad61-1335-475a-99c4-6c1f7922dd97",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c68d1963-a282-4c47-a737-a5095147bcb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c328765-91f6-4c13-bdbe-f2536a29a73d",
        "cursor": {
          "ref": "49962a04-5085-4a2b-a3c8-c2addf594adc",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3357430b-359d-42d0-b2a0-f681d483df15"
        },
        "item": {
          "id": "1c328765-91f6-4c13-bdbe-f2536a29a73d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "17762df2-6868-4de1-bfb1-e4174540e762",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c328765-91f6-4c13-bdbe-f2536a29a73d",
        "cursor": {
          "ref": "49962a04-5085-4a2b-a3c8-c2addf594adc",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3357430b-359d-42d0-b2a0-f681d483df15"
        },
        "item": {
          "id": "1c328765-91f6-4c13-bdbe-f2536a29a73d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "17762df2-6868-4de1-bfb1-e4174540e762",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee3dc7d-6ea2-40bf-af32-570e34e37e7c",
        "cursor": {
          "ref": "5da03732-1b8c-44b9-9d11-32eb60a811f1",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "174d5c48-e383-4bd2-af27-6f2d94b86cff"
        },
        "item": {
          "id": "bee3dc7d-6ea2-40bf-af32-570e34e37e7c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "21f769c7-703a-4c58-9164-aef362188483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee3dc7d-6ea2-40bf-af32-570e34e37e7c",
        "cursor": {
          "ref": "5da03732-1b8c-44b9-9d11-32eb60a811f1",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "174d5c48-e383-4bd2-af27-6f2d94b86cff"
        },
        "item": {
          "id": "bee3dc7d-6ea2-40bf-af32-570e34e37e7c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "21f769c7-703a-4c58-9164-aef362188483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dc4429-a949-4c4c-a552-0c09dcae7cb5",
        "cursor": {
          "ref": "08c33137-2ba4-4311-bcd2-d4e3ec993f6d",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "82a41367-3391-42e5-b9ce-4ed33c6cda33"
        },
        "item": {
          "id": "f3dc4429-a949-4c4c-a552-0c09dcae7cb5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b6cceeb1-8aaf-4358-8b42-c6356eb6cd76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dc4429-a949-4c4c-a552-0c09dcae7cb5",
        "cursor": {
          "ref": "08c33137-2ba4-4311-bcd2-d4e3ec993f6d",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "82a41367-3391-42e5-b9ce-4ed33c6cda33"
        },
        "item": {
          "id": "f3dc4429-a949-4c4c-a552-0c09dcae7cb5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b6cceeb1-8aaf-4358-8b42-c6356eb6cd76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6bc822-fb06-4ed1-81e3-457b1a3b9e3b",
        "cursor": {
          "ref": "1cec392d-0fe8-4fcc-abe7-aaf6b4992a7c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8ede1ed6-6015-4d50-b600-b99249d7d5c2"
        },
        "item": {
          "id": "cb6bc822-fb06-4ed1-81e3-457b1a3b9e3b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cd0ad404-3555-42ab-b8f4-77ffb90a7279",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6bc822-fb06-4ed1-81e3-457b1a3b9e3b",
        "cursor": {
          "ref": "1cec392d-0fe8-4fcc-abe7-aaf6b4992a7c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8ede1ed6-6015-4d50-b600-b99249d7d5c2"
        },
        "item": {
          "id": "cb6bc822-fb06-4ed1-81e3-457b1a3b9e3b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cd0ad404-3555-42ab-b8f4-77ffb90a7279",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e516910c-aef9-4c37-b3c2-f0876e179796",
        "cursor": {
          "ref": "f548e30c-9e7d-46c6-a7c7-a61e811e62d9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "979ad5fb-9bab-46d5-a0a7-bac7a511c0b1"
        },
        "item": {
          "id": "e516910c-aef9-4c37-b3c2-f0876e179796",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "974fdfdc-eb83-4f3a-b5b2-23e2c01773c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e516910c-aef9-4c37-b3c2-f0876e179796",
        "cursor": {
          "ref": "f548e30c-9e7d-46c6-a7c7-a61e811e62d9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "979ad5fb-9bab-46d5-a0a7-bac7a511c0b1"
        },
        "item": {
          "id": "e516910c-aef9-4c37-b3c2-f0876e179796",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "974fdfdc-eb83-4f3a-b5b2-23e2c01773c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41b7abc-4fcf-4082-8cdc-9179f95b6f03",
        "cursor": {
          "ref": "8ee9c059-de8d-48dc-be35-5496be403cc2",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f5df8322-6602-4c89-a383-05ffc56a4f2b"
        },
        "item": {
          "id": "a41b7abc-4fcf-4082-8cdc-9179f95b6f03",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "823c0140-3e82-486f-9806-bdbac191af9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41b7abc-4fcf-4082-8cdc-9179f95b6f03",
        "cursor": {
          "ref": "8ee9c059-de8d-48dc-be35-5496be403cc2",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f5df8322-6602-4c89-a383-05ffc56a4f2b"
        },
        "item": {
          "id": "a41b7abc-4fcf-4082-8cdc-9179f95b6f03",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "823c0140-3e82-486f-9806-bdbac191af9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ec881b-7797-4191-a9be-bdf30d91019c",
        "cursor": {
          "ref": "f156f121-914f-496e-8f7c-02ea36cccea4",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "193dac14-8da8-4a93-9939-f195a22c68a4"
        },
        "item": {
          "id": "85ec881b-7797-4191-a9be-bdf30d91019c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ccb36070-e2be-4752-97f9-c0209ef44cbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ec881b-7797-4191-a9be-bdf30d91019c",
        "cursor": {
          "ref": "f156f121-914f-496e-8f7c-02ea36cccea4",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "193dac14-8da8-4a93-9939-f195a22c68a4"
        },
        "item": {
          "id": "85ec881b-7797-4191-a9be-bdf30d91019c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ccb36070-e2be-4752-97f9-c0209ef44cbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595eb06b-8460-400b-8bfc-3ce5c8c90e11",
        "cursor": {
          "ref": "642c2c7a-9ebd-4279-8479-e0f4fdca372d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ca7d275c-e3ec-4713-812f-5280c6374491"
        },
        "item": {
          "id": "595eb06b-8460-400b-8bfc-3ce5c8c90e11",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5f626841-ed4e-4bd2-967f-73b1cc09918d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595eb06b-8460-400b-8bfc-3ce5c8c90e11",
        "cursor": {
          "ref": "642c2c7a-9ebd-4279-8479-e0f4fdca372d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ca7d275c-e3ec-4713-812f-5280c6374491"
        },
        "item": {
          "id": "595eb06b-8460-400b-8bfc-3ce5c8c90e11",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5f626841-ed4e-4bd2-967f-73b1cc09918d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3881dba6-bc7c-4615-a490-4db0f4f1e53a",
        "cursor": {
          "ref": "1a4c1851-f334-4f7e-8b0d-9ddc83bc777f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "079e12af-a15b-497f-8e55-b6b0cd955ede"
        },
        "item": {
          "id": "3881dba6-bc7c-4615-a490-4db0f4f1e53a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2d690cbd-6667-43b1-83df-ab3c406466b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3881dba6-bc7c-4615-a490-4db0f4f1e53a",
        "cursor": {
          "ref": "1a4c1851-f334-4f7e-8b0d-9ddc83bc777f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "079e12af-a15b-497f-8e55-b6b0cd955ede"
        },
        "item": {
          "id": "3881dba6-bc7c-4615-a490-4db0f4f1e53a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2d690cbd-6667-43b1-83df-ab3c406466b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3535cdf-c845-49dd-8bdb-e62044e07b40",
        "cursor": {
          "ref": "d5d7fdfc-abde-4a57-a152-c30e06a2290d",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3981232d-3bf6-4d48-a290-701acbd7db25"
        },
        "item": {
          "id": "d3535cdf-c845-49dd-8bdb-e62044e07b40",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5347b4a2-b194-45b1-8f87-3fe41a38494f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3535cdf-c845-49dd-8bdb-e62044e07b40",
        "cursor": {
          "ref": "d5d7fdfc-abde-4a57-a152-c30e06a2290d",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3981232d-3bf6-4d48-a290-701acbd7db25"
        },
        "item": {
          "id": "d3535cdf-c845-49dd-8bdb-e62044e07b40",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5347b4a2-b194-45b1-8f87-3fe41a38494f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fedce35-35a3-47a5-ace9-ddc24b2752fc",
        "cursor": {
          "ref": "48c838bc-3569-4ba3-9dda-46045122ecb4",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "70e4d443-d57f-4c0c-8155-dd527bba1bae"
        },
        "item": {
          "id": "4fedce35-35a3-47a5-ace9-ddc24b2752fc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fee5fd27-60aa-4667-9a9d-22f939e37170",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fedce35-35a3-47a5-ace9-ddc24b2752fc",
        "cursor": {
          "ref": "48c838bc-3569-4ba3-9dda-46045122ecb4",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "70e4d443-d57f-4c0c-8155-dd527bba1bae"
        },
        "item": {
          "id": "4fedce35-35a3-47a5-ace9-ddc24b2752fc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fee5fd27-60aa-4667-9a9d-22f939e37170",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc65345-9ecb-491d-8999-c2ae855bad3a",
        "cursor": {
          "ref": "ddf17477-cc5e-4091-8190-e7170937b18d",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "337b242b-35b1-48b4-b71e-cd19cf3e7911"
        },
        "item": {
          "id": "2bc65345-9ecb-491d-8999-c2ae855bad3a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "53da84de-6ddf-480d-a5a6-0470e5bf135c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc65345-9ecb-491d-8999-c2ae855bad3a",
        "cursor": {
          "ref": "ddf17477-cc5e-4091-8190-e7170937b18d",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "337b242b-35b1-48b4-b71e-cd19cf3e7911"
        },
        "item": {
          "id": "2bc65345-9ecb-491d-8999-c2ae855bad3a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "53da84de-6ddf-480d-a5a6-0470e5bf135c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f6f644-2a67-4196-9ced-adb76cf81935",
        "cursor": {
          "ref": "353a33d9-f1aa-4d9b-b6e5-5d79519a5f77",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d74156d8-6f86-4ff6-9652-3c4702ad8384"
        },
        "item": {
          "id": "15f6f644-2a67-4196-9ced-adb76cf81935",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "36249475-8839-4d15-ac37-b46e25a2dd86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f6f644-2a67-4196-9ced-adb76cf81935",
        "cursor": {
          "ref": "353a33d9-f1aa-4d9b-b6e5-5d79519a5f77",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d74156d8-6f86-4ff6-9652-3c4702ad8384"
        },
        "item": {
          "id": "15f6f644-2a67-4196-9ced-adb76cf81935",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "36249475-8839-4d15-ac37-b46e25a2dd86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633a172b-1afc-440a-8579-a49bf2b8f8ab",
        "cursor": {
          "ref": "95d75ab8-4f34-4105-8077-388ed99f616b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "30411911-62fe-41fb-8371-deb27a8016f0"
        },
        "item": {
          "id": "633a172b-1afc-440a-8579-a49bf2b8f8ab",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "25c42580-b851-41e0-9aa4-5772030d108f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633a172b-1afc-440a-8579-a49bf2b8f8ab",
        "cursor": {
          "ref": "95d75ab8-4f34-4105-8077-388ed99f616b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "30411911-62fe-41fb-8371-deb27a8016f0"
        },
        "item": {
          "id": "633a172b-1afc-440a-8579-a49bf2b8f8ab",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "25c42580-b851-41e0-9aa4-5772030d108f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169d2ab9-7571-4393-8362-52ec55e88697",
        "cursor": {
          "ref": "fd1f8e06-ed7c-444d-b475-6db1856aaefb",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "acb00c81-bac9-47c2-97c6-8ec135756cb6"
        },
        "item": {
          "id": "169d2ab9-7571-4393-8362-52ec55e88697",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c446fe60-fa11-4142-8acc-6b4387432cad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169d2ab9-7571-4393-8362-52ec55e88697",
        "cursor": {
          "ref": "fd1f8e06-ed7c-444d-b475-6db1856aaefb",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "acb00c81-bac9-47c2-97c6-8ec135756cb6"
        },
        "item": {
          "id": "169d2ab9-7571-4393-8362-52ec55e88697",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c446fe60-fa11-4142-8acc-6b4387432cad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36db6a4-d32a-469b-9b0a-e5c676c47a05",
        "cursor": {
          "ref": "fd43b6e7-ae23-4277-8537-a69aed7e48d0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a497ac67-a989-41a5-b150-bd885bb71133"
        },
        "item": {
          "id": "c36db6a4-d32a-469b-9b0a-e5c676c47a05",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "407d17ce-91b9-4c1b-8620-e0dd8d536778",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36db6a4-d32a-469b-9b0a-e5c676c47a05",
        "cursor": {
          "ref": "fd43b6e7-ae23-4277-8537-a69aed7e48d0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a497ac67-a989-41a5-b150-bd885bb71133"
        },
        "item": {
          "id": "c36db6a4-d32a-469b-9b0a-e5c676c47a05",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "407d17ce-91b9-4c1b-8620-e0dd8d536778",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6b29a1-eb63-435e-b12a-b27e464d8b28",
        "cursor": {
          "ref": "6e7a833d-3dc2-4c3b-97db-9f9e2f672b04",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d23f7376-6f80-44f6-b6e4-d8017b12120f"
        },
        "item": {
          "id": "2a6b29a1-eb63-435e-b12a-b27e464d8b28",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "226d2f89-b707-42e6-8912-0dd007a82569",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6b29a1-eb63-435e-b12a-b27e464d8b28",
        "cursor": {
          "ref": "6e7a833d-3dc2-4c3b-97db-9f9e2f672b04",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d23f7376-6f80-44f6-b6e4-d8017b12120f"
        },
        "item": {
          "id": "2a6b29a1-eb63-435e-b12a-b27e464d8b28",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "226d2f89-b707-42e6-8912-0dd007a82569",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a723747d-5c12-4f82-9e49-e5011e62ef00",
        "cursor": {
          "ref": "2f602359-56c4-4359-bccb-4c9d417de6ec",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f5161b33-d9bb-4ceb-a06b-07e3bc42d3dc"
        },
        "item": {
          "id": "a723747d-5c12-4f82-9e49-e5011e62ef00",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "111d4b1e-5d5c-43cb-b620-525b0a3d754e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a723747d-5c12-4f82-9e49-e5011e62ef00",
        "cursor": {
          "ref": "2f602359-56c4-4359-bccb-4c9d417de6ec",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f5161b33-d9bb-4ceb-a06b-07e3bc42d3dc"
        },
        "item": {
          "id": "a723747d-5c12-4f82-9e49-e5011e62ef00",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "111d4b1e-5d5c-43cb-b620-525b0a3d754e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a405722f-be90-4df7-a742-a072fa80da1f",
        "cursor": {
          "ref": "5d8b5fbd-183d-47e9-a722-3ea58f36c934",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "025a1a3a-d2c5-4e59-bc85-c96be84e4db9"
        },
        "item": {
          "id": "a405722f-be90-4df7-a742-a072fa80da1f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "16cb7d6c-c3a3-47fe-8880-fa17cad7c989",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a405722f-be90-4df7-a742-a072fa80da1f",
        "cursor": {
          "ref": "5d8b5fbd-183d-47e9-a722-3ea58f36c934",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "025a1a3a-d2c5-4e59-bc85-c96be84e4db9"
        },
        "item": {
          "id": "a405722f-be90-4df7-a742-a072fa80da1f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "16cb7d6c-c3a3-47fe-8880-fa17cad7c989",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d31a38c-599e-4d5b-8648-64b947de5654",
        "cursor": {
          "ref": "d89862ac-0590-422a-a906-5ef0f40a6b42",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "8925e747-b013-4213-b4d6-3a20aca959d3"
        },
        "item": {
          "id": "1d31a38c-599e-4d5b-8648-64b947de5654",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e46b638c-416b-4b17-a4c0-c6b3b9a08b86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d31a38c-599e-4d5b-8648-64b947de5654",
        "cursor": {
          "ref": "d89862ac-0590-422a-a906-5ef0f40a6b42",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "8925e747-b013-4213-b4d6-3a20aca959d3"
        },
        "item": {
          "id": "1d31a38c-599e-4d5b-8648-64b947de5654",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e46b638c-416b-4b17-a4c0-c6b3b9a08b86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c117990f-e693-4bef-9f51-83ff42f61954",
        "cursor": {
          "ref": "721b1a31-cfc7-4d08-a765-07a3066c5796",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "4559580e-e49c-468a-b52e-0c1e652e23af"
        },
        "item": {
          "id": "c117990f-e693-4bef-9f51-83ff42f61954",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5f2f067f-6aa9-4836-a81a-a571f906012e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c117990f-e693-4bef-9f51-83ff42f61954",
        "cursor": {
          "ref": "721b1a31-cfc7-4d08-a765-07a3066c5796",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "4559580e-e49c-468a-b52e-0c1e652e23af"
        },
        "item": {
          "id": "c117990f-e693-4bef-9f51-83ff42f61954",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5f2f067f-6aa9-4836-a81a-a571f906012e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a58efc-bdf3-4e43-a6b8-9842a33ce699",
        "cursor": {
          "ref": "14e5d21e-4717-4cfa-ade7-185a3d72a847",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5ddd7267-850c-4ea4-97da-0fef41837f0d"
        },
        "item": {
          "id": "a5a58efc-bdf3-4e43-a6b8-9842a33ce699",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1ec78e6c-615c-460b-831f-8625befa0499",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a58efc-bdf3-4e43-a6b8-9842a33ce699",
        "cursor": {
          "ref": "14e5d21e-4717-4cfa-ade7-185a3d72a847",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5ddd7267-850c-4ea4-97da-0fef41837f0d"
        },
        "item": {
          "id": "a5a58efc-bdf3-4e43-a6b8-9842a33ce699",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1ec78e6c-615c-460b-831f-8625befa0499",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b53afa-9b40-4ae4-a51a-61a60be0addb",
        "cursor": {
          "ref": "6f1386b5-051d-4c7e-a7e4-15d4f9cdd54e",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "bf876991-2041-4544-82da-1bf9afbf5d09"
        },
        "item": {
          "id": "40b53afa-9b40-4ae4-a51a-61a60be0addb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ca035d6c-d043-4cb8-8b51-3796d325dc6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b53afa-9b40-4ae4-a51a-61a60be0addb",
        "cursor": {
          "ref": "6f1386b5-051d-4c7e-a7e4-15d4f9cdd54e",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "bf876991-2041-4544-82da-1bf9afbf5d09"
        },
        "item": {
          "id": "40b53afa-9b40-4ae4-a51a-61a60be0addb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ca035d6c-d043-4cb8-8b51-3796d325dc6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bcaa9f6-395d-4267-ac15-9612a6225312",
        "cursor": {
          "ref": "fd682277-70ae-44fc-b20c-195e951aeb38",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "c0617977-609d-4324-a304-fd0e91cb8056"
        },
        "item": {
          "id": "7bcaa9f6-395d-4267-ac15-9612a6225312",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fd5caea1-bc36-422f-a6fd-e5060d9098b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bcaa9f6-395d-4267-ac15-9612a6225312",
        "cursor": {
          "ref": "fd682277-70ae-44fc-b20c-195e951aeb38",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "c0617977-609d-4324-a304-fd0e91cb8056"
        },
        "item": {
          "id": "7bcaa9f6-395d-4267-ac15-9612a6225312",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fd5caea1-bc36-422f-a6fd-e5060d9098b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f941ac31-8128-400e-bda9-475833c96c9e",
        "cursor": {
          "ref": "8d062305-cc5a-49db-adad-04fa9ac27962",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9e7246c4-f52b-4a05-8c1d-1cbf0202889c"
        },
        "item": {
          "id": "f941ac31-8128-400e-bda9-475833c96c9e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c4f9af3c-4b4b-48d7-a09b-ec4a9f2193ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 95,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f941ac31-8128-400e-bda9-475833c96c9e",
        "cursor": {
          "ref": "8d062305-cc5a-49db-adad-04fa9ac27962",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9e7246c4-f52b-4a05-8c1d-1cbf0202889c"
        },
        "item": {
          "id": "f941ac31-8128-400e-bda9-475833c96c9e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c4f9af3c-4b4b-48d7-a09b-ec4a9f2193ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 95,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3a374f-4133-49cb-a761-a8cdb3dbb42f",
        "cursor": {
          "ref": "bf25d8fb-685f-46a5-b06e-92458fe09fa1",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "1179cb00-f875-4773-8789-69486f421cec"
        },
        "item": {
          "id": "6f3a374f-4133-49cb-a761-a8cdb3dbb42f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1f9c4291-6e56-4939-a970-a15996131888",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3a374f-4133-49cb-a761-a8cdb3dbb42f",
        "cursor": {
          "ref": "bf25d8fb-685f-46a5-b06e-92458fe09fa1",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "1179cb00-f875-4773-8789-69486f421cec"
        },
        "item": {
          "id": "6f3a374f-4133-49cb-a761-a8cdb3dbb42f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1f9c4291-6e56-4939-a970-a15996131888",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe2b92a-4d7d-463f-83c0-953a6e670211",
        "cursor": {
          "ref": "703851a5-87b1-4367-834a-74582b39578c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "12b817c8-71e2-44ea-a7ef-66ef98ca2dff"
        },
        "item": {
          "id": "9fe2b92a-4d7d-463f-83c0-953a6e670211",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "09139262-cc6f-4b97-94fe-37efa19ae51b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe2b92a-4d7d-463f-83c0-953a6e670211",
        "cursor": {
          "ref": "703851a5-87b1-4367-834a-74582b39578c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "12b817c8-71e2-44ea-a7ef-66ef98ca2dff"
        },
        "item": {
          "id": "9fe2b92a-4d7d-463f-83c0-953a6e670211",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "09139262-cc6f-4b97-94fe-37efa19ae51b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61ae632-ee7e-49b3-b43e-c9979d82e7e6",
        "cursor": {
          "ref": "042a2e56-4800-4362-b52b-b7313e9bbc50",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a03b17c7-952c-41d3-b59c-d3716751cb10"
        },
        "item": {
          "id": "a61ae632-ee7e-49b3-b43e-c9979d82e7e6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "13fdf40e-fc2a-4c02-938a-a18f243ad9ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61ae632-ee7e-49b3-b43e-c9979d82e7e6",
        "cursor": {
          "ref": "042a2e56-4800-4362-b52b-b7313e9bbc50",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a03b17c7-952c-41d3-b59c-d3716751cb10"
        },
        "item": {
          "id": "a61ae632-ee7e-49b3-b43e-c9979d82e7e6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "13fdf40e-fc2a-4c02-938a-a18f243ad9ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e88878e-4682-4b9c-92f3-e3b61fdc986c",
        "cursor": {
          "ref": "15574db2-2012-4a2b-ad83-4d35f0ba563e",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f885c011-e236-4366-aedc-5e8401f51ff4"
        },
        "item": {
          "id": "1e88878e-4682-4b9c-92f3-e3b61fdc986c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "26ebb323-9c94-47d0-873d-647d0daafe3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e88878e-4682-4b9c-92f3-e3b61fdc986c",
        "cursor": {
          "ref": "15574db2-2012-4a2b-ad83-4d35f0ba563e",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f885c011-e236-4366-aedc-5e8401f51ff4"
        },
        "item": {
          "id": "1e88878e-4682-4b9c-92f3-e3b61fdc986c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "26ebb323-9c94-47d0-873d-647d0daafe3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4df4df-18a2-4b32-bb67-49fb193c5896",
        "cursor": {
          "ref": "a9945454-f26c-474d-b62f-dab4d53c40e0",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f78dc8d6-f959-4fff-a1fe-ff80cd3bd1b7"
        },
        "item": {
          "id": "1a4df4df-18a2-4b32-bb67-49fb193c5896",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "91ae6f63-93e5-4f84-a36c-5c37d8c9247e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4df4df-18a2-4b32-bb67-49fb193c5896",
        "cursor": {
          "ref": "a9945454-f26c-474d-b62f-dab4d53c40e0",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f78dc8d6-f959-4fff-a1fe-ff80cd3bd1b7"
        },
        "item": {
          "id": "1a4df4df-18a2-4b32-bb67-49fb193c5896",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "91ae6f63-93e5-4f84-a36c-5c37d8c9247e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3732dd-7742-4e6e-85bb-84e362b6d9b4",
        "cursor": {
          "ref": "b40a4aa7-fd36-4d7a-a2d1-480b828912f8",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bb8b7b97-90b0-486a-8037-b167879e9ce7"
        },
        "item": {
          "id": "5e3732dd-7742-4e6e-85bb-84e362b6d9b4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2cdd6f50-8c5c-4f54-812a-9b9fcafcfda0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3732dd-7742-4e6e-85bb-84e362b6d9b4",
        "cursor": {
          "ref": "b40a4aa7-fd36-4d7a-a2d1-480b828912f8",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bb8b7b97-90b0-486a-8037-b167879e9ce7"
        },
        "item": {
          "id": "5e3732dd-7742-4e6e-85bb-84e362b6d9b4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2cdd6f50-8c5c-4f54-812a-9b9fcafcfda0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256a5a4d-71ce-417a-8a4e-80d05a762152",
        "cursor": {
          "ref": "c70874ec-15d3-4716-862a-37e2b1adf5c3",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1b821a46-be1b-4a50-a751-afbd196b3f83"
        },
        "item": {
          "id": "256a5a4d-71ce-417a-8a4e-80d05a762152",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6631034f-54f9-4d0c-a7c5-a16cef6263a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256a5a4d-71ce-417a-8a4e-80d05a762152",
        "cursor": {
          "ref": "c70874ec-15d3-4716-862a-37e2b1adf5c3",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1b821a46-be1b-4a50-a751-afbd196b3f83"
        },
        "item": {
          "id": "256a5a4d-71ce-417a-8a4e-80d05a762152",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6631034f-54f9-4d0c-a7c5-a16cef6263a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf5a47c-a8b8-455a-930b-7af7c335b2c0",
        "cursor": {
          "ref": "c165d985-40f3-4ca1-80ca-c6a5beb7a6d5",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ed448fa8-2f08-4eab-970e-58ce845df9c0"
        },
        "item": {
          "id": "9cf5a47c-a8b8-455a-930b-7af7c335b2c0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2e12dc91-2fba-405a-8834-1673436c366b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf5a47c-a8b8-455a-930b-7af7c335b2c0",
        "cursor": {
          "ref": "c165d985-40f3-4ca1-80ca-c6a5beb7a6d5",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ed448fa8-2f08-4eab-970e-58ce845df9c0"
        },
        "item": {
          "id": "9cf5a47c-a8b8-455a-930b-7af7c335b2c0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2e12dc91-2fba-405a-8834-1673436c366b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b9085f-ddbd-4294-b8a6-84eb6d064cbe",
        "cursor": {
          "ref": "373b5c9d-d765-4aba-b466-9dce49cb8576",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d56abda4-b69b-4da2-bcd8-203cb2226e3b"
        },
        "item": {
          "id": "07b9085f-ddbd-4294-b8a6-84eb6d064cbe",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b77f4ce4-0661-4b06-ad9c-adb96f27514b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b9085f-ddbd-4294-b8a6-84eb6d064cbe",
        "cursor": {
          "ref": "373b5c9d-d765-4aba-b466-9dce49cb8576",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d56abda4-b69b-4da2-bcd8-203cb2226e3b"
        },
        "item": {
          "id": "07b9085f-ddbd-4294-b8a6-84eb6d064cbe",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b77f4ce4-0661-4b06-ad9c-adb96f27514b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451f55fd-b598-4010-8cff-9028f78edebb",
        "cursor": {
          "ref": "5b318d32-2d41-4421-a84a-9177414c1dd0",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "db07c84e-2773-45dd-84d7-1e4402fd96f9"
        },
        "item": {
          "id": "451f55fd-b598-4010-8cff-9028f78edebb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1eaaa973-0530-4a27-bcc8-58a63ec5b657",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451f55fd-b598-4010-8cff-9028f78edebb",
        "cursor": {
          "ref": "5b318d32-2d41-4421-a84a-9177414c1dd0",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "db07c84e-2773-45dd-84d7-1e4402fd96f9"
        },
        "item": {
          "id": "451f55fd-b598-4010-8cff-9028f78edebb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1eaaa973-0530-4a27-bcc8-58a63ec5b657",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2b1715-4c1a-4bb6-be05-e821c26c13c6",
        "cursor": {
          "ref": "b770d626-8188-4d55-8202-9d04af42acbc",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "78ababd0-af28-433c-980d-a70fbbfe9038"
        },
        "item": {
          "id": "3d2b1715-4c1a-4bb6-be05-e821c26c13c6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0899e802-962b-4dc8-bdd3-7b44b7467c47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2b1715-4c1a-4bb6-be05-e821c26c13c6",
        "cursor": {
          "ref": "b770d626-8188-4d55-8202-9d04af42acbc",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "78ababd0-af28-433c-980d-a70fbbfe9038"
        },
        "item": {
          "id": "3d2b1715-4c1a-4bb6-be05-e821c26c13c6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0899e802-962b-4dc8-bdd3-7b44b7467c47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8642a4a7-ee6a-40ff-9434-f302eb0a0669",
        "cursor": {
          "ref": "ee9ee4a1-83df-46a9-95d6-788d604d6017",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "297e31fd-02c1-4efa-ab35-14578ea3ed4a"
        },
        "item": {
          "id": "8642a4a7-ee6a-40ff-9434-f302eb0a0669",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ca127e56-290d-4d68-abd4-ee95051dfa2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8642a4a7-ee6a-40ff-9434-f302eb0a0669",
        "cursor": {
          "ref": "ee9ee4a1-83df-46a9-95d6-788d604d6017",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "297e31fd-02c1-4efa-ab35-14578ea3ed4a"
        },
        "item": {
          "id": "8642a4a7-ee6a-40ff-9434-f302eb0a0669",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ca127e56-290d-4d68-abd4-ee95051dfa2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384fc07e-665a-428c-963a-856cb02a3d77",
        "cursor": {
          "ref": "c2709bf2-9142-4669-8812-f574e1d502a3",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0a7148c0-74d0-4c8e-9c1d-a9efc3cd9363"
        },
        "item": {
          "id": "384fc07e-665a-428c-963a-856cb02a3d77",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "99b97c4b-4cb1-405d-97ae-cfe3d59fe71f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "384fc07e-665a-428c-963a-856cb02a3d77",
        "cursor": {
          "ref": "c2709bf2-9142-4669-8812-f574e1d502a3",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0a7148c0-74d0-4c8e-9c1d-a9efc3cd9363"
        },
        "item": {
          "id": "384fc07e-665a-428c-963a-856cb02a3d77",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "99b97c4b-4cb1-405d-97ae-cfe3d59fe71f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "22e2f316-abe1-4fc3-97d4-10ca7f3d1c56",
        "cursor": {
          "ref": "cbb4c136-82ba-479e-8df3-d146552146c1",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "66bc47ac-aba2-4953-b5f4-c9bf62835bf6"
        },
        "item": {
          "id": "22e2f316-abe1-4fc3-97d4-10ca7f3d1c56",
          "name": "credentials_verify"
        },
        "response": {
          "id": "04bd50f5-7624-497c-8474-9bb412a0124e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "22e2f316-abe1-4fc3-97d4-10ca7f3d1c56",
        "cursor": {
          "ref": "cbb4c136-82ba-479e-8df3-d146552146c1",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "66bc47ac-aba2-4953-b5f4-c9bf62835bf6"
        },
        "item": {
          "id": "22e2f316-abe1-4fc3-97d4-10ca7f3d1c56",
          "name": "credentials_verify"
        },
        "response": {
          "id": "04bd50f5-7624-497c-8474-9bb412a0124e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "180aec01-f272-4753-99fc-f44a1a609c6a",
        "cursor": {
          "ref": "a3f51522-08b2-4991-92ad-68980c6b6f10",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "31010615-f9b1-4886-b0e9-5a4041fd5486"
        },
        "item": {
          "id": "180aec01-f272-4753-99fc-f44a1a609c6a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "640ba53a-30a1-4a8b-a6ed-870741032f7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "180aec01-f272-4753-99fc-f44a1a609c6a",
        "cursor": {
          "ref": "a3f51522-08b2-4991-92ad-68980c6b6f10",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "31010615-f9b1-4886-b0e9-5a4041fd5486"
        },
        "item": {
          "id": "180aec01-f272-4753-99fc-f44a1a609c6a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "640ba53a-30a1-4a8b-a6ed-870741032f7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "68ed0b49-4fe9-4211-b297-befb12c32f36",
        "cursor": {
          "ref": "8ca45bbc-a82f-426f-9200-ce15c8ce6195",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c9a4b60d-0349-4192-9c65-e780e9cdf182"
        },
        "item": {
          "id": "68ed0b49-4fe9-4211-b297-befb12c32f36",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6b53e9e0-fc0d-4799-b2c8-339976e47a72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ed0b49-4fe9-4211-b297-befb12c32f36",
        "cursor": {
          "ref": "8ca45bbc-a82f-426f-9200-ce15c8ce6195",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c9a4b60d-0349-4192-9c65-e780e9cdf182"
        },
        "item": {
          "id": "68ed0b49-4fe9-4211-b297-befb12c32f36",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6b53e9e0-fc0d-4799-b2c8-339976e47a72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ed0b49-4fe9-4211-b297-befb12c32f36",
        "cursor": {
          "ref": "8ca45bbc-a82f-426f-9200-ce15c8ce6195",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c9a4b60d-0349-4192-9c65-e780e9cdf182"
        },
        "item": {
          "id": "68ed0b49-4fe9-4211-b297-befb12c32f36",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6b53e9e0-fc0d-4799-b2c8-339976e47a72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b967c25-204b-4d54-b2f6-ff9c6422bc3f",
        "cursor": {
          "ref": "009af57d-fec6-4bf0-861b-4716fa7104fc",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f32ad4de-bcb5-4654-a464-95d87fa0118e"
        },
        "item": {
          "id": "9b967c25-204b-4d54-b2f6-ff9c6422bc3f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4d344bc8-2f1b-43ee-b380-cb5621d7be93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b967c25-204b-4d54-b2f6-ff9c6422bc3f",
        "cursor": {
          "ref": "009af57d-fec6-4bf0-861b-4716fa7104fc",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f32ad4de-bcb5-4654-a464-95d87fa0118e"
        },
        "item": {
          "id": "9b967c25-204b-4d54-b2f6-ff9c6422bc3f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4d344bc8-2f1b-43ee-b380-cb5621d7be93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e3940e-52d1-4a58-a273-46dc3beb84dc",
        "cursor": {
          "ref": "38fcb72f-5af8-4f23-acd1-6d1a3d5bfad5",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "243029d1-801c-45b1-af3e-b0171fb6ed07"
        },
        "item": {
          "id": "c2e3940e-52d1-4a58-a273-46dc3beb84dc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "39920b2d-9788-4f0f-a6a9-9be59908f705",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e3940e-52d1-4a58-a273-46dc3beb84dc",
        "cursor": {
          "ref": "38fcb72f-5af8-4f23-acd1-6d1a3d5bfad5",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "243029d1-801c-45b1-af3e-b0171fb6ed07"
        },
        "item": {
          "id": "c2e3940e-52d1-4a58-a273-46dc3beb84dc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "39920b2d-9788-4f0f-a6a9-9be59908f705",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}