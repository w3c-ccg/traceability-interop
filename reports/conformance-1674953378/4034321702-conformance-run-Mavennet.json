{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9f5825bf-e4f2-468b-8d32-c6dbde3c5616",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6c6e2f68-102c-4c71-a9e8-1dff22f9d1dc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "810babe0-ea7d-49ca-aeee-fff86378b72a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "93025e2e-d5d2-41ff-b478-ad4d81334c1d"
                }
              }
            ]
          },
          {
            "id": "9be97f89-10b3-412f-98ac-2b22e73a2bed",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "673d5b71-4dfc-403e-a91c-5ebfe9a525d8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b1b5b75c-f94a-452d-a169-9a229c0bcead"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9d071535-57f0-48ff-a578-2240a2d29e0e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "01bfe99e-c955-4b9f-8000-b274358e7499",
            "name": "Positive Testing",
            "item": [
              {
                "id": "02562e86-5860-4a6e-9b02-ce0919fdb593",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d22aeafa-cd15-47da-b997-649843b47940",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9183d2e-3070-4535-9c0b-077a74b8a1c2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fe5e5c42-b469-4887-8101-28d676ad718d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ea2449b-debb-4118-87a6-193b5c6ac8d3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1acee008-9ac8-4870-9581-dbed7b0e2df5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b1a2c275-0979-4fbe-a9a2-648103837e9c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67d2260b-fb9b-47be-935a-7585e5b953b9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cb7cea7a-076a-4915-9bfd-0d5fca4d4d6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32d40edb-d8d5-4ed3-b361-2f1a110059cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "21ae2531-01e8-42d2-bb9a-f637270f4790"
            }
          }
        ]
      },
      {
        "id": "208f1ceb-03c0-436b-a19f-995a7e6f85d5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "40a6d18a-4c61-4980-b4f9-d5b340552974",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84059979-9e21-4a78-9b6c-a4c3c713d0a3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6a2f590c-fb2b-4d54-b453-700e8906575d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a403add2-2729-4339-a847-b69bdf4646fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b958dcd3-95e7-46d7-b404-6d49d11350e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28421678-d911-4c92-bc98-99e61fbd58c4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6477718-13d6-4b20-80d2-f552315e0b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae274ec7-c8a2-4e24-9755-dd771334a54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30725131-836c-4cc1-a8aa-ce32dbcc498c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accaa775-5a09-486d-9fc2-d2d58483eace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb8957d9-8e67-464d-ac72-c688026cb416"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "55039edf-0166-4161-9cb6-0869e177ead0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4244a82a-75d6-4e37-9e54-60854963e9b8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3477bf93-fd72-4259-922d-1a30fb92c5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1834a64-567e-4ce4-80a4-b75a59f0b877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceae76cf-3acc-4c29-b8f7-8f836f5b8050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce28f87-2c21-4ea5-87ce-f832e62b53aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8466a8e3-23c2-4f69-9887-cf1de14bfcca",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89feee66-65c7-4214-99e2-6fec047328e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26ff1cc6-fc7f-4112-8738-9a1b0b64a189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8402ebe3-1d84-446d-8daa-9c5f8c5bdcb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8ea64b2e-4a6e-444d-9f13-a12d78dd7fe7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ddff00de-3b9a-463b-83e0-72a86b37aee6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "53ac115c-5295-419c-ae61-75c1dcd6154c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "80b4c071-d2b6-4c1b-bc66-81046583c6ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ac47725e-6cd3-4422-a946-276fe28654d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f9fbb27-72b8-404a-8608-6c3bf8c9ef9f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "bf3ce3f7-a45b-4336-af43-ba86bee13f93"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7be5d02d-3c52-44ba-9146-94a9b61122e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62391912-eb40-4a08-8dea-5d5532caf045"
            }
          }
        ]
      },
      {
        "id": "ff22874d-ae5e-42cc-ab4a-6ad9f9b418f8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "86cad731-059b-4647-8e84-a92538a8dc1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5887c1b8-d0ac-4805-a558-b1b94615e0dd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9822c36d-97cb-4782-ab34-3b7efb28dd74",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb24ec7-b9bf-4765-a5cf-68a0a4fa64f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186d9297-325b-4111-8b91-930c964e551e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e70475-bb77-440e-b410-13fe7e5c8326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4933d036-5f1e-4328-be53-160564c28f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c20c90a-bf10-424e-9125-e08a8749f83f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03808f11-74d4-48c8-8640-f6c35a7809b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f9b5ee9-4bae-4f89-bcec-f14d61f49b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d89bb9-2650-4659-a304-0c89e9c10735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e53c8de6-2914-47b1-88b4-8948ff83aa05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713b43a1-55b2-4464-91c0-4a469b2b95bc",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea00391-f8fb-46a7-8059-1f20e532a86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49aadda4-677d-4d24-b1e8-5c3f250b123f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0daaac-246c-46af-9c6e-e7e0d5c59be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0e1066b-b5f7-428e-9657-4e8549f4f7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12d8214-7dfd-4565-a49e-f2520d1a9b91",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0a054d-93d4-45d9-85a4-364947183747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac99b12d-769d-48f7-b89d-1b154cffdd18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f560a8-5a90-4dcd-8b8e-b4fc90f8a4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c43dae4-3b1d-49d4-904c-0a0a666616a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be2ae62-4f9f-444c-aed5-8bcbcb0d2ec9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4807257c-460b-4ea1-985b-283f9ea9d587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "099d9d50-ee4c-4729-87b3-c259a33e89af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec71175b-8c8b-4ddc-9433-91450c63e6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaa1e951-5710-40bb-b68f-d64bc0e738dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec032ca-69e9-4251-8f3b-aebaa3a867a8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ed273a-154e-4599-b124-5b5a99fb57bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e02e8b2c-bbdc-4721-a2e5-2ed9fd7a57a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b6ee3b-8c98-4757-8582-d8b95d3ca1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58fc724c-f9d2-4c28-98e3-478124c45eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc84db1-0ee7-4a74-b198-07b97d455222",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a2a948-2590-4e07-813d-244aed8388ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecdcd7a1-c92d-43c9-b606-6151ce415c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37921f5f-fcd5-49e2-b2b1-c96871b1e1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a229a74f-e4bd-419f-b237-546681e5790b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2c25af-d543-4a59-97d2-a8e1064b04ac",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de24e7ea-91b7-4c51-88a0-a0d3896b1857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c437ea-97e6-424d-bb6c-20f0f4d265ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbe522a-c3a3-4a5d-97b6-8b35f2776a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97727042-9e5f-4b59-8c8c-014c2359272a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d26d47-f897-4735-bc01-e62baf9abef6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7531086e-eec2-4396-9817-5e5d84b86296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6a2498-3c8a-456f-b861-7118125c7841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d864bdbf-e53c-4a10-9e1f-576fd17234b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccc6213b-0063-4191-9096-ae3bf260c607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e37246-6ed1-46d6-8ae1-de92371b1676",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677af2fd-8fd8-4659-a7a3-35ed957de1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c469aa20-2d27-45ce-877a-23044544eedf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbff1c63-11df-4a9e-946c-5376f9600d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3987fa90-6085-4401-b091-9f2c877baa5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6cc3a7-82a8-49de-8256-f78e6a08d7f4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3af832-e465-40e5-a335-634af0153e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f774a2-c164-40ed-9212-bc7fc4f814dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6330f23c-7fec-436a-9796-adecdc42cd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4dcec8c-cb88-4f66-b46a-f84b484e9638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16cf144-c7b4-4ecd-a28f-0e5668fc4d67",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57de67ad-94cd-4952-860f-b46c37f89647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c976518d-2ea6-44ea-99c9-c8515ca9bbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3720e2-da14-4bde-a9a2-47fee53c0ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "544ae6e2-963f-44e9-8bac-e46b28eb5374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448c1262-e980-4bac-b120-25c69e6086cd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58e07a0-4bfb-4617-ad26-6eb99f589230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccfa17f9-0011-46c3-9443-656d9f05c8ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e23e69-5e12-4899-8ce1-492a09339af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adbe5c28-747f-403c-b051-ee1a3dbff4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda42814-3454-4747-b549-52a11c6d991f",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23a15e2-baab-4bd3-85fc-fd4ef37c375f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd23099-d0ee-4203-b141-4bd1fb135546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3e52ad-36f4-4577-a248-f62736d91fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbebd66d-b063-4495-ab5d-6106bdb01260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588497e6-d1e1-4b27-9918-ca1de4f20323",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5987119-bcf9-4dce-b539-9af67ba2639a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2c94e1-616b-4962-b2f8-b76c8d5205ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41bd827-e644-4141-a184-2bec4c0b2723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d526b2e-63cc-4414-bfac-830ea97ec4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b457f3a0-834a-4641-acde-6d4ea6deed63",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ec915c-3897-4437-bfc3-336b5d32793a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30342aa4-cdba-46cd-b135-a9e22eaaafa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fe05b1-8675-4d4d-8d84-acbdb3879017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe16778b-d537-42cf-81d7-b31f29d32421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054c49b3-99b9-4af1-9fba-9078b2013f96",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aae357a-e42d-4950-bc5e-a70e940a382f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16168232-e74d-414c-861a-f6f5034870e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c787ad-bf63-4c0b-bd62-a0082c44f9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f48ebd0d-e06b-4c9a-a202-4a0cae2215d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeec9174-05f8-4235-b382-eaeb07c612b1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b30464-0ec5-4924-a5e7-d20d437c5d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf245b8-2433-4be5-9a01-cb8cde35c4cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08533713-9569-4aee-be0e-8312d27c55bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "275de313-0f00-416d-b532-7da37145e49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1aa0a79-ce8f-445b-a39f-c8322b3fd948",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f6a9bc-e4ba-4ae2-88c9-a1741ae5b061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa797b7-e2f9-4f7d-911d-1e67e320b338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843d3154-557c-49dd-a851-374540886fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef4353d4-8b88-4081-9e36-f3ec4b79bac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb6a474-4f23-450c-840f-72cd7dd1d5da",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ca64b5-d209-489e-ab9a-6f5f43e55bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50119fd-8838-4a4b-9780-f035f9f94c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aca9b83-b078-4b17-9aef-bb6ae7b1e664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e757a7b6-b15d-4654-b8b4-a71fa0dbb249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bef4227-3147-4eb2-8541-5421711b5b1c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bf8275-2210-4cd9-9760-c138e448b45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44dd4fe-a3e3-4581-9694-eafbe1cb786d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5482f7a-efaf-4410-888b-48f71ff24f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44fb7b2c-2970-48d3-be08-52c3695e1c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f31f94-8c66-4eda-adf6-58a3ae934dcf",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124b4182-94a9-4b83-9bdd-4297942fec26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3aed3da-37db-4171-a1c5-0e94858fdcaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd4c058-63bc-494c-ae57-f9a0f2c2acf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b844437-0fc1-452a-9f54-ac6690367996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea02e7ae-f60e-4160-84bc-864212b363f8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6c00bb-0db7-48e5-a4de-3b97b7f97e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820736fc-36f3-49a2-b9b9-8becec9a2504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2df4e1-2b33-4856-b92a-69fd005aa9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "004a4e8f-d288-45a5-af15-3aea7bcf2a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1719ae64-aaa1-4291-9ea1-58dd1b24c50c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f17932-45f9-40fe-8fba-d9f6cd96c890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748f4931-4c91-4e43-bfef-a55fa23668fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37229085-6d7a-48ce-974a-d5b8ef8354be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7044f24e-362a-4060-a2a0-f4dbcc652477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef22aa1-1277-4a1b-99c0-fa9bff9c0ab5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95787237-9012-4c4f-aefe-6e3372ada231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096e9425-cd8b-434d-a10b-eaa98dcc13bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67696a72-70e4-4456-ae30-031e2abffed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2dafa16c-35c8-4152-ad69-721a061f881e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3add56e1-9853-4fc1-aaaf-5622de023777",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321d848e-6a9e-4505-9170-258fec3f3546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed27ceb3-d543-4b8e-a8f6-6d0a3c989e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a106cd74-c477-470c-93a2-c3a15c431457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5165f23c-cfa8-4bc5-b234-d33387e72780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c86ea3-b5e6-442b-b37c-b611a166fca7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5188b6-ffc4-4a4f-8ac7-c878bcc20172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53440212-f866-47be-b273-300567748016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35db491-4896-4a26-9ecf-20d94d70d123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "871d9265-8c49-4d8f-a6c2-ef81cb0bd63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51407d88-7573-4976-98f3-13ba6db75f4b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c290dc57-ef64-4607-9a82-6b6a8afdc230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9bf9b2-cd44-4783-8e77-9ccd68c5acc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ecb6b74-4cb2-4f93-86b6-ba960d33a67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a6be537-be73-4d81-94e7-963ccf9ad0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84e67c9-bac6-452c-aad8-d77915327bce",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5454d00e-bd97-4a8c-88b5-ce5989f11eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad518334-9916-4f9c-a395-b6250a0cda88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7fa35c-d20e-4fc2-99e0-7319b6bbc2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb754c0-60b8-463d-943a-86dea4b1d857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6244757-ebeb-4afc-b40a-d1c0716893eb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8c5c58-2119-44f7-b881-f52a58cbb73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962a2bdb-f2bb-4475-b8fa-14f281530ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9838a0ef-0d19-40c1-b971-9cd825ac3ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "213de120-ca26-4e64-b384-d16fbc7673d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c880e232-826f-4278-86e6-210dc5166944",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e50ff7-7af3-4ef7-9702-20fb22cb94b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6796b64-10b4-4996-96dc-1da34504806a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb641b3-8fad-4f5a-859c-ab2328b31c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a55bf7e-0438-4f1c-b43b-c4e784b7eb5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda25f22-f526-4648-ad41-b487993781d1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ce9fc8-27f2-45c0-8382-9372c4572827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7cf01d-b9b4-40e4-86bf-ee5d39e49c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a33d47-402f-491d-9aec-2ddfe17d494a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "25c8360c-13da-475f-92af-5fc1da99a2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba690ac8-ddc5-422a-9062-79ee30939688",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673cd80e-91fa-41a9-b610-25414531702c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426f6af4-003b-4a2d-81a2-94c64d0abc0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48a1196-3db4-45ea-af0c-d25466093835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "38653cb4-0c6b-41f7-9ec5-9b7030bfa86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e32b1e-d7f2-4a75-8433-c6263e2e9492",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da2290c-bb6e-4449-9108-100f833e7a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24cf8e02-fe3d-4f25-8765-c964175f7cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f980826-baf2-4b11-894a-0155a0a8a87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26146037-a033-4cad-ba74-8546af0aa00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1488464f-69ef-4928-8ac9-09df125fbd5f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddb4596-c21c-4201-a7e4-0c30aaeefbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e52b7c-8640-477a-9a54-bfd3f921896d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f52491-4af0-4aed-99bc-2d67eb25f6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6079e263-e644-4a59-ab39-248ad10f9829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846d6c97-cad9-4679-8b1e-18ce4eed0a0a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f37311-c2ef-4ff4-9782-63d97fa8afa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7b2ff1-3ec3-4bf1-ba1e-b5e11f961821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e841cb-c981-4d3e-8648-28313cac6167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba90847d-8a0b-4a6a-bbbb-5f647e3a8101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defc7597-6df3-4e69-ba2d-9dace3951b00",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12183b0-1c4d-4de2-be70-16b95e5c5d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8ce5ca-91fb-4063-9bb8-2b97b9f0b8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e782d5-400e-4448-9ba4-865e40159bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "22141287-2e30-4eb1-b2f4-b9564422bc7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8599542e-f024-43b0-ac09-0ea031b496a1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "762ea1c2-413e-4d7b-b616-11006fbe25f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be250321-f887-41ea-85d3-c92fe244f4be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbc2c76-b014-4836-8e08-e2aaefa65395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c220b1-221e-4861-a8e5-95c3ebec4c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b637df-adc8-4c79-831b-c74af1e0f5c2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bb3886-c9e2-4e7f-b4d1-7acc9fe86c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28433a7e-1f2b-4667-9ddd-71e59493164c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf8f09c-db98-477a-8905-2707800b2679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f04e5701-367b-46a7-84bf-59524a2a74a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41dceda-15c1-4409-bc16-9817fef4d5cb",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3887262-0e68-4aa0-8b5d-7491c3094991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1d95d7-e2b1-43d2-aa32-21f3bcb92cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55857cc-ea34-432b-9feb-1b2f408fe9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "010082f2-b4f2-4566-9df1-d130f0b41c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbba19bc-9347-4049-affc-d4b7f6312d32",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452b3874-6830-455a-a11f-601c942e2b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d15c079-d5be-4708-bb29-f6e195741b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a9c5b8-63ff-4c05-8658-a9e1231a86a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d67676bb-ea34-4c88-b820-db655da3e33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e040e1-e6f5-43bc-9df2-fe20ff65e41e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c57e66-22e5-4e8f-bd0f-a3ee1769a145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeca739d-af60-404a-8c22-b9ac7dfe5c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2bcd16-93b8-4647-ae6c-d93ecc751ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a7462e1-fe3c-4b67-99e6-1f3f6d5906bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97b8c30-c8bb-462e-94da-03774ed206f7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cc5a54-789d-4aee-a7fb-b09dddd34d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48219a9-97ba-4811-9d60-dfd8a116bbc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc01566-0fcf-4658-a07c-b9005340bfd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "28817042-3206-45c3-baf8-182d84f24129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacb0545-a5f6-4316-bd8a-2f96d9585a17",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a321636-5c35-465a-aaa1-26583efe8add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7926f0c8-3f3f-499c-b668-81aaa852e62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2689bf-612c-46a5-b5c7-ce14ee6baa19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "579e0bc3-f51e-4e14-b6af-f1bca31a7719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0759c181-e60d-4011-a037-9c20dba2f179",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37d483b-3641-4376-9726-995e4c9ab166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797fbe06-1253-426b-898b-8978ea076a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50095933-bf2d-43f5-92a1-49457056c9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "91efd493-083e-43e3-87cb-c7118c18b031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fa3fa2-a83a-4e1b-b98e-86ddad28c60c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ebed9d-7b8c-4868-82e7-aaf86958df65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8271c632-190d-4966-8bf6-ee4939e5d2be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7743bf44-abcd-48f0-b6fd-9598aeb2c71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "07fe2b3b-1569-427c-9ea3-d05d508a908c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c16d40-0d2b-434d-bcd2-24ca43719829",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c89e5a-25cf-45f6-8f27-0d9451bf0357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73cd84a7-f3ef-46e1-96e6-105340b35c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19cd59d-0936-4bbc-9865-8a44b9e063fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a45e22fd-0ff8-486b-9603-708eee4aa385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70944d8-fd48-41cd-963e-ec92acf00571",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49793a7c-e6a8-405f-8382-40b68c915615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132ec741-ab92-40bd-8c0c-2534d9fce6e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fbfca2-3059-4a39-a4ab-545a764f7d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27c606c9-afe4-4dd8-b1bd-096c306da79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13c5b6c-9c15-4a60-ae5d-3046a8c1c2b8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71379619-8074-4bbe-8fbf-48d38733aa78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c9b205-d38c-4acc-bcbe-bf634f4e0ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cded4e-d8ca-42c7-be52-56f6751bbc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29550c5a-172e-4bcc-97f0-e3049c592669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3f98bd-eb41-45f4-b3a5-615c03d95fb6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fc8dd5-8ff7-4211-aec0-3e450a30a251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98118843-00f6-4446-acd7-e55242c9ece6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b2be6e-0d9a-4743-8fa9-0b396a39bfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b50737b-cfb8-4a76-b1d7-9943facfd94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277f72b7-4e1f-4bdc-b947-5308d90e089e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898b753e-f7e0-4608-9e7f-8e5a374442f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78a9a12-e5c2-45e2-8418-c09636bb8729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bfb96b-38f3-483e-8bca-3c614f9b3c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bfaaf9-178a-4a30-8547-0749a8f7dd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1374e0d5-d91d-408a-bc2f-0b2053d7f38b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f078d541-f22c-469d-92aa-0c71e8b36058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "536b8c66-c304-4d40-89bb-13d825975bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3eb9023-7452-4608-ac32-4e4aaac15f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "010cce25-afc6-4ad7-871c-ef9521139252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8f9fee-e1b1-4571-a1e5-87db82bb6e4a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697169f9-053f-49cc-959a-8537d563ced8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a98e7ea-bb31-4bdc-90a6-98cff92aa259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcf933f-a9ac-4c29-9d3a-c1f5f960d695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8539a14d-39e8-4574-a8b3-04106da918e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687393a3-802e-4853-8c21-3c8d715e5533",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0f381f-8001-46a9-a5a1-bb0126448547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08286e12-80b6-4913-b304-e7f3ac90f976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab898c40-7687-46c3-9750-17d682751ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bf5fcfa-d9da-4f48-9c2a-b09f15079e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681685b0-150c-4004-a8e2-88a49aa8f104",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6257f0-4890-46bc-8a7a-fb3818b2c3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b23421-25e5-4154-85a7-61c37ecace35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e406e933-310a-4e6e-9f36-f9eb204629bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "059626c2-962f-4d32-bf77-1beeb892f27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843138e2-ff98-4163-8ab5-5797c6940a78",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0aa116-353e-4860-85ba-0493a4c4d6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99be6cbf-7a9d-44a0-8989-f163c959d0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b9c6d3-e056-4390-a2cb-e35c856c1ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be85699a-1a7f-4f06-933b-89d46075c3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4753c166-8e3a-4567-88fe-1017efda884b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b46c06c-b113-4d27-a479-00e859a7c1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505440e5-49b1-4fb7-98bb-fbf7cd04422f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c5ccca-5d8d-44df-a973-8cc6a0d11864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3eebe9-2df2-4c56-ae62-6f9ca28e377e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a03cfa-a599-4e3b-ac36-062a35aef52a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bdd06c-ac05-4406-838a-28a4c0e3344a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d700ea2-f011-4ffc-aaac-93dde7c782e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7393850b-a7c7-4415-a95d-81bdf9b8acc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "953b123c-3d73-419c-b6f3-53db24ddc79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23c4a0a-fb1f-4233-82a7-f298fa7944ce",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc2140d-88e6-4188-9b99-da822b2517e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ffecf8-92e2-49bc-b982-74193cc6227e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7af21c-4e6a-4191-aa75-d71ee4f8f341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3abdcd05-8bc2-4849-8867-41b14278204e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a88645d-2f1e-43c6-8e2b-04a728675958",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697b45f4-e025-46d6-a016-3d90170db3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a0f622-5b15-4077-b16f-aafed6c9a1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe45fe8-ceba-42d1-a60c-189c011186bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "993544bd-c30e-4496-b26a-ad99212b3b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa28921-7949-4d7f-9e1d-0cee7be8c04e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30e6edd-5b3e-477d-a96d-e42259f471e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b188e61e-87c3-470e-91c4-112e59fa3fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b267d236-01f3-44ba-8686-1cd45ff7aab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f0250aa-4747-47a1-a978-0bf9b6552b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec682958-87bc-49a5-b843-dda83ab2f57d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693c3b46-1755-4530-a560-990e7d9e01c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2b365c-4363-4873-bcdc-2e00bc796ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc77d9e-49af-467c-8218-cf650024ecb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "170b6ea0-306a-45a9-8c1c-15e9dea79bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85454f06-df80-4596-8cf3-db91df4470ae",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6c146f-c963-46f8-8dfb-2e8f2d79df15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a247ecbb-6070-4d38-9edf-ec6c842ed771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efbbed1-9ce8-4879-b8ac-7b3fce9cda8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d49c263b-ad0b-4ae3-b226-dd4aa4036daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4343c2-b549-4121-8224-263602535de0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3b9dea-be1d-459e-8e71-d0ee7375ac8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf64e435-c34c-45d4-af08-09cfbf0e326b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10cc89e2-047b-4e95-a270-6c382cf2a90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5991d98-1ac5-4b9c-90e0-95137a277e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1135782-b9b6-40c7-a67b-17e014e4516a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d36c40a-29dd-4ce4-83eb-0cdd78b212aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f332976-d37b-4a2e-987e-1cbb18600d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7104910c-35ae-4b15-aa58-169061c506ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c17695f-a90a-4621-893d-b3d29ad57259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79031892-9f4e-4785-a79e-18bde67949fc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0aba9c-6f73-48ea-a741-9f3dfc09ec3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce5cdea-f288-4a60-9899-24f4e8ed3edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dd90df-12c1-46d2-82e9-9902bfab31bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2d7a0e8-2f8f-4c7e-869d-19158a04056d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84d6d48-76c0-4396-a86d-198338e75a51",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99465db-fcec-4da2-aa00-d517c3ec32bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af29bfb-3690-47d1-86d2-bd1e7b489ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24c9a1c-d527-4c31-8cf9-12dd661a30f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1729df-75d5-4c10-8aeb-4ad7d2323f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da27aada-37a1-49e8-a96d-d29bf27303ef",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d9e201-436b-4328-ba64-4460362a200e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34adec2e-d18c-4053-97ac-9354f553d965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c7240d-e5ef-44aa-8148-997e84950f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3826bb4-c67f-4b7d-902c-d3af86001ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e0ab00-7be2-44e4-93d7-c3a2874683e6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66404701-e40f-439a-8450-76bbe784a623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433fd09f-cfbd-481e-b434-008773851518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af76882f-7d29-42c8-b57f-54565f902313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aec25553-ce74-4b6b-92b1-a2568d386642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1457bdda-8b63-4855-9545-95888d0a0e9c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e71ae0f-cae3-4260-aafb-149aeb7d5ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808cb576-c3eb-4429-9009-8d6cddb92e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8450edb-16bf-43fc-a707-a3fe5d8b172b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d35cddae-7c91-4e44-a587-12eeff0515bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd67d44-277a-4cc9-91e1-870bafcbdb29",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1553e678-fea6-420f-94c5-1fe619cdfe50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc48228e-8566-4e76-ab6d-5b7559a031cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f63ed1-b991-4d2c-820d-78bed63f0c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8349e6-b07a-4694-ac42-ca5ba018139c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da4aba8-62ba-4e1f-a1c0-4922a810bad1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ccb0715-1a90-4aea-a482-b7f6f9c0da80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b27f33e9-b3ea-4f6e-94d6-c259268ff70d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfb1e87-fda3-4060-a746-c102b7aaa3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1990cb73-6833-4058-87ce-617b665b30ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10413286-07ea-4ccc-85d8-2186f5983471",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d25275-03b1-4e14-9dfe-c4a2cb818d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e0a81a-cc38-42dd-8fd5-6647de5557dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a411490d-3e4f-4a2a-9801-349a18498de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f80260b0-75d2-4ec6-86a4-4d4a712231d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fd2b08-9eb5-4ac2-8451-a4ddc13a6d37",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd78ead7-e698-41b4-8e28-4696e17dd1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81be29ca-1637-4cc6-b406-61184e43b580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f8125b-ab9d-4bb1-8fc5-3a436a740e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe27bb9c-dfa6-4d4a-be64-27ca0d405887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1935af-d2e2-477e-afc9-f15e05f233e6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f622ed8-6c7a-4f1f-87eb-8a02ab66c4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd52d5cc-ea33-43a9-8d7d-0a6e82e52b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64260ed8-8c28-4657-9ce8-307b746abd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3039e73-92e7-4153-8665-4f1f63a672f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca69a5b4-bfed-4d21-abf8-6c9681ec79bd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459783a1-bb19-4629-86ad-7fd4415ea4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3826a6a0-550c-4152-b6fc-e6916391a176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa06cca-508e-498a-b4c4-294114f96d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5f2901-e8dd-4715-bf41-cd980ea1e915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26b2c2b-b703-4ec6-8144-e239d9274dbf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c85031-7664-4ec6-bb80-2649538fa210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace829ac-c5a7-4230-9e2a-054ac31924bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538e2376-3077-4476-b164-6adeb45094f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc9c0ea-26b5-4796-a06c-883bb2042f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b74fba0-43ca-4672-abaa-0488838e330a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141fdf59-7d92-4b83-97c3-d62d88f9ecb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791a48be-1efb-4e5e-a476-b74bfdb250de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d0dddd-632e-4fed-a651-7a94569c484d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e020c36-6337-4461-b14c-92d524e573c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1fb5b1-d341-46f2-b45e-836d980df637",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ace79b-7dfd-43a3-8f4d-3e62fcf7373c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef35d512-55d7-402e-83b1-ba594d3261e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad37ce20-c483-467d-9daa-bb0d10516b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7891ea81-caf4-41ed-b501-5280e6db51a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ede5b71-3a47-4622-86a2-33b0ede81a92",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b34b0be-0b78-4a48-ae54-21c1362fb6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f6edbe-a86f-4abc-914f-ab09acc362d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33597ce-f9c0-42a5-ada1-c86198eddf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63b564e6-540b-4b62-bedb-bbd2efc118a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ffb55a-7b94-4622-ae8f-e2f68e81e3d9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e17c34-793c-4ce8-a396-a185a001c406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ad19f1-76b0-4248-b247-d3678d80e9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa23e0c-2ee2-4175-b9e6-0ed213bb19cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9337af18-5c87-47b4-903a-af2bc280dee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45de9f9d-28b0-4e3b-ad30-48d7e4be7be6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1655331-ba37-4498-a64e-ba6a13816edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378503e9-d356-4e30-8744-1d1bad1b3fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca00a7a-2cf7-477f-bd06-653afa015e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa85616e-5eee-4537-8093-150597e404fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f737d237-4804-49a0-ba5e-ed749b438cb1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39354d7e-9eb5-4d78-be78-496c83461c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2515ecdf-9b9a-4385-bbbf-7885d436ad36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419f2f3f-87c8-468f-8abe-f7599a8b1c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "90142c6e-8709-4edb-89bf-b39ffca3aa97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee03e302-c5e8-4b72-a8bf-b3951fa0b177",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc443ad-4a26-495c-aec4-efb08c647c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84cc1a86-e105-4587-bb69-140a4e7db1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a423ad3-2a4e-40ee-be4a-afe8e7b22ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40370b32-435a-4282-83eb-6130f2ee93ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28932baf-60a6-4a9f-88d8-33eaa77f133b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b7bf4c-1582-437f-9e90-808429405f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cbeaae-1b2d-4370-99ba-65549c5073de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20a966f-9dcd-49e1-9e06-59cf67fcc100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f20b17b-5d2d-43d7-b225-3f63aaf1694c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1f05f3-1840-46c0-966a-fe7fc5289cca",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cbfa02-0579-411b-b147-0ca110044f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668e5a15-34a7-476b-9996-069b27c762c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffa7141-632a-44d7-85c3-eba8d3168192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4dc8494-b20f-437c-b2b1-c88ddbaae018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3338a0e3-8688-4674-be6f-10744c772837",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6298706d-7d7e-4ed2-9b89-c5359a7090fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd40b66-5ba1-47fa-a5b0-9279690d0262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673f6d2c-d80c-44f2-b25c-06a939f05359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec723af1-09e3-4477-a817-b8970ad39e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5993455-64ef-40ff-8473-6be441c4045a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed13f86-52e9-4ed7-8ff5-8902d34adc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7908e65-2daf-4516-883b-6bf6fe3cee03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3740a5-71f8-4eb7-ae4c-b41f0da0151f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92cce82e-f8fa-4d40-846b-2d83d9588c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c31c19-b8be-4b9d-b922-951b3d2158c5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd487057-bdd7-4a92-a0fa-48ea69f4a931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1959e6e-203f-401d-9821-fe590e725d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5580b77d-cbdd-462c-90b1-36af2b742e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8b05ad-de70-448b-9cdc-1c33899f0588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1df755-d727-4c38-9351-966070dbe855",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad989268-d3a9-4121-8509-7773511150eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca634dc6-3c27-4688-9403-6fb78f327e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b093b4aa-fd49-4da8-8db8-910476c33347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f75d601-9f2c-46bf-9feb-8d3590d9a24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94db5df5-87e4-40f5-aeb3-b87181d4c75c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec65e1dc-2856-4785-80c6-d3da0e8c3fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2da918-5eb7-4461-b7f7-0386a2a000db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a84f3b-512f-4592-9e66-ced4cb43fa9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d79e9d71-9ad0-45af-8637-5ba3dba0062a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e7bda1-0750-4f60-828a-7cdcd87f4eca",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f77fff3-b68b-48d4-9074-6869cad29e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae1e3d6-dee6-49a7-8300-7249b99f71f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61531ba-ee31-41e1-9deb-e4a9235aee41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d93a705-34d8-41d8-a1d7-40b6df7e29f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f76f687-469c-47f4-a0f1-08cc9f32e7b0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d598dc8a-aaf4-414b-a372-a5a96218050e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e775564b-491d-41bf-bde2-8b77bdc2ba7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358427d0-984d-4c01-bc36-dfebbe3ee0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e62d981f-d85f-4a7d-942a-19a351c2fd75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474ab673-0b0a-4ec8-9758-94bbb913255a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85f9764-51a5-401b-bbbe-22103d1e36d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "76d6e202-de6f-452e-a924-dff65af7f44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db85368-4a18-4e53-8bf9-c5c11a85a210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "63b8699c-77b1-4ab7-9034-ab0b09411d24"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1ea71be2-870d-4eec-bdca-c2fe67828d3a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e07b6f2-8059-42c0-a452-fa39247a3c54",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374b3aa2-0ce9-4869-9809-32c9a972225e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a23fed78-a313-4ea5-983f-055d23be1e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2974ecb-42ba-47f9-96b3-b9608c7a57f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "da515ccc-12c2-4d98-80c6-f925e0d67fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990f526a-d15f-46a7-b67b-8698ea6592c0",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e181e0-342e-4cfa-a365-64a7d12ccc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f45cf58f-8852-4153-a97b-66346a623d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853997cc-185d-43a9-a2f8-a4ce26064b67",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4c507dc6-3bd1-4c29-bbbd-a35ba581ab7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3e57666-7b3e-466b-89c6-38d6c16dfada",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c73baf95-2a26-4fd7-a392-f8eeed206bce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2aace13-b213-4cfd-bd4c-7146e7d25574",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a998abd-e5ba-4229-b40e-42d824b675b8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fdb21729-2344-4d40-91a0-db111b5e2980",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bcd41104-ece4-41cd-9d5e-1ed9d9ce0147"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3913ccf7-1c62-4ace-94f2-d38f1cbff4c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f07aa776-54fc-40fe-82d3-b1895369e151"
                }
              }
            ]
          },
          {
            "id": "064d3b89-9ed9-43a0-9408-91d9d3ffcac1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7164bafa-dedb-46f5-b478-2ec108f66795",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ccca152-3e79-4483-a9da-11107dae1a32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89d314b8-2aae-49d6-affc-08671a92e4b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4234c3f-62b3-4ffc-9086-867abc464d56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0e616b84-9ddf-4ac3-ace3-4271d1113f78"
                    }
                  }
                ]
              },
              {
                "id": "c59e7bb7-fb32-4091-8238-352b9f992973",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e846bdf4-8ce6-40c5-95e1-860fc577afa3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43a79b40-0191-471b-bc2d-3799d25c1c3a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23422e50-0844-4275-8bb7-5e94439984f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d2c5739d-121b-4588-b089-1927add3573a"
                    }
                  }
                ]
              },
              {
                "id": "3ab08635-88c8-456d-9d88-47b2523814b3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00d5ca2d-fa14-4e4c-8bb7-591e76ffa5a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06af8ccc-30e4-4e10-bb61-840498374e0d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78c6673d-0af0-4c87-a236-95f9067bdaf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "625b4fab-af21-4285-8e85-bb9fc6c88f8a"
                    }
                  }
                ]
              },
              {
                "id": "a6e85f94-080b-4f2a-8b10-e3af690ae09a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3705da11-4770-4131-b125-e21d60187907",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a2244e3-4887-4f3d-8a89-4d185f38eeb2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65c33d34-e2e5-445e-a3ae-6b252777086d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2f88664b-1705-4ce3-a953-d71843dde31b"
                    }
                  }
                ]
              },
              {
                "id": "ae0d2d8a-a98d-4b50-a0d1-133b651ec3e8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "813d2a70-ad6f-4288-8bb2-2bb789c0b67c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "410bfec1-8d1d-4f87-bd04-ec7df87447cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f79854c1-70e5-48e7-88b7-2d543e91c8ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2a3e7304-89f9-41ce-aa8a-239883e0349d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e67ff3bc-6812-4e2f-a122-e3ab9056d9a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b488c70f-f107-4850-ab81-ac853750bc85"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "951c8583-9c66-4062-950a-bac0c622f05b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b84aed28-6b0e-45e3-8796-2b35c3970b89"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95a54ea0-6d5f-42c7-9ea6-aa591a7ce2e1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a7c8e7a3-5104-45d4-bfb7-adafa81d14bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b0730a9-b06e-4afa-9d01-44e267d56d22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14f7f504-06cb-4b8e-9816-14e46c8a6ed7"
            }
          }
        ]
      },
      {
        "id": "1e19f1f4-4caa-4645-b81f-ba187d2769ef",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "43b534bd-1622-4f8d-b62e-1cdc3e32165d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bbe1cfb4-a909-4690-96a8-13c235a96269",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "18dbbfb7-f498-4ab6-8e01-12701d22b1b2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffdd5d7-4c2c-4b8e-8810-a1ef8dd987a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76707a9-98bc-4b5b-8e65-1faed39d2bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2bc8842-7a4b-4696-b49a-ec8504ca6171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6277735-1ebe-487c-9f09-6252791031e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4793469c-aaf1-4dbe-93d7-c4860649f7f5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c933b44b-6955-4e69-8a8e-36629e1936c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cecd566c-7b9c-41d6-a79b-574480d92dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4acbfae-7150-4152-b86a-b6d5dbeff31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0417c3e-7c12-4d09-a55e-843edaab3078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c71abe-297e-45e4-9a8e-f0b97dab2059",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a5052d-01fb-4185-8efe-5c0b9d239938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b3a464-246c-43bb-a110-9eecc076ab6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ed6420-0af9-423b-b909-9719eb34633c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc19421-ae49-4405-add6-39cb7e633b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b8d2b7-4bd9-4a06-85ec-dbec845015aa",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc55e2a-6517-4d60-95de-0c83694349b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eeae9a1-82b1-47e9-a989-5d2fe049cc85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee75dd1-bc3e-4da0-b54f-437f88fd6b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c000280f-7a6f-4653-babf-6f8359688dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41719e6b-2c47-4046-a6b5-07e9d540bdc7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ee7a14-ced8-499b-902d-73c903070242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995a6ad7-dc8a-4f15-b02f-3ff4bbad71a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2ea68a-0f51-4074-b5b2-84bce994ba19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1202bdfe-ffdd-4311-bbed-33f7f15f99bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7265ee91-d629-4311-8646-c16b8e091fc0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e6de10-2180-4c2c-86b0-2fdc2c02cd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24edd04d-872e-41e2-819b-c1f0b36243f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dda951b-2b48-4c0b-a783-54082fde9c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a5ac2a-f9c5-4794-8de3-a5a8383cd3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec8dcf3-5fdb-46aa-97a4-3f92bc937b03",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89579ab7-275e-42d9-bed4-6ef96454723e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da5fc6f-309e-4ed6-8824-67b754878eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e783090c-4efb-4b49-b18f-d79765f71d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0386c335-7c98-44b2-90bc-b328ccb87413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a114af-77f5-47b6-9012-c2060de299e6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd625b8f-bc14-4f85-b7bd-abd28fd742cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a5e525-ea1c-4f79-99b3-519ac8cdc64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb63428-8af8-489d-b3de-981994b7c333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "837e54e0-c2a1-418c-8def-e3a5554773f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9261211b-23e3-488c-9f5d-43ed5698712c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd46119-ce46-45ed-b2a1-6acafaac36ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e96332-1dee-410f-a7e4-7e40576b7fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39428389-1171-4ceb-84a4-8827af2373c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2ba627-3acd-4f95-9904-6ead00d1be5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983bd94a-4969-4846-a7f6-9da04c4d8d7e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd194c9b-8b13-42a7-8d3a-108ec895c82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ba3c9b-6771-45d2-a598-5c2d6d3df23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e89e62-1232-486c-ac10-637e699c821d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fee625b4-4638-4dd1-b488-7f8e1e938e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753c9627-246d-4179-8e18-a433bb6725c6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644e7331-935c-4e53-8fe5-4ad111df1815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d7b60e-25a0-4d86-b47e-92638b576925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a54bf35-1f17-4516-a22e-c9751265260f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1bf53890-7448-43fc-9d70-b963ef0fc90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b97ac7-8186-491a-816d-5eddfebcbac0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a7bac6-9403-47f4-a1a5-b6d5966a0b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcdf86c7-bb3c-4806-beb5-c75944a12a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d45a31-8a8d-44cb-b294-a2c374df689e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb5a058-7720-4ae3-a3b8-16f59aff5fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3ff3a3-8648-465d-8cb9-63aabf573b41",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0569aac3-4bf8-4550-86af-5ffe9e756750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24aa8e8d-3882-4e1e-9805-d5785d663c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0d40cc-f4f6-43f0-bf23-5344eb60e2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc2a612-dd35-46cb-aa32-f11420e1a5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9389fd00-2425-4764-acb2-22c07db7be86",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67046b0f-837f-4758-b44e-87e65a2b4f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20fbc992-55b1-4a56-8c99-bf99a179501f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a184ccf7-b3fe-4bc5-b8a0-6eafd7cb3206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "885d8ae2-9c63-4fae-b415-c2b1364df14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080a12e9-a4f2-4f63-8684-199f6e9818b2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e90e4b-c285-450d-9194-78d140f5a20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f577fcc-0979-4cd9-a8d3-637b02765c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80e5208-a823-4553-bbd2-965d581e253e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf174e2-1705-4ab0-a58d-a33455612333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180f94a2-ad3a-4895-a3c1-ac039ca8d43b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381d14da-57ea-4459-85b4-405fc6842ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e498b7c-048c-4c12-8ce9-3b32dc78c305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c617b9e-f025-4be1-a22b-3c1ca394ecc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0f8c24-f011-43ce-ac56-56fc3ae7acf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08dc4b7-69d6-49e5-80a6-4aa16635e3d1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd52b300-d789-4af4-8498-daf092722c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16548ccd-5df2-44da-b764-7353d78d5c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fca188b-3b5a-44fa-81cd-473dca72081b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b71c357e-1530-4b40-aeb5-960752a0fa71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a4f7ca-a084-4549-9c46-42dee25d802c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c73fb6-52fb-4fae-a264-f825122f552d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a371f53-760e-4fa2-a0cd-c2cd585a7244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9598b635-3f60-4e99-946f-04f4aa78ae8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd02c18c-1761-4d90-bea8-8014027b5d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcdf65f-2945-42ef-b67c-fa86635614f3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f1f272-16cb-4655-96be-d1553207c3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19aebd6-9a2a-42ce-bd56-ae56cab1c52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d07b5a9-fb91-4ffb-82a3-f2c9478eac98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a173ee5c-ce0a-4d65-80f4-7ae84bac1f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eebe57e-c54e-4d75-8313-44654df3c40b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f3c4a7-32b5-4381-b27f-03997e5af92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b51509-e139-49c5-af6a-4c530185e154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b547b37-2671-435b-9495-00b575835721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a24e086c-5bec-404b-b33d-dcc154443779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292373a9-b1b7-4e93-a7c4-168f24366d36",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3868383-1d2f-4776-996e-71873f6d9a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973a938c-7323-45db-9253-38397fb8a46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b1f0ae-5717-4a5c-b734-887fab02c18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61f8c317-17be-44b0-b92c-91937caf90f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e43c932-eceb-4c5a-8c31-663b48027580",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6f3ba0-6c10-4630-86b5-6fe0d1b03114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764fb5fb-b511-478b-9e2b-cf51f30c1b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e18dfd2-d291-4af3-8603-4c289707e2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f30c5bc-a326-4f68-b79b-2327df014a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2e3334-5689-480e-874c-b459442602ae",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a987d882-018a-46cc-a52b-332384753347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66710c6-6982-4e04-98fb-4dad012966be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53990733-5176-40ad-b304-6c43e02ff5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ed425d-c9a8-4da4-9319-e3e604ccac4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95735168-c83e-42bd-899c-67a7733078f5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc461112-e254-4a6e-8858-f3e26852aa2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ee46f4-6d49-4791-835a-adc3263fc7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f633ed-feea-4638-90d2-c134ac77ab92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d246392-7f10-4d64-bff7-48882b54a1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a2fa86-54a0-4d8e-9e90-592dabf098cb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7c05d6-e88c-4102-8eec-f15a964e0617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2bdf2c-9f99-4287-b051-c37cc50a9ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209d7372-a0c9-47a3-941e-3bc404520e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b1d925-a523-435e-96cb-3c5204a152f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b78b882-b0bb-415f-bec9-3e3daca26f53",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4523dda1-401e-4a1a-bfea-90b48b8e5634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc76ae3-1709-48dd-a4db-224342a49b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94423ea1-447b-4c3f-befa-b6f21900f25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07955938-1e86-4692-88ee-2badb9e971fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2051f6ff-4d81-44c7-a97a-36e31028ef9a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0db31be-e704-4772-85eb-f5c21df3fdb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6577c596-37b0-4ea5-ba6c-2dc1c1734acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ecbcc1-294b-4b88-bd2f-a80d49488fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2cc15ca-45a5-4a69-857b-023e918b9863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00dc6068-fa9f-4603-9277-ba389dabf326",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbfbee6-7e43-4cf2-b355-e16470b2bec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e28a6c-49a6-4c40-8666-5e9c644ab117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4063e9f1-1ea1-473d-8066-20108453f6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43f86f25-33df-4a77-85ef-4aa67f26e500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd288dc3-299b-44f8-94de-dd9d38163871",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e50bc2d-af11-4161-8e39-27fa82f451ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a6277c-d9b3-46b6-96a6-58e66ee09daf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d06332f-6f77-4e27-a046-8fb87d452406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71144056-bf2d-42f5-9291-200767634004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db15ea32-3588-4a47-b65c-e9c7dd8a0d5d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64eada02-f381-41a0-9b92-a98840cf347f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4824535-03be-4cda-914c-4354a68404bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36325b0b-8497-4f1e-bf93-332ffb46b796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe25ef05-e428-4cd4-bb79-a4f0196f1740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27445706-efb2-496d-9b94-37989f7b6942",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed0321e-bdaa-4e63-a65f-2d44e3ac06f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a02036b-92d9-4708-a227-c99b504e5eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d62e13-2d88-44ae-ab97-68f95a2aed08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae00fa6b-1370-43d8-9a52-4c2cec494a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a165ce44-e6ea-43ac-8e2c-823d1b1384cc",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cb1e8b-5994-4e3d-801e-1a07da3009fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7502715-3954-4ea7-b0e8-9529a369aea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8271520-9fee-4a3d-98b2-51b51a8616ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c628d233-e779-4c01-a06a-ad81056ec522"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "35b7dfd6-9f35-4a5b-963f-5ff04d567c44",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8be54667-21d7-4f3c-ae9c-8bde3829c27c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71e638a-ec08-4abf-a568-df9307ed4932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f96fb5-d252-4e52-87ef-e7853eacb1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0730d4db-7144-4d1c-847d-27e02c61fdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "647ee9fe-1857-46f6-b3b7-bc0fec0fa2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d0f65a-7dc1-4b75-bfc8-9ff57d0e37e5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b842cc-d6b1-4008-8635-d811568b0090",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0c15e6d2-2a3e-48ca-943d-0786855c0d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2a8094-be7d-4cfd-8c53-f2e4ef033f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53ba8c93-0dbf-4032-b47a-caaed7a025a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a36c0b4-0d3b-4cf0-8455-480e1ded549b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4731ce22-be45-4f01-a474-310d3be7da80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e8bf2d0-4891-4e92-9108-a92a33316cbf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afd2abdf-1e20-42d1-a6a7-6baa62614a83"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d5f2df8-8b42-4247-94b6-f70b86924c5b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c54af27-b107-4121-a644-9eac17894286"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5653455e-10ec-44d3-8003-b892dde90f6d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6264980a-5c7b-4f3d-affc-42574ef28137"
            }
          }
        ]
      },
      {
        "id": "8972c3b2-c62a-4ab8-8b1e-062deb279065",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2adc2850-2f6a-40e1-82ed-9687c2ef078a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00866818-cb06-4fdc-b082-3b416e6f4f19",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dabffb8c-b329-4fcc-80a6-0ff6ac17bbef",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0508799d-7f66-4b91-9720-315bbd98918b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "010bc4c8-68d7-423d-bd43-62c724b2334f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27920c5a-de8f-4d27-8a95-6bce9a194104",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3a6382-8def-42fe-964a-a6a546b4a29c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18197220-9d02-4d44-a898-da4762bb0caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10949e06-9d67-4fd0-a975-d91055ef09d8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a539c2f-993e-4749-bace-faa08daa4653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459cb600-1b93-47e0-8ff4-52b0961a359e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c18633-a455-46f7-af48-327a541af27d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ab653f-8240-4ddd-92cf-08757eb79a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512c6299-694f-40a2-bb08-83b0905f0949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b22696-90b8-4cc0-be51-3ee3f71a259c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7221a9-d017-47a0-988a-e263cd8aa5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96f2c90-6475-4ee4-897e-bbf5f339e064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398e7e9a-272f-4e5f-b51a-6addcceb3b96",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20666ad4-33aa-4459-a516-90d7db072b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6e42f5-9826-4aee-b09c-5b575aa215b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26edfd6-35be-4252-8dd8-3fa4c90a55c4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d62ab0-e7f9-4a14-8ea5-ccb2fd7369fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9ed3bd-6e8d-4bb9-b175-918c88939aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9e73e3-89df-4846-a05b-670ee8749d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1545ed-f4ef-424b-b61e-8edf45d03f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c77e75e-e85f-4ee7-872d-a9e9f0070ec9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57be9a98-6ed6-435a-90a7-f2e9eec9ef70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09684a97-773b-43e9-8dc2-cca5d494da3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d5b781-bdaf-4f54-b5fe-e577dedc5f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96aa427a-1e4a-4b43-8ce7-5dff20c58b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b862d2-c42b-45c9-a264-757ad62d309b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b5ef3e-6f4b-452c-9632-ce21cf4af8f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4129bf27-bd45-4852-9569-8774a176e22f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "517f070a-74a4-40c7-ae47-7fe272a889a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4612be69-4c8e-4ef7-9c65-9f4f70c66616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59887500-6ab8-488f-abde-a904a86d6d90",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc29962f-4795-429a-9053-d54184ce2a91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4743981-5fd6-4ed2-bcb3-debfc28cd855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc3083b-9283-4ed2-9d2f-c78d303fb381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1820be85-4a03-4949-9ba0-27c93568947e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f1d4af-dbc5-4cb8-8a85-b2fcaec0b531",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47544061-c568-405c-870e-6a8cb4836350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f9585c6-124f-46e3-be2c-9af0c60bbcb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "564a23d1-c004-4ef3-8140-c1920af3c88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074c0bbb-8654-4837-baf4-7783e1787239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3fa074-3f66-4006-9450-f6c6c9f9c73c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2509b3bb-5049-4750-88a4-e67d8230873a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68e5811-0476-4745-b35d-3b0273d0a5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36db137-364d-499b-a81d-7f5f166d4634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4718c8bf-9aec-47af-aec4-33b30daca253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ddec40-8bda-424f-85e0-3d7771ea5637",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345f00b0-efd0-4cdf-a493-80857e6c2f84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00c2caaa-dab5-4741-bdcd-eaf23fd7a96d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e60f7f-e42c-4df4-bcc4-d95cf2ac9e2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc870f7-13ec-460b-932f-53c6243df823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f34b16-9810-4571-af2c-06a93ec2694e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e97bffc-315f-4963-92f6-8ce842f19a7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c64be62-7a85-4042-a360-77433c174add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c6c52b-b2f7-47c8-81fc-7edacd74beab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adcd87d0-6fb2-4ad5-9bac-5f2f91c82efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec80bfb9-a54c-4fa7-a851-edfc14556dc0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265a4e58-ef3b-44b2-9c69-e301b482a751",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e396c0a-f8e2-4ddb-a66e-72a66b5ca699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bbad83-6661-45eb-83a9-516439bdce55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52614f1-d4c0-40f9-93b7-338e139afb31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6a3f19-027b-45f4-b497-7e27e0fe1aa2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2125ed19-e879-422f-bc57-b93c1ef7b3ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82b9163c-561d-449c-aa0f-ced81d5be59a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77d965d-eb22-4793-a423-200b6ba76739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fafffdc2-b620-42fa-bdde-9dbbd7da60f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02054b6a-e237-4abc-b6d4-9cece57f3dae",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d699da-a476-4c03-bf97-631fbb8f4989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee6b2ce-fd47-409c-8489-4239e6cca74d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b73f415-371e-4725-badf-292cdf0ca5b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a793fd43-1a79-4942-be36-77c9864eea4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22297b62-49a5-419d-b1fa-428be153633f",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80c72bc-61b5-4e3b-b0ea-b95e7b1fbb49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7369b89a-3b8f-414a-ba3c-993bbe05a4fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfce8a1-5f39-4a2d-9744-e83c4a0ccc12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47214eff-4236-477d-8396-d194f427c8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc68d8d4-bec5-4b89-8893-c0e4da320e41",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08675d26-bdcc-4da4-8b84-c4c0bcefc07c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2c9378-99f1-4448-9962-23c1b09815a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8920eeb2-9372-45a3-95a1-be2b462aa146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b16f9de-b52c-478a-be98-fc247e2fb044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2933e38d-1cad-41e5-89ef-cd9c55259577",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8b7b6b-a83c-47fc-8818-43e235719dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ffa169-47b1-4002-89f9-7b4ff94c6214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c10cf65-6a58-44bc-bea0-eba788ad4346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d7665c-d39e-4fb5-a99d-39af4351a4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325c5f3b-c0cd-4fb5-9182-765cca50d7d9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cf1bb6-7fc3-4985-94dd-553100de71f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935afde3-0ffd-4f40-8198-b68c08da475d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eef0292-ed1b-4e10-9620-0278b498ef93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45344824-43a5-4c56-8a66-e97a27e4f851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f016023d-b893-4b9f-a4ac-7f115c7323bc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa79d4b-adb2-4fec-80db-c1aa92774d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e2ecd5-8005-4cfd-a480-b83ea9362092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f1ad44-4d68-4ed2-801a-67b9e8aec60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ed7169-04fc-43f7-86a4-ce1ad2e2d114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b307cc37-79f5-413e-9efb-a63fe69a0847",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cafa413-feb5-4f4a-9538-7435a1ee2ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67abe00b-6ae2-48f1-87c3-1088eb6cf423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8813fa-6ae8-4178-933c-a18a5cdc3b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5d36f0-ed09-4874-8c94-8ab95bb7e050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9cc172-9aac-410c-b18e-219b38576483",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f117395-6b9f-4afe-a63e-ea8532825832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e41a1b2-0093-4789-89a3-60fa14b3344c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a6861f-5196-49e8-bb46-ba16b74b6df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86496375-d626-403e-bd06-8952cd9527f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a67e79d-c95d-48c7-8894-3b236b2f285a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebea1b51-d9fa-4c41-ba98-fd1663a7926e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5f36db9-a293-4663-b1b7-9e2b00fd2eca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67e9725-7c40-4780-abd6-a46c8137c94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a59c0e-4bda-46fe-9b83-9d86cf5f6a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900b802d-e5ca-4de2-85f1-b3ad50ec2165",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31a16a3-3b7c-4ecb-af9b-e273754da791",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b57f73f8-ecd5-47fc-8dfb-8c6e6f11a951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a5d20e-2fa8-430c-adaf-93ad63eda8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44194a1d-17fb-4d6a-aeb5-f568c265e4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2786a5-89ae-4b80-9034-058af0b51491",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f5a6c0-9e0a-46a6-a962-1a600dd019f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec1a3018-651d-4a12-8567-9e3ec0284346"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68047ee8-d1e9-4456-b38a-823098e1ad49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0bbd915-81a2-4df4-95b4-c7688adfd1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38af7183-84e4-4c1f-9e4e-68761b2e805d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33ec88a-e259-425c-bc8d-d2226d71cb84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e5a4fba-6162-4a36-8352-f7ab3cddceee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae2a9a4-0b52-474e-8f5f-542ffc7262bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7a8b52-1d20-451e-9ce7-0ebcb7c5aa70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e8ed0f-3b10-4e91-80a6-84a246b2d13e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed9678d-bfb8-45f6-94c0-c4d2741c261d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e5f4d6-0502-42d6-8c08-559c02cf8305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdd2ea0-1051-434d-a6c7-5c2712512a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "124bd3b8-9854-4b48-8dbb-4f618300cd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02302ae5-d7e5-4d40-8766-eaea6218579a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250bcef0-1787-41ac-a3b5-a453db66fdac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87413d2f-e1d3-4c73-adf5-612031001fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53cc7cf-b300-4a33-b7fc-92f4a3c712e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5483d208-6701-4866-9479-8086d9a32a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e099650-48f6-41e2-8f28-dfc7b4c3c9f6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebbaeeb-d9bd-4ead-b7cf-517ae06cc7a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f98848f8-c1f4-47b8-b5f5-12bda7d9b68a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52173f5b-6335-429f-bff2-ad2f09dd9fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c92309-fe35-4c18-abb4-882415c8a9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36cd00e-21c0-4c4e-b7f6-ca0fa1b7b555",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb925fbb-6213-4aa8-bcf5-ea3547dc62fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f40d2cdf-0706-4d87-9dc8-3f6017cc3246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e14e3e4-6600-48d2-9c1e-a520a7e052d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36656147-52a3-4c15-9e0b-83ee1efe325a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d4e0ba-4b10-4365-a63a-59a7420dde6f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872fd8bb-015d-4442-9662-197b9d43008f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78f20730-0d0e-4ba3-93c3-be9c7e555844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7578b402-1eef-4428-8221-8ac2c7b1934f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7196247b-9b4c-4819-95f5-36c6696befa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068e7710-0784-43bb-b144-e1d6d9012877",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5826d022-aa7a-4c1c-95da-2c28069d881d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "865f59c8-9422-4b6b-b1f5-1b5046d26e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef61f7c2-5894-4e49-a426-96112ebdf4fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d733aea5-9cf3-43ea-a154-8b6eb420f49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e2acaa-f04f-4d97-a2bc-a732949b9474",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc496933-d5c3-4310-8bcf-fb4c7546eb6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d28fb0c6-d9b7-4c27-ba95-022adf6fcec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5f4cbf-b975-4a02-acad-8f8e822829ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e26bab0-1750-4d84-a970-de51708fbb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa21de7-61b5-45e0-a87c-79c74d903633",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8550a89-f9b3-4780-9acc-9f176729c075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86132af9-ca5f-4c98-a10c-2ab3cace3a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2981a75-b11d-4f0e-b404-f1f05f9c4045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cfcefe5-cdf3-45ea-912a-742ea20af72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82c74ea-7dd0-463c-82c4-c12af42e318e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f785ff5-745e-4e5a-8ac2-9debaef0c2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9266ef5-c16c-4f1d-8371-6d8498832457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1925d794-aa14-4639-a3f6-8a7e8d2a0262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544f96d1-5a92-4e13-852c-50e8cb50b125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c464e3-e2b4-4e08-a7e8-d20b630e56eb",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c89dc2b-b488-44a3-841c-56bc5a06aa38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90508cdf-1761-45d3-88d6-937b1a7a88e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa26e7c-e23e-4321-b227-bcc6ad9b89ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ab892f-2be8-44d8-9a83-bf86141c78be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae44baec-187c-4bb0-8c52-943ded41e237",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc321f9-2d37-488f-9c27-d80196b8d803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86aa772c-0f3d-4c83-8cfa-b439e2efffd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae4a465-023c-40b0-bc5e-a087a4872dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52e5afc-4bf3-42dd-a81e-a0f546b7eda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146bdfee-12b1-4208-9c3f-f364845a3441",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5452ba59-8660-45ca-b598-9383124862b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712a161c-0dc3-407e-bdd0-00bd1481b03a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55432849-8c67-4295-b0b1-1dc7e055d4a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b255daec-0709-4cbc-a859-83061132191c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc2d49a-e118-4732-b792-431d858df54a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b8282f-c2fd-44ed-a3d3-2dfc7b460f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679ffbad-0703-499c-83e1-692ad21043d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7acba1-1dec-40ac-8eff-0fc365ab3d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a7bd7e-77e9-447a-b6cf-faf43c5c36cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ce2427-bbcc-43c7-9619-98cf1211f065",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f14e058-c996-460b-85ad-32847f3d1b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73a3214-b9cc-4ed5-8dc8-3f2f3625ef69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ceae9f-5a1a-4b0c-bbe7-a76e1310f163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5d9ec3-bdcf-43b6-9c37-86c4fef1dc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65350901-8c59-4c70-803f-0d5d976845fc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d696f98-b187-4e15-91ed-707b9b68f541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb2811b-7d42-45ab-af83-8ac8a00ce924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3a5c80-a095-47ea-a635-2531de2caf7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd12040-c640-4e53-98f2-aa5dbea1d96a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360084b1-74d1-4b94-8b05-362b831db544",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a454fc-05d1-4695-af52-362540dda049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67f529b-2437-41c9-b00f-2fc56308d110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b08417a-151a-4379-9ead-4e961c2b9c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d017566c-49c0-40cf-98b3-52b23336dd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc64ead4-b752-4797-95d7-bfef7e400bb0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79546e7-d231-4cfb-8ccf-9dea52fe24a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b582705-6f52-42a3-a58c-97b76dfaed61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615f0678-b2ea-40da-a464-8b04bd191ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d74ded-db4e-447b-9d4d-11f461e8d80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902900a9-db5a-402a-a8df-b39517a98c79",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820dfe7c-7eee-41a0-8861-bc367a68564e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6835a6c4-16ba-4ab3-9d4e-2828a309151e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf4d643-aa5f-4096-a43d-a7b6af0bf85c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2839a5-371d-4bf9-b1dc-40c1989e705b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3e8fd5-a60c-4858-ac94-01d94fc66a88",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1faa2fcf-49c3-4af8-880f-0f335a7c10b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03db8110-6864-4966-bb6c-74c0003c5bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6002ca62-85d3-47e0-915a-273daa5f673e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b328475-a78c-4ab1-8b6b-8049f42b61d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c69a9ac-7d06-427a-9499-27deb130656a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385276fa-7a79-49ee-8f79-91c7d3199231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9007bda-299e-484c-b0a9-1ecd5f475e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b7a436-2cec-4c80-9454-c49d2b7de5c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5918f5ef-21b0-4be4-98bf-e218e8059135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22063970-2248-4e00-9d71-bba0257e8ae1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b311839d-ee1f-4b21-b38c-b114ad65fdee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca16afc-eaa9-4912-ad70-a5bc85da98f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a714863-ee6d-4416-8ba6-b9997e6dfd5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b14e4b5-b23d-4e6c-bae7-2699b33db1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffea8aa-dc0b-4fc8-ab8c-4aade7506654",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ea1745-86aa-4497-ab32-9a5ea2bfeb4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d36e5d-f963-4fe6-913c-73e7858610d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86a38dc-2920-400b-a35e-18f328688a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d00e76f-ae11-4cbc-b0a7-149aeced80f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a7cd3f-b2b0-4d76-9cf7-43fd687e14d1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c74ace6-a57b-42ee-bd58-f13d2ea0cc19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d2af60-30cc-44b1-a5df-415ddfc7fe01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbc95d9-47b7-4346-b8f3-93b9e8ad2efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb943cd9-2cf5-4aea-83fe-4d8349b379b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c1a56d-9b97-4a43-81ad-498d91274855",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bec81a4-bf6c-4208-b004-a206954ab569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce25de49-419b-4a97-9fd8-e5eae75e73c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60ea375-71f2-4b8d-ac2e-011bf923046d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee31eb1c-d88c-452e-b05f-72c454f3a2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3046ac1-c06b-44e1-b8d2-94fc810a5461",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f227d7-6c0e-4dca-a60f-aeec83d76dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18bbad2-9622-49d7-9364-afa365e7676f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab733a0a-fa70-4212-85bc-ffc5ddeec389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "973bc31b-fc3c-4a67-9242-4d0d4175f72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0d4afc-3edd-4568-84d2-e40fe1da1f1c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4307cd95-4411-477c-94b5-1c59f50a1922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ffade4-43a7-4b56-81f8-8ea838acbb0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09377bb-ea48-42ab-8e08-94b122b15f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7941730e-7fc8-43ab-a513-05c6eaf0d93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b8fed5-17a8-49aa-b4bb-2f1ca6f5f2b4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228c6957-e030-45cb-bb5f-a93cf23864f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f990cc-fff4-4bf2-bcdd-9726553da2d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6931b478-4d80-405c-a5ed-a4543de8ce66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da9a8df6-31b3-45da-bcc5-7ee9cda97e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9923e81-e820-44f6-bbe1-a374d3141119",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def64f6b-b63d-48d8-8e6d-51f087ba7871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8219b0-40c5-469a-8551-987640f058d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df0763a-2d2a-4024-b89a-8af9b7f52d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b213a8e-d99a-4c4d-af6c-98cb95be1fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1badbf-ec77-4e90-8966-c1124eb7839c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86964b1a-cf41-4227-bc29-98230435d6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8de58e-93d7-478c-89dd-394884b5adb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3343c00d-fac1-41de-bb1f-b715a977cf2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "951d8034-5235-43fb-90f5-176840f6dd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ef68a7-4595-4d28-9fa3-fa997c3089f5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39b9e8b-0507-43e3-ab1d-e1002e604347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da02abcb-6d41-44cb-a273-1fd72324281b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98f0541-951a-4280-9f8b-c288912fa4f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17c0d8f-c390-4c71-9b6b-c726adc8a885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9208bf-d71d-4af9-9af2-ac1639a842c0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc72035-8ad0-4a5f-956c-871686b54fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd66eff-fd70-4d76-9623-3ea1fba6fe96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7055e5-599e-4480-8f78-98f96b9905f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5fe789-781f-4d8c-ab82-5de669287b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da5f7ee-2ae3-4c51-8a90-3791eb40f757",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a130e64-8915-4875-9b03-a4e59f439ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51af74ee-f175-4c10-9f5c-88bac1f934b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce83b0bc-1965-4309-8afe-a93dbc9e4fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93b518a-5ebe-47a2-aed2-e4181cba3ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4a4807-3390-4ad5-9307-dcd214d40185",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4929c21-96c3-43c5-a86c-3ff92031a14a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ad1fa3-0e07-4c7b-a888-040ed9094f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccc2f91-2b55-489d-9e1f-f80a8125f758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a0d2c0-c24c-447e-aede-5fcffe6bd22d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9284798f-4a4f-4f52-a64d-db6b7a5c3790",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587629b9-19a3-48ed-9b07-3f5c47c524e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f33192c-2209-472b-9186-25cc0c91f216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b96d84-889e-4b54-8e83-a480b5b57cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8175afc3-d35e-4b79-b4f7-9d56d712460f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23462751-4019-4f42-8d38-1a2039693bb3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd327d5-ede0-4b68-b0cf-ab3780fc6b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3ea214-fef6-4b98-875b-f51f95b1bf0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af74f15-bdb3-445e-a349-cf46be72f8aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063b0465-1444-46ad-93d6-18bcaedd7c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb115c91-2ed9-4231-9127-c1e4adf0f31d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981c382f-2647-4986-9257-b4986d84377d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e550b3f-3970-4b00-84d5-9218b8597b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371d8c39-061f-41e7-b737-cf502a47ed0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1590fb7f-9e5a-423d-b7f5-073bdcf20c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7cbe67-8e31-4d17-aab8-32c95bb761a4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee20c79-1e20-4632-9ef8-c25d458e432c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97fae4dd-5091-4f56-bcd3-cb0753df360d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "452282ea-cc14-4dd9-8762-58660c4bfe7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec60faf2-6efa-45cb-b43c-a9424aac177a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f5c3e4-fc33-48ec-87dd-72f7d287898c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15a9ae9-20b7-4d58-9c13-ba8ed3a2c8aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aba723f6-8de9-4e2f-a48a-95140f1052c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cab73f-5f75-420e-bda5-1c8bd74ba890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3633ecae-cc5a-4c1b-be71-28b17fa06dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398cca66-9220-4fda-9cd5-4cb0ae660086",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b19a764-67a2-4da3-81aa-a0ec7e075f86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "163689ae-c112-4321-8efa-60b78da94894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feec1375-f9fc-4bac-8b5e-e70dbb4710e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9909f432-9697-4336-9991-ed7bc17f3758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9279d2d-9576-42fc-9237-e003db548b64",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dfda17-5aaf-432b-a1fe-df5bfe5a9663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8107d78c-671e-4355-ba50-62bf6ac68513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc1b2ef-769c-45fe-a087-32c4bdab63c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6249f9e2-c3e8-4c7d-9dad-ed7cb66251d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05580fd4-0404-41af-9f1b-2579480d969b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3144eeb-78dd-40ae-a7ae-74b2f4a1b608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b6ebd07-3703-4900-ac16-ac25b15edb23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc174749-9951-4787-bf52-3aca3556d687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1f559a-ac93-4cba-bade-dadde277e898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67af4eb-022e-45b5-9fbc-51602c49f1d0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d26e49-6ccb-4a7e-8cc1-8a583081eb6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30599f6d-5a5e-40a0-a69e-50edb0e25dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d1ceb6-8baf-4d9a-b0fe-6ecb8043da88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99f1c42-b521-4766-b7f8-99cf4827abc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533eef13-3a6e-4004-a17a-5a04ee8d0a7e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e064e70b-8d4f-462f-a6a4-fb5e712f404b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f4b7cf5-4a8e-4745-9157-2e9c88d86877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67f9149-37b2-4c1e-80ae-3e7881c31903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2e7d00-a429-41b3-99bc-c8b454019db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c010aea4-1d35-425e-a569-30bc457080b0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a328bb75-7a7c-4374-8fd8-f1ba6eb2d71a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "848aee2f-226f-4d1e-91bd-929b20766925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8905a15-3497-41dc-bac9-48c074268200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9889bff-0a90-4cf7-9142-e974a9592ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00aed031-5edb-4008-bd39-2aa2ebd0eec3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c069abf-15f1-4913-a72a-d19cd49652a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ef0cf64-034a-409c-9998-2145a1260889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd872769-e22c-45c9-b781-dfd7cdfc410d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d66d5e7-1262-47c4-9da6-7b03251a02ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d61d1fa-10f7-4e2e-a695-f897e0084c83",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f953aa0-5b5a-4a82-b17a-74b81463620c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d84c9893-7db5-4f16-b7da-95c8e38514a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36f567c-c976-42d5-9eb5-83861f88a0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8df0c6fa-e8d3-4b0d-b858-df1b7ec3ea7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33631b0-2122-40dd-a846-9ce2d445789f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73c1733-9eae-4fd2-9b4b-f21fcd993196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08f73c0b-13f6-43dc-83f7-e96a59f63fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceef681c-d8e4-4a0d-8406-d445f5d5c9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d0cbf1-3358-4138-b5e0-41a64e0773f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc13b04-c765-412d-bd57-adef0d196e3e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8163eb-e329-42b9-8106-e22b8ffa656c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5abd0c87-efe3-4917-bbdd-f733b494636e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd30675-039a-4f24-8c71-a088457c958e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767100cd-7441-4de9-ba1c-71e5c85f93ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c3a807-df54-4ed4-bb7d-baa7945ba5ed",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9c656c-bb9c-42c9-8fd7-514494b7d0d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a578cf10-9f6d-476d-b105-032432bd80f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef28449f-bee4-4faa-9536-a0191ca90172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa17ede7-b2fb-4f9e-b17b-36a92a564878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e344e5-8df4-492f-ae30-1bf7374d5fb2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dc8b4a-fc79-400e-ba20-4705ff15d3fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a8d4a20-fe7d-45c2-b9ba-a115aea6745f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ed2dda-6a07-458b-88ef-bbe3f40ec837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb862d52-1b1e-4885-a502-385f0618bfd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7746777e-f26f-46a1-b6fd-a5742c250d27",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3446d7f3-864c-438c-9cdc-d44c90e30f67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "152a8d17-f65f-4c8f-af27-9f469eecf82b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f725ea34-f229-4519-987e-bd545d97c662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c07818b-99b8-4e20-884c-184e3725bc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e33394-3bd6-467f-97be-395377efb91f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f41e4b3-2869-4121-a572-2a98e1b5900a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21bc9199-192b-4092-8b14-aa9b3d5af22f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b27dff1-76f7-4fed-a759-300aa50b6c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab8e3f68-b565-4089-9e6f-390f16cf80ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ed2738-1fbd-4fbe-b691-09eb22cfc215",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5732752c-f536-4829-b17d-2ec2a397b68e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25f228bf-9d99-4137-abcb-6d236adf2cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa143b64-73b9-4ef0-a6b8-30a1eb89e31e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d6c05b-6a13-4504-8c6f-692ef0938ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5304d709-18f4-47fb-838c-77ff972b8382",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9342f953-cb97-41c5-8dfe-53ebc2d94a89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23a57299-2abd-4a01-a9e7-a39dd9c42e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b238a9-c01e-4743-a181-4d42d2b0d3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e947dbde-4678-425a-abc4-a6b6372ca7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f4002f-3c59-4cf0-973e-b616bb742b86",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2148b254-0a40-446b-a6bc-7eeacc91298b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baa189d2-52d1-4e6c-b2d0-70e8d6bb12cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b509af-8477-4964-bf2a-b178cf0deb9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b47662-37b9-4aa8-a89d-29ea44705c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e59303-c1b0-42ee-be76-0dce9e38cbcd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e826e5d-1e00-42fd-974c-58d220166a01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "470d4ffa-eff6-4a23-b9eb-e8b3aff61535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "470d1185-7b49-49b3-93a6-95973bf7fea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a92e422f-5e6e-4a16-8132-70ba49f684e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7151d7e-644a-452f-b56b-8d25b2628655",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6160390-b8c4-4dc5-b6f1-a1ab35df8dee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3697e504-e916-485a-80a3-2cc768add6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4873d2c-65ad-416d-a4eb-27e6f029dd52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fbccaa5-09b2-4c6f-b9cf-736331170bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb72750-1b18-4c94-ae14-089ddb59f096",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567cb098-6b6e-41ba-9827-59d9ba13d463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3832e63-8b03-4661-9ce6-1a86457f431d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ee1632-40f5-4202-9725-4178a73219ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4239275-5fcd-446d-be20-a748555dce67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c35bf6-d105-46ca-a269-89c71e7b0a1e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b0918d-8c73-4bf0-8982-a09b02853b5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "806e04de-d334-4ebf-8852-6ae0857d3e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bd0296-3adf-4791-8452-4505b8c93156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1191f4c-c6c9-408e-8d5f-fbbbd0309e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b7a2af-2229-4796-9ced-5db8d770cfd8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34bc0ff8-e00a-4363-aa3b-2500916bc458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad327b11-4a1f-43a7-a8c7-331e60fc7916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773970c8-611e-4947-b3c5-bc9cdc3fc012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a58f7e-ba0e-4074-9e91-896b22a4ea74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68830a52-8ffe-4fb3-a674-5f149a75044d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b58bf69-1d8f-4b17-bfaf-b79bb0fe67c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ca6d550-53f2-4114-ab83-66c2206ad7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a652b6d-f00a-40ff-a897-3f0ab66e101e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e68dec25-1b08-4756-bba7-43aa6ea3b3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e56d39-ccb3-4bda-9f52-9add9209b0cc",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff4204c-d5fc-4d23-a062-91f5051c42fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c3fb9da-45b9-4cec-84c6-7eb1a4543847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea29a040-add1-4648-b9de-8796536c74a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e868c28-f179-4c37-8b3c-f204dd142caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb781af6-099f-41e6-9b03-72c849c938ef",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f425704d-8a78-470f-993d-4320fff28c97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d54f1c7d-03b6-4ba9-91bf-2dc6800e1f07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a6905d-d608-4bd3-9512-2bfbdf22cab3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba7ce9f-8124-443b-8865-e599ddc13367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200c2489-3b86-4e45-9d02-d4e9e4a23df9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975a55aa-7eca-48db-9af5-3e436e7572e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "194e6eea-73ae-4b05-b7dd-0a0342caee38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77c9fae-a7e7-40e8-a5bb-96453caeef17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f78696-4d79-4a9f-81c5-f8e6831e249f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d300d83-275e-4db6-8096-7c6616399e15",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929871b8-41ef-423e-86ac-19e03b50c8ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03634a60-024a-4cbd-9517-2eaf823ebc53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33065a6-0b21-41c8-b0a9-a79fac456661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4177c99-1b66-46e6-a6b8-7e3ccfd430e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d4bf6e-4ae7-47e7-9d2e-9892121010a1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f50775-d387-4326-ae31-8e7b9bf0bc4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa761968-d629-482a-becb-2413324d7495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1ae148-c528-447a-abb0-45a38e44a7b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53631760-c44e-4c08-a13e-96e4745cc8c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9271d2-bbf4-4b3b-8a62-404e23a2fe2d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e259ab-b53a-402d-a73d-c205a03e6e54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26a60cfc-dee6-46e1-8142-3071c3dfe0b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b9707b-4c64-4d0e-a9c4-3d0f33b00058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c26ab6e-ccf7-434b-9ad7-38bb8a440ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9ceb44-0155-4b20-84d0-c2ad10b33891",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499e1b40-39c5-48be-9240-06b62a73dd94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54aa2433-6ae2-47c9-9c5c-6154422a5247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0b4bc7-a84e-4790-95d1-b4e57316e9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5334cce5-f638-4109-94d7-c76c68b2998f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d81fc48-5a0d-4e84-8f67-c029705ad14d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bedbe2dc-8223-4eff-928d-1137bed70497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d47afd51-59a3-41b0-8b9f-cb8fb3fb6654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20684283-bb4f-4987-a806-efd9183bbd33",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8606d7d-81b5-4a18-9155-764fdf1df991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7942cd6-963e-4f35-8ec6-71f7f2586cc5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c78f016-2c10-4975-824c-71b89b38b1ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "757da247-5e6d-4505-ab24-597b770f9d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "380d83d2-f49c-4dd3-bada-2ec2168b156f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ceb055-a0f3-4405-b62c-da8465ce344f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b322e5c-fe18-49b4-ab96-8c3d33fb3cf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67133bb3-e8d4-46b6-a345-7a7555d996d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e09790e-cc91-4d2b-b41c-917e3f41e9f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9e45255-efe8-41be-9107-949731b9e1e6"
                    }
                  }
                ]
              },
              {
                "id": "0aa0c9f0-e5d1-40e7-8f18-d297d1276746",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab764220-8b5b-4866-99c4-c359cb8ecca5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336c7780-972b-4046-8627-7b88042c4b8b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a54b371f-2a17-40c2-9a48-32a2fd977565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5a1c3e-ce9e-4426-986f-b2cf0b0ccc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ce7431d-f79b-405f-a045-b54190dd815a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921047aa-2ae8-4bc9-95f7-9aa72fd88f55",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44bb6eca-9229-4d96-9a35-ecdd12e95de6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b94311ee-cb7e-4857-aa0f-4093239a2ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "588fc853-491a-45ea-b7c8-9c388008eda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2321e94d-8df0-4062-a816-af48823c34ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee42f6de-68d2-447f-b02b-3a0e1c5e5c92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e02a113-4855-4e9a-ad67-874a5620a16f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ac4d6f5-db3d-4513-8f36-8362567b5b5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed06b9d2-8f8f-4567-859d-b40759f8aea4"
                    }
                  }
                ]
              },
              {
                "id": "5e3b3883-21ff-4a2b-ac71-d773000074ef",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "59d0c243-8207-40c0-bbcc-c9ad43415473",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcba61fa-574b-412d-85e3-11d01c40c55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8e551a36-6ee1-4347-b584-c457fae5992a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003c2440-7787-4493-9068-5b95f766e4b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c85db3a-4e2b-4711-bed2-41c51e9cdd89"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5f87e0cc-53fc-4a05-81c0-c3781bbc3ec7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2d95af27-71f1-4ef1-9e30-10b5cca5d94c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ac59014-a5f4-40b2-9572-452e05c90bed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "33fbf084-eea2-47ab-b3f3-88787a3cd38b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c93f9b77-953e-4fdb-a9fe-59ad0db1065e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11940e96-8e5d-4623-9bde-99a0bf45b204"
                    }
                  }
                ]
              },
              {
                "id": "d44ccc72-b50f-4d0a-a623-0b0e083c881d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67e5a432-5025-4ff0-8a0a-47f8d6642967",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a39baf15-4ec1-4d06-8c86-bb450ae6a13c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc1d70ec-3b3e-4fda-afe6-daa1d2eda81a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2b7c5dd-eb76-4913-9daf-8afb52a2e751"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46a57ba4-6399-4850-8a84-1d473c9cd8c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "64703525-f23e-4069-a6e2-689430d41155"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52633121-3512-42f6-a384-9bf353b40167",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41dc857e-19a4-4286-a2d1-8872a84977fe"
            }
          }
        ]
      },
      {
        "id": "681efed7-08bd-4be2-9a27-8af393844e64",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7f192982-dca7-4476-bae6-f78facaf0086",
            "name": "Negative Testing",
            "item": [
              {
                "id": "beaaca2a-39b6-45d9-95a9-013f44e437f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ab162b3-1e6b-4548-8dba-0dc879e71998",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b763036-e8f5-474a-b934-caa4a121fcb4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6526ad4b-acf3-4f41-b8b6-b5b14616ae64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042d1a23-9d09-4840-82f6-ca9f03b65f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f08648a7-2d37-4b93-a805-935f4269079d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ec5a8a-aea8-4ccb-a303-63e675dc6b97",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05286115-57df-46cd-b986-d190ea04dbb5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "736b54a3-6c55-464f-9f24-e4ba710f4c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fb54f7-87c1-478b-9301-faa64021efcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c83e868-ba39-4bc3-a4e2-caa897f1a339"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3df46cfd-2a65-4451-b6a8-3bc0f5fd9ea3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d88e4abb-b239-4132-b6cc-dcc04c2dd145"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a403766e-3ff3-414f-8562-87dfb44822f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c132b43b-5167-4bd5-b3c9-e54f1086cbc3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb3e7d0f-7eee-46d2-a032-4aa649fd4dcf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "aa5b1517-7849-44fa-a77f-e83e6bb8c8f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18db34b6-b99c-4bcc-9e9b-35b7e3eb0f5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc10278c-91a6-46f9-be8a-79a9e6a79e6e"
            }
          }
        ]
      },
      {
        "id": "17531b1b-3fb6-45cd-9aeb-f5576d2eaeb5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3ee2fdc8-8acf-4963-943e-c6ec0069dee5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd5e64a6-86b8-460f-97e4-0cc52ee93dbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8583a3d6-cbe5-46d4-93d1-3ea7b1398287",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85592e8a-5f30-4f6a-983a-99fcbe6ccfba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2690c6cd-f401-482d-a85c-cc3df86ba693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31d59c2-ed8b-4154-afa8-061bd5bbcbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fc0f53a-521f-4a8c-ade4-8d7d4d12e3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fc2fb0-b573-41ce-9e7c-92780c2e2c3e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bb137a-c054-4f32-99b6-cafb888c1084",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1cdc68c4-a0ea-4d0e-9c68-a40a411bddc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "193498b4-3d4e-4a5c-9d85-7b1abf4e39c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1d33c75-6ad0-402d-b8a6-9b8b3d68ee44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "478b8df0-cfed-4803-b239-926b4ff1f836",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "233aedad-7988-4532-88ae-85000d698f84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3f074d6-58df-4766-a7cf-3574b9ca4bb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d0a37a1-7c91-42e3-895e-5607316f6b99"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13199cdf-9fb8-4d9c-b84f-3afe0a125009",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bcb0078d-d5fb-4fdc-8517-39c982c91884"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "997fa80f-feb0-4dec-a936-5e73d0fc0124",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed28e2c3-6e55-49d2-a7f2-09363875b23e"
            }
          }
        ]
      },
      {
        "id": "1f30ffc2-6c52-45aa-8057-ce0203b380fa",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ab90dd89-1685-4233-a519-6cd83d6a066b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "051cece9-3970-4b3c-a3b6-12e408c03ea7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d68ccb7-b863-4d65-b5f7-0200c7024d2e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ca6ec0-1348-4cbf-bf38-f20f478bee81",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0bbb6bee-d75f-4a86-974e-53c01b810e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8d33ab-0def-4b53-83f9-ef96dc9b61a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26865d20-0db3-41c9-a8d3-39504d5950e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfe348d-0b22-47a8-87b4-227a2a270628",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e235f538-36b2-4ad3-b080-ddf431a39d97",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2f112f99-132e-4dea-98b4-3a8d1572f268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31f7ae4-624c-4513-b091-c231b981681e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6a575a0-9dea-48a5-ad44-aa535db8c757"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76e73d57-4e24-4919-b72e-054af677e176",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fefe493b-38ed-48c4-8f4c-5e9e3398c35f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9c34d11-e481-42ea-ac78-43bea588057c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6adc839e-bc3d-4e86-9ff6-8a5eebeca818"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8588ef3a-3e10-4f15-b8f5-6de67baf95d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2af13dc1-bdae-408b-8bc6-66b2a5da31ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "988cf7eb-3c76-43df-8885-2bd6a8ab5aec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3aca120-7e29-47d5-b714-de8b0632f9b4"
            }
          }
        ]
      },
      {
        "id": "ba47a646-b040-4ce4-b297-2620d6515589",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5900bbe1-4a13-4eb9-b93f-ece8202a5351",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2e7d0de-a655-4ca1-b9d8-7306d865a760",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4784aa77-f615-4b30-bb1a-847938f5aeab",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a8ab5a1-7946-4a56-afb7-a315242d0081",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc351839-bc87-43ef-8bea-bdded33d58a0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 465
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 355.87384656571845,
      "responseMin": 6,
      "responseMax": 7384,
      "responseSd": 1361.6732971259796,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674953016611,
      "completed": 1674953169398
    },
    "executions": [
      {
        "id": "6c6e2f68-102c-4c71-a9e8-1dff22f9d1dc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "50ea2bd1-85c5-442a-b9e2-dc7c230755f9",
          "httpRequestId": "acdd4a51-8c2d-42b3-98cf-65351cbfb88d"
        },
        "item": {
          "id": "6c6e2f68-102c-4c71-a9e8-1dff22f9d1dc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5649a660-4415-4844-8618-52a04bed3b77",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "9be97f89-10b3-412f-98ac-2b22e73a2bed",
        "cursor": {
          "ref": "bf12921b-e3a2-42c7-b459-a5d8c4bb6556",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bb099626-e191-4c17-be0e-b5ea866921c8"
        },
        "item": {
          "id": "9be97f89-10b3-412f-98ac-2b22e73a2bed",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "eae59265-2761-4c44-97f0-f3bba558975c",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "02562e86-5860-4a6e-9b02-ce0919fdb593",
        "cursor": {
          "ref": "64d6c660-5d8a-49d5-bcb5-204302c58539",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "25dd9b6a-e3ad-4b5e-bff9-692ad463e489"
        },
        "item": {
          "id": "02562e86-5860-4a6e-9b02-ce0919fdb593",
          "name": "did_json"
        },
        "response": {
          "id": "a497f846-b7e8-4331-826c-da96c0c4d0ca",
          "status": "OK",
          "code": 200,
          "responseTime": 323,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2f590c-fb2b-4d54-b453-700e8906575d",
        "cursor": {
          "ref": "70a9119c-6758-4b4c-9cd0-88d6082c92c0",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "527dd271-2c4a-4516-99a2-b9044cd4e774"
        },
        "item": {
          "id": "6a2f590c-fb2b-4d54-b453-700e8906575d",
          "name": "did:invalid"
        },
        "response": {
          "id": "08aa6288-3f04-4918-84fe-67c9c3ba50ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2f590c-fb2b-4d54-b453-700e8906575d",
        "cursor": {
          "ref": "70a9119c-6758-4b4c-9cd0-88d6082c92c0",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "527dd271-2c4a-4516-99a2-b9044cd4e774"
        },
        "item": {
          "id": "6a2f590c-fb2b-4d54-b453-700e8906575d",
          "name": "did:invalid"
        },
        "response": {
          "id": "08aa6288-3f04-4918-84fe-67c9c3ba50ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28421678-d911-4c92-bc98-99e61fbd58c4",
        "cursor": {
          "ref": "24656be6-4c24-42c7-b5ec-75ea15809894",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f5414348-9798-439b-89bc-e124a813a006"
        },
        "item": {
          "id": "28421678-d911-4c92-bc98-99e61fbd58c4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "660dac33-be16-4c0f-a6db-e48ba0dfa057",
          "status": "Not Found",
          "code": 404,
          "responseTime": 129,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30725131-836c-4cc1-a8aa-ce32dbcc498c",
        "cursor": {
          "ref": "39e1cda1-e2a3-49bc-8616-7284378dc171",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f05f0880-3f87-42d3-833d-fd5d4a445dfa"
        },
        "item": {
          "id": "30725131-836c-4cc1-a8aa-ce32dbcc498c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2d73437a-83bc-40e8-b1c7-c37c46c6c12e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4244a82a-75d6-4e37-9e54-60854963e9b8",
        "cursor": {
          "ref": "2cfc059c-d999-4490-9a6b-5aacb296fe56",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "897dd6be-0a34-4961-9102-dc6580aaa8e7"
        },
        "item": {
          "id": "4244a82a-75d6-4e37-9e54-60854963e9b8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "87ba1411-3940-4f83-bd06-56079a8c1eb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8466a8e3-23c2-4f69-9887-cf1de14bfcca",
        "cursor": {
          "ref": "fa04fabd-24e0-4ac2-a492-ef80c0a209a9",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "146144b6-1b3f-42ee-9cda-02f8cad2ad3f"
        },
        "item": {
          "id": "8466a8e3-23c2-4f69-9887-cf1de14bfcca",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ff8a310a-5253-45a9-8250-b6e2b0565b41",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8466a8e3-23c2-4f69-9887-cf1de14bfcca",
        "cursor": {
          "ref": "fa04fabd-24e0-4ac2-a492-ef80c0a209a9",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "146144b6-1b3f-42ee-9cda-02f8cad2ad3f"
        },
        "item": {
          "id": "8466a8e3-23c2-4f69-9887-cf1de14bfcca",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ff8a310a-5253-45a9-8250-b6e2b0565b41",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "53ac115c-5295-419c-ae61-75c1dcd6154c",
        "cursor": {
          "ref": "331eed1a-9484-4535-8b39-8ec11193b852",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ef3d4e47-2233-4492-8170-efb665a4ad47"
        },
        "item": {
          "id": "53ac115c-5295-419c-ae61-75c1dcd6154c",
          "name": "identifiers"
        },
        "response": {
          "id": "d0adade0-49b4-47b6-8aa9-46a73cb76e3d",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9822c36d-97cb-4782-ab34-3b7efb28dd74",
        "cursor": {
          "ref": "f388c08c-a7a2-455e-84ab-db219f5f79b8",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "40745d36-8b95-40f4-ad97-c6149bc27166"
        },
        "item": {
          "id": "9822c36d-97cb-4782-ab34-3b7efb28dd74",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c5eb695b-482c-495f-b041-f189b7f4bdf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "9822c36d-97cb-4782-ab34-3b7efb28dd74",
        "cursor": {
          "ref": "f388c08c-a7a2-455e-84ab-db219f5f79b8",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "40745d36-8b95-40f4-ad97-c6149bc27166"
        },
        "item": {
          "id": "9822c36d-97cb-4782-ab34-3b7efb28dd74",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c5eb695b-482c-495f-b041-f189b7f4bdf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "2c20c90a-bf10-424e-9125-e08a8749f83f",
        "cursor": {
          "ref": "84369a74-e8ab-41ae-88fc-4415a58cd47b",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3b9550e6-45bd-41d7-8738-c690485d5d9b"
        },
        "item": {
          "id": "2c20c90a-bf10-424e-9125-e08a8749f83f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6e1ac7a9-c801-44a4-b9a1-9008dfdb13c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "713b43a1-55b2-4464-91c0-4a469b2b95bc",
        "cursor": {
          "ref": "cf83b7b2-0487-4acd-bab9-a444f47b1684",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1307b3dd-52fb-4a0c-948a-dd28b0b5dbef"
        },
        "item": {
          "id": "713b43a1-55b2-4464-91c0-4a469b2b95bc",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "8ffb945d-9d48-419f-872d-a597aa85bd83",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "e12d8214-7dfd-4565-a49e-f2520d1a9b91",
        "cursor": {
          "ref": "2989f2b9-8383-44fb-8ca8-b1fb4a44c035",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "37bb3111-10d0-48aa-9b6c-789719509c65"
        },
        "item": {
          "id": "e12d8214-7dfd-4565-a49e-f2520d1a9b91",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "962c9887-dace-4256-ac43-56f2ebeb9dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 346,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "4be2ae62-4f9f-444c-aed5-8bcbcb0d2ec9",
        "cursor": {
          "ref": "4cd77762-c8e0-4a03-8dab-1635aa9eb3ac",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4290687e-5e4c-4cf1-b4bd-ba2e3a5da9de"
        },
        "item": {
          "id": "4be2ae62-4f9f-444c-aed5-8bcbcb0d2ec9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "39331033-8a85-4cf8-ae26-f9199d2b557e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "9ec032ca-69e9-4251-8f3b-aebaa3a867a8",
        "cursor": {
          "ref": "bcd6d317-5a68-47d0-a455-86e51075f737",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4f128ee7-1c7c-411d-bd94-95e9bdbeafb2"
        },
        "item": {
          "id": "9ec032ca-69e9-4251-8f3b-aebaa3a867a8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "986e4683-8d67-43d4-8f35-cfb1c0180f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "ccc84db1-0ee7-4a74-b198-07b97d455222",
        "cursor": {
          "ref": "535124b4-18f5-4ddc-ba6e-270d7bf52e12",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "520b9274-3184-4e41-91f9-a0f08d2a97c6"
        },
        "item": {
          "id": "ccc84db1-0ee7-4a74-b198-07b97d455222",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "49a50b56-4193-4db4-8fd1-70dacb9fb324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1e2c25af-d543-4a59-97d2-a8e1064b04ac",
        "cursor": {
          "ref": "10e9eb50-8525-484d-9b6b-3a90daee2dc7",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "acb2baef-fe75-41f7-b635-db766b7eb939"
        },
        "item": {
          "id": "1e2c25af-d543-4a59-97d2-a8e1064b04ac",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a772fdd8-1ef2-43c2-9830-66032ffd1432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "53d26d47-f897-4735-bc01-e62baf9abef6",
        "cursor": {
          "ref": "c7c6d688-85a9-4b48-ab48-b7ac4a1c306c",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ada376e5-8650-4811-bf54-2cfa7976126b"
        },
        "item": {
          "id": "53d26d47-f897-4735-bc01-e62baf9abef6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "373eb5c9-69e5-4ec9-a611-cf063b65ffa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "f9e37246-6ed1-46d6-8ae1-de92371b1676",
        "cursor": {
          "ref": "a9693a3b-1e81-4188-9e6e-137665d20e97",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1aef57cb-3711-41b3-9d11-c43fd31d1c9c"
        },
        "item": {
          "id": "f9e37246-6ed1-46d6-8ae1-de92371b1676",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "78193eae-fa21-45d7-b7dc-803f30713cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "6a6cc3a7-82a8-49de-8256-f78e6a08d7f4",
        "cursor": {
          "ref": "dc3c0096-bf71-4574-89ed-a8482611ce0f",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "818b334f-203e-4e9e-9e81-7928df05e971"
        },
        "item": {
          "id": "6a6cc3a7-82a8-49de-8256-f78e6a08d7f4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "617af510-4a6f-4c80-bf80-8d665c61c7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e16cf144-c7b4-4ecd-a28f-0e5668fc4d67",
        "cursor": {
          "ref": "1fd1e813-e64e-4c72-8f29-758d9d1078d1",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "49d5f803-30cc-4841-b0a5-07a243d80034"
        },
        "item": {
          "id": "e16cf144-c7b4-4ecd-a28f-0e5668fc4d67",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f09bc064-eb81-4641-afee-56744ead852e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "448c1262-e980-4bac-b120-25c69e6086cd",
        "cursor": {
          "ref": "8c983547-a959-488c-a7a6-f9e3b40d015d",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a8def6df-c305-47e2-8aaa-69ddbb080e2d"
        },
        "item": {
          "id": "448c1262-e980-4bac-b120-25c69e6086cd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f701cf08-7fc4-48a6-8c06-258a3dc1d321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "eda42814-3454-4747-b549-52a11c6d991f",
        "cursor": {
          "ref": "ca5a7875-c530-4cbc-9b64-fee4f6917f53",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7a16c6e1-5360-40bd-8177-d9b188410c55"
        },
        "item": {
          "id": "eda42814-3454-4747-b549-52a11c6d991f",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "8dbc09dd-bb84-4bb1-81da-0c7c130a98ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "588497e6-d1e1-4b27-9918-ca1de4f20323",
        "cursor": {
          "ref": "16ae3ff0-4d0f-4dd9-be0b-b623ae50bee3",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "901fa91c-0604-4843-8139-376bd3e7cdff"
        },
        "item": {
          "id": "588497e6-d1e1-4b27-9918-ca1de4f20323",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b479d5af-cc27-498f-9c3d-f398d575ea75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "b457f3a0-834a-4641-acde-6d4ea6deed63",
        "cursor": {
          "ref": "9ed59d64-f567-4b0f-82b0-3766363e4f00",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fd09520d-153b-4035-a66a-da673dc112bc"
        },
        "item": {
          "id": "b457f3a0-834a-4641-acde-6d4ea6deed63",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "51f0807d-4285-45a3-ae70-dad092fdb469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "054c49b3-99b9-4af1-9fba-9078b2013f96",
        "cursor": {
          "ref": "192acda7-4152-40d7-b021-1b30220b3278",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a61f37a5-5d96-4749-adf0-66e78f96e117"
        },
        "item": {
          "id": "054c49b3-99b9-4af1-9fba-9078b2013f96",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b3f3940b-2f3d-4f0f-95c2-c1f529aab039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "aeec9174-05f8-4235-b382-eaeb07c612b1",
        "cursor": {
          "ref": "894c7e30-c7f4-4f8d-b562-f2849cb07728",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8ef72f89-cfb6-4113-8426-8d0d8e0cb6bf"
        },
        "item": {
          "id": "aeec9174-05f8-4235-b382-eaeb07c612b1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "66fa5338-f458-4566-9a77-4168bceded7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "a1aa0a79-ce8f-445b-a39f-c8322b3fd948",
        "cursor": {
          "ref": "af587807-1c44-47e0-92c3-a501bc6096f7",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "da005584-c926-4025-a2f6-a939e6848a83"
        },
        "item": {
          "id": "a1aa0a79-ce8f-445b-a39f-c8322b3fd948",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4733bff9-1df5-4ccd-a845-0c37ec7cc8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "5fb6a474-4f23-450c-840f-72cd7dd1d5da",
        "cursor": {
          "ref": "96543d56-c971-4041-a640-d7ce0b14b8ff",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7c672347-b1f0-4a33-a68c-f7284802febc"
        },
        "item": {
          "id": "5fb6a474-4f23-450c-840f-72cd7dd1d5da",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bb84b180-bc7b-4dec-aaa2-3dd535a72966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "6bef4227-3147-4eb2-8541-5421711b5b1c",
        "cursor": {
          "ref": "59a37252-b304-40bb-aa1b-48fd6ec3f18f",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bdc95c43-4df2-44f5-84ca-98b1a969fcb7"
        },
        "item": {
          "id": "6bef4227-3147-4eb2-8541-5421711b5b1c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a2f912a0-de94-4d68-ac24-512d9d1a1ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "20f31f94-8c66-4eda-adf6-58a3ae934dcf",
        "cursor": {
          "ref": "d783ace4-0234-4bce-9975-10c0cae1da80",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "55e8b40d-6d86-4672-9772-6d566c6bbc07"
        },
        "item": {
          "id": "20f31f94-8c66-4eda-adf6-58a3ae934dcf",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f8e88b7a-6bcd-42b3-91f6-2be2d7815507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "ea02e7ae-f60e-4160-84bc-864212b363f8",
        "cursor": {
          "ref": "2a5a6b81-afb9-482e-8dbf-8765062966a7",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a1d69ad3-dd24-4216-9885-fa9f773cc8f5"
        },
        "item": {
          "id": "ea02e7ae-f60e-4160-84bc-864212b363f8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7e2dda1d-1971-4bf7-8254-0976c5bbe60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1719ae64-aaa1-4291-9ea1-58dd1b24c50c",
        "cursor": {
          "ref": "e1fd241f-aaa6-4b3d-a47f-9b450e4d7c83",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8fc153f9-beb2-4f88-a500-4f3f95e98581"
        },
        "item": {
          "id": "1719ae64-aaa1-4291-9ea1-58dd1b24c50c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "181bad2e-c341-4230-ad8a-0e0c1edeaa4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "cef22aa1-1277-4a1b-99c0-fa9bff9c0ab5",
        "cursor": {
          "ref": "5a9cdb0c-2443-41f5-be45-169593258e5c",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9640f9ab-076f-420e-b37f-dbc15d92901d"
        },
        "item": {
          "id": "cef22aa1-1277-4a1b-99c0-fa9bff9c0ab5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a9fe53e8-4e11-4b42-8d7c-8d2951a5cf9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "3add56e1-9853-4fc1-aaaf-5622de023777",
        "cursor": {
          "ref": "8500414a-368e-491b-8dae-207b6cdaf1e8",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8e7083e7-5f24-4c6b-ba05-ce2791ade703"
        },
        "item": {
          "id": "3add56e1-9853-4fc1-aaaf-5622de023777",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1f47d257-2863-40a2-9774-bef32b9f8f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "65c86ea3-b5e6-442b-b37c-b611a166fca7",
        "cursor": {
          "ref": "a420349f-b7ce-4bc3-bca2-874fb6421a73",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fef58b66-b472-4b26-b512-fb3b486e7c04"
        },
        "item": {
          "id": "65c86ea3-b5e6-442b-b37c-b611a166fca7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fb9248fd-5c43-4170-bba4-6dc2f9061f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7384,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "51407d88-7573-4976-98f3-13ba6db75f4b",
        "cursor": {
          "ref": "a47c5263-01bc-41d8-b01f-b66fe6364c8b",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2ef64132-7b23-42a4-9887-212261f1d804"
        },
        "item": {
          "id": "51407d88-7573-4976-98f3-13ba6db75f4b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5705c487-f8e7-48b8-9b3f-b91ee2e11c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5354,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a84e67c9-bac6-452c-aad8-d77915327bce",
        "cursor": {
          "ref": "73df9a1a-d0df-4892-9f3a-362262064303",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6217cd29-9563-46b5-9f73-aa1ea71c2280"
        },
        "item": {
          "id": "a84e67c9-bac6-452c-aad8-d77915327bce",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9dbc9893-f4ab-424d-9093-87864e2d893d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6549,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "f6244757-ebeb-4afc-b40a-d1c0716893eb",
        "cursor": {
          "ref": "59b6a454-9768-4f76-9f02-8f00ef418a60",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a3d90e64-5db8-48bd-a183-4d061ac72bf6"
        },
        "item": {
          "id": "f6244757-ebeb-4afc-b40a-d1c0716893eb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "450eb4d3-602b-473d-b62c-38038d1ff9eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4663,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c880e232-826f-4278-86e6-210dc5166944",
        "cursor": {
          "ref": "655bccca-1eeb-452f-86c6-3cbb965482f8",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1897d513-c496-4687-bf1f-7911b7784002"
        },
        "item": {
          "id": "c880e232-826f-4278-86e6-210dc5166944",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "76221722-2955-4e24-a076-4cf7a5eeabc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6750,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "eda25f22-f526-4648-ad41-b487993781d1",
        "cursor": {
          "ref": "4f10804d-5dcf-454b-85a5-bd73e844563b",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "46bd21b4-1168-4f43-b9b5-b456bf0f67cf"
        },
        "item": {
          "id": "eda25f22-f526-4648-ad41-b487993781d1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "224c54a4-b5cc-44de-850c-297bdb02ce49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ba690ac8-ddc5-422a-9062-79ee30939688",
        "cursor": {
          "ref": "5cda596b-e94e-40bb-82fa-6e7c66064272",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "82e5fa2c-0640-4b57-b387-e9238b07470a"
        },
        "item": {
          "id": "ba690ac8-ddc5-422a-9062-79ee30939688",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "522802c9-ed3b-4f95-8a18-56f9d566ffcc",
          "status": "Created",
          "code": 201,
          "responseTime": 5010,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "60e32b1e-d7f2-4a75-8433-c6263e2e9492",
        "cursor": {
          "ref": "202d481f-08dc-49dc-8289-08627af03650",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4e03457c-b8ef-419d-a5ff-ab4b04e095b8"
        },
        "item": {
          "id": "60e32b1e-d7f2-4a75-8433-c6263e2e9492",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c6a09c46-f656-42f8-a969-372af6d5bcd1",
          "status": "Created",
          "code": 201,
          "responseTime": 5797,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1488464f-69ef-4928-8ac9-09df125fbd5f",
        "cursor": {
          "ref": "24367f71-eed6-4bd8-b111-49057338498f",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "614b88e5-f147-4317-9f7a-b105d247934c"
        },
        "item": {
          "id": "1488464f-69ef-4928-8ac9-09df125fbd5f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "04abcff5-3294-41b0-b175-7dd8f5def542",
          "status": "Created",
          "code": 201,
          "responseTime": 6503,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "846d6c97-cad9-4679-8b1e-18ce4eed0a0a",
        "cursor": {
          "ref": "21c5a8a4-7ee0-41e1-bbeb-834cfef6e479",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8f7f08f5-0080-4024-a7c6-6fc4ebaf9f48"
        },
        "item": {
          "id": "846d6c97-cad9-4679-8b1e-18ce4eed0a0a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "00d0295c-d20c-4fa3-82f2-5b80be420709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "defc7597-6df3-4e69-ba2d-9dace3951b00",
        "cursor": {
          "ref": "9f020c95-9ed9-438a-9e4a-942a390686b8",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ba77bdc2-c534-43df-8404-8635eccd661a"
        },
        "item": {
          "id": "defc7597-6df3-4e69-ba2d-9dace3951b00",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "20544753-f228-415c-ac52-06d12033a4f2",
          "status": "Created",
          "code": 201,
          "responseTime": 4552,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8599542e-f024-43b0-ac09-0ea031b496a1",
        "cursor": {
          "ref": "20f172d9-a1dd-4498-b422-1c6c3fad58bf",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "26670037-2c39-4236-8a63-ff45f294b5d4"
        },
        "item": {
          "id": "8599542e-f024-43b0-ac09-0ea031b496a1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fff695df-92ce-4f13-b67e-0a355e332e45",
          "status": "Created",
          "code": 201,
          "responseTime": 6759,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "94b637df-adc8-4c79-831b-c74af1e0f5c2",
        "cursor": {
          "ref": "475bc3d9-ea25-4d3b-9194-0f806beb0f76",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "71042102-9b05-4574-bddf-a4ffd110e4e0"
        },
        "item": {
          "id": "94b637df-adc8-4c79-831b-c74af1e0f5c2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3c1ae18b-8dca-4a20-a9e5-7b8800041467",
          "status": "Created",
          "code": 201,
          "responseTime": 4707,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a41dceda-15c1-4409-bc16-9817fef4d5cb",
        "cursor": {
          "ref": "fde094cc-0d48-4ae7-a339-6f6d31f945f8",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "64f6afe0-c354-4e3e-8076-2f6d86153256"
        },
        "item": {
          "id": "a41dceda-15c1-4409-bc16-9817fef4d5cb",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "dccca656-ca8e-413e-9da9-444e0d871a99",
          "status": "Created",
          "code": 201,
          "responseTime": 6543,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "dbba19bc-9347-4049-affc-d4b7f6312d32",
        "cursor": {
          "ref": "5b574894-744e-4b51-b07e-2e9d1910f05f",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "14826205-6635-497e-a593-0ea3ed4b4dcc"
        },
        "item": {
          "id": "dbba19bc-9347-4049-affc-d4b7f6312d32",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "73825f27-4647-46b3-b037-72d2589a416a",
          "status": "Created",
          "code": 201,
          "responseTime": 4739,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "89e040e1-e6f5-43bc-9df2-fe20ff65e41e",
        "cursor": {
          "ref": "5c57d571-0ffe-4c5b-94aa-813c081a8450",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5ce85e2e-40ae-45e1-9e0f-04367c2452a1"
        },
        "item": {
          "id": "89e040e1-e6f5-43bc-9df2-fe20ff65e41e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "98ccf460-64be-43cb-a6fd-411e11e33584",
          "status": "Created",
          "code": 201,
          "responseTime": 6866,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e97b8c30-c8bb-462e-94da-03774ed206f7",
        "cursor": {
          "ref": "be0517d8-d8a6-4f4f-9818-b29f19358793",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3416356d-0991-4f51-b18e-18e491e92900"
        },
        "item": {
          "id": "e97b8c30-c8bb-462e-94da-03774ed206f7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4efef718-920e-41a7-81f1-9e3ead34d87a",
          "status": "Created",
          "code": 201,
          "responseTime": 4650,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "dacb0545-a5f6-4316-bd8a-2f96d9585a17",
        "cursor": {
          "ref": "4a074f4c-94ee-44cd-a1b7-7c7c0d0f889b",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "94ed8f8a-7951-4e4c-ab59-3e4d121c5294"
        },
        "item": {
          "id": "dacb0545-a5f6-4316-bd8a-2f96d9585a17",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9a4e4d5b-291a-4612-a141-9d1b584cc6fc",
          "status": "Created",
          "code": 201,
          "responseTime": 6938,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "0759c181-e60d-4011-a037-9c20dba2f179",
        "cursor": {
          "ref": "bd38de48-e248-4607-91c2-357621e9c1c8",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "431d6a78-af08-45b7-8b63-d01522a9e1ee"
        },
        "item": {
          "id": "0759c181-e60d-4011-a037-9c20dba2f179",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "08a1596b-344b-4a3a-8735-e60732d816ea",
          "status": "Created",
          "code": 201,
          "responseTime": 4749,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "07fa3fa2-a83a-4e1b-b98e-86ddad28c60c",
        "cursor": {
          "ref": "44df4364-459e-4b7d-aba0-54d3055fab20",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6e30d7c8-cfb6-4648-88a0-f3b2cec38f62"
        },
        "item": {
          "id": "07fa3fa2-a83a-4e1b-b98e-86ddad28c60c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3bdb6dc2-2450-4318-9df9-f4d875245618",
          "status": "Created",
          "code": 201,
          "responseTime": 6914,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "87c16d40-0d2b-434d-bcd2-24ca43719829",
        "cursor": {
          "ref": "c32d505d-3390-4c47-a0ba-b186467e0e39",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5e657da7-4de0-4fae-9fe6-46ff91e47fb6"
        },
        "item": {
          "id": "87c16d40-0d2b-434d-bcd2-24ca43719829",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e83e7b42-64fd-4552-a81b-a3451efb5b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "d70944d8-fd48-41cd-963e-ec92acf00571",
        "cursor": {
          "ref": "6961d07d-3e65-4afb-8a37-7e3318764b9c",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9bc736d9-e988-465f-825d-7561575ebea0"
        },
        "item": {
          "id": "d70944d8-fd48-41cd-963e-ec92acf00571",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "faded068-df5e-4114-ae86-c2b62f8beee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "b13c5b6c-9c15-4a60-ae5d-3046a8c1c2b8",
        "cursor": {
          "ref": "a3e09ddc-81f7-4dec-b1a7-3faea44cc5d5",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "929835c5-103e-4a61-af0f-00c355a31d3f"
        },
        "item": {
          "id": "b13c5b6c-9c15-4a60-ae5d-3046a8c1c2b8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "197a8e0e-3669-46b6-b764-a7687b08da12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "cb3f98bd-eb41-45f4-b3a5-615c03d95fb6",
        "cursor": {
          "ref": "3c291870-23a9-40b3-8cce-395326e26f09",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "aa07f39f-eed1-42d2-8d83-a9185fbaf29b"
        },
        "item": {
          "id": "cb3f98bd-eb41-45f4-b3a5-615c03d95fb6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d5b581e7-365a-4c0a-a138-4bcf91eafafe",
          "status": "Created",
          "code": 201,
          "responseTime": 4591,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "277f72b7-4e1f-4bdc-b947-5308d90e089e",
        "cursor": {
          "ref": "8837974f-7ca3-46da-86c2-76173ac73d0b",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "55d6ac51-7396-459b-9855-2c1a371b5305"
        },
        "item": {
          "id": "277f72b7-4e1f-4bdc-b947-5308d90e089e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7efe7f56-947a-4f45-b270-26556ab41ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "1374e0d5-d91d-408a-bc2f-0b2053d7f38b",
        "cursor": {
          "ref": "3861541b-0f72-4282-8496-4455678a4b04",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "63637202-eb40-47e0-8fbc-36e9acd08f9e"
        },
        "item": {
          "id": "1374e0d5-d91d-408a-bc2f-0b2053d7f38b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c16fe4ec-1121-4cc7-bf59-e81ce221bac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "ec8f9fee-e1b1-4571-a1e5-87db82bb6e4a",
        "cursor": {
          "ref": "cc7bdfef-bd4c-4d28-971e-8105329867d6",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a7f35e4b-0197-45f1-ad09-a4476c2173b5"
        },
        "item": {
          "id": "ec8f9fee-e1b1-4571-a1e5-87db82bb6e4a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "35f84b8e-a388-4a36-bfa8-c99f375794a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "687393a3-802e-4853-8c21-3c8d715e5533",
        "cursor": {
          "ref": "3c18396d-c417-4dd6-8b0f-edb37901cc6b",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "df55ec48-f87d-4114-91e2-1a623116c6b1"
        },
        "item": {
          "id": "687393a3-802e-4853-8c21-3c8d715e5533",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "624e9fcc-f5b7-4c98-986a-312bcf08eee7",
          "status": "Created",
          "code": 201,
          "responseTime": 6910,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "681685b0-150c-4004-a8e2-88a49aa8f104",
        "cursor": {
          "ref": "2d425ba2-c5ec-407b-b9f7-b644e1217ab3",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c158f5bf-db1d-4b0f-a3f7-52387b4df61f"
        },
        "item": {
          "id": "681685b0-150c-4004-a8e2-88a49aa8f104",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dceb802c-162b-425d-9470-85e170681fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "843138e2-ff98-4163-8ab5-5797c6940a78",
        "cursor": {
          "ref": "eec8f27c-04c3-4451-b602-221f52b4ba2b",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "dc73d66d-9fee-49ff-b89a-8f6817a7359e"
        },
        "item": {
          "id": "843138e2-ff98-4163-8ab5-5797c6940a78",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "693004bd-aa2b-4150-8e54-7dc13f3a73f5",
          "status": "Created",
          "code": 201,
          "responseTime": 4672,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4753c166-8e3a-4567-88fe-1017efda884b",
        "cursor": {
          "ref": "8945ea24-c0d2-4fba-b249-4d78001cbf27",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d3ed80aa-9b80-4937-9929-23d058b10ee1"
        },
        "item": {
          "id": "4753c166-8e3a-4567-88fe-1017efda884b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bf64fe09-d844-4094-87da-1026881e2249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "73a03cfa-a599-4e3b-ac36-062a35aef52a",
        "cursor": {
          "ref": "7964f4df-b130-496c-89ac-f3bdf6868583",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a8f3fe52-472a-45da-b547-8aae8be1a421"
        },
        "item": {
          "id": "73a03cfa-a599-4e3b-ac36-062a35aef52a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4116a4e2-1e8e-4085-acbd-52ea723c878a",
          "status": "Created",
          "code": 201,
          "responseTime": 6682,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e23c4a0a-fb1f-4233-82a7-f298fa7944ce",
        "cursor": {
          "ref": "62e00f10-b326-4963-8fe2-816b5814227a",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e61827ff-dc71-4148-98b7-b3d4261c232a"
        },
        "item": {
          "id": "e23c4a0a-fb1f-4233-82a7-f298fa7944ce",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e2ad792b-4a04-46e5-94f2-098fd7df4e7e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 4311,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5a88645d-2f1e-43c6-8e2b-04a728675958",
        "cursor": {
          "ref": "975851b0-6440-4e28-8aca-a73a5d4e0e04",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "17fd7463-6cc1-4900-9f4d-a16397e1a42f"
        },
        "item": {
          "id": "5a88645d-2f1e-43c6-8e2b-04a728675958",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "09a1c0ab-3030-420e-b89a-ed04f2606031",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0aa28921-7949-4d7f-9e1d-0cee7be8c04e",
        "cursor": {
          "ref": "31fb910b-e53c-44de-9c1c-3ea18d1cee25",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0a464120-8d91-44e2-a338-2b0367965027"
        },
        "item": {
          "id": "0aa28921-7949-4d7f-9e1d-0cee7be8c04e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "021432c6-c07c-43a2-9ccf-8f651428c3d1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "ec682958-87bc-49a5-b843-dda83ab2f57d",
        "cursor": {
          "ref": "2dbf8c30-cf7d-422e-8358-1a385d1c669d",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ed576c7f-6c06-466d-966d-b90a9d482b60"
        },
        "item": {
          "id": "ec682958-87bc-49a5-b843-dda83ab2f57d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c39bf4fd-55df-41cc-930d-058d76dcf590",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "85454f06-df80-4596-8cf3-db91df4470ae",
        "cursor": {
          "ref": "24f40c2c-b8a8-4b43-8e19-ab1511747703",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8128e262-a1bb-4b94-9bac-ad943b75c114"
        },
        "item": {
          "id": "85454f06-df80-4596-8cf3-db91df4470ae",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "07a6d622-1c16-4bd2-96dd-a83f2cf621fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "5b4343c2-b549-4121-8224-263602535de0",
        "cursor": {
          "ref": "f04d1c34-5b11-49f7-8b13-e15e6ed6ab60",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e940f230-be15-4c89-aae0-8b0eb0befcfa"
        },
        "item": {
          "id": "5b4343c2-b549-4121-8224-263602535de0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "83349b8d-205b-4bd7-9ecb-097da81b5380",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "b1135782-b9b6-40c7-a67b-17e014e4516a",
        "cursor": {
          "ref": "1c0a5111-5790-4e42-aadd-201ee32b3a88",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4e588b55-6235-4276-a2b0-a8d1f06f36df"
        },
        "item": {
          "id": "b1135782-b9b6-40c7-a67b-17e014e4516a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "92655293-1d1b-4e06-9ab2-f711aa8416a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "79031892-9f4e-4785-a79e-18bde67949fc",
        "cursor": {
          "ref": "95988e1a-a538-4995-9e7e-f13be9f1631f",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e7fc741b-67c1-4e01-a859-4ee306f81838"
        },
        "item": {
          "id": "79031892-9f4e-4785-a79e-18bde67949fc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c5c871ad-1ca8-47c5-b366-cf1c01eb12aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "d84d6d48-76c0-4396-a86d-198338e75a51",
        "cursor": {
          "ref": "d35228bf-8b4f-43a1-b48b-477a46062888",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2605b521-d9a0-47a4-ac08-b1ca8716fe50"
        },
        "item": {
          "id": "d84d6d48-76c0-4396-a86d-198338e75a51",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1434e5bf-fa88-4d82-bd5c-d83b9ef3d067",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "da27aada-37a1-49e8-a96d-d29bf27303ef",
        "cursor": {
          "ref": "889a8234-d071-421d-9a0a-3dca7a6b7c50",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4b58f039-c05a-4f99-8388-7f495d2166ef"
        },
        "item": {
          "id": "da27aada-37a1-49e8-a96d-d29bf27303ef",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f71ae88f-4f2c-422b-bcac-52246744bea1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "e5e0ab00-7be2-44e4-93d7-c3a2874683e6",
        "cursor": {
          "ref": "075f44e6-3c2c-446f-9139-1dc3eac0582b",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b9540e10-9421-4481-bef2-b3b43dfc7817"
        },
        "item": {
          "id": "e5e0ab00-7be2-44e4-93d7-c3a2874683e6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "58a3ca2e-16e1-4039-aa3a-e9d70355052d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "1457bdda-8b63-4855-9545-95888d0a0e9c",
        "cursor": {
          "ref": "8f7f751c-0a55-418f-b48c-0e224fe6e31d",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "35f91b8d-46f8-4f83-85dc-9889ec863dc3"
        },
        "item": {
          "id": "1457bdda-8b63-4855-9545-95888d0a0e9c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bb3f412c-679a-4183-b230-122680345671",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "cfd67d44-277a-4cc9-91e1-870bafcbdb29",
        "cursor": {
          "ref": "d020289d-76bf-47aa-8609-8fd44830293b",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8d7b96fc-001f-488f-a3a6-a32a256d88a0"
        },
        "item": {
          "id": "cfd67d44-277a-4cc9-91e1-870bafcbdb29",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4ba81e34-ca68-4c08-ac4b-30e0442db9db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "2da4aba8-62ba-4e1f-a1c0-4922a810bad1",
        "cursor": {
          "ref": "fbb709b1-d7f4-4cce-aea4-5784e9c71143",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "76eb4964-f4df-4919-9247-e2a6fb38b0af"
        },
        "item": {
          "id": "2da4aba8-62ba-4e1f-a1c0-4922a810bad1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "48ce5594-7c16-4902-920a-89be77b37f2f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "10413286-07ea-4ccc-85d8-2186f5983471",
        "cursor": {
          "ref": "9a770c27-da60-4eab-bae6-2cb6392834a3",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "559ebd67-cb2d-4b23-b0de-4db7d105b380"
        },
        "item": {
          "id": "10413286-07ea-4ccc-85d8-2186f5983471",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e59443bd-7114-49ff-8e83-53934864cbeb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "a6fd2b08-9eb5-4ac2-8451-a4ddc13a6d37",
        "cursor": {
          "ref": "5c352e6b-edad-4000-b52e-428e61b079c7",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a93408ee-17f3-4cca-8785-d69d3b21e5d0"
        },
        "item": {
          "id": "a6fd2b08-9eb5-4ac2-8451-a4ddc13a6d37",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "04e5fccd-b95e-4707-a732-8bea9bd7f48d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "6a1935af-d2e2-477e-afc9-f15e05f233e6",
        "cursor": {
          "ref": "7c694320-78db-4b36-8664-7a8e5f620e47",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "29b62e33-efd5-43c5-bfed-e85f952ab110"
        },
        "item": {
          "id": "6a1935af-d2e2-477e-afc9-f15e05f233e6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c9e6d440-f0df-41ca-8da4-3b9a8265eb32",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 26,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "ca69a5b4-bfed-4d21-abf8-6c9681ec79bd",
        "cursor": {
          "ref": "14e97131-adb1-4d38-8866-6939cca30743",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "76d3176a-4ad3-4e5b-9a88-97655b8c83eb"
        },
        "item": {
          "id": "ca69a5b4-bfed-4d21-abf8-6c9681ec79bd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9efbb04a-266b-431a-a223-9cf3057286e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "a26b2c2b-b703-4ec6-8144-e239d9274dbf",
        "cursor": {
          "ref": "b8567833-e350-4710-9333-3bb035143e12",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1722ac1e-5935-49b7-a549-4ed1257d16fe"
        },
        "item": {
          "id": "a26b2c2b-b703-4ec6-8144-e239d9274dbf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a8211e4b-8298-4827-b376-4e13e8ae1215",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "6b74fba0-43ca-4672-abaa-0488838e330a",
        "cursor": {
          "ref": "11234906-6744-4758-a9d5-ee5650623126",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d0b73454-1bdb-4738-88c0-952b210ee33e"
        },
        "item": {
          "id": "6b74fba0-43ca-4672-abaa-0488838e330a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "527b130f-9d32-46ea-8346-218630d5e2c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "2f1fb5b1-d341-46f2-b45e-836d980df637",
        "cursor": {
          "ref": "8cf73908-ecce-4874-a691-02316f17e8df",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "46de948e-669a-4d16-85f3-a8b789aee11a"
        },
        "item": {
          "id": "2f1fb5b1-d341-46f2-b45e-836d980df637",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "96e2a417-1cdf-4b49-b3b5-6c3f036252e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "2ede5b71-3a47-4622-86a2-33b0ede81a92",
        "cursor": {
          "ref": "319eafb3-2957-41b7-9458-27e160d9c1e7",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5549d3d8-086b-4f26-8a59-82e8b05262fe"
        },
        "item": {
          "id": "2ede5b71-3a47-4622-86a2-33b0ede81a92",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "acff2da4-b68a-4f29-953b-4a7ba094627d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "00ffb55a-7b94-4622-ae8f-e2f68e81e3d9",
        "cursor": {
          "ref": "c2585690-55b2-402b-85f9-73758a60997f",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7285323f-1eca-4d47-8b27-e3d02e924b8a"
        },
        "item": {
          "id": "00ffb55a-7b94-4622-ae8f-e2f68e81e3d9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d07b87e6-ecb9-4549-bf8c-37ec93d667ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "45de9f9d-28b0-4e3b-ad30-48d7e4be7be6",
        "cursor": {
          "ref": "3bea3869-66aa-4ffb-a591-69ec1dd7ddfa",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8884105d-4ee0-4b40-8dee-54e3f82e7ab6"
        },
        "item": {
          "id": "45de9f9d-28b0-4e3b-ad30-48d7e4be7be6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e7a9a76a-312e-4deb-bd96-98d6f42fec8f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "f737d237-4804-49a0-ba5e-ed749b438cb1",
        "cursor": {
          "ref": "37d561b0-43a6-4ee4-9ef9-166b453c4f80",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b35bcb9c-2283-46ed-9fc6-7f8c3f245394"
        },
        "item": {
          "id": "f737d237-4804-49a0-ba5e-ed749b438cb1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9a2f99ff-66d7-4473-9239-28f011f193d6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "ee03e302-c5e8-4b72-a8bf-b3951fa0b177",
        "cursor": {
          "ref": "c1ac0414-cd7c-4523-8504-9fd39bd1d670",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "de6c31bc-2d05-48a1-82b6-ed5ce00ea963"
        },
        "item": {
          "id": "ee03e302-c5e8-4b72-a8bf-b3951fa0b177",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7fa04a0a-ddb1-49b8-b985-b8d4214cc810",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "28932baf-60a6-4a9f-88d8-33eaa77f133b",
        "cursor": {
          "ref": "d5f87747-6e81-4536-b74f-14ac2fece581",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "08b5f653-49dc-441b-8588-004b99a1f613"
        },
        "item": {
          "id": "28932baf-60a6-4a9f-88d8-33eaa77f133b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "766d5f3a-aa66-46d0-a932-b7559884643f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "8f1f05f3-1840-46c0-966a-fe7fc5289cca",
        "cursor": {
          "ref": "889e5704-e5c3-4997-81b7-42167e907f6b",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "709f4641-44e4-4f84-9b0f-184d7208f4b9"
        },
        "item": {
          "id": "8f1f05f3-1840-46c0-966a-fe7fc5289cca",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "93b42fec-1ea4-4b59-8768-8677495d03a4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "3338a0e3-8688-4674-be6f-10744c772837",
        "cursor": {
          "ref": "1ce858d0-2241-478f-9281-ff1857cdb645",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "114f823a-ed39-4f91-aefa-ec9b973154a3"
        },
        "item": {
          "id": "3338a0e3-8688-4674-be6f-10744c772837",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9c6ecbe4-5e5a-44d3-a1d9-33a061a11453",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "e5993455-64ef-40ff-8473-6be441c4045a",
        "cursor": {
          "ref": "9d401a51-e58c-4fbc-bc97-0c982cd5d170",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "71959a77-6b03-479c-b6d1-d0d4a03230da"
        },
        "item": {
          "id": "e5993455-64ef-40ff-8473-6be441c4045a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ad0f3d58-6082-4dfa-8656-c99436c5673b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "42c31c19-b8be-4b9d-b922-951b3d2158c5",
        "cursor": {
          "ref": "ff57fd9c-352a-4d76-a629-7b109fc0cb43",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bd002fb8-ec5e-4677-845c-2711804c2a30"
        },
        "item": {
          "id": "42c31c19-b8be-4b9d-b922-951b3d2158c5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2625acf0-0156-48fc-9d71-200ba098a980",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "db1df755-d727-4c38-9351-966070dbe855",
        "cursor": {
          "ref": "efde10b0-8056-4948-ac61-84fecd12feba",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e43710b1-690b-40a4-b9f2-a65df40f952f"
        },
        "item": {
          "id": "db1df755-d727-4c38-9351-966070dbe855",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b7b39355-ae10-4a68-9028-324d57490700",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "94db5df5-87e4-40f5-aeb3-b87181d4c75c",
        "cursor": {
          "ref": "424c93bf-fef1-4187-b5db-9439b776d7e2",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "82fa1ac5-72d6-439b-b5f4-80f322345ab4"
        },
        "item": {
          "id": "94db5df5-87e4-40f5-aeb3-b87181d4c75c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5903d2dc-5d05-4b98-b843-c020a30d7450",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "42e7bda1-0750-4f60-828a-7cdcd87f4eca",
        "cursor": {
          "ref": "83f9c66a-b2b4-44b7-814e-9e6b6c29da64",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d0ec6455-713c-487e-b089-dc744aa667ff"
        },
        "item": {
          "id": "42e7bda1-0750-4f60-828a-7cdcd87f4eca",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e7a4f497-de8b-4d15-98a4-4b504c74bb06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "8f76f687-469c-47f4-a0f1-08cc9f32e7b0",
        "cursor": {
          "ref": "6f9f797e-8900-4b10-a35c-10ccef5b01c5",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c8cb7b0e-41af-40d8-9230-4543dbb63fd2"
        },
        "item": {
          "id": "8f76f687-469c-47f4-a0f1-08cc9f32e7b0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4a03dd79-b931-4c92-a04f-6d88fee3a6cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "474ab673-0b0a-4ec8-9758-94bbb913255a",
        "cursor": {
          "ref": "ddf62e85-8536-4e59-8bca-f25f5f08dd10",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d32e2264-aed6-465f-b21b-793e07d046bb"
        },
        "item": {
          "id": "474ab673-0b0a-4ec8-9758-94bbb913255a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "db100cd2-1679-4ec2-b633-8182ccde4884",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "9e07b6f2-8059-42c0-a452-fa39247a3c54",
        "cursor": {
          "ref": "d7995c10-767e-4c51-a7f2-f38b2c860a67",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "33929e15-f026-44f4-960e-4c48a3993d6e"
        },
        "item": {
          "id": "9e07b6f2-8059-42c0-a452-fa39247a3c54",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bcb005b4-72b3-4a75-84a0-8bf94575c57f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "990f526a-d15f-46a7-b67b-8698ea6592c0",
        "cursor": {
          "ref": "50432e41-f80a-4186-9ab0-3d1cce257277",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "16a87431-5e64-4469-8a53-da7c7ad47d7a"
        },
        "item": {
          "id": "990f526a-d15f-46a7-b67b-8698ea6592c0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "add31814-c3be-45ad-8bbd-be5ee087ca70",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "7164bafa-dedb-46f5-b478-2ec108f66795",
        "cursor": {
          "ref": "8682712a-695c-45fe-b9bd-a18dc560b855",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8a94c0c0-927c-431d-81a3-85bc89ddcfa0"
        },
        "item": {
          "id": "7164bafa-dedb-46f5-b478-2ec108f66795",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7e202e1c-bd6f-411a-843b-ad530d594b84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "c59e7bb7-fb32-4091-8238-352b9f992973",
        "cursor": {
          "ref": "3ddc7245-a3f0-436e-93cf-57ac48a99de3",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1f3d9070-3a2a-4803-86df-6aef5015f512"
        },
        "item": {
          "id": "c59e7bb7-fb32-4091-8238-352b9f992973",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "944d2a07-98b3-43b3-9cca-5b9582cc709c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "3ab08635-88c8-456d-9d88-47b2523814b3",
        "cursor": {
          "ref": "f6da8ee8-0cf3-4f74-815d-525b3474895f",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "dc4a851b-e361-4a5f-bda2-93ec3e71c2d9"
        },
        "item": {
          "id": "3ab08635-88c8-456d-9d88-47b2523814b3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c7853dc7-6399-4bac-8f5d-b5e6bae6f106",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "a6e85f94-080b-4f2a-8b10-e3af690ae09a",
        "cursor": {
          "ref": "83213866-bd0b-4a86-a6c7-10da6fa33e31",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "abc3a656-5027-4e39-83e3-79e0fa017d52"
        },
        "item": {
          "id": "a6e85f94-080b-4f2a-8b10-e3af690ae09a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6a83a2bf-c7d8-4c22-978c-c4a833a47a6e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "ae0d2d8a-a98d-4b50-a0d1-133b651ec3e8",
        "cursor": {
          "ref": "98849dad-2a75-4927-a51c-81ea051ed8b5",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3f33f8ec-a864-4025-afc2-1813e3d7f43e"
        },
        "item": {
          "id": "ae0d2d8a-a98d-4b50-a0d1-133b651ec3e8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5073adb5-7da7-4952-8229-c3e879443674",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "18dbbfb7-f498-4ab6-8e01-12701d22b1b2",
        "cursor": {
          "ref": "be5aa84b-6509-4eb3-b535-cc2fed6fb499",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ee2a9b86-749e-49dd-a2dc-c487ab75d25c"
        },
        "item": {
          "id": "18dbbfb7-f498-4ab6-8e01-12701d22b1b2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c27df5e7-f30e-41cf-930b-9602bc0482d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "18dbbfb7-f498-4ab6-8e01-12701d22b1b2",
        "cursor": {
          "ref": "be5aa84b-6509-4eb3-b535-cc2fed6fb499",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ee2a9b86-749e-49dd-a2dc-c487ab75d25c"
        },
        "item": {
          "id": "18dbbfb7-f498-4ab6-8e01-12701d22b1b2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c27df5e7-f30e-41cf-930b-9602bc0482d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "4793469c-aaf1-4dbe-93d7-c4860649f7f5",
        "cursor": {
          "ref": "4e470140-eb39-4bd5-ac7b-f45516d075cb",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "00113f07-2bcb-48ad-b2f6-e4ec212475b8"
        },
        "item": {
          "id": "4793469c-aaf1-4dbe-93d7-c4860649f7f5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4ae79eab-9548-48d3-a843-92a1f7f75f6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "4793469c-aaf1-4dbe-93d7-c4860649f7f5",
        "cursor": {
          "ref": "4e470140-eb39-4bd5-ac7b-f45516d075cb",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "00113f07-2bcb-48ad-b2f6-e4ec212475b8"
        },
        "item": {
          "id": "4793469c-aaf1-4dbe-93d7-c4860649f7f5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4ae79eab-9548-48d3-a843-92a1f7f75f6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a4c71abe-297e-45e4-9a8e-f0b97dab2059",
        "cursor": {
          "ref": "1a9f592c-6685-4066-b0b7-a60d023e1a40",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "26e243c5-fd09-43e4-b0de-e156a9cd587e"
        },
        "item": {
          "id": "a4c71abe-297e-45e4-9a8e-f0b97dab2059",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ea0f2cf7-bc04-41bc-a00c-95f5f6481c15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "a4c71abe-297e-45e4-9a8e-f0b97dab2059",
        "cursor": {
          "ref": "1a9f592c-6685-4066-b0b7-a60d023e1a40",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "26e243c5-fd09-43e4-b0de-e156a9cd587e"
        },
        "item": {
          "id": "a4c71abe-297e-45e4-9a8e-f0b97dab2059",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ea0f2cf7-bc04-41bc-a00c-95f5f6481c15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "a7b8d2b7-4bd9-4a06-85ec-dbec845015aa",
        "cursor": {
          "ref": "28e1ff2f-943e-43c8-977a-cafba7307a4c",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0abf46e2-4466-4e77-9ecf-09214b0e5881"
        },
        "item": {
          "id": "a7b8d2b7-4bd9-4a06-85ec-dbec845015aa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4bb3c51c-b28a-4bfd-b7a5-2a1a65975d76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "a7b8d2b7-4bd9-4a06-85ec-dbec845015aa",
        "cursor": {
          "ref": "28e1ff2f-943e-43c8-977a-cafba7307a4c",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0abf46e2-4466-4e77-9ecf-09214b0e5881"
        },
        "item": {
          "id": "a7b8d2b7-4bd9-4a06-85ec-dbec845015aa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4bb3c51c-b28a-4bfd-b7a5-2a1a65975d76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "41719e6b-2c47-4046-a6b5-07e9d540bdc7",
        "cursor": {
          "ref": "7446f619-c86b-4a8f-92c9-5e652e58f265",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1311abc3-6e0b-49fc-b829-3b2d3d25998c"
        },
        "item": {
          "id": "41719e6b-2c47-4046-a6b5-07e9d540bdc7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "708b71d4-7009-40be-9f44-4e92b0c4245f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "41719e6b-2c47-4046-a6b5-07e9d540bdc7",
        "cursor": {
          "ref": "7446f619-c86b-4a8f-92c9-5e652e58f265",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1311abc3-6e0b-49fc-b829-3b2d3d25998c"
        },
        "item": {
          "id": "41719e6b-2c47-4046-a6b5-07e9d540bdc7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "708b71d4-7009-40be-9f44-4e92b0c4245f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7265ee91-d629-4311-8646-c16b8e091fc0",
        "cursor": {
          "ref": "a73655e6-0763-451a-a096-8c1513c6c4b9",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "53ff85b6-a183-46e4-8f58-a68fb047cf50"
        },
        "item": {
          "id": "7265ee91-d629-4311-8646-c16b8e091fc0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "470d48df-7b0d-4759-b76e-e5ed7d23f11d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "7265ee91-d629-4311-8646-c16b8e091fc0",
        "cursor": {
          "ref": "a73655e6-0763-451a-a096-8c1513c6c4b9",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "53ff85b6-a183-46e4-8f58-a68fb047cf50"
        },
        "item": {
          "id": "7265ee91-d629-4311-8646-c16b8e091fc0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "470d48df-7b0d-4759-b76e-e5ed7d23f11d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "cec8dcf3-5fdb-46aa-97a4-3f92bc937b03",
        "cursor": {
          "ref": "1c1f89c2-daa5-4c8c-b85c-389c60fe042b",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "937598ab-b242-4aaa-badf-2f9a17281415"
        },
        "item": {
          "id": "cec8dcf3-5fdb-46aa-97a4-3f92bc937b03",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9422ad20-6845-46cf-a744-1ba5af5cdccc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "cec8dcf3-5fdb-46aa-97a4-3f92bc937b03",
        "cursor": {
          "ref": "1c1f89c2-daa5-4c8c-b85c-389c60fe042b",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "937598ab-b242-4aaa-badf-2f9a17281415"
        },
        "item": {
          "id": "cec8dcf3-5fdb-46aa-97a4-3f92bc937b03",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9422ad20-6845-46cf-a744-1ba5af5cdccc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b9a114af-77f5-47b6-9012-c2060de299e6",
        "cursor": {
          "ref": "74d55543-8c55-4673-8b2c-d04dd5918b7b",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "861ff488-8851-413b-9623-b934ee5da078"
        },
        "item": {
          "id": "b9a114af-77f5-47b6-9012-c2060de299e6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7ea3827c-612a-4206-adac-8113fc659c46",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "b9a114af-77f5-47b6-9012-c2060de299e6",
        "cursor": {
          "ref": "74d55543-8c55-4673-8b2c-d04dd5918b7b",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "861ff488-8851-413b-9623-b934ee5da078"
        },
        "item": {
          "id": "b9a114af-77f5-47b6-9012-c2060de299e6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7ea3827c-612a-4206-adac-8113fc659c46",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9261211b-23e3-488c-9f5d-43ed5698712c",
        "cursor": {
          "ref": "abc4e9f6-251e-4698-b89c-6795ecad616f",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e119f44c-6130-43ce-95c6-246e0c9b5d9e"
        },
        "item": {
          "id": "9261211b-23e3-488c-9f5d-43ed5698712c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "77daa2a8-4d28-4021-a5a5-eba1dbee55e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "9261211b-23e3-488c-9f5d-43ed5698712c",
        "cursor": {
          "ref": "abc4e9f6-251e-4698-b89c-6795ecad616f",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e119f44c-6130-43ce-95c6-246e0c9b5d9e"
        },
        "item": {
          "id": "9261211b-23e3-488c-9f5d-43ed5698712c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "77daa2a8-4d28-4021-a5a5-eba1dbee55e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "983bd94a-4969-4846-a7f6-9da04c4d8d7e",
        "cursor": {
          "ref": "a9452df6-c35d-4dff-ae0e-4f22b7dae91c",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "531579de-5a6b-401e-a433-a42e9f59fc61"
        },
        "item": {
          "id": "983bd94a-4969-4846-a7f6-9da04c4d8d7e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "46344433-0514-49eb-a3dd-4349dea71b94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "983bd94a-4969-4846-a7f6-9da04c4d8d7e",
        "cursor": {
          "ref": "a9452df6-c35d-4dff-ae0e-4f22b7dae91c",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "531579de-5a6b-401e-a433-a42e9f59fc61"
        },
        "item": {
          "id": "983bd94a-4969-4846-a7f6-9da04c4d8d7e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "46344433-0514-49eb-a3dd-4349dea71b94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "753c9627-246d-4179-8e18-a433bb6725c6",
        "cursor": {
          "ref": "9261509a-9d02-4051-a365-3856e0439f8b",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b3f0ddd7-ac95-441e-99c1-1e01f2d7461b"
        },
        "item": {
          "id": "753c9627-246d-4179-8e18-a433bb6725c6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "82a16873-3453-4766-a2c2-67f39ea1157e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "753c9627-246d-4179-8e18-a433bb6725c6",
        "cursor": {
          "ref": "9261509a-9d02-4051-a365-3856e0439f8b",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b3f0ddd7-ac95-441e-99c1-1e01f2d7461b"
        },
        "item": {
          "id": "753c9627-246d-4179-8e18-a433bb6725c6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "82a16873-3453-4766-a2c2-67f39ea1157e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "67b97ac7-8186-491a-816d-5eddfebcbac0",
        "cursor": {
          "ref": "ad631581-65e3-4371-bcca-5f141e378448",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3f75718f-2906-4841-9112-a270d6f6e84d"
        },
        "item": {
          "id": "67b97ac7-8186-491a-816d-5eddfebcbac0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "17fdc6c4-538f-46a9-9306-55c953c5d43c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "67b97ac7-8186-491a-816d-5eddfebcbac0",
        "cursor": {
          "ref": "ad631581-65e3-4371-bcca-5f141e378448",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3f75718f-2906-4841-9112-a270d6f6e84d"
        },
        "item": {
          "id": "67b97ac7-8186-491a-816d-5eddfebcbac0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "17fdc6c4-538f-46a9-9306-55c953c5d43c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "aa3ff3a3-8648-465d-8cb9-63aabf573b41",
        "cursor": {
          "ref": "beac0e38-8dc4-41ff-a1bb-e5d2b2b01eb5",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c88870c2-f076-4c60-b012-cf1364cbcb4c"
        },
        "item": {
          "id": "aa3ff3a3-8648-465d-8cb9-63aabf573b41",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "202200aa-727f-4a39-871a-813dc2f62710",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "aa3ff3a3-8648-465d-8cb9-63aabf573b41",
        "cursor": {
          "ref": "beac0e38-8dc4-41ff-a1bb-e5d2b2b01eb5",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c88870c2-f076-4c60-b012-cf1364cbcb4c"
        },
        "item": {
          "id": "aa3ff3a3-8648-465d-8cb9-63aabf573b41",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "202200aa-727f-4a39-871a-813dc2f62710",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "9389fd00-2425-4764-acb2-22c07db7be86",
        "cursor": {
          "ref": "fda4f5fa-5838-48d7-a5bc-ca2814621bdb",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "33880129-ff32-47e0-9cee-6885f933508e"
        },
        "item": {
          "id": "9389fd00-2425-4764-acb2-22c07db7be86",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2fc4517e-5e42-4e0a-97cf-509c6a1a75c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "9389fd00-2425-4764-acb2-22c07db7be86",
        "cursor": {
          "ref": "fda4f5fa-5838-48d7-a5bc-ca2814621bdb",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "33880129-ff32-47e0-9cee-6885f933508e"
        },
        "item": {
          "id": "9389fd00-2425-4764-acb2-22c07db7be86",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2fc4517e-5e42-4e0a-97cf-509c6a1a75c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "080a12e9-a4f2-4f63-8684-199f6e9818b2",
        "cursor": {
          "ref": "f5aa9453-c90b-4d86-90fd-d33902fa584e",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "56404b4b-be33-4473-bd5d-c85a7a3dd331"
        },
        "item": {
          "id": "080a12e9-a4f2-4f63-8684-199f6e9818b2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d1725e9a-ae37-4869-a17b-17c3aabd4ca9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "080a12e9-a4f2-4f63-8684-199f6e9818b2",
        "cursor": {
          "ref": "f5aa9453-c90b-4d86-90fd-d33902fa584e",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "56404b4b-be33-4473-bd5d-c85a7a3dd331"
        },
        "item": {
          "id": "080a12e9-a4f2-4f63-8684-199f6e9818b2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d1725e9a-ae37-4869-a17b-17c3aabd4ca9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "180f94a2-ad3a-4895-a3c1-ac039ca8d43b",
        "cursor": {
          "ref": "c639de58-5909-4e12-a607-3f57e86006d0",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0ea5040e-a352-4c12-8ebc-090daf00af1c"
        },
        "item": {
          "id": "180f94a2-ad3a-4895-a3c1-ac039ca8d43b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a49e4637-c974-4167-9681-265bfba24da6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "180f94a2-ad3a-4895-a3c1-ac039ca8d43b",
        "cursor": {
          "ref": "c639de58-5909-4e12-a607-3f57e86006d0",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0ea5040e-a352-4c12-8ebc-090daf00af1c"
        },
        "item": {
          "id": "180f94a2-ad3a-4895-a3c1-ac039ca8d43b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a49e4637-c974-4167-9681-265bfba24da6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "e08dc4b7-69d6-49e5-80a6-4aa16635e3d1",
        "cursor": {
          "ref": "5f20b949-dc1c-4b02-897b-8f1678a3a69b",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "de03be7c-5e62-48f9-aaea-6d7ebf9172c4"
        },
        "item": {
          "id": "e08dc4b7-69d6-49e5-80a6-4aa16635e3d1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2c90302c-b4be-4360-a7ad-9ea8578e85a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "e08dc4b7-69d6-49e5-80a6-4aa16635e3d1",
        "cursor": {
          "ref": "5f20b949-dc1c-4b02-897b-8f1678a3a69b",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "de03be7c-5e62-48f9-aaea-6d7ebf9172c4"
        },
        "item": {
          "id": "e08dc4b7-69d6-49e5-80a6-4aa16635e3d1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2c90302c-b4be-4360-a7ad-9ea8578e85a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "d3a4f7ca-a084-4549-9c46-42dee25d802c",
        "cursor": {
          "ref": "85ec69a0-160f-4e7c-a303-7bcb4f48a8b5",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2fc33674-43c3-4df6-8d62-8df201773193"
        },
        "item": {
          "id": "d3a4f7ca-a084-4549-9c46-42dee25d802c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d28da81f-28dd-4d21-969b-a030b6ec1748",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d3a4f7ca-a084-4549-9c46-42dee25d802c",
        "cursor": {
          "ref": "85ec69a0-160f-4e7c-a303-7bcb4f48a8b5",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2fc33674-43c3-4df6-8d62-8df201773193"
        },
        "item": {
          "id": "d3a4f7ca-a084-4549-9c46-42dee25d802c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d28da81f-28dd-4d21-969b-a030b6ec1748",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "3fcdf65f-2945-42ef-b67c-fa86635614f3",
        "cursor": {
          "ref": "a3a597c5-2c48-44c1-9575-f729129a4508",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "814489fd-b711-4421-87e1-d5525dae5550"
        },
        "item": {
          "id": "3fcdf65f-2945-42ef-b67c-fa86635614f3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c8b1c034-a190-4401-ba0a-b99cf356de66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "3fcdf65f-2945-42ef-b67c-fa86635614f3",
        "cursor": {
          "ref": "a3a597c5-2c48-44c1-9575-f729129a4508",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "814489fd-b711-4421-87e1-d5525dae5550"
        },
        "item": {
          "id": "3fcdf65f-2945-42ef-b67c-fa86635614f3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c8b1c034-a190-4401-ba0a-b99cf356de66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "2eebe57e-c54e-4d75-8313-44654df3c40b",
        "cursor": {
          "ref": "3deaf212-b395-4a40-94eb-01b3ae83721d",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "08d8f025-32c3-45b8-8d63-c0079b849eaa"
        },
        "item": {
          "id": "2eebe57e-c54e-4d75-8313-44654df3c40b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "35d4c0f3-1ea3-483f-8bda-bdcd53789f93",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "2eebe57e-c54e-4d75-8313-44654df3c40b",
        "cursor": {
          "ref": "3deaf212-b395-4a40-94eb-01b3ae83721d",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "08d8f025-32c3-45b8-8d63-c0079b849eaa"
        },
        "item": {
          "id": "2eebe57e-c54e-4d75-8313-44654df3c40b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "35d4c0f3-1ea3-483f-8bda-bdcd53789f93",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "292373a9-b1b7-4e93-a7c4-168f24366d36",
        "cursor": {
          "ref": "84dec0c1-6c83-4a83-9539-4b04150fd344",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3f766641-09d9-4800-b13c-ad692e5a2a48"
        },
        "item": {
          "id": "292373a9-b1b7-4e93-a7c4-168f24366d36",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a39ed012-c1ab-4900-9024-2999ff6bdd25",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 31,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "292373a9-b1b7-4e93-a7c4-168f24366d36",
        "cursor": {
          "ref": "84dec0c1-6c83-4a83-9539-4b04150fd344",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3f766641-09d9-4800-b13c-ad692e5a2a48"
        },
        "item": {
          "id": "292373a9-b1b7-4e93-a7c4-168f24366d36",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a39ed012-c1ab-4900-9024-2999ff6bdd25",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 31,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "8e43c932-eceb-4c5a-8c31-663b48027580",
        "cursor": {
          "ref": "4af27e56-bf04-4f2d-a8f7-9e0e06de28ea",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "36d0c89f-e321-4321-b585-cfa5c53c0a33"
        },
        "item": {
          "id": "8e43c932-eceb-4c5a-8c31-663b48027580",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "44542aab-77b5-41a8-93b9-ea12257aa508",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8e43c932-eceb-4c5a-8c31-663b48027580",
        "cursor": {
          "ref": "4af27e56-bf04-4f2d-a8f7-9e0e06de28ea",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "36d0c89f-e321-4321-b585-cfa5c53c0a33"
        },
        "item": {
          "id": "8e43c932-eceb-4c5a-8c31-663b48027580",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "44542aab-77b5-41a8-93b9-ea12257aa508",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "2d2e3334-5689-480e-874c-b459442602ae",
        "cursor": {
          "ref": "0e9898d9-1791-4dde-807e-1fa0459454bb",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "45e61438-db28-4577-a72c-f59de343aabe"
        },
        "item": {
          "id": "2d2e3334-5689-480e-874c-b459442602ae",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "229f14cf-1d08-4154-911f-f1fa103bf538",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "2d2e3334-5689-480e-874c-b459442602ae",
        "cursor": {
          "ref": "0e9898d9-1791-4dde-807e-1fa0459454bb",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "45e61438-db28-4577-a72c-f59de343aabe"
        },
        "item": {
          "id": "2d2e3334-5689-480e-874c-b459442602ae",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "229f14cf-1d08-4154-911f-f1fa103bf538",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "95735168-c83e-42bd-899c-67a7733078f5",
        "cursor": {
          "ref": "0a41c09e-abe2-4273-a136-70427c2532dd",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "165b647b-f545-4085-9f59-b4c1eb5803a0"
        },
        "item": {
          "id": "95735168-c83e-42bd-899c-67a7733078f5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5c25a93d-2d62-4d60-9410-cef1851ca7f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "95735168-c83e-42bd-899c-67a7733078f5",
        "cursor": {
          "ref": "0a41c09e-abe2-4273-a136-70427c2532dd",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "165b647b-f545-4085-9f59-b4c1eb5803a0"
        },
        "item": {
          "id": "95735168-c83e-42bd-899c-67a7733078f5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5c25a93d-2d62-4d60-9410-cef1851ca7f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "81a2fa86-54a0-4d8e-9e90-592dabf098cb",
        "cursor": {
          "ref": "2b3f88be-ac88-40d8-9e9d-d6cb6bbcca6c",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cf894720-1d38-491b-8680-e0a54ec11469"
        },
        "item": {
          "id": "81a2fa86-54a0-4d8e-9e90-592dabf098cb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c59df630-ed37-48b2-bb15-8c8b83812f45",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "81a2fa86-54a0-4d8e-9e90-592dabf098cb",
        "cursor": {
          "ref": "2b3f88be-ac88-40d8-9e9d-d6cb6bbcca6c",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cf894720-1d38-491b-8680-e0a54ec11469"
        },
        "item": {
          "id": "81a2fa86-54a0-4d8e-9e90-592dabf098cb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c59df630-ed37-48b2-bb15-8c8b83812f45",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "0b78b882-b0bb-415f-bec9-3e3daca26f53",
        "cursor": {
          "ref": "00dd8eeb-b067-40fd-9f45-4edc7b8b464f",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9fa726b9-9db2-4b05-b628-94d18229dba5"
        },
        "item": {
          "id": "0b78b882-b0bb-415f-bec9-3e3daca26f53",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d8676f0e-3684-442d-89bc-16b4122067bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "0b78b882-b0bb-415f-bec9-3e3daca26f53",
        "cursor": {
          "ref": "00dd8eeb-b067-40fd-9f45-4edc7b8b464f",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9fa726b9-9db2-4b05-b628-94d18229dba5"
        },
        "item": {
          "id": "0b78b882-b0bb-415f-bec9-3e3daca26f53",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d8676f0e-3684-442d-89bc-16b4122067bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "2051f6ff-4d81-44c7-a97a-36e31028ef9a",
        "cursor": {
          "ref": "d59b8c22-0886-4b45-b4ef-2de87f713210",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "062c4e6e-b5e0-41b3-a6b3-45ce052e4748"
        },
        "item": {
          "id": "2051f6ff-4d81-44c7-a97a-36e31028ef9a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c19ca108-4b1b-4186-b57d-292b90aa16a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2051f6ff-4d81-44c7-a97a-36e31028ef9a",
        "cursor": {
          "ref": "d59b8c22-0886-4b45-b4ef-2de87f713210",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "062c4e6e-b5e0-41b3-a6b3-45ce052e4748"
        },
        "item": {
          "id": "2051f6ff-4d81-44c7-a97a-36e31028ef9a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c19ca108-4b1b-4186-b57d-292b90aa16a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "00dc6068-fa9f-4603-9277-ba389dabf326",
        "cursor": {
          "ref": "6c4fad11-b581-46bd-92eb-d113e82534cf",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4306d39d-e613-4b51-b82a-4937ace03348"
        },
        "item": {
          "id": "00dc6068-fa9f-4603-9277-ba389dabf326",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "27c7c491-1bad-4749-bba1-7f0f8541029b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "00dc6068-fa9f-4603-9277-ba389dabf326",
        "cursor": {
          "ref": "6c4fad11-b581-46bd-92eb-d113e82534cf",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4306d39d-e613-4b51-b82a-4937ace03348"
        },
        "item": {
          "id": "00dc6068-fa9f-4603-9277-ba389dabf326",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "27c7c491-1bad-4749-bba1-7f0f8541029b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "bd288dc3-299b-44f8-94de-dd9d38163871",
        "cursor": {
          "ref": "84110778-b834-40ec-9ea2-8e47779654dc",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9b58b8d6-d225-48a1-a999-82b6097e70cd"
        },
        "item": {
          "id": "bd288dc3-299b-44f8-94de-dd9d38163871",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e7ecc0a9-1c0b-446b-ab6f-42bac4cfa3f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "bd288dc3-299b-44f8-94de-dd9d38163871",
        "cursor": {
          "ref": "84110778-b834-40ec-9ea2-8e47779654dc",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9b58b8d6-d225-48a1-a999-82b6097e70cd"
        },
        "item": {
          "id": "bd288dc3-299b-44f8-94de-dd9d38163871",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e7ecc0a9-1c0b-446b-ab6f-42bac4cfa3f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "db15ea32-3588-4a47-b65c-e9c7dd8a0d5d",
        "cursor": {
          "ref": "7ffd46a9-1988-415a-96e2-72afb872710d",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d568a240-90a8-47a7-b888-1d51b8a3fcbd"
        },
        "item": {
          "id": "db15ea32-3588-4a47-b65c-e9c7dd8a0d5d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8cbd5b2f-e534-40eb-8578-618ff836e65e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "db15ea32-3588-4a47-b65c-e9c7dd8a0d5d",
        "cursor": {
          "ref": "7ffd46a9-1988-415a-96e2-72afb872710d",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d568a240-90a8-47a7-b888-1d51b8a3fcbd"
        },
        "item": {
          "id": "db15ea32-3588-4a47-b65c-e9c7dd8a0d5d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8cbd5b2f-e534-40eb-8578-618ff836e65e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "27445706-efb2-496d-9b94-37989f7b6942",
        "cursor": {
          "ref": "ba01c036-13cd-4ed2-8933-bde14222c200",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9eaee936-e6d6-47c7-ae3c-2b17a4e66e6e"
        },
        "item": {
          "id": "27445706-efb2-496d-9b94-37989f7b6942",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cf076c1f-2304-4d85-aa36-01ededd53f86",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "27445706-efb2-496d-9b94-37989f7b6942",
        "cursor": {
          "ref": "ba01c036-13cd-4ed2-8933-bde14222c200",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9eaee936-e6d6-47c7-ae3c-2b17a4e66e6e"
        },
        "item": {
          "id": "27445706-efb2-496d-9b94-37989f7b6942",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cf076c1f-2304-4d85-aa36-01ededd53f86",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "a165ce44-e6ea-43ac-8e2c-823d1b1384cc",
        "cursor": {
          "ref": "a870804e-04aa-498d-9b54-88f8b9872121",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "04a71a9e-5d88-4702-a3c1-7d7af5f8f626"
        },
        "item": {
          "id": "a165ce44-e6ea-43ac-8e2c-823d1b1384cc",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0b1a134a-92be-44de-b38a-d2c28cdde8ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "a165ce44-e6ea-43ac-8e2c-823d1b1384cc",
        "cursor": {
          "ref": "a870804e-04aa-498d-9b54-88f8b9872121",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "04a71a9e-5d88-4702-a3c1-7d7af5f8f626"
        },
        "item": {
          "id": "a165ce44-e6ea-43ac-8e2c-823d1b1384cc",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0b1a134a-92be-44de-b38a-d2c28cdde8ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "8be54667-21d7-4f3c-ae9c-8bde3829c27c",
        "cursor": {
          "ref": "fc3fb2ca-a318-48b1-8f0c-00dcf73d49b3",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0adcbfa9-d526-445c-94d6-fdd88d87f369"
        },
        "item": {
          "id": "8be54667-21d7-4f3c-ae9c-8bde3829c27c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e829e3aa-8b93-411c-a9c5-5f2214271710",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "8be54667-21d7-4f3c-ae9c-8bde3829c27c",
        "cursor": {
          "ref": "fc3fb2ca-a318-48b1-8f0c-00dcf73d49b3",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0adcbfa9-d526-445c-94d6-fdd88d87f369"
        },
        "item": {
          "id": "8be54667-21d7-4f3c-ae9c-8bde3829c27c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e829e3aa-8b93-411c-a9c5-5f2214271710",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "f2d0f65a-7dc1-4b75-bfc8-9ff57d0e37e5",
        "cursor": {
          "ref": "1dd9623c-7c87-4557-a4dd-850132eab697",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ba75ff0d-5e67-406a-bc37-dbe45c27861c"
        },
        "item": {
          "id": "f2d0f65a-7dc1-4b75-bfc8-9ff57d0e37e5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1f224925-8ae9-4861-b590-6c8c1ee9497e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "f2d0f65a-7dc1-4b75-bfc8-9ff57d0e37e5",
        "cursor": {
          "ref": "1dd9623c-7c87-4557-a4dd-850132eab697",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ba75ff0d-5e67-406a-bc37-dbe45c27861c"
        },
        "item": {
          "id": "f2d0f65a-7dc1-4b75-bfc8-9ff57d0e37e5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1f224925-8ae9-4861-b590-6c8c1ee9497e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "dabffb8c-b329-4fcc-80a6-0ff6ac17bbef",
        "cursor": {
          "ref": "0a626796-c671-42c7-88f4-d33e9969b312",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "20ae2a29-7d40-4f24-a216-48248ad4e97e"
        },
        "item": {
          "id": "dabffb8c-b329-4fcc-80a6-0ff6ac17bbef",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ae966181-537b-425c-8fe7-40654abad4e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "dabffb8c-b329-4fcc-80a6-0ff6ac17bbef",
        "cursor": {
          "ref": "0a626796-c671-42c7-88f4-d33e9969b312",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "20ae2a29-7d40-4f24-a216-48248ad4e97e"
        },
        "item": {
          "id": "dabffb8c-b329-4fcc-80a6-0ff6ac17bbef",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ae966181-537b-425c-8fe7-40654abad4e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "27920c5a-de8f-4d27-8a95-6bce9a194104",
        "cursor": {
          "ref": "ed1c6626-73ff-4e25-afe0-e7741125b577",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6e75e4e3-9aa8-419a-8a3f-ed379c20a002"
        },
        "item": {
          "id": "27920c5a-de8f-4d27-8a95-6bce9a194104",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b26104a1-93e2-40db-83c3-52f8b30e481c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "27920c5a-de8f-4d27-8a95-6bce9a194104",
        "cursor": {
          "ref": "ed1c6626-73ff-4e25-afe0-e7741125b577",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6e75e4e3-9aa8-419a-8a3f-ed379c20a002"
        },
        "item": {
          "id": "27920c5a-de8f-4d27-8a95-6bce9a194104",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b26104a1-93e2-40db-83c3-52f8b30e481c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "10949e06-9d67-4fd0-a975-d91055ef09d8",
        "cursor": {
          "ref": "8f17403b-42b1-4e2e-8d53-03c958ec0b95",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "52da6d42-0c3a-4247-94fc-bd6b8d1c5bb9"
        },
        "item": {
          "id": "10949e06-9d67-4fd0-a975-d91055ef09d8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "67122d60-0c6e-43b8-aa54-6b31e9072a62",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "10949e06-9d67-4fd0-a975-d91055ef09d8",
        "cursor": {
          "ref": "8f17403b-42b1-4e2e-8d53-03c958ec0b95",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "52da6d42-0c3a-4247-94fc-bd6b8d1c5bb9"
        },
        "item": {
          "id": "10949e06-9d67-4fd0-a975-d91055ef09d8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "67122d60-0c6e-43b8-aa54-6b31e9072a62",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "d9c18633-a455-46f7-af48-327a541af27d",
        "cursor": {
          "ref": "15c0fbfb-dbc3-4901-84d7-08ef04b2c037",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "45a0cc26-e6a7-43bf-a711-a2fd2d944826"
        },
        "item": {
          "id": "d9c18633-a455-46f7-af48-327a541af27d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5182ea18-09ab-4702-87bb-0798df080bbc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "d9c18633-a455-46f7-af48-327a541af27d",
        "cursor": {
          "ref": "15c0fbfb-dbc3-4901-84d7-08ef04b2c037",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "45a0cc26-e6a7-43bf-a711-a2fd2d944826"
        },
        "item": {
          "id": "d9c18633-a455-46f7-af48-327a541af27d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5182ea18-09ab-4702-87bb-0798df080bbc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "85b22696-90b8-4cc0-be51-3ee3f71a259c",
        "cursor": {
          "ref": "fd45a1b2-716b-4adf-8d07-a896f18a887c",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8f4e1157-35c1-4a8d-83e8-651d0f4670e1"
        },
        "item": {
          "id": "85b22696-90b8-4cc0-be51-3ee3f71a259c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c4c165aa-ba92-4f15-8a83-20612eee17dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "85b22696-90b8-4cc0-be51-3ee3f71a259c",
        "cursor": {
          "ref": "fd45a1b2-716b-4adf-8d07-a896f18a887c",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8f4e1157-35c1-4a8d-83e8-651d0f4670e1"
        },
        "item": {
          "id": "85b22696-90b8-4cc0-be51-3ee3f71a259c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c4c165aa-ba92-4f15-8a83-20612eee17dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "398e7e9a-272f-4e5f-b51a-6addcceb3b96",
        "cursor": {
          "ref": "db440aa3-4f8d-4ec8-a4a8-c734f662032e",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "51d26e78-65e5-458e-a408-34de0193b4c4"
        },
        "item": {
          "id": "398e7e9a-272f-4e5f-b51a-6addcceb3b96",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "eddfe666-2564-411b-8631-ce7853a32820",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "398e7e9a-272f-4e5f-b51a-6addcceb3b96",
        "cursor": {
          "ref": "db440aa3-4f8d-4ec8-a4a8-c734f662032e",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "51d26e78-65e5-458e-a408-34de0193b4c4"
        },
        "item": {
          "id": "398e7e9a-272f-4e5f-b51a-6addcceb3b96",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "eddfe666-2564-411b-8631-ce7853a32820",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "a26edfd6-35be-4252-8dd8-3fa4c90a55c4",
        "cursor": {
          "ref": "50dde099-4e21-4242-8ec9-06781502bb82",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4325980a-4e36-47d1-a16d-ba4d5c0bfc4e"
        },
        "item": {
          "id": "a26edfd6-35be-4252-8dd8-3fa4c90a55c4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "da454e96-1bfb-4630-83cf-7e2a450321f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "a26edfd6-35be-4252-8dd8-3fa4c90a55c4",
        "cursor": {
          "ref": "50dde099-4e21-4242-8ec9-06781502bb82",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4325980a-4e36-47d1-a16d-ba4d5c0bfc4e"
        },
        "item": {
          "id": "a26edfd6-35be-4252-8dd8-3fa4c90a55c4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "da454e96-1bfb-4630-83cf-7e2a450321f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "6c77e75e-e85f-4ee7-872d-a9e9f0070ec9",
        "cursor": {
          "ref": "a1079598-a7c6-46f6-bd7b-c1d3fdc5d50e",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e6981221-69d5-486a-bf31-de8448e822b8"
        },
        "item": {
          "id": "6c77e75e-e85f-4ee7-872d-a9e9f0070ec9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0a429e5a-cd7a-4821-9282-8a2f65177220",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "6c77e75e-e85f-4ee7-872d-a9e9f0070ec9",
        "cursor": {
          "ref": "a1079598-a7c6-46f6-bd7b-c1d3fdc5d50e",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e6981221-69d5-486a-bf31-de8448e822b8"
        },
        "item": {
          "id": "6c77e75e-e85f-4ee7-872d-a9e9f0070ec9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0a429e5a-cd7a-4821-9282-8a2f65177220",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "25b862d2-c42b-45c9-a264-757ad62d309b",
        "cursor": {
          "ref": "bb3b4f19-6f43-4c26-b1de-864813ee8325",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "76496aac-8b82-447e-a17a-934fd4bbaf6d"
        },
        "item": {
          "id": "25b862d2-c42b-45c9-a264-757ad62d309b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "94717c10-0371-4e3c-b18b-0a00c41bf1d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "25b862d2-c42b-45c9-a264-757ad62d309b",
        "cursor": {
          "ref": "bb3b4f19-6f43-4c26-b1de-864813ee8325",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "76496aac-8b82-447e-a17a-934fd4bbaf6d"
        },
        "item": {
          "id": "25b862d2-c42b-45c9-a264-757ad62d309b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "94717c10-0371-4e3c-b18b-0a00c41bf1d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "59887500-6ab8-488f-abde-a904a86d6d90",
        "cursor": {
          "ref": "bc8a9c1f-1cd8-4c49-8275-998d2a4c53eb",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cad3368a-8840-47b3-b5cd-87bb639ce6f9"
        },
        "item": {
          "id": "59887500-6ab8-488f-abde-a904a86d6d90",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4514bb61-4636-4be9-bdf9-ad66fdc151d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "59887500-6ab8-488f-abde-a904a86d6d90",
        "cursor": {
          "ref": "bc8a9c1f-1cd8-4c49-8275-998d2a4c53eb",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cad3368a-8840-47b3-b5cd-87bb639ce6f9"
        },
        "item": {
          "id": "59887500-6ab8-488f-abde-a904a86d6d90",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4514bb61-4636-4be9-bdf9-ad66fdc151d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "68f1d4af-dbc5-4cb8-8a85-b2fcaec0b531",
        "cursor": {
          "ref": "7d0a5f15-7497-4380-9971-5c05dd019fe0",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "845f4d89-b3cb-4963-92c8-ebc102bf11ae"
        },
        "item": {
          "id": "68f1d4af-dbc5-4cb8-8a85-b2fcaec0b531",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "90c17e46-3f6d-42bd-99a3-3f9dcf77be36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "68f1d4af-dbc5-4cb8-8a85-b2fcaec0b531",
        "cursor": {
          "ref": "7d0a5f15-7497-4380-9971-5c05dd019fe0",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "845f4d89-b3cb-4963-92c8-ebc102bf11ae"
        },
        "item": {
          "id": "68f1d4af-dbc5-4cb8-8a85-b2fcaec0b531",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "90c17e46-3f6d-42bd-99a3-3f9dcf77be36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "5e3fa074-3f66-4006-9450-f6c6c9f9c73c",
        "cursor": {
          "ref": "2fb8f92d-dbe5-4e5c-b4bf-bb32c453eab9",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "01c7e0f4-e69f-4cda-a8c4-83e03acd3bac"
        },
        "item": {
          "id": "5e3fa074-3f66-4006-9450-f6c6c9f9c73c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "42013b63-b916-4e7b-8dd8-5c7835c8f8e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "5e3fa074-3f66-4006-9450-f6c6c9f9c73c",
        "cursor": {
          "ref": "2fb8f92d-dbe5-4e5c-b4bf-bb32c453eab9",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "01c7e0f4-e69f-4cda-a8c4-83e03acd3bac"
        },
        "item": {
          "id": "5e3fa074-3f66-4006-9450-f6c6c9f9c73c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "42013b63-b916-4e7b-8dd8-5c7835c8f8e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "38ddec40-8bda-424f-85e0-3d7771ea5637",
        "cursor": {
          "ref": "a50e312a-9f92-4872-bdb2-a94f58264756",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "26c1e3fb-cfe1-4b0b-848e-45cabc5f16d3"
        },
        "item": {
          "id": "38ddec40-8bda-424f-85e0-3d7771ea5637",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7f3eef77-ab19-4492-9f48-1c143c4036a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "38ddec40-8bda-424f-85e0-3d7771ea5637",
        "cursor": {
          "ref": "a50e312a-9f92-4872-bdb2-a94f58264756",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "26c1e3fb-cfe1-4b0b-848e-45cabc5f16d3"
        },
        "item": {
          "id": "38ddec40-8bda-424f-85e0-3d7771ea5637",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7f3eef77-ab19-4492-9f48-1c143c4036a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "a1f34b16-9810-4571-af2c-06a93ec2694e",
        "cursor": {
          "ref": "c2ef9aa0-47ec-494b-887f-681fb9d3f3ec",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "61fbc400-683b-489e-848c-6f257f6a867d"
        },
        "item": {
          "id": "a1f34b16-9810-4571-af2c-06a93ec2694e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f2f218e3-52b8-4d48-a179-add0846377a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "a1f34b16-9810-4571-af2c-06a93ec2694e",
        "cursor": {
          "ref": "c2ef9aa0-47ec-494b-887f-681fb9d3f3ec",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "61fbc400-683b-489e-848c-6f257f6a867d"
        },
        "item": {
          "id": "a1f34b16-9810-4571-af2c-06a93ec2694e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f2f218e3-52b8-4d48-a179-add0846377a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "ec80bfb9-a54c-4fa7-a851-edfc14556dc0",
        "cursor": {
          "ref": "d7289f19-6221-4cee-b7fa-f7570f6acdb0",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "47981271-56ea-48c9-9fb7-ad9303600f90"
        },
        "item": {
          "id": "ec80bfb9-a54c-4fa7-a851-edfc14556dc0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3bdbe10c-45c4-409e-8b81-8fc99c607942",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "ec80bfb9-a54c-4fa7-a851-edfc14556dc0",
        "cursor": {
          "ref": "d7289f19-6221-4cee-b7fa-f7570f6acdb0",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "47981271-56ea-48c9-9fb7-ad9303600f90"
        },
        "item": {
          "id": "ec80bfb9-a54c-4fa7-a851-edfc14556dc0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3bdbe10c-45c4-409e-8b81-8fc99c607942",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "fb6a3f19-027b-45f4-b497-7e27e0fe1aa2",
        "cursor": {
          "ref": "a7aa1da6-9067-4d06-aed5-a325541853e9",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4ec492e6-3323-42a1-9236-6ea33abfeca3"
        },
        "item": {
          "id": "fb6a3f19-027b-45f4-b497-7e27e0fe1aa2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cb917e75-5d32-4294-9825-876e20f26e8f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "fb6a3f19-027b-45f4-b497-7e27e0fe1aa2",
        "cursor": {
          "ref": "a7aa1da6-9067-4d06-aed5-a325541853e9",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4ec492e6-3323-42a1-9236-6ea33abfeca3"
        },
        "item": {
          "id": "fb6a3f19-027b-45f4-b497-7e27e0fe1aa2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cb917e75-5d32-4294-9825-876e20f26e8f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "02054b6a-e237-4abc-b6d4-9cece57f3dae",
        "cursor": {
          "ref": "e151b68b-3001-4182-9143-7dee19bdc77d",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "501e5f12-e29a-4ba4-9804-342f9488e38b"
        },
        "item": {
          "id": "02054b6a-e237-4abc-b6d4-9cece57f3dae",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cffd453d-3a97-4ca7-972f-a5c502c0c057",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "02054b6a-e237-4abc-b6d4-9cece57f3dae",
        "cursor": {
          "ref": "e151b68b-3001-4182-9143-7dee19bdc77d",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "501e5f12-e29a-4ba4-9804-342f9488e38b"
        },
        "item": {
          "id": "02054b6a-e237-4abc-b6d4-9cece57f3dae",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cffd453d-3a97-4ca7-972f-a5c502c0c057",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "22297b62-49a5-419d-b1fa-428be153633f",
        "cursor": {
          "ref": "13e2fb97-496f-445c-b512-d78839f9b209",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f4d63664-dc3b-4641-b097-ff98f06b3c11"
        },
        "item": {
          "id": "22297b62-49a5-419d-b1fa-428be153633f",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "4919f77c-8883-4b45-b3db-01670a3e1c6e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "22297b62-49a5-419d-b1fa-428be153633f",
        "cursor": {
          "ref": "13e2fb97-496f-445c-b512-d78839f9b209",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f4d63664-dc3b-4641-b097-ff98f06b3c11"
        },
        "item": {
          "id": "22297b62-49a5-419d-b1fa-428be153633f",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "4919f77c-8883-4b45-b3db-01670a3e1c6e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "fc68d8d4-bec5-4b89-8893-c0e4da320e41",
        "cursor": {
          "ref": "a3194153-88a7-4feb-a933-75cdbbd6182b",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8678895e-7885-479e-9288-e5658922cb11"
        },
        "item": {
          "id": "fc68d8d4-bec5-4b89-8893-c0e4da320e41",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "594800ab-88d0-4d04-a904-e2404287ffca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "fc68d8d4-bec5-4b89-8893-c0e4da320e41",
        "cursor": {
          "ref": "a3194153-88a7-4feb-a933-75cdbbd6182b",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8678895e-7885-479e-9288-e5658922cb11"
        },
        "item": {
          "id": "fc68d8d4-bec5-4b89-8893-c0e4da320e41",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "594800ab-88d0-4d04-a904-e2404287ffca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "2933e38d-1cad-41e5-89ef-cd9c55259577",
        "cursor": {
          "ref": "a2154005-e1da-477b-a4ee-689dd121572d",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "68495518-e90c-4e24-960a-58bce46f9ebf"
        },
        "item": {
          "id": "2933e38d-1cad-41e5-89ef-cd9c55259577",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ee597e81-8e19-416d-8c44-52d559ba27f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "2933e38d-1cad-41e5-89ef-cd9c55259577",
        "cursor": {
          "ref": "a2154005-e1da-477b-a4ee-689dd121572d",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "68495518-e90c-4e24-960a-58bce46f9ebf"
        },
        "item": {
          "id": "2933e38d-1cad-41e5-89ef-cd9c55259577",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ee597e81-8e19-416d-8c44-52d559ba27f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "325c5f3b-c0cd-4fb5-9182-765cca50d7d9",
        "cursor": {
          "ref": "2e0241ff-467f-45de-82af-714251f12b12",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f643434a-5b78-41c3-8096-050cde54caf1"
        },
        "item": {
          "id": "325c5f3b-c0cd-4fb5-9182-765cca50d7d9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "10aa3c92-d622-4b96-8f36-ade704d07dcb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "325c5f3b-c0cd-4fb5-9182-765cca50d7d9",
        "cursor": {
          "ref": "2e0241ff-467f-45de-82af-714251f12b12",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f643434a-5b78-41c3-8096-050cde54caf1"
        },
        "item": {
          "id": "325c5f3b-c0cd-4fb5-9182-765cca50d7d9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "10aa3c92-d622-4b96-8f36-ade704d07dcb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "f016023d-b893-4b9f-a4ac-7f115c7323bc",
        "cursor": {
          "ref": "08ed3949-af13-44db-874f-f6e16e88bb65",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e98ddea1-813d-4ca9-9f9f-8e4e43a471bc"
        },
        "item": {
          "id": "f016023d-b893-4b9f-a4ac-7f115c7323bc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dd617fff-aaf2-4b03-9e01-d606f96489ca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "f016023d-b893-4b9f-a4ac-7f115c7323bc",
        "cursor": {
          "ref": "08ed3949-af13-44db-874f-f6e16e88bb65",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e98ddea1-813d-4ca9-9f9f-8e4e43a471bc"
        },
        "item": {
          "id": "f016023d-b893-4b9f-a4ac-7f115c7323bc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dd617fff-aaf2-4b03-9e01-d606f96489ca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "b307cc37-79f5-413e-9efb-a63fe69a0847",
        "cursor": {
          "ref": "6b633d74-1728-40b4-b3b5-3525413606eb",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6488b764-d7e9-4471-9dc7-aba240fac703"
        },
        "item": {
          "id": "b307cc37-79f5-413e-9efb-a63fe69a0847",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f94dccdc-ef8b-4e37-b9ee-5a36cbf9c229",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "b307cc37-79f5-413e-9efb-a63fe69a0847",
        "cursor": {
          "ref": "6b633d74-1728-40b4-b3b5-3525413606eb",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6488b764-d7e9-4471-9dc7-aba240fac703"
        },
        "item": {
          "id": "b307cc37-79f5-413e-9efb-a63fe69a0847",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f94dccdc-ef8b-4e37-b9ee-5a36cbf9c229",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "3f9cc172-9aac-410c-b18e-219b38576483",
        "cursor": {
          "ref": "5f20e8b3-d0c8-41ce-ac2c-a9138aafa7cd",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "89b4ef9b-c5c2-44e2-9361-a4b292eff057"
        },
        "item": {
          "id": "3f9cc172-9aac-410c-b18e-219b38576483",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e05e2c75-869e-4ab6-ae02-2a8ca6f168ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "3f9cc172-9aac-410c-b18e-219b38576483",
        "cursor": {
          "ref": "5f20e8b3-d0c8-41ce-ac2c-a9138aafa7cd",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "89b4ef9b-c5c2-44e2-9361-a4b292eff057"
        },
        "item": {
          "id": "3f9cc172-9aac-410c-b18e-219b38576483",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e05e2c75-869e-4ab6-ae02-2a8ca6f168ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "1a67e79d-c95d-48c7-8894-3b236b2f285a",
        "cursor": {
          "ref": "045fb165-804f-4d6e-81ad-7d75f89ba894",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "55b4c5f9-e563-4db2-9249-cf1276be1456"
        },
        "item": {
          "id": "1a67e79d-c95d-48c7-8894-3b236b2f285a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "209493f4-316f-4a83-8561-68fb64ca5bc4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "1a67e79d-c95d-48c7-8894-3b236b2f285a",
        "cursor": {
          "ref": "045fb165-804f-4d6e-81ad-7d75f89ba894",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "55b4c5f9-e563-4db2-9249-cf1276be1456"
        },
        "item": {
          "id": "1a67e79d-c95d-48c7-8894-3b236b2f285a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "209493f4-316f-4a83-8561-68fb64ca5bc4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "900b802d-e5ca-4de2-85f1-b3ad50ec2165",
        "cursor": {
          "ref": "9efaaff8-0cd7-45c4-bd7a-5400ac512c51",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "dd2d190c-7349-4cbf-b064-6fbbc04743e1"
        },
        "item": {
          "id": "900b802d-e5ca-4de2-85f1-b3ad50ec2165",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bb6d067c-3c21-4095-9459-92dc68fa53b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "900b802d-e5ca-4de2-85f1-b3ad50ec2165",
        "cursor": {
          "ref": "9efaaff8-0cd7-45c4-bd7a-5400ac512c51",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "dd2d190c-7349-4cbf-b064-6fbbc04743e1"
        },
        "item": {
          "id": "900b802d-e5ca-4de2-85f1-b3ad50ec2165",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bb6d067c-3c21-4095-9459-92dc68fa53b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "1c2786a5-89ae-4b80-9034-058af0b51491",
        "cursor": {
          "ref": "e6a0ebe4-4845-4a58-9f31-9e220da819bf",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "089ebff1-dc97-41c0-8eb7-ea3085076ec0"
        },
        "item": {
          "id": "1c2786a5-89ae-4b80-9034-058af0b51491",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cb5f903a-4164-414f-a6fb-562d5228dc8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "1c2786a5-89ae-4b80-9034-058af0b51491",
        "cursor": {
          "ref": "e6a0ebe4-4845-4a58-9f31-9e220da819bf",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "089ebff1-dc97-41c0-8eb7-ea3085076ec0"
        },
        "item": {
          "id": "1c2786a5-89ae-4b80-9034-058af0b51491",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cb5f903a-4164-414f-a6fb-562d5228dc8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "38af7183-84e4-4c1f-9e4e-68761b2e805d",
        "cursor": {
          "ref": "6ebbfc10-36cb-477b-b4c5-be4a8f0f9e93",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "06df2562-5e2f-4375-9f17-aa6bd1a0dc78"
        },
        "item": {
          "id": "38af7183-84e4-4c1f-9e4e-68761b2e805d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2958d769-130d-4d90-abdf-bb436dbb2e3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "38af7183-84e4-4c1f-9e4e-68761b2e805d",
        "cursor": {
          "ref": "6ebbfc10-36cb-477b-b4c5-be4a8f0f9e93",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "06df2562-5e2f-4375-9f17-aa6bd1a0dc78"
        },
        "item": {
          "id": "38af7183-84e4-4c1f-9e4e-68761b2e805d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2958d769-130d-4d90-abdf-bb436dbb2e3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "a7e8ed0f-3b10-4e91-80a6-84a246b2d13e",
        "cursor": {
          "ref": "b63bd6b1-f8b0-425c-be2b-cef947b0aadf",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "abf5493a-d2a9-481c-a9fa-c7c91e3e07e2"
        },
        "item": {
          "id": "a7e8ed0f-3b10-4e91-80a6-84a246b2d13e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "042de0eb-2382-4e90-a34f-42f740284e06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "a7e8ed0f-3b10-4e91-80a6-84a246b2d13e",
        "cursor": {
          "ref": "b63bd6b1-f8b0-425c-be2b-cef947b0aadf",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "abf5493a-d2a9-481c-a9fa-c7c91e3e07e2"
        },
        "item": {
          "id": "a7e8ed0f-3b10-4e91-80a6-84a246b2d13e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "042de0eb-2382-4e90-a34f-42f740284e06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "02302ae5-d7e5-4d40-8766-eaea6218579a",
        "cursor": {
          "ref": "0cceee4a-fdae-4537-9fe6-b8b9c4b2fa6c",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e837faf5-2bbc-4d3a-9d75-3672509bf820"
        },
        "item": {
          "id": "02302ae5-d7e5-4d40-8766-eaea6218579a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a44e663f-8e9c-4272-a0ff-1fbce4979cb4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "02302ae5-d7e5-4d40-8766-eaea6218579a",
        "cursor": {
          "ref": "0cceee4a-fdae-4537-9fe6-b8b9c4b2fa6c",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e837faf5-2bbc-4d3a-9d75-3672509bf820"
        },
        "item": {
          "id": "02302ae5-d7e5-4d40-8766-eaea6218579a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a44e663f-8e9c-4272-a0ff-1fbce4979cb4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "1e099650-48f6-41e2-8f28-dfc7b4c3c9f6",
        "cursor": {
          "ref": "d0f49695-1cbc-400e-9574-d8838bf977e6",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2afa647f-2e1d-47f3-8458-f250842e4266"
        },
        "item": {
          "id": "1e099650-48f6-41e2-8f28-dfc7b4c3c9f6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "96e5aed1-57bb-4062-932d-f922feb54d8e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "1e099650-48f6-41e2-8f28-dfc7b4c3c9f6",
        "cursor": {
          "ref": "d0f49695-1cbc-400e-9574-d8838bf977e6",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2afa647f-2e1d-47f3-8458-f250842e4266"
        },
        "item": {
          "id": "1e099650-48f6-41e2-8f28-dfc7b4c3c9f6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "96e5aed1-57bb-4062-932d-f922feb54d8e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "c36cd00e-21c0-4c4e-b7f6-ca0fa1b7b555",
        "cursor": {
          "ref": "1b95eca1-47a8-478f-9eb9-2c70f58173aa",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f1677c1f-a2b6-4599-93b0-24c199b15220"
        },
        "item": {
          "id": "c36cd00e-21c0-4c4e-b7f6-ca0fa1b7b555",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a793d520-b1a4-4673-a7c5-034e31e4f019",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "c36cd00e-21c0-4c4e-b7f6-ca0fa1b7b555",
        "cursor": {
          "ref": "1b95eca1-47a8-478f-9eb9-2c70f58173aa",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f1677c1f-a2b6-4599-93b0-24c199b15220"
        },
        "item": {
          "id": "c36cd00e-21c0-4c4e-b7f6-ca0fa1b7b555",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a793d520-b1a4-4673-a7c5-034e31e4f019",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "18d4e0ba-4b10-4365-a63a-59a7420dde6f",
        "cursor": {
          "ref": "3cbd8831-6867-4937-8cbd-d3b4db82211c",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a46b0100-4490-41f4-b521-acfaeff6b1b2"
        },
        "item": {
          "id": "18d4e0ba-4b10-4365-a63a-59a7420dde6f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6ea15768-1f52-4147-8452-9792f0b6c3ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "18d4e0ba-4b10-4365-a63a-59a7420dde6f",
        "cursor": {
          "ref": "3cbd8831-6867-4937-8cbd-d3b4db82211c",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a46b0100-4490-41f4-b521-acfaeff6b1b2"
        },
        "item": {
          "id": "18d4e0ba-4b10-4365-a63a-59a7420dde6f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6ea15768-1f52-4147-8452-9792f0b6c3ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "068e7710-0784-43bb-b144-e1d6d9012877",
        "cursor": {
          "ref": "6a6fb179-93da-4fff-83b4-2b7f537d5cac",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d1f6a793-36ce-4bc2-bd00-faa35dbea6fd"
        },
        "item": {
          "id": "068e7710-0784-43bb-b144-e1d6d9012877",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8c7d55e4-273f-402d-ad30-e4a31bdfce8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "068e7710-0784-43bb-b144-e1d6d9012877",
        "cursor": {
          "ref": "6a6fb179-93da-4fff-83b4-2b7f537d5cac",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d1f6a793-36ce-4bc2-bd00-faa35dbea6fd"
        },
        "item": {
          "id": "068e7710-0784-43bb-b144-e1d6d9012877",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8c7d55e4-273f-402d-ad30-e4a31bdfce8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "84e2acaa-f04f-4d97-a2bc-a732949b9474",
        "cursor": {
          "ref": "3f5736de-e772-4c02-9644-b43608b9e754",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3e0eb4bc-7717-4d1d-a3dd-f8b453c9ea16"
        },
        "item": {
          "id": "84e2acaa-f04f-4d97-a2bc-a732949b9474",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ee4e41c2-e999-4b7b-8e70-158dadffbff6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "84e2acaa-f04f-4d97-a2bc-a732949b9474",
        "cursor": {
          "ref": "3f5736de-e772-4c02-9644-b43608b9e754",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3e0eb4bc-7717-4d1d-a3dd-f8b453c9ea16"
        },
        "item": {
          "id": "84e2acaa-f04f-4d97-a2bc-a732949b9474",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ee4e41c2-e999-4b7b-8e70-158dadffbff6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "9fa21de7-61b5-45e0-a87c-79c74d903633",
        "cursor": {
          "ref": "e4ef0286-397a-4e25-b89e-e51ea04529bc",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9b73765f-5192-4b83-b01f-eb2c18ddaec6"
        },
        "item": {
          "id": "9fa21de7-61b5-45e0-a87c-79c74d903633",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0f679582-218a-47db-8e84-3af4b92aed3b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "9fa21de7-61b5-45e0-a87c-79c74d903633",
        "cursor": {
          "ref": "e4ef0286-397a-4e25-b89e-e51ea04529bc",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9b73765f-5192-4b83-b01f-eb2c18ddaec6"
        },
        "item": {
          "id": "9fa21de7-61b5-45e0-a87c-79c74d903633",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0f679582-218a-47db-8e84-3af4b92aed3b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "d82c74ea-7dd0-463c-82c4-c12af42e318e",
        "cursor": {
          "ref": "00ef4901-ff08-437b-bb50-ea4aaff21f14",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "78b52b0c-86e6-46be-9020-33dc1ec1144e"
        },
        "item": {
          "id": "d82c74ea-7dd0-463c-82c4-c12af42e318e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f91c2e9e-279e-4bd2-8da5-c245b09f4c37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "d82c74ea-7dd0-463c-82c4-c12af42e318e",
        "cursor": {
          "ref": "00ef4901-ff08-437b-bb50-ea4aaff21f14",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "78b52b0c-86e6-46be-9020-33dc1ec1144e"
        },
        "item": {
          "id": "d82c74ea-7dd0-463c-82c4-c12af42e318e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f91c2e9e-279e-4bd2-8da5-c245b09f4c37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "20c464e3-e2b4-4e08-a7e8-d20b630e56eb",
        "cursor": {
          "ref": "276c2597-dd5f-4fa1-8f68-08843cf9525e",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "fd865d9d-b816-4633-9934-325e4dd2cb1d"
        },
        "item": {
          "id": "20c464e3-e2b4-4e08-a7e8-d20b630e56eb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ae1bd64d-e764-4970-96cf-73ff26d9017b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "20c464e3-e2b4-4e08-a7e8-d20b630e56eb",
        "cursor": {
          "ref": "276c2597-dd5f-4fa1-8f68-08843cf9525e",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "fd865d9d-b816-4633-9934-325e4dd2cb1d"
        },
        "item": {
          "id": "20c464e3-e2b4-4e08-a7e8-d20b630e56eb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ae1bd64d-e764-4970-96cf-73ff26d9017b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "ae44baec-187c-4bb0-8c52-943ded41e237",
        "cursor": {
          "ref": "2bc28626-ff05-415f-9a27-406cdd5c8357",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0b50c907-4482-4235-864d-5bcb18a928a9"
        },
        "item": {
          "id": "ae44baec-187c-4bb0-8c52-943ded41e237",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c358169f-7ab3-467f-95e9-abb7455ad839",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "ae44baec-187c-4bb0-8c52-943ded41e237",
        "cursor": {
          "ref": "2bc28626-ff05-415f-9a27-406cdd5c8357",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0b50c907-4482-4235-864d-5bcb18a928a9"
        },
        "item": {
          "id": "ae44baec-187c-4bb0-8c52-943ded41e237",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c358169f-7ab3-467f-95e9-abb7455ad839",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "146bdfee-12b1-4208-9c3f-f364845a3441",
        "cursor": {
          "ref": "19bd6d3f-62da-4ddf-9ba7-394cd590b219",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7b46638b-82fd-450c-a6da-4986cecb531f"
        },
        "item": {
          "id": "146bdfee-12b1-4208-9c3f-f364845a3441",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b430ee2e-eafb-4818-b694-25ecb9e08a96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "146bdfee-12b1-4208-9c3f-f364845a3441",
        "cursor": {
          "ref": "19bd6d3f-62da-4ddf-9ba7-394cd590b219",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7b46638b-82fd-450c-a6da-4986cecb531f"
        },
        "item": {
          "id": "146bdfee-12b1-4208-9c3f-f364845a3441",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b430ee2e-eafb-4818-b694-25ecb9e08a96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "afc2d49a-e118-4732-b792-431d858df54a",
        "cursor": {
          "ref": "c74bf0cb-10f4-4698-b6b6-ebeaaafe1df1",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "50fd29a1-1df7-4fe3-aee0-dc9685dd5b40"
        },
        "item": {
          "id": "afc2d49a-e118-4732-b792-431d858df54a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "703812f5-a966-44d9-96ec-56fccdc5a102",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "afc2d49a-e118-4732-b792-431d858df54a",
        "cursor": {
          "ref": "c74bf0cb-10f4-4698-b6b6-ebeaaafe1df1",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "50fd29a1-1df7-4fe3-aee0-dc9685dd5b40"
        },
        "item": {
          "id": "afc2d49a-e118-4732-b792-431d858df54a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "703812f5-a966-44d9-96ec-56fccdc5a102",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "d0ce2427-bbcc-43c7-9619-98cf1211f065",
        "cursor": {
          "ref": "a3f56bff-2be0-4c8a-98fa-5aea7ac7ad8f",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "641d2eb0-8ce6-4160-a245-824e5aa976da"
        },
        "item": {
          "id": "d0ce2427-bbcc-43c7-9619-98cf1211f065",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cd21bf4e-3a7f-4c22-b00a-66465ff943fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d0ce2427-bbcc-43c7-9619-98cf1211f065",
        "cursor": {
          "ref": "a3f56bff-2be0-4c8a-98fa-5aea7ac7ad8f",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "641d2eb0-8ce6-4160-a245-824e5aa976da"
        },
        "item": {
          "id": "d0ce2427-bbcc-43c7-9619-98cf1211f065",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cd21bf4e-3a7f-4c22-b00a-66465ff943fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "65350901-8c59-4c70-803f-0d5d976845fc",
        "cursor": {
          "ref": "142c0949-6577-4824-9379-1cc5708225d0",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "729c65fd-bf99-4591-9ccb-4918550919dc"
        },
        "item": {
          "id": "65350901-8c59-4c70-803f-0d5d976845fc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2b68effb-411b-4f79-9802-d2364bc7ded4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "65350901-8c59-4c70-803f-0d5d976845fc",
        "cursor": {
          "ref": "142c0949-6577-4824-9379-1cc5708225d0",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "729c65fd-bf99-4591-9ccb-4918550919dc"
        },
        "item": {
          "id": "65350901-8c59-4c70-803f-0d5d976845fc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2b68effb-411b-4f79-9802-d2364bc7ded4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "360084b1-74d1-4b94-8b05-362b831db544",
        "cursor": {
          "ref": "4a8cd6f3-211c-4a4b-843b-607ab605a6f4",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1a1bf2d1-bb8e-4162-b246-0ae064d458af"
        },
        "item": {
          "id": "360084b1-74d1-4b94-8b05-362b831db544",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4ef31875-6fbb-4f4b-8a61-d8a07fabc1fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "360084b1-74d1-4b94-8b05-362b831db544",
        "cursor": {
          "ref": "4a8cd6f3-211c-4a4b-843b-607ab605a6f4",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1a1bf2d1-bb8e-4162-b246-0ae064d458af"
        },
        "item": {
          "id": "360084b1-74d1-4b94-8b05-362b831db544",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4ef31875-6fbb-4f4b-8a61-d8a07fabc1fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "bc64ead4-b752-4797-95d7-bfef7e400bb0",
        "cursor": {
          "ref": "62281d3a-b88d-4d8c-acc1-4073de543392",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f05382ea-c38a-4f24-bdeb-24d6cc0ba2ac"
        },
        "item": {
          "id": "bc64ead4-b752-4797-95d7-bfef7e400bb0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "92e76c66-2308-4a91-a021-d0f7cd058c7a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "bc64ead4-b752-4797-95d7-bfef7e400bb0",
        "cursor": {
          "ref": "62281d3a-b88d-4d8c-acc1-4073de543392",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f05382ea-c38a-4f24-bdeb-24d6cc0ba2ac"
        },
        "item": {
          "id": "bc64ead4-b752-4797-95d7-bfef7e400bb0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "92e76c66-2308-4a91-a021-d0f7cd058c7a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "902900a9-db5a-402a-a8df-b39517a98c79",
        "cursor": {
          "ref": "e24cb635-11af-4312-b226-120a8fd09add",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "aafafd0e-e2ac-48da-8e88-af85b53a3966"
        },
        "item": {
          "id": "902900a9-db5a-402a-a8df-b39517a98c79",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b0f9dca7-93ed-4fc0-9752-907c2232f9e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "902900a9-db5a-402a-a8df-b39517a98c79",
        "cursor": {
          "ref": "e24cb635-11af-4312-b226-120a8fd09add",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "aafafd0e-e2ac-48da-8e88-af85b53a3966"
        },
        "item": {
          "id": "902900a9-db5a-402a-a8df-b39517a98c79",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b0f9dca7-93ed-4fc0-9752-907c2232f9e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ac3e8fd5-a60c-4858-ac94-01d94fc66a88",
        "cursor": {
          "ref": "0aa9bc17-1444-4beb-9e24-50082c7d0e60",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "78e49362-9f84-4ea8-8335-373786c262c2"
        },
        "item": {
          "id": "ac3e8fd5-a60c-4858-ac94-01d94fc66a88",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dbd88ea1-1fe3-4dd0-ad2a-9590afc78ee6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ac3e8fd5-a60c-4858-ac94-01d94fc66a88",
        "cursor": {
          "ref": "0aa9bc17-1444-4beb-9e24-50082c7d0e60",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "78e49362-9f84-4ea8-8335-373786c262c2"
        },
        "item": {
          "id": "ac3e8fd5-a60c-4858-ac94-01d94fc66a88",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dbd88ea1-1fe3-4dd0-ad2a-9590afc78ee6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "2c69a9ac-7d06-427a-9499-27deb130656a",
        "cursor": {
          "ref": "b3823237-b6b9-46a9-a574-85e6eeab29d8",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "33140afd-3a8e-4172-a0f2-217d2bf0afa6"
        },
        "item": {
          "id": "2c69a9ac-7d06-427a-9499-27deb130656a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c3fecc6a-96d5-4cfe-af6e-ae9a905c88f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "2c69a9ac-7d06-427a-9499-27deb130656a",
        "cursor": {
          "ref": "b3823237-b6b9-46a9-a574-85e6eeab29d8",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "33140afd-3a8e-4172-a0f2-217d2bf0afa6"
        },
        "item": {
          "id": "2c69a9ac-7d06-427a-9499-27deb130656a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c3fecc6a-96d5-4cfe-af6e-ae9a905c88f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "22063970-2248-4e00-9d71-bba0257e8ae1",
        "cursor": {
          "ref": "19afb6ea-432f-4ede-a8d6-1c74e515a18b",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cf8b060a-8549-44e5-961c-d3a41a1f282a"
        },
        "item": {
          "id": "22063970-2248-4e00-9d71-bba0257e8ae1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5053a1e3-fccd-47ca-a8a7-bc196cf2e641",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "22063970-2248-4e00-9d71-bba0257e8ae1",
        "cursor": {
          "ref": "19afb6ea-432f-4ede-a8d6-1c74e515a18b",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cf8b060a-8549-44e5-961c-d3a41a1f282a"
        },
        "item": {
          "id": "22063970-2248-4e00-9d71-bba0257e8ae1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5053a1e3-fccd-47ca-a8a7-bc196cf2e641",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "9ffea8aa-dc0b-4fc8-ab8c-4aade7506654",
        "cursor": {
          "ref": "50b1e461-f438-47b3-b172-4ed04c802b38",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1bbf8d31-a27a-482c-87a4-f2a595d5f78a"
        },
        "item": {
          "id": "9ffea8aa-dc0b-4fc8-ab8c-4aade7506654",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3baad0f1-2790-4668-b679-db12cf140e96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "9ffea8aa-dc0b-4fc8-ab8c-4aade7506654",
        "cursor": {
          "ref": "50b1e461-f438-47b3-b172-4ed04c802b38",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1bbf8d31-a27a-482c-87a4-f2a595d5f78a"
        },
        "item": {
          "id": "9ffea8aa-dc0b-4fc8-ab8c-4aade7506654",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3baad0f1-2790-4668-b679-db12cf140e96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "97a7cd3f-b2b0-4d76-9cf7-43fd687e14d1",
        "cursor": {
          "ref": "3b2b0a60-d10b-47c4-9e56-c9b6a8f1a9be",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8abbaede-1860-42c9-9cd1-3980831f4f12"
        },
        "item": {
          "id": "97a7cd3f-b2b0-4d76-9cf7-43fd687e14d1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2891bdc7-f789-4c7d-92f9-a521a834b577",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "97a7cd3f-b2b0-4d76-9cf7-43fd687e14d1",
        "cursor": {
          "ref": "3b2b0a60-d10b-47c4-9e56-c9b6a8f1a9be",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8abbaede-1860-42c9-9cd1-3980831f4f12"
        },
        "item": {
          "id": "97a7cd3f-b2b0-4d76-9cf7-43fd687e14d1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2891bdc7-f789-4c7d-92f9-a521a834b577",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "04c1a56d-9b97-4a43-81ad-498d91274855",
        "cursor": {
          "ref": "9c9e5018-c930-452f-9421-c1ba084907d5",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7e58147f-e413-4dc8-936e-457b8dd1ef9f"
        },
        "item": {
          "id": "04c1a56d-9b97-4a43-81ad-498d91274855",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "935211e4-bbd0-45b5-b9d7-9e76bf54b1c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "04c1a56d-9b97-4a43-81ad-498d91274855",
        "cursor": {
          "ref": "9c9e5018-c930-452f-9421-c1ba084907d5",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7e58147f-e413-4dc8-936e-457b8dd1ef9f"
        },
        "item": {
          "id": "04c1a56d-9b97-4a43-81ad-498d91274855",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "935211e4-bbd0-45b5-b9d7-9e76bf54b1c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "b3046ac1-c06b-44e1-b8d2-94fc810a5461",
        "cursor": {
          "ref": "31a29628-2322-4d91-8802-8418a925ca6d",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6919b0e9-7582-4bb9-b74c-7247a70512e5"
        },
        "item": {
          "id": "b3046ac1-c06b-44e1-b8d2-94fc810a5461",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fdc5d2bc-3150-4170-9719-ae91c68f54f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "b3046ac1-c06b-44e1-b8d2-94fc810a5461",
        "cursor": {
          "ref": "31a29628-2322-4d91-8802-8418a925ca6d",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6919b0e9-7582-4bb9-b74c-7247a70512e5"
        },
        "item": {
          "id": "b3046ac1-c06b-44e1-b8d2-94fc810a5461",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fdc5d2bc-3150-4170-9719-ae91c68f54f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "0b0d4afc-3edd-4568-84d2-e40fe1da1f1c",
        "cursor": {
          "ref": "84be4c1b-45f2-4763-a8f0-a67ae2d7b29b",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1a0524c6-b54a-4873-8ae5-afd10e834995"
        },
        "item": {
          "id": "0b0d4afc-3edd-4568-84d2-e40fe1da1f1c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9e4f30a8-3170-4484-980d-e71afafebbc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "0b0d4afc-3edd-4568-84d2-e40fe1da1f1c",
        "cursor": {
          "ref": "84be4c1b-45f2-4763-a8f0-a67ae2d7b29b",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1a0524c6-b54a-4873-8ae5-afd10e834995"
        },
        "item": {
          "id": "0b0d4afc-3edd-4568-84d2-e40fe1da1f1c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9e4f30a8-3170-4484-980d-e71afafebbc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "45b8fed5-17a8-49aa-b4bb-2f1ca6f5f2b4",
        "cursor": {
          "ref": "885f77fd-aaf4-4861-8768-2b392976c807",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d879ae09-24c4-4238-9e80-229fc859aa8a"
        },
        "item": {
          "id": "45b8fed5-17a8-49aa-b4bb-2f1ca6f5f2b4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ef25588b-1f7d-446a-8706-e6976f0fabf5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "45b8fed5-17a8-49aa-b4bb-2f1ca6f5f2b4",
        "cursor": {
          "ref": "885f77fd-aaf4-4861-8768-2b392976c807",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d879ae09-24c4-4238-9e80-229fc859aa8a"
        },
        "item": {
          "id": "45b8fed5-17a8-49aa-b4bb-2f1ca6f5f2b4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ef25588b-1f7d-446a-8706-e6976f0fabf5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "e9923e81-e820-44f6-bbe1-a374d3141119",
        "cursor": {
          "ref": "2c9a06b4-2d49-444d-8aaa-d2e05b71e6dc",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "17638a9b-7d87-4884-b33b-ae5629f0361c"
        },
        "item": {
          "id": "e9923e81-e820-44f6-bbe1-a374d3141119",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7df400de-76c5-485d-887b-134b496024dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "e9923e81-e820-44f6-bbe1-a374d3141119",
        "cursor": {
          "ref": "2c9a06b4-2d49-444d-8aaa-d2e05b71e6dc",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "17638a9b-7d87-4884-b33b-ae5629f0361c"
        },
        "item": {
          "id": "e9923e81-e820-44f6-bbe1-a374d3141119",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7df400de-76c5-485d-887b-134b496024dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "ba1badbf-ec77-4e90-8966-c1124eb7839c",
        "cursor": {
          "ref": "5cb85d05-c80b-44e0-800f-7dba40f4844d",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d0435463-174f-4ec5-9332-af260274a034"
        },
        "item": {
          "id": "ba1badbf-ec77-4e90-8966-c1124eb7839c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1147d80a-aca9-4b93-b267-7a93e614bc1e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "ba1badbf-ec77-4e90-8966-c1124eb7839c",
        "cursor": {
          "ref": "5cb85d05-c80b-44e0-800f-7dba40f4844d",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d0435463-174f-4ec5-9332-af260274a034"
        },
        "item": {
          "id": "ba1badbf-ec77-4e90-8966-c1124eb7839c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1147d80a-aca9-4b93-b267-7a93e614bc1e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "d4ef68a7-4595-4d28-9fa3-fa997c3089f5",
        "cursor": {
          "ref": "19e27990-a0af-4252-bdf8-72f747563490",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a12da1b8-94ea-4034-bf5b-0ad6d5ad8e14"
        },
        "item": {
          "id": "d4ef68a7-4595-4d28-9fa3-fa997c3089f5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e223c57b-6a82-4489-a361-059512a4cb1b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "d4ef68a7-4595-4d28-9fa3-fa997c3089f5",
        "cursor": {
          "ref": "19e27990-a0af-4252-bdf8-72f747563490",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a12da1b8-94ea-4034-bf5b-0ad6d5ad8e14"
        },
        "item": {
          "id": "d4ef68a7-4595-4d28-9fa3-fa997c3089f5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e223c57b-6a82-4489-a361-059512a4cb1b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "0e9208bf-d71d-4af9-9af2-ac1639a842c0",
        "cursor": {
          "ref": "133ee0a1-d710-459a-bd79-de1e06c0f3e5",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fe4bb574-2eac-4340-92a6-1f9f3f7d9fcb"
        },
        "item": {
          "id": "0e9208bf-d71d-4af9-9af2-ac1639a842c0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1a029c6a-11e0-43a0-9669-5059df05a521",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "0e9208bf-d71d-4af9-9af2-ac1639a842c0",
        "cursor": {
          "ref": "133ee0a1-d710-459a-bd79-de1e06c0f3e5",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fe4bb574-2eac-4340-92a6-1f9f3f7d9fcb"
        },
        "item": {
          "id": "0e9208bf-d71d-4af9-9af2-ac1639a842c0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1a029c6a-11e0-43a0-9669-5059df05a521",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "0da5f7ee-2ae3-4c51-8a90-3791eb40f757",
        "cursor": {
          "ref": "0f88c2bf-4fa0-4604-b8c3-ce5bd8ed7e91",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4d710657-21a2-450d-b747-9887872f4396"
        },
        "item": {
          "id": "0da5f7ee-2ae3-4c51-8a90-3791eb40f757",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7e803155-298e-4e1d-bd74-f7294ea630ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "0da5f7ee-2ae3-4c51-8a90-3791eb40f757",
        "cursor": {
          "ref": "0f88c2bf-4fa0-4604-b8c3-ce5bd8ed7e91",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4d710657-21a2-450d-b747-9887872f4396"
        },
        "item": {
          "id": "0da5f7ee-2ae3-4c51-8a90-3791eb40f757",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7e803155-298e-4e1d-bd74-f7294ea630ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "ac4a4807-3390-4ad5-9307-dcd214d40185",
        "cursor": {
          "ref": "0d70dc51-fb03-4214-a4e1-f937dae38eed",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ed56d252-4b70-4583-b774-ed7737d5fe35"
        },
        "item": {
          "id": "ac4a4807-3390-4ad5-9307-dcd214d40185",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "24a2e925-e235-4551-b592-cdc8c6efb464",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "ac4a4807-3390-4ad5-9307-dcd214d40185",
        "cursor": {
          "ref": "0d70dc51-fb03-4214-a4e1-f937dae38eed",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ed56d252-4b70-4583-b774-ed7737d5fe35"
        },
        "item": {
          "id": "ac4a4807-3390-4ad5-9307-dcd214d40185",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "24a2e925-e235-4551-b592-cdc8c6efb464",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "9284798f-4a4f-4f52-a64d-db6b7a5c3790",
        "cursor": {
          "ref": "8fd83b3b-5ce3-48e0-b4a9-fd47227f8d78",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0c7565b0-372b-4a42-8144-6c1abb94b519"
        },
        "item": {
          "id": "9284798f-4a4f-4f52-a64d-db6b7a5c3790",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0d755b50-1b9f-4935-8ff0-ea2624c38a62",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "9284798f-4a4f-4f52-a64d-db6b7a5c3790",
        "cursor": {
          "ref": "8fd83b3b-5ce3-48e0-b4a9-fd47227f8d78",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0c7565b0-372b-4a42-8144-6c1abb94b519"
        },
        "item": {
          "id": "9284798f-4a4f-4f52-a64d-db6b7a5c3790",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0d755b50-1b9f-4935-8ff0-ea2624c38a62",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "23462751-4019-4f42-8d38-1a2039693bb3",
        "cursor": {
          "ref": "2370acff-d5d1-4b7b-99ea-8463a4fd7494",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "36f9c847-2176-46fa-a15a-1c2000d5e2fc"
        },
        "item": {
          "id": "23462751-4019-4f42-8d38-1a2039693bb3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "65b2ea7e-5934-4f5e-885a-ff07edbe31c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "23462751-4019-4f42-8d38-1a2039693bb3",
        "cursor": {
          "ref": "2370acff-d5d1-4b7b-99ea-8463a4fd7494",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "36f9c847-2176-46fa-a15a-1c2000d5e2fc"
        },
        "item": {
          "id": "23462751-4019-4f42-8d38-1a2039693bb3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "65b2ea7e-5934-4f5e-885a-ff07edbe31c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "bb115c91-2ed9-4231-9127-c1e4adf0f31d",
        "cursor": {
          "ref": "9276354a-3bb4-468b-b2b3-4831cc2f531c",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7128d22d-16e5-4625-bd5e-6d02e4d59bb3"
        },
        "item": {
          "id": "bb115c91-2ed9-4231-9127-c1e4adf0f31d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3b979398-58c3-4a19-be74-c76532a61a58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "bb115c91-2ed9-4231-9127-c1e4adf0f31d",
        "cursor": {
          "ref": "9276354a-3bb4-468b-b2b3-4831cc2f531c",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7128d22d-16e5-4625-bd5e-6d02e4d59bb3"
        },
        "item": {
          "id": "bb115c91-2ed9-4231-9127-c1e4adf0f31d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3b979398-58c3-4a19-be74-c76532a61a58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "7e7cbe67-8e31-4d17-aab8-32c95bb761a4",
        "cursor": {
          "ref": "36274628-1ad7-4f02-ab80-b94c51c81f44",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "233ceeb8-7057-49ab-af4a-34408922d4c9"
        },
        "item": {
          "id": "7e7cbe67-8e31-4d17-aab8-32c95bb761a4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ba1609b3-d6c3-430c-81b9-c14d9a3d7cb1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "7e7cbe67-8e31-4d17-aab8-32c95bb761a4",
        "cursor": {
          "ref": "36274628-1ad7-4f02-ab80-b94c51c81f44",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "233ceeb8-7057-49ab-af4a-34408922d4c9"
        },
        "item": {
          "id": "7e7cbe67-8e31-4d17-aab8-32c95bb761a4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ba1609b3-d6c3-430c-81b9-c14d9a3d7cb1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a6f5c3e4-fc33-48ec-87dd-72f7d287898c",
        "cursor": {
          "ref": "22f407a5-8b3f-4e27-b4d9-e4536efdbdbf",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "15262a1a-64a7-4d08-bc91-25bd6a6c512b"
        },
        "item": {
          "id": "a6f5c3e4-fc33-48ec-87dd-72f7d287898c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2ede0618-a169-490c-b5d8-9c439dca9e14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "a6f5c3e4-fc33-48ec-87dd-72f7d287898c",
        "cursor": {
          "ref": "22f407a5-8b3f-4e27-b4d9-e4536efdbdbf",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "15262a1a-64a7-4d08-bc91-25bd6a6c512b"
        },
        "item": {
          "id": "a6f5c3e4-fc33-48ec-87dd-72f7d287898c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2ede0618-a169-490c-b5d8-9c439dca9e14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "398cca66-9220-4fda-9cd5-4cb0ae660086",
        "cursor": {
          "ref": "08a1a1e2-73d9-4bef-b2ce-41c20056c544",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "31900f17-db0a-44f7-ab2a-de65a503cef7"
        },
        "item": {
          "id": "398cca66-9220-4fda-9cd5-4cb0ae660086",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "46076388-dce0-4eb0-bf69-e081003e3332",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "398cca66-9220-4fda-9cd5-4cb0ae660086",
        "cursor": {
          "ref": "08a1a1e2-73d9-4bef-b2ce-41c20056c544",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "31900f17-db0a-44f7-ab2a-de65a503cef7"
        },
        "item": {
          "id": "398cca66-9220-4fda-9cd5-4cb0ae660086",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "46076388-dce0-4eb0-bf69-e081003e3332",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "b9279d2d-9576-42fc-9237-e003db548b64",
        "cursor": {
          "ref": "18e81a72-795b-424d-b1d5-a842699bfa4f",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8ca62327-04b2-4336-b2f1-e5307f1a4d67"
        },
        "item": {
          "id": "b9279d2d-9576-42fc-9237-e003db548b64",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8cca0fa3-90b6-4cc8-8490-f08fad253268",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "b9279d2d-9576-42fc-9237-e003db548b64",
        "cursor": {
          "ref": "18e81a72-795b-424d-b1d5-a842699bfa4f",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8ca62327-04b2-4336-b2f1-e5307f1a4d67"
        },
        "item": {
          "id": "b9279d2d-9576-42fc-9237-e003db548b64",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8cca0fa3-90b6-4cc8-8490-f08fad253268",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "05580fd4-0404-41af-9f1b-2579480d969b",
        "cursor": {
          "ref": "51b6bba0-d737-4e53-a327-3c50361b5c60",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "75a879d8-a925-4c94-a7e9-91959cd2ac73"
        },
        "item": {
          "id": "05580fd4-0404-41af-9f1b-2579480d969b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "69b9eca5-3f7b-486a-96f9-6bbb6ef47316",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "05580fd4-0404-41af-9f1b-2579480d969b",
        "cursor": {
          "ref": "51b6bba0-d737-4e53-a327-3c50361b5c60",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "75a879d8-a925-4c94-a7e9-91959cd2ac73"
        },
        "item": {
          "id": "05580fd4-0404-41af-9f1b-2579480d969b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "69b9eca5-3f7b-486a-96f9-6bbb6ef47316",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "b67af4eb-022e-45b5-9fbc-51602c49f1d0",
        "cursor": {
          "ref": "b8fc3ffd-9982-4dfe-94ff-5eb6d7c27cef",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "84584f0a-af97-4ea8-83cd-5e6b4da9e04d"
        },
        "item": {
          "id": "b67af4eb-022e-45b5-9fbc-51602c49f1d0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f5ad4f32-1b6a-4676-b9e4-990828c546e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "b67af4eb-022e-45b5-9fbc-51602c49f1d0",
        "cursor": {
          "ref": "b8fc3ffd-9982-4dfe-94ff-5eb6d7c27cef",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "84584f0a-af97-4ea8-83cd-5e6b4da9e04d"
        },
        "item": {
          "id": "b67af4eb-022e-45b5-9fbc-51602c49f1d0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f5ad4f32-1b6a-4676-b9e4-990828c546e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "533eef13-3a6e-4004-a17a-5a04ee8d0a7e",
        "cursor": {
          "ref": "19532548-52cf-4942-acc5-5947f7fbe2bc",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d95264fa-ca73-414d-9454-1ffeb01eb333"
        },
        "item": {
          "id": "533eef13-3a6e-4004-a17a-5a04ee8d0a7e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1a5a2066-5f17-48f8-9899-e774e2a5c8cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "533eef13-3a6e-4004-a17a-5a04ee8d0a7e",
        "cursor": {
          "ref": "19532548-52cf-4942-acc5-5947f7fbe2bc",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d95264fa-ca73-414d-9454-1ffeb01eb333"
        },
        "item": {
          "id": "533eef13-3a6e-4004-a17a-5a04ee8d0a7e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1a5a2066-5f17-48f8-9899-e774e2a5c8cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c010aea4-1d35-425e-a569-30bc457080b0",
        "cursor": {
          "ref": "fe6968e3-634e-4171-b3c2-ea8ebb6448cf",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ad57bba0-338a-40b0-a71a-b35633f4f021"
        },
        "item": {
          "id": "c010aea4-1d35-425e-a569-30bc457080b0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "572f8966-0c4a-4a64-a429-9db492371d61",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c010aea4-1d35-425e-a569-30bc457080b0",
        "cursor": {
          "ref": "fe6968e3-634e-4171-b3c2-ea8ebb6448cf",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ad57bba0-338a-40b0-a71a-b35633f4f021"
        },
        "item": {
          "id": "c010aea4-1d35-425e-a569-30bc457080b0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "572f8966-0c4a-4a64-a429-9db492371d61",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "00aed031-5edb-4008-bd39-2aa2ebd0eec3",
        "cursor": {
          "ref": "96ed6312-1bd6-46aa-bc5f-28f76e62b5ec",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "39f03431-f58e-48af-84e0-b2c2f7a1288a"
        },
        "item": {
          "id": "00aed031-5edb-4008-bd39-2aa2ebd0eec3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a01e64e9-a715-4abc-acbb-d1b8c96732a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "00aed031-5edb-4008-bd39-2aa2ebd0eec3",
        "cursor": {
          "ref": "96ed6312-1bd6-46aa-bc5f-28f76e62b5ec",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "39f03431-f58e-48af-84e0-b2c2f7a1288a"
        },
        "item": {
          "id": "00aed031-5edb-4008-bd39-2aa2ebd0eec3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a01e64e9-a715-4abc-acbb-d1b8c96732a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1d61d1fa-10f7-4e2e-a695-f897e0084c83",
        "cursor": {
          "ref": "a543b108-370a-4b12-a1ff-98eb8e45ac93",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3d487e9d-53e3-444b-b5c6-2f1308f11e06"
        },
        "item": {
          "id": "1d61d1fa-10f7-4e2e-a695-f897e0084c83",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5f8688e3-aca9-4f8b-ba00-8afe863320c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "1d61d1fa-10f7-4e2e-a695-f897e0084c83",
        "cursor": {
          "ref": "a543b108-370a-4b12-a1ff-98eb8e45ac93",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3d487e9d-53e3-444b-b5c6-2f1308f11e06"
        },
        "item": {
          "id": "1d61d1fa-10f7-4e2e-a695-f897e0084c83",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5f8688e3-aca9-4f8b-ba00-8afe863320c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "e33631b0-2122-40dd-a846-9ce2d445789f",
        "cursor": {
          "ref": "58e5d3b9-8c4c-4a2b-a439-91b16f0ee7fa",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "10b5e08c-b10c-405f-8e1c-34e4fbfb2db0"
        },
        "item": {
          "id": "e33631b0-2122-40dd-a846-9ce2d445789f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cf376215-4fc9-4022-843f-6718736bc924",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e33631b0-2122-40dd-a846-9ce2d445789f",
        "cursor": {
          "ref": "58e5d3b9-8c4c-4a2b-a439-91b16f0ee7fa",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "10b5e08c-b10c-405f-8e1c-34e4fbfb2db0"
        },
        "item": {
          "id": "e33631b0-2122-40dd-a846-9ce2d445789f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cf376215-4fc9-4022-843f-6718736bc924",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "fcc13b04-c765-412d-bd57-adef0d196e3e",
        "cursor": {
          "ref": "49500920-c266-470d-a3a1-a6c346cc324d",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0d31bf84-be06-4c08-bd4d-327e54f9236f"
        },
        "item": {
          "id": "fcc13b04-c765-412d-bd57-adef0d196e3e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a54453d0-d0f4-4d41-9293-2ba4134f7b9c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "fcc13b04-c765-412d-bd57-adef0d196e3e",
        "cursor": {
          "ref": "49500920-c266-470d-a3a1-a6c346cc324d",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0d31bf84-be06-4c08-bd4d-327e54f9236f"
        },
        "item": {
          "id": "fcc13b04-c765-412d-bd57-adef0d196e3e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a54453d0-d0f4-4d41-9293-2ba4134f7b9c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "91c3a807-df54-4ed4-bb7d-baa7945ba5ed",
        "cursor": {
          "ref": "b379e6b0-249a-4f8d-b2db-efbe16459b03",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "579eb0aa-ee1b-444f-8bb3-c822f88547e6"
        },
        "item": {
          "id": "91c3a807-df54-4ed4-bb7d-baa7945ba5ed",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6fb8a855-3428-4b72-a426-55c8be94fe12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "91c3a807-df54-4ed4-bb7d-baa7945ba5ed",
        "cursor": {
          "ref": "b379e6b0-249a-4f8d-b2db-efbe16459b03",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "579eb0aa-ee1b-444f-8bb3-c822f88547e6"
        },
        "item": {
          "id": "91c3a807-df54-4ed4-bb7d-baa7945ba5ed",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6fb8a855-3428-4b72-a426-55c8be94fe12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "54e344e5-8df4-492f-ae30-1bf7374d5fb2",
        "cursor": {
          "ref": "bb69d7d0-bf41-4454-b123-6a2fcf5ffaf3",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "61b56dc2-bbaa-4324-afe5-3766614155a1"
        },
        "item": {
          "id": "54e344e5-8df4-492f-ae30-1bf7374d5fb2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "83c4ec90-423d-40ac-bf14-75f0cd1d7ad3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "54e344e5-8df4-492f-ae30-1bf7374d5fb2",
        "cursor": {
          "ref": "bb69d7d0-bf41-4454-b123-6a2fcf5ffaf3",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "61b56dc2-bbaa-4324-afe5-3766614155a1"
        },
        "item": {
          "id": "54e344e5-8df4-492f-ae30-1bf7374d5fb2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "83c4ec90-423d-40ac-bf14-75f0cd1d7ad3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "7746777e-f26f-46a1-b6fd-a5742c250d27",
        "cursor": {
          "ref": "6ff7e57f-2209-4976-b510-4e2084f9fcce",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "568cbc36-2c97-42fa-860d-52dc25e36c38"
        },
        "item": {
          "id": "7746777e-f26f-46a1-b6fd-a5742c250d27",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3f84e29f-1bdf-426c-a3b4-ab4455dc1e4d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7746777e-f26f-46a1-b6fd-a5742c250d27",
        "cursor": {
          "ref": "6ff7e57f-2209-4976-b510-4e2084f9fcce",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "568cbc36-2c97-42fa-860d-52dc25e36c38"
        },
        "item": {
          "id": "7746777e-f26f-46a1-b6fd-a5742c250d27",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3f84e29f-1bdf-426c-a3b4-ab4455dc1e4d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "93e33394-3bd6-467f-97be-395377efb91f",
        "cursor": {
          "ref": "e41d8a29-aa39-4f18-83fe-9011a40bdc45",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "43575e38-033e-4511-83b0-4b6d91aec964"
        },
        "item": {
          "id": "93e33394-3bd6-467f-97be-395377efb91f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0301d059-e2c2-4af9-b63c-9cc2407a79c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "93e33394-3bd6-467f-97be-395377efb91f",
        "cursor": {
          "ref": "e41d8a29-aa39-4f18-83fe-9011a40bdc45",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "43575e38-033e-4511-83b0-4b6d91aec964"
        },
        "item": {
          "id": "93e33394-3bd6-467f-97be-395377efb91f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0301d059-e2c2-4af9-b63c-9cc2407a79c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "b1ed2738-1fbd-4fbe-b691-09eb22cfc215",
        "cursor": {
          "ref": "1e877da5-9d3b-4dfa-86b1-a0160712f517",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5da30b13-d114-4f85-b2a9-7010793f651e"
        },
        "item": {
          "id": "b1ed2738-1fbd-4fbe-b691-09eb22cfc215",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "eb16b6d1-6b28-4d57-bc89-057cb0d18d27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "b1ed2738-1fbd-4fbe-b691-09eb22cfc215",
        "cursor": {
          "ref": "1e877da5-9d3b-4dfa-86b1-a0160712f517",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5da30b13-d114-4f85-b2a9-7010793f651e"
        },
        "item": {
          "id": "b1ed2738-1fbd-4fbe-b691-09eb22cfc215",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "eb16b6d1-6b28-4d57-bc89-057cb0d18d27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "5304d709-18f4-47fb-838c-77ff972b8382",
        "cursor": {
          "ref": "49e11c86-8afd-4a39-8c75-468025f8bbc8",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6039e41d-2a6c-4805-ade9-ac7117509caf"
        },
        "item": {
          "id": "5304d709-18f4-47fb-838c-77ff972b8382",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "64bc9a57-b446-43f0-9082-6c770da7d6c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "5304d709-18f4-47fb-838c-77ff972b8382",
        "cursor": {
          "ref": "49e11c86-8afd-4a39-8c75-468025f8bbc8",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6039e41d-2a6c-4805-ade9-ac7117509caf"
        },
        "item": {
          "id": "5304d709-18f4-47fb-838c-77ff972b8382",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "64bc9a57-b446-43f0-9082-6c770da7d6c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "49f4002f-3c59-4cf0-973e-b616bb742b86",
        "cursor": {
          "ref": "8afc5818-2baf-43d2-9bf0-4f5f86be5a42",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f6dc7e75-b971-4883-ba63-e2096c83541e"
        },
        "item": {
          "id": "49f4002f-3c59-4cf0-973e-b616bb742b86",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e26bd7cb-aca4-457a-90b4-355e3ca9bc8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "49f4002f-3c59-4cf0-973e-b616bb742b86",
        "cursor": {
          "ref": "8afc5818-2baf-43d2-9bf0-4f5f86be5a42",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f6dc7e75-b971-4883-ba63-e2096c83541e"
        },
        "item": {
          "id": "49f4002f-3c59-4cf0-973e-b616bb742b86",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e26bd7cb-aca4-457a-90b4-355e3ca9bc8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "48e59303-c1b0-42ee-be76-0dce9e38cbcd",
        "cursor": {
          "ref": "444e18d0-ceca-4981-9579-ff58be1636fd",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8c0e6487-8e36-4aed-8274-f05e2ff48df8"
        },
        "item": {
          "id": "48e59303-c1b0-42ee-be76-0dce9e38cbcd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "137a195d-ffb5-4f06-a972-880e990cb922",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "48e59303-c1b0-42ee-be76-0dce9e38cbcd",
        "cursor": {
          "ref": "444e18d0-ceca-4981-9579-ff58be1636fd",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8c0e6487-8e36-4aed-8274-f05e2ff48df8"
        },
        "item": {
          "id": "48e59303-c1b0-42ee-be76-0dce9e38cbcd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "137a195d-ffb5-4f06-a972-880e990cb922",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "b7151d7e-644a-452f-b56b-8d25b2628655",
        "cursor": {
          "ref": "777c9038-fb9e-4dde-ba6e-438260be83c4",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e4f21170-651e-4c5b-83c5-6779789371b4"
        },
        "item": {
          "id": "b7151d7e-644a-452f-b56b-8d25b2628655",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8d39fc08-6ae8-4be9-90b8-ca30dd6a4bf3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "b7151d7e-644a-452f-b56b-8d25b2628655",
        "cursor": {
          "ref": "777c9038-fb9e-4dde-ba6e-438260be83c4",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e4f21170-651e-4c5b-83c5-6779789371b4"
        },
        "item": {
          "id": "b7151d7e-644a-452f-b56b-8d25b2628655",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8d39fc08-6ae8-4be9-90b8-ca30dd6a4bf3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "beb72750-1b18-4c94-ae14-089ddb59f096",
        "cursor": {
          "ref": "dc0c6c0d-6d59-4a81-a7f7-813368556ec6",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d05ac528-9dbe-46b2-a9f8-2bfddfbc7c93"
        },
        "item": {
          "id": "beb72750-1b18-4c94-ae14-089ddb59f096",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ed413f8d-ff70-4654-bd10-437fec6a968c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "beb72750-1b18-4c94-ae14-089ddb59f096",
        "cursor": {
          "ref": "dc0c6c0d-6d59-4a81-a7f7-813368556ec6",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d05ac528-9dbe-46b2-a9f8-2bfddfbc7c93"
        },
        "item": {
          "id": "beb72750-1b18-4c94-ae14-089ddb59f096",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ed413f8d-ff70-4654-bd10-437fec6a968c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "a2c35bf6-d105-46ca-a269-89c71e7b0a1e",
        "cursor": {
          "ref": "10aabed5-1100-4826-aea6-09ce760d2796",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0961a4dc-e4e8-469d-b82e-0ddaa2ba7194"
        },
        "item": {
          "id": "a2c35bf6-d105-46ca-a269-89c71e7b0a1e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "63661b17-cebb-430c-ba11-79f434fb570d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "a2c35bf6-d105-46ca-a269-89c71e7b0a1e",
        "cursor": {
          "ref": "10aabed5-1100-4826-aea6-09ce760d2796",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0961a4dc-e4e8-469d-b82e-0ddaa2ba7194"
        },
        "item": {
          "id": "a2c35bf6-d105-46ca-a269-89c71e7b0a1e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "63661b17-cebb-430c-ba11-79f434fb570d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "91b7a2af-2229-4796-9ced-5db8d770cfd8",
        "cursor": {
          "ref": "bc8786e7-f350-4652-8c26-761564974e44",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4226f10b-3ed1-4842-b4f0-7f1ba4b7c072"
        },
        "item": {
          "id": "91b7a2af-2229-4796-9ced-5db8d770cfd8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8b864cb4-4558-40e5-ab26-90fb9c4d3f05",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "91b7a2af-2229-4796-9ced-5db8d770cfd8",
        "cursor": {
          "ref": "bc8786e7-f350-4652-8c26-761564974e44",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4226f10b-3ed1-4842-b4f0-7f1ba4b7c072"
        },
        "item": {
          "id": "91b7a2af-2229-4796-9ced-5db8d770cfd8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8b864cb4-4558-40e5-ab26-90fb9c4d3f05",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "68830a52-8ffe-4fb3-a674-5f149a75044d",
        "cursor": {
          "ref": "6f8bf928-70d3-49de-a95f-9a5e85529a3d",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f3e0a1f9-d80e-4188-9e7b-4d3c7080ecdf"
        },
        "item": {
          "id": "68830a52-8ffe-4fb3-a674-5f149a75044d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "395cfff0-6724-4ce8-9b73-2dec29e41252",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "68830a52-8ffe-4fb3-a674-5f149a75044d",
        "cursor": {
          "ref": "6f8bf928-70d3-49de-a95f-9a5e85529a3d",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f3e0a1f9-d80e-4188-9e7b-4d3c7080ecdf"
        },
        "item": {
          "id": "68830a52-8ffe-4fb3-a674-5f149a75044d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "395cfff0-6724-4ce8-9b73-2dec29e41252",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "12e56d39-ccb3-4bda-9f52-9add9209b0cc",
        "cursor": {
          "ref": "1eb8310a-bdb9-4a1a-a894-eefaf1f94e84",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1dc10220-1768-498e-b479-db3e85209ac9"
        },
        "item": {
          "id": "12e56d39-ccb3-4bda-9f52-9add9209b0cc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fa52624f-034d-4c01-960c-44399512e953",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "12e56d39-ccb3-4bda-9f52-9add9209b0cc",
        "cursor": {
          "ref": "1eb8310a-bdb9-4a1a-a894-eefaf1f94e84",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1dc10220-1768-498e-b479-db3e85209ac9"
        },
        "item": {
          "id": "12e56d39-ccb3-4bda-9f52-9add9209b0cc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fa52624f-034d-4c01-960c-44399512e953",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "bb781af6-099f-41e6-9b03-72c849c938ef",
        "cursor": {
          "ref": "07be6314-e006-4fb1-b28d-29f58277d8b0",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2b568617-9e1a-485a-b64d-79e918e66430"
        },
        "item": {
          "id": "bb781af6-099f-41e6-9b03-72c849c938ef",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "47417cc5-cf77-4f93-8cdc-fe8cdd090d7e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "bb781af6-099f-41e6-9b03-72c849c938ef",
        "cursor": {
          "ref": "07be6314-e006-4fb1-b28d-29f58277d8b0",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2b568617-9e1a-485a-b64d-79e918e66430"
        },
        "item": {
          "id": "bb781af6-099f-41e6-9b03-72c849c938ef",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "47417cc5-cf77-4f93-8cdc-fe8cdd090d7e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "200c2489-3b86-4e45-9d02-d4e9e4a23df9",
        "cursor": {
          "ref": "16561bb8-c510-45a4-bf1f-6fb1d42b1274",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "11cf384a-cd4f-40ed-ab7b-aedfa87d3220"
        },
        "item": {
          "id": "200c2489-3b86-4e45-9d02-d4e9e4a23df9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "800a51f4-80e2-42be-bf85-8640cf91f012",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "200c2489-3b86-4e45-9d02-d4e9e4a23df9",
        "cursor": {
          "ref": "16561bb8-c510-45a4-bf1f-6fb1d42b1274",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "11cf384a-cd4f-40ed-ab7b-aedfa87d3220"
        },
        "item": {
          "id": "200c2489-3b86-4e45-9d02-d4e9e4a23df9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "800a51f4-80e2-42be-bf85-8640cf91f012",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "5d300d83-275e-4db6-8096-7c6616399e15",
        "cursor": {
          "ref": "cc0fcaa2-6135-4e4d-938e-814ba8982b46",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f99932e5-e8d7-465c-bfc7-01488c1032c3"
        },
        "item": {
          "id": "5d300d83-275e-4db6-8096-7c6616399e15",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "170b79e6-3ba8-4040-9a2b-ead546e841a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "5d300d83-275e-4db6-8096-7c6616399e15",
        "cursor": {
          "ref": "cc0fcaa2-6135-4e4d-938e-814ba8982b46",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f99932e5-e8d7-465c-bfc7-01488c1032c3"
        },
        "item": {
          "id": "5d300d83-275e-4db6-8096-7c6616399e15",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "170b79e6-3ba8-4040-9a2b-ead546e841a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "66d4bf6e-4ae7-47e7-9d2e-9892121010a1",
        "cursor": {
          "ref": "e3261fc2-734a-41d3-ae15-da12089c30ee",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "90f5aa09-9c33-4e6d-8d4b-6db6f58c19a6"
        },
        "item": {
          "id": "66d4bf6e-4ae7-47e7-9d2e-9892121010a1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6e419a1d-5ec0-4b36-bb5e-ecee84f70686",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "66d4bf6e-4ae7-47e7-9d2e-9892121010a1",
        "cursor": {
          "ref": "e3261fc2-734a-41d3-ae15-da12089c30ee",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "90f5aa09-9c33-4e6d-8d4b-6db6f58c19a6"
        },
        "item": {
          "id": "66d4bf6e-4ae7-47e7-9d2e-9892121010a1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6e419a1d-5ec0-4b36-bb5e-ecee84f70686",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "be9271d2-bbf4-4b3b-8a62-404e23a2fe2d",
        "cursor": {
          "ref": "6bc1af6a-345d-4344-8d01-3896501a8ecd",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9cf49d60-a3c9-4771-b614-7e5c6cb22377"
        },
        "item": {
          "id": "be9271d2-bbf4-4b3b-8a62-404e23a2fe2d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3e667533-27d8-4e65-a864-d5451f7c9312",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "be9271d2-bbf4-4b3b-8a62-404e23a2fe2d",
        "cursor": {
          "ref": "6bc1af6a-345d-4344-8d01-3896501a8ecd",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9cf49d60-a3c9-4771-b614-7e5c6cb22377"
        },
        "item": {
          "id": "be9271d2-bbf4-4b3b-8a62-404e23a2fe2d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3e667533-27d8-4e65-a864-d5451f7c9312",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ea9ceb44-0155-4b20-84d0-c2ad10b33891",
        "cursor": {
          "ref": "ed75a1c9-b0fe-48fa-a33f-1e269faa57ad",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "84616114-dadf-45de-8656-0011d869aa37"
        },
        "item": {
          "id": "ea9ceb44-0155-4b20-84d0-c2ad10b33891",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "95aa02d0-b711-44f0-a333-0b94e3f93829",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "ea9ceb44-0155-4b20-84d0-c2ad10b33891",
        "cursor": {
          "ref": "ed75a1c9-b0fe-48fa-a33f-1e269faa57ad",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "84616114-dadf-45de-8656-0011d869aa37"
        },
        "item": {
          "id": "ea9ceb44-0155-4b20-84d0-c2ad10b33891",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "95aa02d0-b711-44f0-a333-0b94e3f93829",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2d81fc48-5a0d-4e84-8f67-c029705ad14d",
        "cursor": {
          "ref": "a10ebd7c-d4ec-4574-b4f4-da5407043cd9",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0a748c60-bc9a-4d32-b667-8282d7165036"
        },
        "item": {
          "id": "2d81fc48-5a0d-4e84-8f67-c029705ad14d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dfd81311-09b2-4560-9c98-b7a34d55fce0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "2d81fc48-5a0d-4e84-8f67-c029705ad14d",
        "cursor": {
          "ref": "a10ebd7c-d4ec-4574-b4f4-da5407043cd9",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0a748c60-bc9a-4d32-b667-8282d7165036"
        },
        "item": {
          "id": "2d81fc48-5a0d-4e84-8f67-c029705ad14d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dfd81311-09b2-4560-9c98-b7a34d55fce0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c7942cd6-963e-4f35-8ec6-71f7f2586cc5",
        "cursor": {
          "ref": "67d2ec9e-5030-4370-96aa-fa4e0ff8236d",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "db0aa821-3c2b-4d71-aa5e-4c7dee0d9e46"
        },
        "item": {
          "id": "c7942cd6-963e-4f35-8ec6-71f7f2586cc5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "63092bbf-df32-446f-8efa-addf86643a16",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c7942cd6-963e-4f35-8ec6-71f7f2586cc5",
        "cursor": {
          "ref": "67d2ec9e-5030-4370-96aa-fa4e0ff8236d",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "db0aa821-3c2b-4d71-aa5e-4c7dee0d9e46"
        },
        "item": {
          "id": "c7942cd6-963e-4f35-8ec6-71f7f2586cc5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "63092bbf-df32-446f-8efa-addf86643a16",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ab764220-8b5b-4866-99c4-c359cb8ecca5",
        "cursor": {
          "ref": "62a62fd7-4bbf-477f-8915-5e0479abcf74",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b19b7c10-6e87-43ea-9aa1-c7a4f1a409f0"
        },
        "item": {
          "id": "ab764220-8b5b-4866-99c4-c359cb8ecca5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ac9bc10d-a537-470c-ba80-c0af425bf2ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "ab764220-8b5b-4866-99c4-c359cb8ecca5",
        "cursor": {
          "ref": "62a62fd7-4bbf-477f-8915-5e0479abcf74",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b19b7c10-6e87-43ea-9aa1-c7a4f1a409f0"
        },
        "item": {
          "id": "ab764220-8b5b-4866-99c4-c359cb8ecca5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ac9bc10d-a537-470c-ba80-c0af425bf2ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "921047aa-2ae8-4bc9-95f7-9aa72fd88f55",
        "cursor": {
          "ref": "7f823517-a4ee-4dc4-beaf-fa36f562cb14",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f4543b86-c378-4f4c-b266-a6b6204a26e4"
        },
        "item": {
          "id": "921047aa-2ae8-4bc9-95f7-9aa72fd88f55",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f62b8154-529e-4634-a4e9-f656a4d3d9c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "921047aa-2ae8-4bc9-95f7-9aa72fd88f55",
        "cursor": {
          "ref": "7f823517-a4ee-4dc4-beaf-fa36f562cb14",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f4543b86-c378-4f4c-b266-a6b6204a26e4"
        },
        "item": {
          "id": "921047aa-2ae8-4bc9-95f7-9aa72fd88f55",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f62b8154-529e-4634-a4e9-f656a4d3d9c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "59d0c243-8207-40c0-bbcc-c9ad43415473",
        "cursor": {
          "ref": "bb902dfc-56f6-4455-a36f-d997306239f9",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "eba0e396-eae6-4059-9f81-6c418ea236e5"
        },
        "item": {
          "id": "59d0c243-8207-40c0-bbcc-c9ad43415473",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f80df51f-3c66-49b8-a1a3-78cfd86b8dfd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "59d0c243-8207-40c0-bbcc-c9ad43415473",
        "cursor": {
          "ref": "bb902dfc-56f6-4455-a36f-d997306239f9",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "eba0e396-eae6-4059-9f81-6c418ea236e5"
        },
        "item": {
          "id": "59d0c243-8207-40c0-bbcc-c9ad43415473",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f80df51f-3c66-49b8-a1a3-78cfd86b8dfd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "2d95af27-71f1-4ef1-9e30-10b5cca5d94c",
        "cursor": {
          "ref": "8ac22f2e-5868-4a39-bd51-311d0cac5134",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9c6ad13d-8b43-413c-9cf8-7078f45c43b9"
        },
        "item": {
          "id": "2d95af27-71f1-4ef1-9e30-10b5cca5d94c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "20906de1-0451-4f31-be34-748887fdefb7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "2d95af27-71f1-4ef1-9e30-10b5cca5d94c",
        "cursor": {
          "ref": "8ac22f2e-5868-4a39-bd51-311d0cac5134",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9c6ad13d-8b43-413c-9cf8-7078f45c43b9"
        },
        "item": {
          "id": "2d95af27-71f1-4ef1-9e30-10b5cca5d94c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "20906de1-0451-4f31-be34-748887fdefb7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "d44ccc72-b50f-4d0a-a623-0b0e083c881d",
        "cursor": {
          "ref": "fdd054f2-e44f-4fae-81de-629f71b6fa82",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3881fc89-db00-401c-8d8a-5168ac800110"
        },
        "item": {
          "id": "d44ccc72-b50f-4d0a-a623-0b0e083c881d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6daf22fa-4999-4837-b306-f6aa5d7cc311",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "d44ccc72-b50f-4d0a-a623-0b0e083c881d",
        "cursor": {
          "ref": "fdd054f2-e44f-4fae-81de-629f71b6fa82",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3881fc89-db00-401c-8d8a-5168ac800110"
        },
        "item": {
          "id": "d44ccc72-b50f-4d0a-a623-0b0e083c881d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6daf22fa-4999-4837-b306-f6aa5d7cc311",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "7ab162b3-1e6b-4548-8dba-0dc879e71998",
        "cursor": {
          "ref": "dab6f952-caca-4420-9f91-9865fe8f141f",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "065dc36b-1521-4ae3-81c5-6fa6436ba749"
        },
        "item": {
          "id": "7ab162b3-1e6b-4548-8dba-0dc879e71998",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7ab162b3-1e6b-4548-8dba-0dc879e71998",
        "cursor": {
          "ref": "dab6f952-caca-4420-9f91-9865fe8f141f",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "065dc36b-1521-4ae3-81c5-6fa6436ba749"
        },
        "item": {
          "id": "7ab162b3-1e6b-4548-8dba-0dc879e71998",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7ab162b3-1e6b-4548-8dba-0dc879e71998",
        "cursor": {
          "ref": "dab6f952-caca-4420-9f91-9865fe8f141f",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "065dc36b-1521-4ae3-81c5-6fa6436ba749"
        },
        "item": {
          "id": "7ab162b3-1e6b-4548-8dba-0dc879e71998",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "66ec5a8a-aea8-4ccb-a303-63e675dc6b97",
        "cursor": {
          "ref": "05b4fde2-bf1e-4a8c-b6e9-578cda5abd2e",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e5b91ec3-9306-43ab-bf5f-24184b951e5e"
        },
        "item": {
          "id": "66ec5a8a-aea8-4ccb-a303-63e675dc6b97",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "66ec5a8a-aea8-4ccb-a303-63e675dc6b97",
        "cursor": {
          "ref": "05b4fde2-bf1e-4a8c-b6e9-578cda5abd2e",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e5b91ec3-9306-43ab-bf5f-24184b951e5e"
        },
        "item": {
          "id": "66ec5a8a-aea8-4ccb-a303-63e675dc6b97",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "66ec5a8a-aea8-4ccb-a303-63e675dc6b97",
        "cursor": {
          "ref": "05b4fde2-bf1e-4a8c-b6e9-578cda5abd2e",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e5b91ec3-9306-43ab-bf5f-24184b951e5e"
        },
        "item": {
          "id": "66ec5a8a-aea8-4ccb-a303-63e675dc6b97",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8583a3d6-cbe5-46d4-93d1-3ea7b1398287",
        "cursor": {
          "ref": "194e2444-b1c3-41a6-a3da-ac9876343bad",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9780bfc0-5e49-4701-8303-0eee90c1638d"
        },
        "item": {
          "id": "8583a3d6-cbe5-46d4-93d1-3ea7b1398287",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8583a3d6-cbe5-46d4-93d1-3ea7b1398287",
        "cursor": {
          "ref": "194e2444-b1c3-41a6-a3da-ac9876343bad",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9780bfc0-5e49-4701-8303-0eee90c1638d"
        },
        "item": {
          "id": "8583a3d6-cbe5-46d4-93d1-3ea7b1398287",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8583a3d6-cbe5-46d4-93d1-3ea7b1398287",
        "cursor": {
          "ref": "194e2444-b1c3-41a6-a3da-ac9876343bad",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9780bfc0-5e49-4701-8303-0eee90c1638d"
        },
        "item": {
          "id": "8583a3d6-cbe5-46d4-93d1-3ea7b1398287",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "70fc2fb0-b573-41ce-9e7c-92780c2e2c3e",
        "cursor": {
          "ref": "5d2d6f16-6a1b-458e-bcb1-d2477c392f47",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9cda55d7-baba-4aac-bd72-2baa41e40ea1"
        },
        "item": {
          "id": "70fc2fb0-b573-41ce-9e7c-92780c2e2c3e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "70fc2fb0-b573-41ce-9e7c-92780c2e2c3e",
        "cursor": {
          "ref": "5d2d6f16-6a1b-458e-bcb1-d2477c392f47",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9cda55d7-baba-4aac-bd72-2baa41e40ea1"
        },
        "item": {
          "id": "70fc2fb0-b573-41ce-9e7c-92780c2e2c3e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "70fc2fb0-b573-41ce-9e7c-92780c2e2c3e",
        "cursor": {
          "ref": "5d2d6f16-6a1b-458e-bcb1-d2477c392f47",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9cda55d7-baba-4aac-bd72-2baa41e40ea1"
        },
        "item": {
          "id": "70fc2fb0-b573-41ce-9e7c-92780c2e2c3e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "0d68ccb7-b863-4d65-b5f7-0200c7024d2e",
        "cursor": {
          "ref": "8c2f16f2-e96b-45d1-a78a-96460fe9f1cc",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2d37f6df-108c-4c59-bfdd-fb6d9a8caaf6"
        },
        "item": {
          "id": "0d68ccb7-b863-4d65-b5f7-0200c7024d2e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "0d68ccb7-b863-4d65-b5f7-0200c7024d2e",
        "cursor": {
          "ref": "8c2f16f2-e96b-45d1-a78a-96460fe9f1cc",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2d37f6df-108c-4c59-bfdd-fb6d9a8caaf6"
        },
        "item": {
          "id": "0d68ccb7-b863-4d65-b5f7-0200c7024d2e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "0d68ccb7-b863-4d65-b5f7-0200c7024d2e",
        "cursor": {
          "ref": "8c2f16f2-e96b-45d1-a78a-96460fe9f1cc",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2d37f6df-108c-4c59-bfdd-fb6d9a8caaf6"
        },
        "item": {
          "id": "0d68ccb7-b863-4d65-b5f7-0200c7024d2e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ecfe348d-0b22-47a8-87b4-227a2a270628",
        "cursor": {
          "ref": "b2e28434-bacb-4589-bf0e-61faafa165a8",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a300109c-a61b-4cda-a985-3d5c0e589b2e"
        },
        "item": {
          "id": "ecfe348d-0b22-47a8-87b4-227a2a270628",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "ecfe348d-0b22-47a8-87b4-227a2a270628",
        "cursor": {
          "ref": "b2e28434-bacb-4589-bf0e-61faafa165a8",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a300109c-a61b-4cda-a985-3d5c0e589b2e"
        },
        "item": {
          "id": "ecfe348d-0b22-47a8-87b4-227a2a270628",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "ecfe348d-0b22-47a8-87b4-227a2a270628",
        "cursor": {
          "ref": "b2e28434-bacb-4589-bf0e-61faafa165a8",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a300109c-a61b-4cda-a985-3d5c0e589b2e"
        },
        "item": {
          "id": "ecfe348d-0b22-47a8-87b4-227a2a270628",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}