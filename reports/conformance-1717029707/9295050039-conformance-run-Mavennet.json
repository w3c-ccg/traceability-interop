{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7bb98ace-33c2-4f09-b4c2-39c5bc7d6073",
        "name": "Clear Cache",
        "item": [
          {
            "id": "17423270-2081-4c09-9a0f-7d2036bcdcb9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1dacdd6e-121e-4cc0-9c75-c9510821912e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "aecd03c2-1209-41e3-bcb8-96b5242eccf5"
                }
              }
            ]
          },
          {
            "id": "7fa7346d-3c67-49c2-b8da-f7058eabf8bc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4278732e-0015-4a61-bc17-48985430db2d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "aaab9f6f-0af2-4ec1-92cd-5588bfc6e5be"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b490a9f0-a799-420b-875a-db6a5a90670e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "857b897f-3ec9-4659-aa48-0936f3641385",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8a6a5684-4e68-45aa-bc4a-2ffbdcdaf116",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d42a3f89-475b-41b8-aa21-400a5d7b4d38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f1d6b90-3e44-46a7-9717-09c95ca54a50"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cd6525d6-d1f3-454b-b624-26f5510e386b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c463b498-c5db-4658-a2ac-83f82f3f5040"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c7c51a58-06a4-4fde-af47-8416f0977e8b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87cfd4fc-add1-47d3-9190-8a0fa776b315"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61594213-85f2-4f1a-b0cd-120092c56ffd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0a25c9c1-03c7-46f4-b9e3-4fedc69d99d2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "239755e4-fd33-49f8-9d56-0fe5333c6f8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a12ee08a-5eb0-461b-bee6-1dd39c3d2264"
            }
          }
        ]
      },
      {
        "id": "d22fd283-0ce9-4bf5-9afd-77ca2bba3175",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c2e2491c-e656-4b43-b7bb-292c7b1e6612",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09be4329-2154-4165-a85c-dc30b09fa452",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4d5a8d2e-e738-4105-9ef3-c34297ff7e76",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed47dc0-8d13-463e-b6ad-327e279a5ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1e0f67f-e2cc-4801-8ffc-c13a338f0016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e13835a-2780-4c4d-90ec-db2bf890bc3c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e06b17a-2ddc-4919-8954-f47200ec7a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5671c2c8-85c5-422f-b2ef-39f553e510f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49faf08-ebc7-46a6-9550-54cfc5963115",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bd8706-b9b6-4de4-a7f6-e3dd3f40edbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f87a6c78-fbd4-4507-ab55-a611a2459477"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "70ec73d6-2374-409a-9e07-7ee63eb63240",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "820c6ff3-81d0-4efa-8f93-f6becb302402",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfd44fe-a44d-4f96-a991-eed09cdcc61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "294e21aa-bd96-452c-87fe-0ca73e92ddb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010c3f10-e83f-4828-bd41-2498064b8ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1fac1f-219c-4523-8ab3-a2096c2cf0c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9e3aafb1-2c6e-4f95-b3fa-7aac3fe81f60",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bbe04190-ab9a-42f3-a101-0f1b31ef0a46",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d3a3efe-3cf5-47c8-9995-1b02c52345f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e4aac192-e848-4c61-b4c0-6ddc9096a182"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06025a2e-003a-4f1d-9878-9b971ad002f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "09f2766e-672a-4a10-8be5-554980820661"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e132b0ac-48a1-4075-9afc-00d29af90a07",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d428caeb-51b4-42b2-ab0c-5e1aacecd72b"
            }
          }
        ]
      },
      {
        "id": "a3c2c4c2-3155-4877-871c-d0aa3dea0d45",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8337cfe8-7ba0-4a74-ad96-8c7f8b91241a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2925679-3755-47cb-abe7-8e4c9ff63562",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ca895f01-37fc-4700-83fd-81b0138c529d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f4db97-54e9-49bb-957f-14bdf12176f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ae73ea-0935-418d-9224-460c6da7b5af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c4b14c-2863-4cda-9b46-586c5ab0e0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07c1eaae-2cbd-4d70-8745-ddb3ab55c770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fa67cc-37c0-418c-929c-d308e428e409",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c6db12-73b5-47b0-b6be-b517757c6c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608c70eb-129a-4db3-bffe-f9bd2b330d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee32285b-038e-496c-8904-c0dabcf307a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e55e2b8c-51b0-43d4-ba68-4c9a085aa991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749f23d2-60e4-4c73-b212-0dfb13e818b2",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c73d66-83b3-41c6-a381-01806dc02321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ed6b24-1cf4-47c3-b2fd-40ff526b8be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092334e6-2ac9-4708-9d91-92f623aeb4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc636901-3419-4ea0-89b4-64420671192f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e1b6ad-721c-4b51-8b4f-79ea1c51a73a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff9a89c-dbf5-4955-8826-9311c6cd6de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e981a909-25d4-47bb-8f0a-f56334eb14ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e96daed-facc-4772-a6b6-5d37a14a5b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9420daa-a542-4dd2-ac9b-f705c8916cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7b6f03-a6e2-4058-b677-2379a4689313",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb0f506-1b32-41f4-b3e2-337139ffefd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bccb117-e40a-403a-b687-9423be8a553f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4afd74d-9505-417e-9434-d4571e1ac5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82d33560-da4d-4eaa-a370-3d9e90315eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f149cd28-110f-4008-bb65-5fa6d2b97022",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3796c6d-df50-4c90-bd84-ad91370e42be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442a0bdd-7336-4bbe-a576-59252ad3155b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167f62d4-2996-49cb-9b2b-daf69962deda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3bbebc7-108c-4020-b9b3-e8ce1fb01e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802b8def-1b6d-43c9-9455-e418769f9187",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad3e606-d092-4daa-944e-59d66d91ae88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e662d22-3b29-4ce7-969b-bf9e5fc9e739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4447c0-076c-4712-8d84-e9c6718bc9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "981d773b-9c8e-4e0c-9e3e-d456b1756975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab07f762-9e70-4a41-aa66-1df8ec433f60",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a082f8a-57aa-45d3-bdce-076fdf703ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce198db-1ada-4872-8199-b43f95bc030b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d0554a-c02b-4b2b-963a-361d34da9442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c4276a5-c7e0-4ae7-ae7c-539d0fe7fc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87274d3-7351-472f-b8ad-57baf6dfc61d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224da7ad-4d08-444c-a531-94e5d0bf6305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210f76ba-c5f4-4eef-8d9c-1ca12ec55c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e19fb9a-a21d-45ad-9c75-86cbbd724733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed8276ab-8064-45a2-aa61-88c9276fa22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9559cb1-7c33-4d15-9c4e-ff487997d72c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1cd4d0-fabb-47db-b418-079f06968910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866a3a50-28b9-450f-bd73-14c0d300f916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2cf305-d293-40bb-9e22-a200ef3e52bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94b77e99-e596-4038-a092-108519720433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447fa8d1-8949-4b0f-ad15-736e35e71f43",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058c2625-4335-4ebf-ab33-46ab87df9e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "613491e1-8323-4bbd-aaa8-780da92f4213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d1e5db-4ccb-4022-971a-889d7b04485a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e10d9e6c-62e6-40cc-a855-cf252487f334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959e639f-c217-436c-904b-d85b3c7254ad",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf27a464-a62e-4d96-a086-2eb4355fa63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32bf290a-e50e-4de8-8484-e35a79b92843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c14f0c4-e423-4152-a51d-d4fa8f49b8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "355ac649-b2d4-4d07-b804-4ef776223afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d5a2d7-d1a9-4c1b-8cc8-b134a5f0c8fe",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d32b157-c07d-4471-99ce-c63604f07988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb41cb1-32ef-4ffa-8e42-64c28c83b196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987a4fb3-5861-4a65-a27a-0c9f1e323bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77c42d1d-822d-40bf-ba37-b16825adbbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b37185-4531-48e6-83c3-e7c57d6d6dfc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4242e4-b8c6-43fa-ac0e-fb12896e6ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbeebab-9d1d-4445-a64d-590b4b4d9b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6d20c8-3011-4960-beca-47cfa7d997d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65cdb782-f1ab-4c60-a6fc-eb9cdce704de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f220c5ef-cb0e-4d34-bfd7-1be009381dfb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b47b29-7c83-484b-9f14-1dd400df862a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6027d831-5ebf-4ded-880b-42fb877fac05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f989f4e8-a9d6-4189-8ae8-2ddd3bfe1f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0228c32a-1adc-412d-94ae-291f696b317d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b893c78-6ab4-499c-9f2c-036b96a3a037",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc84a8f-1875-4501-8edb-53ca54ae0d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9527a7c5-65d4-4ac9-878a-97e0680c361b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a80b6c-4895-4324-840d-de0f17b63932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c63f7ee-3bd6-42a8-9a34-45532c463a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b188fd26-f45c-4d7c-9584-4157277fe4c2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfe8a32-5763-4be5-8c9a-86bf286d2c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43aea7b-f7b1-4d2b-aac5-625bb82615e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd7b6b1-f224-4b76-b752-85c18bd8e411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a53b5baa-da40-46ad-9775-fbc57ef90921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca9fb44-b7d4-4a25-9ca8-999e94244607",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12798d9-fbf0-46de-b23b-d0b36a18271a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a29428f-711f-4f11-a58d-5c7a717c4a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289edbcb-3230-4b37-9849-3fb97e94bcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "af35c51f-bbd1-4e8a-9ec9-d33b2aa6ccb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bb29dd-e2d1-45b2-a186-146ce0f81a7d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884c609f-587e-4816-b000-6054984ab5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf4feb4-0c1d-45a6-bd54-8adb88c029f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7510395-c31f-4f8a-b7e7-2a8309371928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c05f8334-75fe-4732-b61d-0f6f69902498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bbeee4-4bbe-4e8e-af30-6ace776196c2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9d5e0f-f449-4724-982c-7a8da3794652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49add2e0-3441-4058-9fdc-aec041320ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1403c057-fc43-4aac-9ee9-8581993f3f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea0fd4c-147a-44a1-b00c-34c1619d0bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653b7109-6a4c-4656-b94e-9030a6957999",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a1a0bd-4e13-4c9b-9747-687ce034b6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af78b346-1d18-4140-b292-2590435cfcce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e17c80a-4dab-4428-8e70-1b978f89b39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "174dbd0e-107e-49ee-bf6e-a9e43a8e9a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d6c3b5-8e0c-463b-9a7a-b77c20dfc880",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d04b251-1b91-470a-a944-c3c15aadc145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb2f47f4-1889-49cf-9f2a-52a535d86a2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3770607-9a65-48ba-b502-116ba878e6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d65d0f92-6a40-41d1-9f5d-0e37c4ee5679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98346748-4baa-44d0-ba49-f0f5e76f644e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b799974e-c177-4565-b261-2b6d998b4a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70daaf9-fb1c-4376-a1cb-838dd8dede1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e11d8c-5edf-4cea-82c5-7a096473da8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d382ac2-39b7-4243-92f5-ac71083c5c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da700b4e-4642-4140-b687-53bbb2b9ede2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc76af6d-004c-4cdc-9522-73680ba0566f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80a9810-40c1-4472-b244-955405e72b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d47c26-115d-4dfd-a500-aafd311ddfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a3ba02-b47b-41ee-8548-60d5cabfb775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4f007c-2c63-4a59-b415-1f8dc1da829c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab9c227-bff8-4126-9cae-e24c50a8c7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53835dd6-2bac-4313-b4d8-eb191a92d827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe61641-d50c-44af-bc0b-02972813f560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "05bd8211-107d-44fd-95e9-420784462fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501eaf69-f2e1-4bf1-837a-650615b6cde4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0589d12e-afdb-424a-af6d-6794a95acd00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd51b919-520a-4cb5-a842-91368d88b803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3842dc2f-8daa-459c-a6fe-00f219e68412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69bad57f-4cf2-4783-9a60-4ed59e2391d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699d49fd-9edf-457b-a29b-7350cf281909",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beaf890a-ab95-40e9-8c2e-86eea2a45210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd1fd67-ca20-489b-b718-55fc52c3c903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8567b9ac-04ff-4394-964a-b7678858a36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e370949b-f9dc-4090-a137-e15ad5637d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6021b06c-ff37-40d6-8131-85557db74e22",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642e6f4c-4a14-4fb3-9e58-80e30997124b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ee7f71-a1cb-4ec7-abcb-c1c4e397eca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01187d3-c835-45f2-b290-44a75c8dbc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30f40dd9-655e-4e97-8fab-234457247e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b780f18-8359-4635-8ae2-8e33b6c3d3c8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a81183-1dac-4665-94d6-8e5fa59f5b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34dbf482-36a3-4ce6-9ace-718b510acd5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55b6cd4-7a54-403c-a746-b66f25254df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60b6e564-4dec-4e22-8fe0-37f272ec593e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d0b047-ef53-4417-8f3c-f9551b5b94e1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4192c81-c351-4d60-95d8-120dc53147aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4acd5561-13a6-4309-8c50-fc30837eb8ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7505ce-72d1-4ab6-b62d-f96f1a222a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "33e9fa66-cd4d-4fbc-ae59-8fe160613c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eaae591-5e7d-4db5-bc8a-07ea32897bd4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5feef8e2-e215-4197-a0de-0e7f7e99fa3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bee04d3-8c3f-4b23-acdb-4a70bbcd7249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf514a30-458b-4abd-9eaa-c274eaac127b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46b4e033-c636-4102-8976-d7c810e9b081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bc2324-ad2f-43d3-86c3-cb1f959920dd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6602eb-97de-4d0f-881d-726bd76bc1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0fe811-9cbc-4122-91c6-8dcca9f444e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdbd5d5-b9e1-4119-9f61-7ba6f52c969a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e72d79e-d89a-4250-98d3-4ab9ea89ac0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bf0ff7-f29b-4068-a9d6-d946a20e971f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fc6bf7-b49c-4c03-aa21-7823b1aa75ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b730b46f-9cec-4a77-8204-cdcd83fee32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f04093-268b-44a3-bf5f-bedd9e21e158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37c961bb-5f4f-43ac-9a11-ff8773972144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd11a8fa-ac7d-4584-a5a2-0e1da96fa164",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891a2a6d-55b9-4df6-a92f-764e1ee2c378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30b872c-5c68-4d34-8ae2-41373fe024ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6581053-6df5-4fa1-b7cd-7b983b99bf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95039779-9923-4a10-94a2-0fe79f7f46e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9d7716-1449-49e1-8666-d4e409d6b03c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087cf5fc-f5ac-4a23-b8fc-5ed904b1ac4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275728a0-a03a-4bab-becf-ac86ded1cf09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ae6dd6-66fb-4342-9663-d114d9caa2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "62293df2-8472-4f64-b76b-d1e772f729c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216de5a3-f28f-497c-92d5-5c9d0cc49fc7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6661cc-379c-4b46-8c7b-16bf1275f19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0b76edd-702e-4a51-b414-d7e4a48879a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33e853d-7c7e-4767-a5cf-780b188ffc16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5af038ac-76cc-48b4-bacf-9e8114cf1b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6836bd2-d29d-4135-9f3a-3a4ba9210a95",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e27565-6a26-4d7b-adf7-0e28ce1967fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b14ecb15-56d2-46ab-b74b-e4b56a6c4dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235fc845-5aed-475e-88c8-74959fc8a1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "74ee5701-fb87-4f35-810f-aaddb46f3c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d7dc7f-607a-4d6e-a0fd-6a88f7419443",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05315a0-7ee9-44b8-8ba2-2dba328d7156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e96c049-e8f9-4f16-b917-faf15663ccd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c5ded3-abf2-46fa-8ed1-a7848101c04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "880010dc-ec7f-4427-b498-1467c262d606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b341d79-f010-43b7-beb9-6dc29dac7da9",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c735031-876f-4581-b2d2-6fcd59fa3231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40884c2-e52b-4b5a-ba57-8cbf0df9a272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7084128-3210-40d3-aa07-e70c383057a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "94b7f254-835c-4461-b1d8-a51bd6978880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f5ed2f-747f-483a-9d8f-6c1211bb35ee",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db599ae3-80b4-443c-81ab-1fa3592a6c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e62a3b-7642-40f6-a2b4-735c78ae6283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fdc6fc-9d7e-4e26-a5ce-5b95129a0b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3245eb-b68b-488e-924e-033346edd72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86dc5cf9-7a31-4727-8813-9297a89684aa",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5512d495-b763-4faf-a10a-83719c1c37d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580d9ea0-abf7-4315-9acd-43b89e32264f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6408bb-54e5-4740-8649-ca2a32f64af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "40821284-4c35-4a29-a746-3e8870de566f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8064ab-f016-4993-a1c9-0e3ac727d671",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4493a046-0ba9-4887-a47e-ff7a1df5818f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24469ff3-7879-4e24-a2bb-bd4a1e301b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c085105-8c79-4987-bbc5-c2177a023c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "af85436e-91f8-45b2-89fb-7e34fb6a4aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6365d5-1263-4cb0-a37e-0f887ee9fa26",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9752e5f5-5b5c-4c22-96e0-643405fff349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ea048b-0b78-415f-b26a-88af4c3098cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2064b620-3668-4367-8ab4-2545df342e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5e25c2-84f9-4e82-9103-4ef1beec00f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a951733-3956-4197-b79c-8a3db5a4e39c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a8ab13-ebd7-4e2f-8174-5d148b94582d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0af443b-2fd5-488b-a9e4-434136663213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93512c4e-1b89-47da-9d11-6ab3e5e238e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5cdd3fa-55b2-4e6c-a97f-d5743c8188d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f854750-522e-4657-ad82-f3798c637ef4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "851d888c-aaba-43ba-8071-ed0c78275a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac45b9c-598a-4044-9243-36d18607b00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475401a8-cbae-475d-bd99-e2f7cdf4a5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "336dbb7e-4a85-484f-94ea-11a108738df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63d63aa-3569-4140-9b25-220372fb7615",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d99c8e1-33e9-4b23-ac13-e9f9971d1eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0419c115-8745-464e-a88e-899e2bcc633b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f362e486-dffd-4a5d-b997-6d324a3880e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2abe319-76c9-4205-8c0f-31cc74811d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d1ad58-98ed-4b96-b4b8-a3a2b837efd1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d077b5-e7f1-4cbd-9f27-0ed15009e66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d917e29-9936-46b9-b8dd-3d1f974d15fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3a5f16-3ba1-47a8-8629-1c71b60df938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b83a81b-915f-4661-84f6-4b5b032753e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb1d14d-ee92-46b3-97a6-6499811777dc",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5195d25e-51ad-4a7d-aea9-5e687651ae6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfdc9fff-0c7c-4075-9c72-118b2a160ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747f021c-33e8-46fb-8633-8cc756572209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "afffda79-80a1-4ca4-a54d-ea9a47a0c48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c405e301-94d3-4257-a03d-3f6c144f4e24",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5031760b-2708-400f-b5ee-b1c320ef4221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81dc8c98-0384-4a50-a70e-643d115924b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9d6587-c667-4181-8c82-787d40e6a50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87e0ba78-cc53-4ba1-9607-62a2f630b173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73f551d-6825-4474-b05c-5a3715c3b0c3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e71faf9-f288-49f5-9346-695fc4d25221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bff2e02-b25d-4318-a082-36230a74fd76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46997c42-288c-403f-a6dc-eb937162028f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa1b40a-889b-4d66-8077-5aa0ad6587a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491cb364-6163-4f2b-845b-e4f90d544845",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc35fbab-07fc-4a52-9f9b-8654fc1d709e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e6abcb-37a3-4dbd-8f76-afb8f74a9565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5096e404-8d6e-4f24-96b1-144bb740aa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a91f26a-8339-4e5b-ad30-49513fa7e433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcfa05e-d05b-4f49-bb90-2aa4d5c77304",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744482db-efaa-4e9e-ac91-7df363ffbfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23754953-ee47-4a4b-9426-c1c57fa7d490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcee79f9-db24-4b38-9c81-195980b7a649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab55ecb-4d39-49f2-a686-67b9d67a7920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d52eadd-5f6b-43e3-97cb-e5214cef1ea6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbb4527-c2b6-4575-b7c3-c1c885f41711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7299c604-2a9f-45c6-9e99-5947db5a9879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22744333-3bde-456b-b33a-bee30ca1e077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fcad74b-1608-423b-b936-841ff5201ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69dd3fac-0adb-4c85-8941-6927f9902d98",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b6b4fb-ce19-4f89-8741-8dc0feef36c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b3b96f-0a4a-41a0-ab43-c78df10d3930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3570e949-671c-4cab-9217-0c7f1862fc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdc21b1-9e4d-40f4-ad7e-f4e13fe42426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8450aad-ede4-4530-ab5a-c865abcc6979",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdac5d75-a27e-4717-8360-a1a6e08d1ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a29635-216d-44e9-9333-43b6f8608196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af1ec10-4929-41c9-9477-b24784e87f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e49fa18-a052-4a28-83d6-1297cda45563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27693d2-dc97-4a85-9f17-3e5eb77be812",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c852db-4a67-4eae-88f3-617817268595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69148f59-8ae3-4430-b7c1-5d525153bbe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95638e0c-231c-454b-93e3-068a695d21b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b07a2bef-c9bc-43fb-a230-7647a0747486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad651824-f7fa-4b12-91d5-15bd626d8959",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7b451b-c2e2-4b5f-b249-5eefda5756f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92475013-5641-478e-b8e8-6bd175a8c7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0076c8-1076-49f4-9fdd-f5f23f759f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c48152a-423a-43be-9240-20b3fa028afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160666b4-5801-45c0-a6cd-ea0b1537bd73",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5854d122-ef71-4986-857c-fd697e4ade0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8fe3b16-7651-4276-85e6-7afe77903fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8f46fe-da0b-4d05-9640-8af907d0617e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a58162a-0d02-4d03-88fe-b42bcc4b3ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c5444a-87e5-417f-af1b-b0c4977c42d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f76b3f7-4808-4bb9-8532-a9fa05ba383c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b311b1-0fe6-4082-9619-8d5d6eb9dd2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b24d3c1-10df-48ac-95e0-b02f71266dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b97577e7-04a2-4362-bfd3-9126fa258c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e945e9c-08db-4a29-a88d-ff2100b324aa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07dbd7b-bb86-4814-a22f-2dc16747850c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4514ae22-5de0-423b-ba30-949257c45154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b99788-7bc2-45d7-b76a-1b1710a90833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "10cd5a77-c560-4083-a620-757269c68733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aee6c27-30a1-4353-a530-f5d22b5d6bea",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e41678c-9780-452d-a967-ae2a1afef74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41cb63a4-69d7-4050-9110-eb238bd4ffd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434a7383-4a38-45bf-9162-2dd20a391f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c0c45e-bea4-451c-a915-a34d90061561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587df6b2-0e49-4ea3-9d4c-c4b9c8646e76",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c17abe-723e-46ef-985b-d034527ac392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec7d73b-62ce-4dc6-bfc0-3399518978e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232a2d7a-4bf9-4fd4-97df-0a83eb626bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d71a9b3-ea39-4a6b-b8ba-c9179e7a5848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fa10c5-de4d-4cb0-aada-cab71189f5ea",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59874d7e-5315-4a96-9cd9-bcd2be59735e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7528a6-2c70-4ef6-b619-f18d13b2f66e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d346806-f1b2-42e6-8ea6-494b1d37f6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "74d8853f-a9a1-459f-8ba0-422b8b8cd1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471902c0-5896-4103-a8a8-2df5a8de23ef",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0731594f-6c2b-4983-b09c-2b7421aea22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee79b97-d823-45df-a760-166d1bf41c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bcd431-b293-4f67-977a-6c5a17aab683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a41f4c2-d242-4031-8d18-54dd97f64290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b58cbfd-5e6e-43ee-957b-8525d46c2a90",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0f7dd5-79bd-4953-bdda-c3848ff164fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629ffaf7-d55b-4cc8-a5cd-647d0bcd10f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef42b48-d283-499c-aceb-99ebfc8031dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa7f4ff-4571-4a7c-b0fe-3d405041a5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e769bc-a00b-4235-819f-4d6a0f841bf7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f53a9c-3c90-4ae3-948d-7f90be12a11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fafe722-0d75-49db-a323-8d522d55b80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d6b10c-32bb-480a-88d4-82d4144cb560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f57b61ec-48bb-4658-a5e9-e018639f2550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c06440-7852-4496-a958-d59148bdc69f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8c77a5-8857-4f8f-aea3-2d3ffca9e745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3113f686-178f-41e0-ba8d-1dc80ee6439d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d0e7a0-e80d-4366-a229-986a52c53c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59d2877c-b18a-43a2-88b6-4f7b172c59c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84ed6a1-62e7-4510-90dc-a9c399e612ae",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3778fe4e-341a-48f2-864d-a678283c13d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3de69e3-39d3-41f7-b1f8-90406b9ad7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0273faf3-fa41-4b94-8460-350926a56278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8080a5f7-b35e-432b-8a4c-c2b5786f9338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87143c8d-1bea-4cf0-8454-80cf30c21b57",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5540b2cc-98c1-48c8-953e-b9b22685afb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a45db1b-699b-43f6-9f09-ca23a90e09ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6d8d7f-5b38-4925-a047-ae3f9d78d34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "702385aa-e352-433f-9aad-f7591f25f1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6497ddf-89bf-43a8-aa75-db136a7ede08",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00073e48-a699-4ab5-b011-74e58bfbfeb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b36720b-16b4-4d6e-9b50-5a891dd4d3ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7ebabc-d177-417e-8f11-4017faa83e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b97e781d-367c-4f1e-bb54-90f621c08551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66ffbb4-dce8-4fcc-a241-5c5ceba54464",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f78a3b-eb79-4a2a-8709-858d1b460c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e461391-c7b1-4ce8-8f2a-e3269c9054c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c67ff76-62e3-4865-ac84-6aef96b7406b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd068b3-5cf2-4350-b113-bac5a393cb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa642b1e-4ab1-4fb5-b17f-614b802caa03",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4dbae61-4595-4df2-abc4-a7c2165761bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914943b9-eabc-49be-9020-fbbb647765c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c644b7-f600-424e-80c5-ce2394230da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "182825eb-87c8-427d-b5ee-b3d9fe7cbc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01726618-bff6-4157-9fee-0353e01ed6a6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd1e4f5-8986-42a4-90e6-4b8d1c3400ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3205ed4-c5e5-4d64-b671-1692febf82d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e61cd0-33d0-4dd1-999a-fdbc27ed7edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d27c73ec-2451-483a-bb3d-0c813d3a7e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da129951-18cc-48e6-9b87-20466150d292",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8d6ec7-4458-4bfe-a2e1-0fdc42973876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25120898-f463-4015-b60f-2b01288ce6d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92084cb-9c2d-4ac2-8760-49cab8869359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc7ac45-2dfc-44c1-b6c7-25c85c74e61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeaff2f6-bae7-4fa9-8d9c-7d6642836494",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60df3b18-4a89-4f52-acdc-c168a23b1a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0ed6bd-4ba9-4750-b4c6-2ebb7a13198a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a8ac28-a633-4bd4-ad57-0505f4d54b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7309c1b0-4a1d-451b-b80b-eb713954830b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52869a02-1867-4f64-b686-f46eeaf4bc56",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d170380-28a7-4148-aeb3-cc17728a97b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e85560e-9121-47bc-8bd0-b5cfa3ed520c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddc2a49-4a29-4ee6-8a80-c012041df6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "263d44a0-c8e8-475b-88b1-44df7509f611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b1596e-213e-4a15-b9bd-45aa68308b81",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5a66d1-b6e0-49df-b468-99d42cf07027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3d3986-76f9-43f6-84a1-ae35424dba97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da31bb1-52f2-406c-be9f-670c3bf44322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5a6a85-50eb-4085-9686-094f3155ed59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efadba4c-75a2-4ef8-8d12-0ff48c5cf860",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51565df0-19e7-4e60-a232-d38ef4998a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6b395a-5baf-41c7-91f4-e32aa6c1e844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06413330-8ccb-4ef7-bb40-30631fec009f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5894dc52-b3dd-4c0a-8f37-648063806594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef27053f-49bf-4f9e-9a0d-a954c8ced112",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a7fc2a-edec-4fae-95da-3f72b015d6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8a5fef-25c7-4d8a-b160-20dfe79769fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a094de3b-d05f-4a42-b860-74070f4c29dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99a7f3c6-d266-4bed-a499-8f7bf0219e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2624ffe-ea3c-457f-adeb-4370e56ddf4a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0fc1a6-7e55-4bca-96d6-27561875ec80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09742b26-e549-4e4d-8592-78f8c66666ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf868699-eb60-49e5-83b0-eacf8a0a54f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6adfb0ad-969c-4978-86e1-acee5d1d896a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7265ac-6284-47b5-a5e6-597b5cde2ff8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baeec60a-7dfa-4553-b7b5-dcce31710006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8a6523-dcfc-470f-8af7-39d69e58d80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82c6186-ce0d-4ca2-916d-b062b611daa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4174a37a-69c8-42db-b62d-4b551ddddaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d641e47a-f678-40a3-9142-351142b13525",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b581efb-8d0c-4f5a-8ff4-3d544b15017e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3c430f-07fa-488f-8715-fd705318a93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c338bd5e-09f2-4842-b86b-3fa941e7c88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aeffc7d-f848-4011-9d50-33f63c416373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46144a04-3025-401a-8969-f42d9c49bff0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7eb6170-8b28-4a3c-a99b-b36b20a8b4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7324c8-9625-4a10-9519-427f0e87cfe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77988206-4208-4b2f-8467-afefbe6e263c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79abcb0a-7162-479c-9130-2105319c6ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4335f3c4-1781-4d2d-ad97-bc72d93be6f2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33e2661-4ef6-4701-bcea-47dedfa44c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdcf5856-2932-45b9-9f10-5aaf54e1506d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62df18d-69bc-4d4d-b893-131ed8b160a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "835f1c9d-6f62-46ba-8a38-8916f6e2928a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f20812b-b53b-4b53-959d-b667d5fff86a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cb4a47-ac44-4342-a2ec-110d4ea27ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d21a46-0f64-4d2f-b526-085fac7ea620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7504f6-d936-4226-b5b3-9bbb51bbe20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8016c9a4-abf6-4d3a-978b-af2968df9233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104db1e1-d750-4afa-af89-16cd7f8194b1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7150ca99-5f18-4142-aa17-054fbad2071e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d73286c-facf-432d-8350-9e2036df2832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6238fb9-2bec-436b-a6b9-5f0ae405dea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6871f6-02d1-4126-bb7a-0c7fbb309178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d893f048-aa08-4b94-8279-00a7c153ee13",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983f8429-c7fc-4c10-870f-b0435b7a325a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3aee200-3995-4494-8b83-0487d7e93054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e70c8e-4e60-4836-8a69-b4892b7b7d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c3cc250-2f44-4e3b-bcee-90f311073a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f5f167-b8e2-419c-afdc-df0a9a08bb29",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfde1bd2-156a-4e82-8d0c-9357dcee75b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418c8f1b-5d63-4006-9c8e-04ce97396455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea22f7b-f207-45b2-b20a-7c1f053b0418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "78b2ccc1-7475-43af-823b-ac4833b7c9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9214965-b629-4b3e-ae34-412ea2d5bdeb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "217990f5-373d-4c1b-a26e-635ba4224f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237245b2-4786-40d8-af15-c7e95ca7653e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1667267f-441f-4514-81ba-a4b9c760fffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba73bce6-6e70-4d02-a4f4-62b68b7f0aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882d169c-2fd5-46ca-a87f-c6b6699c750d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc43a79b-5b2b-4822-b678-e685065ef3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3919fba6-fc9b-47cd-a3ea-7676609fa0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d1934d-646c-49a3-b6fe-64aa715cad9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4116f776-887f-43eb-8d5d-5a03e7257334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee33eb8-3b9f-463e-af81-aa5ce48fe7eb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c552cc2-b464-44b8-a5c0-0fdf8d8f2b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ade4055-ed40-44d5-81e7-985a424faaf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16387c21-0d39-4f90-9850-af44f026bc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "19fc69ab-45ad-445c-a952-4233ef14f5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc601d8-22af-45d3-bf89-cde19c7ed30d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f80d31-e898-4366-a56b-99834c90ec63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "15efa4ca-fc2c-4e48-b3a9-d2c89f489331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc308d5-d3be-47b5-861f-0b7fb7a82d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae2e1e9a-b76d-4f7e-9193-e3314d979508"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e36b9b6c-289f-45ed-ba54-e93f2c4c22d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f2673fa1-8363-49e7-a041-0cf9b77639fb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e1a669-d6ca-4d61-b4f3-1ea49554d8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29879dd4-7774-4c5f-9bcf-89726a3887c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d679da-2fb0-4469-881e-c90187f78fbe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e80143ae-27fc-447d-8d17-6340a77caf54"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2448d445-4fc4-43e5-87c2-b670f31adbbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0411f3d4-cc99-4c30-8cea-e6a99aa715f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9a2ed27-1b5e-432e-8490-9cc2ae6d8024",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98972bc1-6b53-4525-986b-1feba3a755dd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc92cc94-3297-48be-a52e-3be780d56b4e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5941c8b0-177d-49c4-87bb-65fbf0d90a39"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "39412053-92cf-4a7b-abee-5834bf93f5cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "96303a77-3b8f-4469-934b-d48541b95d67"
                }
              }
            ]
          },
          {
            "id": "4324a0f4-4291-43b5-a099-1979bf374c74",
            "name": "Positive Testing",
            "item": [
              {
                "id": "98d38cf9-8f7e-4196-862e-90f76a1fabeb",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5b8765bf-5b1f-4769-b4c0-84ff2424e311",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f4486c-fbd2-4847-ad17-70510cc97492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "16b646e5-5a11-4d16-afef-08b15883f6ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b54f137-f6b4-41a7-bf7c-0eb747cad177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7704e14d-edab-4724-85a8-95e18677f7d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "77d395ee-9891-4ec0-97c4-0cedd52ae96d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a08945d-6026-4b03-8a3e-2f07a5aeaead",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f055dcd8-9445-4ef1-a527-b1628e59b781"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd8db52f-396a-4bb2-b32b-2f211299d64b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64e82ed8-d387-4667-940c-b2fc2f7abb97"
                    }
                  }
                ]
              },
              {
                "id": "10eb7d23-24ba-4801-a26d-0aa47842be56",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6678d8c9-7f0f-4cdc-83d2-43a373517bc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e2cc233-d09f-406e-a461-6362538e23b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f01b1a5e-fd16-44c6-b328-65d128c2f73e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8cccf83-3674-491a-8e66-cbbcf95b3bd5"
                    }
                  }
                ]
              },
              {
                "id": "07651c23-b625-4b82-8951-c8ceb825b77c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21aa5102-0e9d-4da8-8e2d-3648cbe58a2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6aef45b7-a7e8-40eb-b203-a441a65e01a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1448d378-3f3e-402b-80b8-4dfa82e939fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8bc0eaae-8bdd-40ed-8949-215f32762c81"
                    }
                  }
                ]
              },
              {
                "id": "45755f51-fa13-496c-8c81-198ae3f0da4e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e5dbc48-b0a3-4acd-bf79-92909e03183a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b1bb705-774d-45c2-ab84-18f537a31ccd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "979e8be2-0875-46a8-bbb8-7114ab222f84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "12541ad0-ac5e-4c3b-bff7-f73e8c11e3c0"
                    }
                  }
                ]
              },
              {
                "id": "de802c75-abe4-44c8-aece-1b55cb53251b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d41ec6b6-8c3e-4415-b5a9-1e21620e7f03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5f9327f3-dda8-4dce-8d3c-a6b8e6180bb7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7672e5b-4305-4ad1-8520-a754d3f39098",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fce723ee-f552-427a-b88c-d5d4689cfce3"
                    }
                  }
                ]
              },
              {
                "id": "b79628ca-f8ae-402b-a1d8-8e28d6249769",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9403a203-da92-440e-9659-7d225795942d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1614fd4d-534e-4216-8f24-d2c64140739c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57626209-c803-44bd-a2ca-de61d55af1a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4abcef19-10f4-44c2-9e7a-77ff9785f3e8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "966685ae-fdd4-477b-8b11-ecf6472ae454",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e14a674-7ee0-493b-bcfa-0e042fc867aa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4794b1a5-3dac-4644-b369-4e0cab7834cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0fd12ec1-3343-47c2-b192-0ba7d16ccba7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03b5fd68-ea65-4a0e-8a5d-0d8d84e7f4ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f20716d5-3b43-455b-88f3-98257a91f362"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f7f78d7-f7a1-406e-ad83-3048ece82f6c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae9a0998-ab3b-4fbe-9d16-01c0821b2027"
            }
          }
        ]
      },
      {
        "id": "fa8fbcfb-d4ea-4259-8b3f-08d9986de97a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "77c09cee-d22b-473f-b393-986e744ada14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "86438fed-0d1b-4562-b7a0-2fb82702755f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4896f64d-31e5-4532-836c-4020c7ab0be4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3922a310-fff9-4aa0-b938-e2817edadd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d84f165-5a94-4244-9b6a-0bed78f27a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45462f19-271c-4d45-8129-cc69f6775a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2de5959a-c1d3-4772-9e04-8a7208d99424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ae5bb4-e174-427a-9de7-61feb44294d3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0eb660-8c23-4bd7-a2a0-18698ee513e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1812f14c-359f-4082-895b-5a504257d9e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d841b2c-267a-474a-b6a0-b0bb7eb1f958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "68a7cabf-b29e-4ce9-aa1c-ea727c237a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f69ba9-6cf7-4d81-a1b0-d5a7632a332d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb0b426-2f78-49cf-98b5-7e911b889ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4273cfc1-8a0c-4303-ae5c-da314b12e612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d453142-4f7c-4055-a5c8-1c7b754c2f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88fd15cc-3f0a-4509-8ff3-e75be6387635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c46448-7205-4ea3-bf47-0f7343382fbc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a57245-c71b-4b91-a284-880cdc3c2dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60c1e44-3b5d-41dc-922f-e2b8476b0b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5016b040-2754-4e61-b65d-085e1bd2234b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7394df7-aa6b-48ce-8177-9226fae2bd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02326b40-0945-4216-97d4-82dabdf7fd26",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a2d864-a340-42a5-ab86-4f5f9612acef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a43a6c9-cccb-410d-ade2-19cc40f74586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75ca027-0f10-4f63-8365-f9f353a285aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76c474a0-5e4f-4a68-955c-a0f9e887f976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629de6c3-534c-4f03-a8f3-1935ab4e5942",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c954e746-2561-4a73-afa8-be21960c4a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4257d594-8b98-4f2a-8a24-70baa4ff69fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f0efe5-ddfb-4c80-b55f-3e6c5b2d2e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b772ed7a-a976-4e12-aa6d-0b95a6c44e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103c01a8-286a-4ee1-ab12-e95c7b19f9b4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294e1c1b-95d5-44f4-b996-e55059b26a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12dc086e-25a5-413a-970e-1101257cc5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18670bf8-c772-4845-a039-63fb131b4a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "df136862-8dd5-4e18-8713-b971d5236239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605e835f-ab78-4422-80ec-6963a8c5f0c0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755a0003-d50c-4c41-ab53-90627277175c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4b8fb1-59c8-4d4b-8444-2a083a95fff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e71cae3-59d1-4294-afa1-b91de3686346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd1ea4c-d671-4d87-95ba-c7b655f71ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddc1cfc-f960-4dcb-9334-25dbc2cb0e6f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb5b0e8-b27d-42ba-bb79-7bfc815cb180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e35916e-7e15-4add-8fb6-910bb1c95e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897f2bb6-9a84-4c4e-9022-dd192bc9a418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e73e163-1024-4d28-8abc-7f18df966121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec92613-3649-49f4-83d5-0ac3ad116ff9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a105d4b7-6483-4984-ad2c-45e5a9c356b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b79ad1d7-5f47-479e-a9a8-075c9d9e0f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30661b43-c60e-45fe-aebd-a0f36342899c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1a40617-70e4-48cc-914a-847a8bbf31dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf788c4-2d85-4c29-8aac-caf1c346a951",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ce9c33-a9b5-437d-a9bc-cd3928256a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de81f66f-e28d-4f5e-b196-84abcb2ed0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe9ae99-2320-422d-aa5d-63fe83a870fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "60b2ae1a-5668-4a19-be68-3d0adc90036c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c450da-5ea6-4886-97cf-04ca33984451",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35a0ba4-6f1e-4b4e-ae7f-fc45ad1a7aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32266925-f1ed-48e0-aec0-7631b307ecbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c98629-ca26-4dca-964f-7291fcb12c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7884c89a-0da3-423f-8926-47a3f21f4d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847b9172-0faa-436c-9f07-60286df2a761",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400db95d-63da-4b00-990b-58af3d17d2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2a6b3e-61a6-43d0-8a9b-e2e9e80bcadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946c9879-c022-48ff-bc14-97463ddb8c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b75cc837-db88-478a-b28a-6e8b6ccefee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e796d34-2c13-42a0-a0ff-d63c7a38a449",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd933431-4bfb-427e-a519-c2d27a0e09ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fb951b-6093-477a-9de0-39ee979eed80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f35c624-e6a3-4633-95e5-26400be18a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "239a9146-a448-47e0-b932-c746856d52b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543dee3b-8be8-4305-bed5-11d9d1d3c81c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d361f4c-0eef-4b02-af50-303a866b3ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf16f30-cf2d-4e83-80d4-ba9f6d5b87a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecc12c2-2614-46e3-afb3-d2ccaf9cfa21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c51e286b-d3cd-449b-95e0-11da4ad434fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a237961d-c2ae-4d02-90ed-a2ae10ba2df7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4912f9a8-a5d9-460d-b38e-619497987846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15fe060-c5d8-4e40-bca4-a460aa5f58c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270a0320-029e-495a-b78d-83c5a1a2da8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "58138bd0-d700-44f5-98ca-0d6deb9b98f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d83907-8430-40f2-9ac8-86c205d59c6f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7d39c8-983d-402c-9391-fea08ee661d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b3c65b-229a-4715-841f-07caef2027d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bb4c5b-a28c-46a8-99ca-f22d802b74bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5bc98c-388d-4ad8-868c-7defcbdd4609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6b0c65-420b-48df-99bd-8273694a863d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f320800-72f2-4fa2-ae5a-b84c571b4661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3aed305-d02a-445b-ac72-f770bd6f2a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549b78df-e002-4901-996d-8c96bd02e343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3d04f4-5444-4ad8-8335-1749f41b38ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bd4af3-2068-4f00-8dcd-d238d1231a76",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201a2a76-c118-4aa4-b1c1-00168cbabf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61ddb70f-72f9-4d74-b259-16665d161d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19f2a17-0b7d-4b12-b7d9-0993eafbf19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0b41dd-898b-4e96-9594-87e544d53507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c46922-bac4-4a86-9e74-09f89417bb49",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e49d08f-dea6-4f62-9c6d-c5cc34659e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6eee195-6504-4673-a68f-f9b9896a49f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c95a394-210b-471f-8fa0-27e933b72245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6e9019-584d-412b-b8a2-67f79570416a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6454fbb-f4a6-4892-a527-9b964519b5a7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0be07fd-0ba3-49e7-bd17-1a097bd5af23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d938bf-60cb-4ec7-a159-0318024fecff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4056a87c-becd-432c-9aed-dbec7d3709b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8289fd54-52e5-471a-929f-dbbf3ce6cccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b7da6c-5e1a-42a9-a660-11307f9aea15",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11151a67-ca85-456d-ab7f-58c314bd9d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eae0ebdb-7bdc-4ad6-b8a8-2c3e09bc4c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af17ecca-e1a1-4e59-b4d9-4db089785df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89f9200f-d1ef-4c2a-b9d4-a1367a517327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0717a778-d47f-4e74-8ae8-d32ed3690c22",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b70cda-97dd-4299-bd72-e3dceabd4010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c5cb32-34a8-472b-9e19-b00b60d0364c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f78801c-edee-4ca3-afec-133b6166139a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "190dd3e5-f705-4052-83dc-f2d21cf38cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8af5211-6c7b-4228-8267-00d16432efb9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c58066-41e8-4d92-b8f0-22f9dc1412ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a4117f2-a46f-4c46-a1d1-d2725f172c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae5e1e0-aa3f-4981-a962-8bb0dd6730e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44cc9edb-0891-4602-a5bb-2129ba70a787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a105fcc-79e4-4bab-aad9-f390e84479b7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd46d41-5c32-46b8-9c32-8bf5e8d3b365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28bf1819-41ac-46b3-8d59-f64b85eb538a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bba88dd-31c1-4854-bfed-759b6832f973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29be6a82-cdc0-4c15-8540-f6797ff52a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5067acf4-5b03-447c-a073-4bb915140117",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fa88fe-4207-411c-b7ee-0b06aa2ad65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4a81e6-1d09-4818-b866-c2484eb3aecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c79158-2ccf-4cbf-8e61-8663e3ce4879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2624ce9-f0cb-4171-bfd4-252cfa7b52dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a1ec37-07fe-4820-bfaf-1f6130ff4518",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58802e5-399e-42c6-9519-c22e5c3b88ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8fa4b15-bd0d-4750-8a73-c6ecb8bde5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e991ac-42ea-496a-8856-5a8f4938f387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d914035d-4538-401c-9b93-86a4991698f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21076b3d-9d0d-4a20-b69d-60f8b4897a0f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6033bef4-f8c5-4b5b-8e91-1ac90f4f13a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13bf6644-0aaf-4667-b4ed-11fd2f112900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f544617-f063-4f49-9d91-c97f80c92bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3420da00-9503-4ebb-9667-f62fe4503e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dad141-de12-4e3e-b973-de5d97f0effc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "306ab4ea-c6fd-44dd-9720-b653910459b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b6d6f0-bfd6-423e-b963-bc338fea8ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe45b7e4-982b-4160-8cac-3075eb3d82e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b9abd83-41c8-4b10-8ac8-101044ed52d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5d9c18-6c09-4552-aeb3-ae5cc373945f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21eb03be-e887-4942-8a16-5cb7a04fc5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bcc70b-4fff-438a-b583-8109329b7163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d8eadb-4271-48d0-9f6f-51f1ea88d574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5e21fe-bb13-4da5-b605-0c550190a767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407dbc87-9e8a-44b8-a762-0ae73b7f6c8f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8f64ed-1d17-45a5-871b-4554e7f7ddac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc07386-80a3-4517-9811-306769c3b480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982e7f04-37f5-41c2-aa97-bc599c1120b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4e5eea-2d30-4eaf-8c1e-f8e39cc5cf0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab6900b-99ad-4008-8e71-77414c92beb7",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ad9f85-65ff-4b8f-bfc9-d3cbb1353744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1040fd-809e-4cc2-a240-181ade20bc61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a022a8f8-ed78-4a2a-9ab7-283ad3cfc104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed17f56-4741-4682-96f7-875d3d3a5e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14921aa7-cfa5-4db9-b159-5be75ab0fd9a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e083dca0-610c-4c96-b0cb-6f24d17e188c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b916a334-f038-4bff-a52c-7d3695a21dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c974bfb3-f51d-4bf5-81dc-99ff1a8203ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64ecc987-d4ec-4b66-916f-c032d2d0fed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca58007-881a-41ac-98d8-8afb60d45a3c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fcc14f-a88e-416e-a2be-e5d1cd2f7370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f6fcea-b06a-41de-bc66-b66016769f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111943e5-2d24-4bc7-a6b2-18f4613960d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "def0ffda-0317-4b1f-979b-9284e4e13d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d73ff350-ae0e-44b5-b83f-7bf27e60fd09",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa521c3d-f642-4bac-938d-71d8af840c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b01ee82-f9e3-4780-ac9e-f998fa9807c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2fb08eb-8e30-432b-a083-55ce3b1ac545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "434be038-bb4d-4fe9-9053-86dff869e805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cca8a52-b55a-48ae-8609-25c5d7fbf333",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6521bb8-024b-4cc7-a12b-cb072aed0d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acea9e8a-80a4-40ed-adb8-98b8647ca086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4142fc13-390a-4c74-aee0-b0dde7acb340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c4012f3-ef37-48d1-b7ec-7ee4b8b8ba0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06025ad6-9ebe-46a7-9cd8-ce00a9a679e7",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c290504d-d2b5-4ea0-809b-756dbc539d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36e865a-3de5-46c8-9abb-d2af258dab38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fdb582-ab23-400f-b603-2f4d13e8b672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07e2d032-287d-45c2-be28-69be1cf54fee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f4369915-9fa1-4167-a27f-adff477447b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25f9af20-61af-4294-8041-a6327ea02b03",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205c59de-cb01-419e-a4a0-b9be3e0811d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5b7b40-925f-4b8f-968f-10e0e2f28d01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db389b0a-6338-4a60-8811-712c0ae15d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "382c605b-cdee-498e-a783-b474535a11c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ee9508a-65ae-4594-b884-1454e4170377",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53cee626-1000-4890-900f-e8597abc3ac0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34e1381d-cd3c-4262-875c-5a3cc24df478",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90ca6488-d104-4006-8167-69501b3188e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2f67933-e31a-47c1-9929-dca23c1ea776",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "861e940c-37c3-4f0b-be39-b59e5ef7ffe0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "542ce8d3-daa1-4140-ad0f-3e4a6ccf2d50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c489102-c94a-4c21-9de0-284053be9126"
            }
          }
        ]
      },
      {
        "id": "00d3b89e-4357-482a-881a-fcb576216c36",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a4f73196-17dd-4d88-bb74-84b800ecd54b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca4df1e2-997c-493a-a352-762cff2ec7c4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f26fadb5-0b04-4e81-b8b5-bd1bec8138a9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a275057b-a985-4b1a-a54a-825e538ea632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ac61cb-aac9-433b-9d27-1348dcbc7d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9887cb07-494d-4d9b-b273-947c0e5ec36d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a111892-32df-454c-a816-2429c04d53ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e1fe68-a877-402e-851a-bfef417006d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b48841b-2e50-4cff-88bb-55475edd1312",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42721fc-7ea1-43e0-b5e0-e6f96fb7d402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bc5ab7-2c22-4ca4-ab2c-4773e46fe34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7879e51d-dec5-4f53-a931-288765a1e129",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56faf2cf-36fa-4ddc-9aba-c3c233257cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161cb08e-1be1-4a92-93a1-d902e4ba977d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c3fa38-5e44-4ee7-909f-68770341e9ad",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be09bdb3-7a1c-44f0-9e44-ca6f4c7f2431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "199df2fd-84a4-4ce6-8cb9-d16a5b612bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7588c7f-cfde-41da-9df9-3dbd48d69ad9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2ce555-5b28-4421-a50e-b48472ad8364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7403c9d4-dd55-4d52-9cb6-35344a6dee99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f80725-0499-4c17-a4b4-c6826d926325",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3c3ecd-f4e8-4fba-9c8d-98595993ff7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198aee9c-8a86-4a69-a2f1-054e2f39a633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa4740a-bef8-44bd-9359-9ca347fc919a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f20aed3-28a1-4f0d-bb42-599c7ac124ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef294566-5ed1-4e00-812e-a7b358577762",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26104815-1a46-4fad-a652-704a5ad34bd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cefc0ff-114d-45aa-8ed5-241cdb488a88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e3724e-2864-484e-a923-3e02fcd01d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8ce218-8f4e-437e-846f-8ff3c926736d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7520abcd-0221-4000-a392-6ec49945bda0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d515eece-81c9-4897-b746-96759177dc97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "144e5f13-a112-42b0-8cd0-9b346ad57a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25845172-9379-4709-8459-55ff4d6efa9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0475862e-bb4d-41aa-9aa2-bb52434a9688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb01497-98b9-4109-a585-4d608143fba0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df51b31-5345-44db-9218-4b8c3aa75289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a929b4d1-003d-426b-b317-00dafd28e599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefb8e3d-21fd-495c-9bc7-a08980d2b662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aecd32c-a560-4d2f-9efc-2c1c6c5c55da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e2a594-a6f4-4677-946b-c74109a0fa16",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4609d09e-ac02-4274-a0a1-5ce2b9d8e50b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a6688d-8883-4d1a-8408-c507b74541bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce69268-bc0c-4491-924e-a3994bc6900a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c36c0c5e-19c9-45e7-bc37-9b02c0c4ca27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008d6065-9666-46fa-a5c2-1dfaaad1e501",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6789fb38-f937-468f-b7b9-a8d572555f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1141bc-edfc-4e3d-99e7-26911a4bcf38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b84ae3c-28a3-4088-b3c1-2c305f04c2c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2cba0a-435f-4e66-a74f-a27b99a36ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a5991e-5ad6-4eb4-8ab8-55d8799983f7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df91383b-1903-448f-8e6e-88c9fd0dfcf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "650f8b04-7add-461d-9e34-b926dad49f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7056f5c-1bc8-4552-8cc8-baada6741884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dda1b00-33a3-4b3d-aa1e-0aea4e9b8ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2945a7ac-82e7-4cb0-9c9c-93165498acce",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014a7274-8e62-48c8-b979-8fc7f410d05a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc33f5a7-f436-4f02-8309-982d85b435fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2f607f-8292-4c3e-9458-593e7191a8f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed498c7-98a3-442b-a04e-1899b7672d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2317f909-3221-4254-9746-424ba8f58e98",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff187da-53f9-477a-8640-52e203562255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ad990cd-d963-4f53-b629-46e93ee12afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734b4c5c-4fe0-42ef-8286-0337d96d5ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123e1082-0f1a-4b0c-a311-ebf5fffbf00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853b21ca-5f80-4059-b3dc-e0da6aa96bd0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515c8519-ceaa-479e-a856-1e11bf61138a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb08f1a9-fa36-423b-85c6-86b3bf1a8837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfa149d-ab77-4ef1-aacc-2277d689e022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23f604f6-a311-47e9-9c45-10e9d8ecc1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78bf5ea-2640-42f7-ac7d-e4c473d531f8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53642b60-a502-4802-89c5-8426a4566c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827a68bd-2421-4d5b-bd30-1d0003b2ba66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c75883-4c92-4b32-bf97-b9524e0d797c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bd7518-e40a-4bc6-8b0f-bfaec3ed3a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5a8a9b-8f32-4b11-be40-b85ac5bc624a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cde2b6-1a51-405e-9fbd-b718bbce5871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e23262-88ec-42b9-99e6-390fb48a7974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4704c215-0a23-4be3-9533-58bd802fff0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa93516b-638c-45da-a600-5d335120201d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14766bb4-ad66-400c-9135-54d0d93fcb80",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2db866-39b2-4619-afc7-958e769bdcc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7a2949-f9f5-400d-9ffa-3b25d250875a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b775c4-a290-4b77-ae99-b088763b2e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51389c5d-26cc-4f22-b5ce-ffc10db119db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adb2eaf-8694-48a8-ba25-18551aaa58fe",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60db12a9-cd3d-400b-bd13-70384cd7d193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98bd7326-49d3-4438-ac76-c99a251c562c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c8c533-faa5-4d0f-93d9-fbce374dd8db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70763612-3d7f-49a9-ac1a-2faa3c12f787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28abede6-8d7a-4cb5-9c40-546104cd41cc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3587932-a3db-4cac-8d97-4288711eff9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd9f34d-59fb-4214-a841-481a83296098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baaebcd2-c945-4984-8999-01975156e093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0233f6-6d96-4615-b89d-1a9ede8f02a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dda3c1-1c4a-4af6-a45d-ad511ea15140",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b449583d-8365-42ef-8ef4-00325712837d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b074ccc5-2652-4b2c-afca-5c1af989b4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2d9b51-27cc-49be-b153-5d1984d37d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30dba95c-1f97-4516-a215-a1a7c4d9678d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fcfeb4-a14d-41fe-9f6e-951d051e03e4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b60c25-32d5-4906-97ef-99f661ca59e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3cad26e-758d-40d2-a1fe-65ef09eac0c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bd7342-d891-4d6a-836c-396d4a16638b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9ac615-64f7-49f7-8277-66aa2cf9401f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1308d4-e125-4534-a903-a0fa8c3de8fa",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49587569-fb1b-4c6e-9a4e-9d2ddf585263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29721a65-e411-4997-b32f-5c46179614c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbbc105-f4b5-4735-82e5-e468aa6509c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0806d5d-5371-4941-bc4a-944b9c83a8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c56862-11b4-4d1d-b7a3-7b76f1eb9fde",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91e573a-2131-4d55-b14e-7414bff41673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17653654-4830-41a9-b4ff-5caff1c6e388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77436754-a87d-4178-8ddb-35c55e6ff891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba87df8-1c70-48e1-9fcf-95a21a62559a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12abf682-2aa9-4759-ba57-0ca77e4cfb59",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f8edbf-6993-4b79-84a1-5aa7acb37bc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b882721b-7151-4b5b-8af9-d5a9c85a2d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd73c520-36b3-4ed9-961d-0c0423dea80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c63c5d-6a20-4f5c-957a-9a6f2a8c54b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc9c59d-1359-4d19-998e-69b1445f299e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca74ca7-9a44-4cc3-8b76-893beb46099b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37a571b4-579a-4a2c-b6e2-850fdbe636b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaefe9c7-e7dc-43b2-ab7d-122429bad7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b37967e2-fb3c-4d54-88a1-dabae06f07d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b0737f-a47a-43b9-a8b7-04126f86fe9b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d47319-b22e-43c5-8924-00d0ddb07367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64243926-85bb-4505-95cf-af70f1828553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad61f14-d5e6-466f-94b7-e6ad3084e166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ed47cf-597f-4392-bec6-a259636ce63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1fe804-aca0-41a7-b449-72e1a0973edf",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee0790c-3c86-4106-b3a9-b1e856a91812",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ed4ef87-19e4-4e09-a155-fa8104ade012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e8caad-f0ca-4e28-8033-51d6222881b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e966b51d-cfad-4f26-b8cf-98e901cfb7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9dc485-b739-44e7-9259-d0b0d129a200",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a008aa-b23c-497b-b6bd-296842953943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f464fa77-90d1-4e04-b17f-d0adf55476d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fea4a2a-34b1-4f3e-8e67-bc8af2b39dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6baaea02-610d-4a45-8dc7-bfceefcac8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbc999b-d86a-495d-b512-c50f3d86a530",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91129265-f810-41b8-a523-5ac58ccaf10e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dbf2226-6b83-4705-9560-0ddb2a899440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17848ef4-16b8-4446-af38-fde11f1fa6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62d449d2-6506-4d79-a94b-f0e63a595976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7aa28a6-67ba-4387-9a73-3f12537c671e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f641ed-4689-4f0e-bdeb-0f4502dcde21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65455102-507f-4130-91eb-f691a1d1db78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca033a12-b9ce-4a7d-af9a-818cfe5a76fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836c643f-65aa-4e9e-8a17-6f3a286c45b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2e8b39-d678-4333-8368-e95555c3b3e3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32140199-e8a2-432b-a886-991de84a215f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "715d886c-828d-4b25-aba3-f213da5c9618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3b5319-f320-4351-a6d0-abe7e25e2835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9efb8a91-ee83-4378-91c4-309f5e1ef117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c84e8f7e-cadc-4d31-a170-4a8084a3c088",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51806d5-2f81-40fd-b2b7-a2083fb1ee69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1976d9b2-f46d-4feb-9a15-9c387d4da24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04aa8caa-fc3b-4acf-b5ef-0a235b40d4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7ff85f-d6fe-4065-8abc-9cbe319c586d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bb0a30-c223-46ac-ac58-182f11936ff4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26d03cc-db39-49a3-919b-031670475944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd9417c-f7f0-46aa-97ba-aa6746f53b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b94aac-d50c-41ec-bdcc-714b79ae2666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d33e6bd-b57a-4fa4-b342-43199fabb74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4dd723-a76e-4f2f-8a2f-142c0c3e0460",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ed85b4-86b1-448c-b445-c665d7a532a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27012153-e840-4db4-9f05-e396e35b7183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e9e5f6-db67-4506-a365-4978d9d7982e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89728c0-f79f-4475-9d07-6c7982e3f0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecce246-e3c7-4fcd-b68b-4622d932c7db",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4d31d3-11e8-42df-bd3b-3c9e60e20955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c1ea658-4cf1-4fd7-990a-83bdc711ff1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca080c88-57bc-4e91-91bf-b2422d73e856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5c69ff-bce9-4443-868b-99137acf2afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05100438-6ed2-454b-8de0-de1625e422bd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0794a07e-62f3-4d42-8da2-17b703210bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ed8c49e-4842-4803-8e14-055c80addb69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9685736e-93bb-4aba-a5aa-56998aa31534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "610f38e4-66db-4cd8-8d08-f33931525fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61b38af-8174-4130-b536-b3c290d0872a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e86556-8a51-423f-a9b2-4601a754b3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361b2776-d39e-464f-a6ca-fe20663d599f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2e1459-e5f2-4945-9790-7aa983869058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24f6cca-5dd7-4ab3-84ed-09c7be1837f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9156067f-9ceb-41a3-aa3c-db6f30a635c8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8e148b-293c-4edb-8208-85a966e2d23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d32ad5b-9ec4-4ea8-b5df-6e1354bfa2aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d065ba69-3d49-43dc-87cb-b21d5bc89cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4b39cc-2ca1-4bbf-9da4-b0fe9b827531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aabac93-e437-4cf1-9856-9c75e0a3c3af",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04eeb3ba-0318-4143-8bf3-75f42aadec6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ebe8b3-d554-4294-8b40-69189fda9fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3eba92a-5957-4659-ad56-92973f555b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf09125-9c78-4612-add2-79e1425b81dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156be9d6-cae3-4c44-bd0a-60f4cbc3a082",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6c6631-fe50-404d-9e46-5be43e897a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1548e913-0d26-4570-ba1d-387882e94cf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73754324-1ca1-4941-a106-84237ef96ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b167adf1-b842-434f-b7b5-735dbbac9900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e82e008-19af-46d9-925c-5efa1c40228d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e77e10-509d-4ce7-b22c-c1e7ace7bf71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de897240-200e-4568-9bff-351b10267adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2baf41f3-d098-4893-ba6e-c2153d1f65c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8e3365-1ea2-4a14-99c2-9640516eca80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a516ec-2c50-4556-bfb8-bce6d88c78f4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3200479a-b2f1-4dd4-8ca3-34f54a125931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d15f28-9dd6-4d16-8093-828826550d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df58b504-1344-4d95-a224-1eeeee190cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c8d28c6-378b-49c2-a9d1-309672e0d817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8cf22e-5a3f-43a8-b1ae-62a4b9f904a6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf2366c-a824-465f-a2ec-997e8a2f6e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f5a90f-d9ca-454d-89a4-977bcce3e1d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40ce8bc-ded0-42c8-be27-ca7755330cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bccf66ff-7dc1-4c69-96d5-947ce8e17ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0c7d86-9a8f-473d-9f9c-b03908659782",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3249c8a3-e80c-4d11-9d6e-b99952d8c584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e85883-daa4-4c83-8b61-11da81a6a587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ade31d-9cce-462e-afa2-47d7866cb780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4b5262-91b5-4083-ad0c-1d20e7276b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c889775-1bfd-49fc-a904-20d38034d6a1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0f5a7e-8b75-4187-bc2d-867aff6ee44a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b0d9af-1e28-4429-9f8d-eee538cda5b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77b5fb4-93ea-44de-83b1-0ff1877928bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc81bb1-8705-4e7d-a838-f0c5db6a23ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704ed85d-7d43-4022-80ae-5bef8ec2f576",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f9c7f6-88f9-470f-bda8-ee724ae4d297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c1af41-1096-4d63-8280-0682c87f6d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db2e0f2-eb5f-4728-852a-79b4d150a3fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbeb3651-0f6e-460c-9911-af385b3d0061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c980b8d6-835e-4666-8792-5f6dcb915a28",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8231afe5-abf4-48ca-9ff0-739ccc9327f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a30b05fa-8390-4fa1-848c-dfd3038c762e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abab3958-28e0-474c-82b3-c8c088a68a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eac34d6-a772-44a2-bda9-16d13ba6257e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff3d4d4-e769-4901-89cb-e3cbd9aa5298",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b6c7b4-29d7-4ea0-b926-fc10d78f5a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34aa0b40-af3c-41e9-929c-4bed4fcb10a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34c536e-2c18-4323-b5c6-2bdf348613a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84199331-ee8a-4e49-96d0-8007f5cf7427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c00333-b6a0-4dd7-b2c8-69e74186b473",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2fb535-5efb-4119-a65c-0b0bf4d898ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c8e4cb-51c6-44d7-8624-6fb48c3d46e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6871b4-95da-4fe2-87a2-0fe5f7974a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b053a40-199d-43b2-9e6d-1c19575df614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b7bee2-6ca0-4258-a2b8-daa8ef8d7068",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916f339f-27de-451c-b838-602ba5a30b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0a93d2-0794-42fc-950e-6b7ab187eb6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "150e1a6d-0bf5-44f8-bd7a-aaa715e30c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58aba055-e5f0-4371-b59e-36f3c7b2174f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff919312-f8d5-4d02-93cd-0ce0b83b1a94",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f8cf4d-09af-43cd-b89a-2114289bf927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ec932b-0f80-4fa0-bb9d-50537150f325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdbd5d8-ee42-43f4-b47e-d40ae76b075e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "294e38a9-33b5-439a-8752-8bee9f9dd748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6b13c2-affc-400b-b5b3-3110dd1b096b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08712eb8-e2bd-4e0b-a5a4-f5449b669e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897e49ef-edc2-48b6-84a8-61f24943da6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d0d0f7-8d60-4657-970f-29470362e20b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bef905c-7869-4486-ab7b-294d11a36f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf669dd-697b-4e1e-832f-3bbdcc4d9207",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe07136-2ee7-48bf-8b5e-77981ce6aac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbab9d1-c524-4f7d-b7c5-36dd415a7907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "011b3773-f47d-4180-ae2d-cade94a58ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b965b529-20f3-46bc-9b9b-76458fa4087d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a67e09-86f0-48fc-b868-0cb0a2a19adb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836259af-224c-4dbd-841d-639cc30e12c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf1afe1-8ce6-4837-99d8-a523bb9db68d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "080fb0c8-9421-42e7-912d-26e101566963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41cbeb5-eacb-4dd5-b074-55b07b3e0347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f22dbe8-dcf8-4d99-b366-2ea5458d2a09",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309f4e33-45f0-47a5-aad5-fdd68846df1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea6c198-6b13-4237-ad0e-dfdad279d7a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89e091f-7b97-4919-a970-8099df365c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0777f685-295b-42ac-b2a2-a69903a5f1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de85a190-10eb-49da-a5fe-5b71bae41213",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2407ce2-6906-479a-a7a2-cc3667747ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a37825c-0c1c-4529-9735-b1f0325f8feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1aee04-a2b3-43f1-a4bd-6179d192a25c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05ea7a5-826c-43de-863c-ceb9c1242b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f7e188-fa48-4e8e-bd74-85e9d70a05ec",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51188ef-4132-4467-bc9e-7e878301ab2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e94d7f-1ebb-40c0-818c-65cba3aad1c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6999d828-9c2e-4d50-aae1-c6da0e61bcbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607f85fd-0f42-4a5d-9d43-29c7793dcacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b87ebe-460c-4ccb-b4a9-de637eadc859",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a74a7bf-ddf8-4a11-9315-054ac58c2c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68fb4e87-5e23-4847-920c-42a37f9247bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3c5d42-2cf0-4991-8994-8492cd622963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9cec82b-509e-4b1c-9bff-42d16a6f6679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e69bd6-e755-459b-ba9f-c03dad924ede",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1500a6ae-6099-409d-84b8-85ce63e57110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5adcd695-e670-4fd7-b69c-3c40cc11a87a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "667defcd-cc8f-44e4-a1f6-fa9762085735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4334ce8-c2eb-47ac-b932-977cdb580579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843465c2-6e7a-4294-ba8b-12b62da9e01d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062239e4-63e0-48fc-9281-11258c5c1002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b43d021-d7c2-4b73-a874-aa6420296cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c73508-0126-4a82-9986-ef3deb015345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9889bdc6-b1c6-4310-9b59-0b99e56ce8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cea25e8-e2e2-4cf1-9870-15a9839d67a8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e0c1be-2576-44f2-9c90-2d1735103f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebbcc0c-abf0-48db-85e6-66d879ae3ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6223296e-3088-4c4b-ac3c-835bc53aafe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc89cde9-57bc-47bb-b95e-3835e7f81016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e239c1b8-1c93-465f-a4a2-05743ebd7d80",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fb7673-080d-481f-8990-cdc87076abc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b17d48f2-5d57-437f-afcd-e96a060ec2e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371e6a61-6264-4b6f-b7b4-b73410a0b057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfbacd22-7152-4c51-bc05-366e835e58a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee614fe-c3ba-4196-bf39-7521e580a980",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321f6adc-75bf-4bc8-87f0-ba34daa065fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d07887a1-b161-4197-b945-6d8f5efb714a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be259665-a493-4d50-ba35-1be7017b08fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3895cb6-0f3e-40fb-ac86-13960fab73b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f13f0bd-d2ea-4250-afe0-c55837d6d430",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9ce3e9-3850-4c13-8b8f-bb721d2ec510",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1638b37-9a71-47dd-a12c-5a82e3b0210d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2b023f-7f96-4195-992a-4615f1a1346f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6059378-a3c0-4eac-b132-ff3ab992b3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f8f842-ff5b-436d-970b-3f3e941b28f8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cce31d2-45b5-4391-9aa2-638eb1f0ab88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acb1daed-3204-416c-a36a-29650dd53558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4d7ccc-addf-4f0f-afb1-b662a641dd32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a49c14c-d132-4993-b38c-d6b2a4abc6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0f5342-aa10-48be-84a9-847b754d2c4e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1667f2b5-2a09-4b9a-8b84-881762aa07ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f935a1e6-acc2-4373-a3c0-b41b97f24313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a576f9-4110-4114-b638-a5f3e9ff6cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5a1aa7-338e-4bc9-957b-c35db4b750d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb494960-71cf-41c0-b8f4-6c80e9271ca0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939944a2-720c-4fdc-b44c-99361b1981f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "691e3f78-9265-4209-b603-a6fe724e8874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350907eb-fdab-4128-a794-7ffb8b4d2f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28edbc64-cebe-47fb-bfa4-b105adf66a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0759f7b-a86d-4eed-83dc-563002215bec",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2da2e38-d413-4d2a-8e2e-7b7724a0e834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c4eca4f-72ed-4f3d-bf08-b32b1bd53de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ae7ac9-9abb-4ce4-8254-5eb7d4b5cab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88a6215-3d21-4d08-8650-bc3613212388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0612928-9be2-4b62-9988-74b18605c0fa",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac9aa7a-f0d2-48c4-846c-e2acb01a2787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6bbd9b2-c4d4-44cb-825b-f5fe2d26cfae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a36300b-c507-4f45-9393-4b8a14bbda5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b5875a-542c-4128-a210-9df02e5b21ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ecc4e9-89b9-4ab5-986c-9e5d0702110f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138b41b1-733d-42d2-bccc-389813518ec3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e47fccdf-0245-439a-b26b-a9b25505b746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e57cf07-3f0d-4848-a821-1dea55182e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4caf23d-4bd7-44fd-b733-5e17abca75c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb09c3da-d5a2-4aff-9773-174ef4236e54",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3c5e67-e1d7-4ed9-8344-a00bee9923cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a59430a1-0cf7-40eb-b290-49212dbfcf89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "247500cb-b7cb-4c32-8b35-38530cab2e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9de502-c56c-4025-ae62-292c974c0a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0af9e48-0461-4fcc-88e5-2cb8f9789303",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3952e729-8ce6-4d96-a8d9-0c1f0f90dfe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7248154-b43e-4854-9591-4e634c0adb03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f35cd71-ad8f-4458-8a9e-d31f439b060e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afe2e7f-596a-46a3-b0fb-11f25d61ec27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a9a082-8741-4776-920e-a824f6ecd36e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f158db66-7a49-417b-ae43-920c4b846fda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b100d36-d9e3-41fe-9ad0-8ba91c315c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38151f47-28c1-4299-a2e7-c2b098e69391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45a0d09-1f37-49a2-aa87-5881a01bb351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cf6749-546c-4d03-9700-059b40bf1015",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7184498-9ada-4b03-994e-214a794dbfeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fc486bc-54a4-427c-9ecf-528fa55a81a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea3dc72-e977-4ce6-be08-bae3f31e9e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c188559-314d-4e49-81f0-212082deccfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db18c2f-5d9b-436b-91fa-d393beebbaea",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19644281-9997-479c-befe-46b362517b2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f74e17bf-5454-4b2f-9280-4ece67d2dc33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e3d5e9-b331-44d1-93a9-03fc076f2e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1325cd2-7401-4d1a-a000-5ec5c0955e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423e2fd4-2af5-48d2-89fe-1c07f8ce95c2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23e44ab-bca4-49c4-8311-8fe1fa2502da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3a2ca31-d69a-465a-ab84-f6b78a8062ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "925c9d60-1a64-460f-8a15-9fe447a30539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a404f2-5d0c-4e0a-883c-b4e4fc316af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038275bf-80ab-4159-ba18-7855ae3fc9d1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5449989e-04c0-475f-aea5-ac19c63adeed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9ed4c5d-06dc-49ff-9715-ec4198090b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c586f51-ab5b-43ab-a98b-1ec4b36c5467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dedfaf8a-524b-420e-958e-6a6d8f60db28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2ef465-0aba-4938-bb39-5248b4145ee2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9560a3ba-85ed-4793-8e47-69cd6d208b4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce1f33b7-41c6-4294-8260-ba2c25189f76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054d79d6-e105-4baf-bb6b-5ed309e6f5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f4314b-fb9f-442a-9c24-305085b5f9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a420e5c-f8ad-440f-8754-b09e40a38389",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5697dd5e-d65a-4f5b-bcbd-4e8efafe51f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c77031e-858f-4182-9363-c1a0327694b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba96a073-d2bc-4cad-a56f-6478c2b99724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f93944-bba3-4194-a345-98d83c8a2abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5efb17-e3d3-4f47-b703-fb66c9f8a31c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c8c7d8-216b-4d68-a4f6-76e3a508816c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b49497a1-2f21-4906-ba0f-eef82cfd779b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687966dc-32b2-4043-b112-d46f14b51152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30de593-433c-44c4-a86d-fb9493a22052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709866da-e0c1-44ef-98d9-d5b102bf2b7e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d918a4-5b73-40cf-b0d9-02ab75882459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d7eeb81-bdad-45d6-9a07-ecab46a0c21b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "716b8dff-ed13-436e-b4c5-7477f212f958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b77e85f-1735-4cfb-b10a-2c351d269256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71845ecb-4409-48cb-92e1-f7b208c3bc56",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e525be1-0f74-4bb2-bc6f-3705160c49cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7322b80-d59f-4beb-a109-c00837a556d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6a7c1a-b0de-466d-9aa3-ae19ca12a2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e9bb9a-c3af-4125-9920-53b818bf3d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0655709e-6cbf-49d8-8ba7-69b66be59c3f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ace897f-0885-4356-b296-42a402213105",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e9bd0f7-13be-40d5-a98a-aa929ce5758d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf99a31-6317-4c90-aa78-4f3a39cd57c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1210ef-b3c1-4af8-88b2-ea01fd38fe05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96e704c-095d-453c-abf5-a09cdaabb7a8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef2a176-5e91-4903-95ba-efb2a8614b45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b098ba9-2179-440d-a68e-339ab15b1166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e64f341-32fb-4d6e-a6da-ec1bc71cd2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67a0aea-128c-4a64-99b1-ef15b82a8c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61c3143-85c0-42e4-aab4-ab32e8d02a8d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd92f3a6-11f3-41b3-9fce-0d14abe1311d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "104f3d42-9ed5-4deb-86f0-245b5f39d554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff1eaab-7eab-4706-89d0-e70859b75523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f266f5bc-0eae-4b7b-8c2f-126a9603c919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1cb991-3ebc-47a5-87e2-896dedbcc1b8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51e5632-3dc2-4a06-850b-fa66fe982ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02bd2415-c29a-4761-8e4d-b11aaabf7e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcc3def-4ba0-421c-9a8b-566ce3d42844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb646b4-aed8-4ba9-b136-4ec5c6820ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540d241e-00f6-4045-bdaf-390168256c6d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ede1c8-a542-48ca-83fe-1c224470369f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6730a40b-eef0-4798-9103-d897eafb6817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e596e8c1-61b9-490a-a7a9-081e51b274ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36458c26-ec57-448b-bc5d-4715b8234f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d79273c-de8a-451a-bd22-ce4aaf24d5e3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e145bb-8e03-4082-a1d6-61c8ac5872e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2879dd2-066f-4036-9c73-43ef3af09e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871bcc63-b438-45e9-8f9d-4b62f470ad34",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa6200db-4154-43fb-9ad0-1c1651764ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8aeab2-27e7-4ba0-b315-ac80f5c29982",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37503a7b-e6ca-4723-a93a-99d99a363397",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f22866c6-c8ed-496c-b87f-f18887dbaf1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046ab683-7caf-446d-a5ae-b21f1b06920e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f158cbed-ab68-40cc-a2b4-c5cfc6ded6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcfd1c2-5410-4c08-8d09-d25698ab812d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736dd9f4-2199-4913-a6f4-e8d0d3968cbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32647beb-3111-4593-8777-0e4b54c9bb6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94037de-d86a-41f4-a4bd-df5fc97b7e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faba4de1-ea48-4e65-bbc7-6ff1b0a7c161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95de8e1c-9376-471c-8392-de0ada587c90",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f03334b-f77b-4696-b6f6-f2dc73844204",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "639fbf3b-a661-499c-b158-7f0b4cfe50db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "363fe126-1097-4c04-b768-b3a6cf3cd65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97dca3b-07f5-4fcf-a56b-936056a97c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4c9fc1-89da-44e1-a5f5-ea71d9b519a2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30763d28-3374-427f-bc51-3388582c8339",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d66599b-ce22-4fc8-bdc9-a1361c72a89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4704946-fb7d-4020-9614-dea82bba9d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2a56f5-ebea-445b-8af8-393dcd4f98a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151934d0-13f8-4f12-94c8-2ca18e8b2f2b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3650f7a-7eb4-416a-b9e2-df70fd86b40c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d32a1ff3-7fd7-463e-bd9d-b59137902130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97bda2d7-9d36-45c6-9f7d-4459a0530d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277e3dcf-4e59-46a3-adc2-72b46e5dd581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca816d52-dc54-4b86-bdd6-049a612b0ab2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d0fcb1-22e7-471b-a5ed-270c6d2d2813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc7feb8d-7db0-4f7a-bda7-872561528e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1310d2b3-d87d-43ff-bcf7-ccc4c5152022",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2840a53f-bc50-4945-b06b-030585ebb835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462840c3-11ca-4b9f-953f-3f0dc50c828d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5a09ff-a40c-4738-b962-3af69026a34b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90fdc0a5-b3dd-4a09-a7f9-dc8c3fcfbfe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e17314-0d19-42a0-806b-e6919d4d7569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02546856-ef4a-4678-a6d5-5b1dab7b4001"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f39cda31-67bf-49cf-b2f0-7bd1423ea6c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f5de04c-296a-46af-9ade-1917b1ad325f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b7ccb59-9178-4b6a-86cf-274e55d1dc77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30b4ec44-a309-456c-b1a2-46b4356b0f94"
                    }
                  }
                ]
              },
              {
                "id": "d08494a0-aea3-49bc-9562-c505ba7b6e4a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6547bdb-0d0c-4ab9-bf1f-590aefdc59f8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b883b85-1ca8-4ec3-9574-f6c169a26b8f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f36eb5ea-c7f3-4424-853a-f2ab4c334ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba5ff7a-6b01-40ff-a80f-09c536da8867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b118f1a4-870c-469d-816c-ddd3dc773fe0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3d233f2-7c91-4b02-a7d8-1c7c20389d36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0013c84a-5efd-4bb4-8d3e-a55b5f8f3424"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a4573ab-4304-4c80-b3b9-bc205a911808",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcaac7ee-73d0-4991-adce-dec6070f6b10"
                    }
                  }
                ]
              },
              {
                "id": "86300def-2a02-448c-9fa4-6843aec21088",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b281ccb9-2a68-4499-9513-eb102d2d70f5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d43f6b-058c-473c-a720-2fa3d2560502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e335bfa5-0f96-42d8-8c55-67f668b65a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6297d64e-9055-4fe1-93be-b2dcd244fae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f12ff5b-8897-428a-9de0-cc07cf30ad1b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5188827e-9a90-40d9-bca5-ae08cbc3f4ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "50f54f15-4e07-45e8-9627-74761059c8aa",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9146e754-813e-4616-8d4a-83201e6e2b38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a21924b0-a70a-4041-b8ff-9f7af329bebf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c696a25e-0216-49b5-a531-c3352ee3acf8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd3815d7-9646-43e5-9351-60d12cec85c5"
                    }
                  }
                ]
              },
              {
                "id": "b16eb7d8-bf33-43df-92a7-bafbb312849f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4c85702-e5cb-430c-a967-e5f9f0578123",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ff091275-b803-4627-a698-c76a17069f79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08c3b1b0-a029-4f60-b629-7f1fcf4cef97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0250af71-1347-4b6b-acd5-25d2432701da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf39e4a9-069f-4031-9cc2-60b5b2a25429",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e7b93364-1cb7-4a36-81e3-bf66a0ab277f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a57dfce2-ddf3-446b-a605-c0a7d359daa6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0fc89514-26a8-4d32-a474-ee0bf6d00db5"
            }
          }
        ]
      },
      {
        "id": "835e7a51-da82-4a18-a2ae-bc102d2075bb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "73a94d50-42e7-46b0-b825-dc120c0017cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b27ec15d-6cc1-4608-9de2-9f49922f558f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3e1adaa-deab-4b78-a5cc-b81f9e1fc821",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d31024-f5f1-4259-bfc1-c5423470f535",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f3942e34-4820-4ccd-b076-ea710efc9aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f074fec8-d6d8-4b14-9a05-e303b33acb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a100731-a892-4125-9743-79e609b4433d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70b909d0-9dee-4cc3-8111-6e90baf80dcd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43d20088-3d45-4e56-81fb-0e37b4e606b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d5c9c18-09e9-4ff0-b717-270d1b5931cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "692131ef-25a2-4440-b6f5-bfb529058c04"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3685a9fe-7431-4b33-b484-3a8b1456ca25",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b139cbe9-20f1-478d-a154-d133b47946f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce530cac-ebce-4276-9b45-a0c751e17425",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b3e44b9-c066-4252-bf54-912e22efbf7a"
            }
          }
        ]
      },
      {
        "id": "fcaf2d32-4332-4eda-ad33-7372963fa225",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f1f23101-4c29-4679-a786-84beecda706d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "575131d9-7eba-4e04-a856-75d63d16b0d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92a21fdb-1c83-43ab-8560-97835ffcf9d1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0e57ef-3c96-470f-b88e-0dd7319a85d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "211c2013-36a8-4e1c-a951-b1cfcaca0407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef9409a-100e-46a9-9f69-8490b50f1ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df04cbcc-7007-43cf-b859-e98c9c3c52a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94cc77ee-0c2c-41bd-ab7a-9fab385a21fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73cc771c-9e5d-49a8-b076-948b3f54fa3e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83ffef61-c3ac-4e32-97c4-3080649a35f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f0b47f1-9701-4308-9a70-6c1e4b1de749"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a01dddd-772c-404a-86ef-daaae5dfbcbb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "36286e12-4952-4c65-a87b-97d30eb987ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02465f87-9855-4e6e-8d3f-0763415f7979",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57923675-8906-4297-a74b-d6bb0d29079b"
            }
          }
        ]
      },
      {
        "id": "7eb03a5c-5797-45a5-a76c-20a6ef83ebdd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "587b2688-947e-4501-9aff-c801d0a2863e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "912473cf-40a3-4224-8fc1-a681cf9ccac9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77803030-9669-4229-9e3e-3e3e7338c4f6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ae2d5b-cc46-4f24-9225-d3a8d0f9d6d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fb35a70-8d4d-4020-ae02-df8d5e1e2deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cf129b-74ea-4d5b-8e36-6cb689dc3e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd20c29c-eba4-4c9b-b064-a5df8191f0e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b1a2767-3b33-4348-b7eb-7c67e13748ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "250cbae3-a807-407a-b08e-106e2063161d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b47bca6-9c2a-4d1e-9690-309397733faf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f9334fc-04c4-4720-9a95-9d0eb518d436"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d19b4fc-45a9-4454-856e-9aadd5bc2c05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9400ed60-b1e7-413a-b91d-fa75b84f3158"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1620f34f-b086-4ee4-b82a-7e6b3a10149e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b19bc2a6-0828-47a2-8666-bdf571407c3b"
            }
          }
        ]
      },
      {
        "id": "516b556d-7dc9-4c3d-8293-0ef04a043278",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b4d32df-279d-4493-91ab-27dfea913881",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db93f460-1b5b-4a50-acbd-fee11abece93",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "751bcf49-1986-45ad-857f-a302f8b7fa7a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54f66905-3b73-49ef-a2f6-3b64d378b997",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5d653b1-27be-4106-be47-94ed49d349d6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 55.64285714285717,
      "responseMin": 16,
      "responseMax": 567,
      "responseSd": 75.91635583917488,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717029443128,
      "completed": 1717029465760
    },
    "executions": [
      {
        "id": "17423270-2081-4c09-9a0f-7d2036bcdcb9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "29b15ded-08d5-4139-b70f-5b3377160d57",
          "httpRequestId": "3e3bed1a-29b1-4c58-a029-2c16a4ee2d65"
        },
        "item": {
          "id": "17423270-2081-4c09-9a0f-7d2036bcdcb9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7c5ff246-2003-42e0-b17d-9917f5385d3e",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 0
        }
      },
      {
        "id": "7fa7346d-3c67-49c2-b8da-f7058eabf8bc",
        "cursor": {
          "ref": "c2fb56a4-af4b-4f9b-beb2-a25b610f4351",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0fbe2be6-261a-4ddb-99e1-a76c158c804d"
        },
        "item": {
          "id": "7fa7346d-3c67-49c2-b8da-f7058eabf8bc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7d8d35a8-cc35-4041-9502-b4d96388e4f0",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 0
        }
      },
      {
        "id": "8a6a5684-4e68-45aa-bc4a-2ffbdcdaf116",
        "cursor": {
          "ref": "639b227e-ec25-476c-8e75-ee220d3dad4f",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e0cac242-746b-4ead-bf45-572d3f645e09"
        },
        "item": {
          "id": "8a6a5684-4e68-45aa-bc4a-2ffbdcdaf116",
          "name": "did_json"
        },
        "response": {
          "id": "7bbc905e-6348-4dc2-bc12-61513f723e97",
          "status": "OK",
          "code": 200,
          "responseTime": 224,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5a8d2e-e738-4105-9ef3-c34297ff7e76",
        "cursor": {
          "ref": "f8dd4757-b87a-451b-8a63-647de853dcbe",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0a39ad7-14b4-4e91-bd45-1e5fc068a386"
        },
        "item": {
          "id": "4d5a8d2e-e738-4105-9ef3-c34297ff7e76",
          "name": "did:invalid"
        },
        "response": {
          "id": "39210b91-021f-4e15-9e5c-c8b71a5179a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5a8d2e-e738-4105-9ef3-c34297ff7e76",
        "cursor": {
          "ref": "f8dd4757-b87a-451b-8a63-647de853dcbe",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0a39ad7-14b4-4e91-bd45-1e5fc068a386"
        },
        "item": {
          "id": "4d5a8d2e-e738-4105-9ef3-c34297ff7e76",
          "name": "did:invalid"
        },
        "response": {
          "id": "39210b91-021f-4e15-9e5c-c8b71a5179a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e13835a-2780-4c4d-90ec-db2bf890bc3c",
        "cursor": {
          "ref": "f2a8d63a-4884-4f93-8061-6283e5100faa",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8761e0eb-5bd5-41a6-937a-e1a0a08431f3"
        },
        "item": {
          "id": "3e13835a-2780-4c4d-90ec-db2bf890bc3c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f52423ef-d2aa-4a71-a19a-fe5077a9da02",
          "status": "Not Found",
          "code": 404,
          "responseTime": 339,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49faf08-ebc7-46a6-9550-54cfc5963115",
        "cursor": {
          "ref": "99a67701-b7e2-4efd-8005-e21d872a6ded",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "930c5d78-31ba-448f-903b-7af4cedd30f0"
        },
        "item": {
          "id": "a49faf08-ebc7-46a6-9550-54cfc5963115",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "991fec84-69e2-4ad3-8ed6-c1cfc139dc33",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820c6ff3-81d0-4efa-8f93-f6becb302402",
        "cursor": {
          "ref": "1ed13a22-dce5-4946-b252-a480c7080b89",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3a6da53f-1efe-483f-b454-2ee85638cb9c"
        },
        "item": {
          "id": "820c6ff3-81d0-4efa-8f93-f6becb302402",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2c413b9f-5f74-4bf6-82c8-d068258426f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe04190-ab9a-42f3-a101-0f1b31ef0a46",
        "cursor": {
          "ref": "af383fd0-3de8-43dd-9564-415ecb64406e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dd2e1ba6-9e5e-4e04-8d96-d3b840850d6a"
        },
        "item": {
          "id": "bbe04190-ab9a-42f3-a101-0f1b31ef0a46",
          "name": "identifiers"
        },
        "response": {
          "id": "b1a64673-c75d-43d5-b529-4ab73114afe0",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca895f01-37fc-4700-83fd-81b0138c529d",
        "cursor": {
          "ref": "90c81190-fea9-4a35-9512-ab5bfc202e95",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e62d2b3e-cffb-4ca4-9415-e77e6f756adc"
        },
        "item": {
          "id": "ca895f01-37fc-4700-83fd-81b0138c529d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a19f54a-c700-478e-bd61-4b68e9812095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fa67cc-37c0-418c-929c-d308e428e409",
        "cursor": {
          "ref": "f20d7ad3-ae8c-44f5-8ae9-172593d32b8f",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e5c841a0-83d8-4640-81fd-6479c2004281"
        },
        "item": {
          "id": "e8fa67cc-37c0-418c-929c-d308e428e409",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "af37aab6-b790-4cc2-ad6c-807838171dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749f23d2-60e4-4c73-b212-0dfb13e818b2",
        "cursor": {
          "ref": "cf6eaaf0-7545-4580-a698-747e3c41107c",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cb925a74-8024-4c42-861b-609b1710c0dd"
        },
        "item": {
          "id": "749f23d2-60e4-4c73-b212-0dfb13e818b2",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a9a44688-3020-4b7e-9557-d3dcb1880ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e1b6ad-721c-4b51-8b4f-79ea1c51a73a",
        "cursor": {
          "ref": "66d72072-faec-4eda-9cdb-5a4a7f493206",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "84082de3-a0fb-4818-9ffe-612766d5ca90"
        },
        "item": {
          "id": "07e1b6ad-721c-4b51-8b4f-79ea1c51a73a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b0091e33-f873-4e27-8581-72f89615fe17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7b6f03-a6e2-4058-b677-2379a4689313",
        "cursor": {
          "ref": "eb784c86-5f0f-41e1-8075-ee87ac20a614",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "de1a3b3f-5aab-41f7-9b92-d27228682a99"
        },
        "item": {
          "id": "4c7b6f03-a6e2-4058-b677-2379a4689313",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "253d4b9e-798b-48da-ad66-eaf64931c91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f149cd28-110f-4008-bb65-5fa6d2b97022",
        "cursor": {
          "ref": "e8228ed0-023f-4d82-88df-36ec5ebd21ba",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0cf045b4-2695-441a-82f1-f726094bed7c"
        },
        "item": {
          "id": "f149cd28-110f-4008-bb65-5fa6d2b97022",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "18033e85-cb8c-4e28-ad9a-781977c9cc48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802b8def-1b6d-43c9-9455-e418769f9187",
        "cursor": {
          "ref": "8486c808-a22d-4395-a46f-0ca846ad88be",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1c1909f5-2119-4f2e-908a-d980af5766a4"
        },
        "item": {
          "id": "802b8def-1b6d-43c9-9455-e418769f9187",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8b4b160d-679d-4c19-b023-997b515ec44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab07f762-9e70-4a41-aa66-1df8ec433f60",
        "cursor": {
          "ref": "ec1db760-fc35-4359-8708-ac651f7fb324",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "907deb49-5cd4-4198-8c89-2f5cb4174192"
        },
        "item": {
          "id": "ab07f762-9e70-4a41-aa66-1df8ec433f60",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0ca56365-6f85-4d53-9ec9-b39bfd95aeb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87274d3-7351-472f-b8ad-57baf6dfc61d",
        "cursor": {
          "ref": "1c7799de-f1ce-4962-a112-bb9795bbeac8",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6a040121-8c8f-40ce-9933-1d6fd8f17c2e"
        },
        "item": {
          "id": "e87274d3-7351-472f-b8ad-57baf6dfc61d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5982df91-682a-4dfd-a10e-573d9c87e247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9559cb1-7c33-4d15-9c4e-ff487997d72c",
        "cursor": {
          "ref": "62e8c05f-4aa9-4fd6-bebf-017a7433085f",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0018bda0-231f-4fb3-ac17-9b560f851408"
        },
        "item": {
          "id": "f9559cb1-7c33-4d15-9c4e-ff487997d72c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1332655d-a49d-4d61-ad3e-42aed6ef4fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447fa8d1-8949-4b0f-ad15-736e35e71f43",
        "cursor": {
          "ref": "81f07cd5-1353-46a0-a5b3-f5337b485ccb",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7cb3819a-ee5f-4b66-845c-27a5ee65cb63"
        },
        "item": {
          "id": "447fa8d1-8949-4b0f-ad15-736e35e71f43",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7f209d31-190e-4efa-81ea-323e4e9881c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959e639f-c217-436c-904b-d85b3c7254ad",
        "cursor": {
          "ref": "04b14505-153b-4e78-a991-28207dd8482b",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "628330d4-b457-496c-b2f0-0c2f4427cb19"
        },
        "item": {
          "id": "959e639f-c217-436c-904b-d85b3c7254ad",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8aa8184e-492b-4fc2-86a1-fb3c7f912b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d5a2d7-d1a9-4c1b-8cc8-b134a5f0c8fe",
        "cursor": {
          "ref": "caab51d0-e958-435d-9b9b-7f512aa07554",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "20502c11-eb28-4a44-9353-f84fc5bbe854"
        },
        "item": {
          "id": "c9d5a2d7-d1a9-4c1b-8cc8-b134a5f0c8fe",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0b00e265-0d12-4f79-a3cf-09d65d53ee91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b37185-4531-48e6-83c3-e7c57d6d6dfc",
        "cursor": {
          "ref": "226ce840-a450-47c2-9b39-e3077615a4ba",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1ebb9dc6-5ed0-4374-acaf-a7e4ae738fe2"
        },
        "item": {
          "id": "56b37185-4531-48e6-83c3-e7c57d6d6dfc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "daf2f05e-40a6-4f6f-8c4b-5d40fe8c8f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f220c5ef-cb0e-4d34-bfd7-1be009381dfb",
        "cursor": {
          "ref": "f377a92c-0d4b-4cd5-96c5-e0d928f62059",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ffa23e9c-3faf-41c5-869c-23999811d2c3"
        },
        "item": {
          "id": "f220c5ef-cb0e-4d34-bfd7-1be009381dfb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d4b0ff9b-66c2-4fa5-a165-b02cea8a7069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b893c78-6ab4-499c-9f2c-036b96a3a037",
        "cursor": {
          "ref": "c0ebc285-a551-4e42-9bb2-26b17f70e232",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "84ced739-015b-4b7e-93d9-547e2e976348"
        },
        "item": {
          "id": "1b893c78-6ab4-499c-9f2c-036b96a3a037",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "de125fd7-61f4-462d-84bb-ea979829fd74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b188fd26-f45c-4d7c-9584-4157277fe4c2",
        "cursor": {
          "ref": "d647e65e-7609-491f-9b6d-6b2d77c81c1f",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d7ee2db6-98fe-46b9-865c-4f1c7306b6b0"
        },
        "item": {
          "id": "b188fd26-f45c-4d7c-9584-4157277fe4c2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "525bc665-0c15-49ca-933a-bc1ebb03e04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca9fb44-b7d4-4a25-9ca8-999e94244607",
        "cursor": {
          "ref": "ffbb20a1-0dc5-46ff-877c-9ec5baf2c3e0",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4140feda-5332-4141-98c0-5d17e46328dd"
        },
        "item": {
          "id": "7ca9fb44-b7d4-4a25-9ca8-999e94244607",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "18168a09-44a4-4163-9d70-64871e4f7fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12bb29dd-e2d1-45b2-a186-146ce0f81a7d",
        "cursor": {
          "ref": "1186d1f1-eec3-4a06-b8b6-a78b5f70166e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fbac0d7c-62e6-47f6-98fe-4849d6588eb5"
        },
        "item": {
          "id": "12bb29dd-e2d1-45b2-a186-146ce0f81a7d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ca47c568-8ffa-4db9-9035-2968a6c6362e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bbeee4-4bbe-4e8e-af30-6ace776196c2",
        "cursor": {
          "ref": "011bce50-9216-4686-afb6-93c90e58f215",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f468d6b4-c6d9-49ce-b407-d2ffa36cfe97"
        },
        "item": {
          "id": "b3bbeee4-4bbe-4e8e-af30-6ace776196c2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a37c8cf1-6170-4afa-960d-5500a4ad6f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653b7109-6a4c-4656-b94e-9030a6957999",
        "cursor": {
          "ref": "1ec7c28f-1f53-4ce9-9925-1e8a670688c0",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9cdcb911-4d58-472e-abd4-364525945e57"
        },
        "item": {
          "id": "653b7109-6a4c-4656-b94e-9030a6957999",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9b565274-79a9-4a6c-b57f-5d20bd0203ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d6c3b5-8e0c-463b-9a7a-b77c20dfc880",
        "cursor": {
          "ref": "5c1ae1d5-7ba5-4aac-bbf9-212a0c23559a",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "56501e44-44ce-4c92-a56a-a66f6a3d726a"
        },
        "item": {
          "id": "14d6c3b5-8e0c-463b-9a7a-b77c20dfc880",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4c1c5131-dd09-4c37-a5b0-ea2082b7072d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98346748-4baa-44d0-ba49-f0f5e76f644e",
        "cursor": {
          "ref": "691cd3c6-b269-4df7-b817-240779348de5",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ed45023d-380f-433b-94af-06f96e925422"
        },
        "item": {
          "id": "98346748-4baa-44d0-ba49-f0f5e76f644e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2575654d-ee4c-4760-9488-b135a8ad1cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da700b4e-4642-4140-b687-53bbb2b9ede2",
        "cursor": {
          "ref": "76e71eae-219b-4af5-90e4-a2dfaf6ab975",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e4604ef5-50e9-46cc-9cdf-128c48db1ed0"
        },
        "item": {
          "id": "da700b4e-4642-4140-b687-53bbb2b9ede2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0859de7c-184e-42e1-a40c-5daa740c4973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4f007c-2c63-4a59-b415-1f8dc1da829c",
        "cursor": {
          "ref": "e1aac8c8-231b-48fc-8c51-8e9f84aa6c3f",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6073a26b-10c4-416d-b012-e74d591d9e3f"
        },
        "item": {
          "id": "2d4f007c-2c63-4a59-b415-1f8dc1da829c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5aa089d1-dbec-4823-8e70-1edd40ac9938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501eaf69-f2e1-4bf1-837a-650615b6cde4",
        "cursor": {
          "ref": "18fdfb31-c7ef-47ef-a2ee-51a5d0b5590f",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e8581e30-5c6c-4ce0-b2f3-65fb274403cb"
        },
        "item": {
          "id": "501eaf69-f2e1-4bf1-837a-650615b6cde4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "65fbf3f5-6d53-4c12-b1e9-55aded28196f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699d49fd-9edf-457b-a29b-7350cf281909",
        "cursor": {
          "ref": "cb2e92ad-9b82-4ca5-befd-cdcd78c1fd1a",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "05655bad-6f78-4bf4-956c-589006ed4c49"
        },
        "item": {
          "id": "699d49fd-9edf-457b-a29b-7350cf281909",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cc58a843-650a-405a-b1cc-c45c8b62951b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6021b06c-ff37-40d6-8131-85557db74e22",
        "cursor": {
          "ref": "989af426-0e90-4bd5-a121-184527ebe782",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "54aa7db6-8f1f-48d6-8eec-69565e1c4f15"
        },
        "item": {
          "id": "6021b06c-ff37-40d6-8131-85557db74e22",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6a7b6db9-ccd8-42ba-b213-d7332633f0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b780f18-8359-4635-8ae2-8e33b6c3d3c8",
        "cursor": {
          "ref": "88d72f67-726f-4075-9141-58959d8ae383",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b7092c1f-4914-4d24-9e40-3728249dcdfd"
        },
        "item": {
          "id": "8b780f18-8359-4635-8ae2-8e33b6c3d3c8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "805bf227-164c-4b13-9188-3033a30f0d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d0b047-ef53-4417-8f3c-f9551b5b94e1",
        "cursor": {
          "ref": "356637ac-39a8-49b6-ad18-4ebeae3f058d",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f5705d29-87c7-4137-9061-0c7c48299820"
        },
        "item": {
          "id": "f6d0b047-ef53-4417-8f3c-f9551b5b94e1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "168a0234-7f4a-41dc-886e-6b9957a0d93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eaae591-5e7d-4db5-bc8a-07ea32897bd4",
        "cursor": {
          "ref": "205cf0dd-b60f-489f-97ef-61995c4e67c4",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6daff83f-88f8-4ecf-a8c3-1ae374866353"
        },
        "item": {
          "id": "1eaae591-5e7d-4db5-bc8a-07ea32897bd4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d357faa6-559f-444c-b0a4-1f28d78dffb4",
          "status": "Created",
          "code": 201,
          "responseTime": 567,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d1bc2324-ad2f-43d3-86c3-cb1f959920dd",
        "cursor": {
          "ref": "63526b7e-d119-4213-94fc-2d6734f1a96d",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a1051b43-ff9c-4cd4-9912-6de4a3f2a666"
        },
        "item": {
          "id": "d1bc2324-ad2f-43d3-86c3-cb1f959920dd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3441a9b0-eedf-466e-a7e6-c70b160b0d37",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "71bf0ff7-f29b-4068-a9d6-d946a20e971f",
        "cursor": {
          "ref": "1c651a05-218a-44e2-a1eb-bfa0b2c66eb6",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "77fbb4fb-8ff6-4695-a81c-441526d89ae6"
        },
        "item": {
          "id": "71bf0ff7-f29b-4068-a9d6-d946a20e971f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "222860b0-185f-429e-8f00-909d7077098f",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "fd11a8fa-ac7d-4584-a5a2-0e1da96fa164",
        "cursor": {
          "ref": "5f2f920a-2e39-48b8-9d1d-e74ce7d94ace",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "da619355-038f-4361-a739-7b03ca5ea19e"
        },
        "item": {
          "id": "fd11a8fa-ac7d-4584-a5a2-0e1da96fa164",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f95e2e3a-f2df-4360-961d-744be6ef6a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9d7716-1449-49e1-8666-d4e409d6b03c",
        "cursor": {
          "ref": "9aaafbd5-2104-4aa4-8fe2-4c306a58c306",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9496438a-48e9-4829-a28b-1b763f3ded88"
        },
        "item": {
          "id": "ec9d7716-1449-49e1-8666-d4e409d6b03c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8a27414e-3b6e-442f-8dac-2dec8881cbea",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "216de5a3-f28f-497c-92d5-5c9d0cc49fc7",
        "cursor": {
          "ref": "ced40804-2967-496d-b797-caf6af0b3ec6",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5a36fc28-db13-4280-81ef-e2f3960361e9"
        },
        "item": {
          "id": "216de5a3-f28f-497c-92d5-5c9d0cc49fc7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7ef47a58-e501-4a1b-b57f-a2a5456c66bc",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a6836bd2-d29d-4135-9f3a-3a4ba9210a95",
        "cursor": {
          "ref": "3e6d9572-f1a0-4843-bbf5-cdfa920331fb",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4a0f088c-baf6-4251-8a9e-742a3802f3b6"
        },
        "item": {
          "id": "a6836bd2-d29d-4135-9f3a-3a4ba9210a95",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6976d996-d703-4c5b-935f-4cb5551e5090",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "05d7dc7f-607a-4d6e-a0fd-6a88f7419443",
        "cursor": {
          "ref": "8260500a-25a3-42b9-8e91-1a40203897fa",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2f13b1a1-78a0-4aba-bfed-29da35180a10"
        },
        "item": {
          "id": "05d7dc7f-607a-4d6e-a0fd-6a88f7419443",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e42ba942-b954-460d-9e77-f8c967e055da",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8b341d79-f010-43b7-beb9-6dc29dac7da9",
        "cursor": {
          "ref": "7bf6edb1-9374-43dd-8874-370bc3ddbe80",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7f7e796c-00ef-4b24-be1b-6c664be7ad36"
        },
        "item": {
          "id": "8b341d79-f010-43b7-beb9-6dc29dac7da9",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "20632ab5-c588-45f8-95c9-5b1e2a188485",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b1f5ed2f-747f-483a-9d8f-6c1211bb35ee",
        "cursor": {
          "ref": "a69ca599-82f1-4c61-97ef-9cda363b276d",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "581e0f38-2ff0-4694-8f01-032522da46eb"
        },
        "item": {
          "id": "b1f5ed2f-747f-483a-9d8f-6c1211bb35ee",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e8552844-eacd-4bfd-a54d-b93d1d5d96bf",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "86dc5cf9-7a31-4727-8813-9297a89684aa",
        "cursor": {
          "ref": "a82fbd64-1f80-45db-976a-da76d3b45cbf",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "05278c92-f6da-4efc-8972-dafc0983de4c"
        },
        "item": {
          "id": "86dc5cf9-7a31-4727-8813-9297a89684aa",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e3d7f7b4-5925-4113-95dc-27c4560bf0d5",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "da8064ab-f016-4993-a1c9-0e3ac727d671",
        "cursor": {
          "ref": "64d0cc60-e73e-46e1-9c48-b7225368a09a",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "30bed181-f424-40a0-847a-7c06de4bd874"
        },
        "item": {
          "id": "da8064ab-f016-4993-a1c9-0e3ac727d671",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7be18947-9bc7-450a-bce5-451ef02a1861",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ac6365d5-1263-4cb0-a37e-0f887ee9fa26",
        "cursor": {
          "ref": "fde2e844-ae93-4338-9bf5-8c1c1a24cd8f",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7152ab00-3514-484e-807a-a96275338647"
        },
        "item": {
          "id": "ac6365d5-1263-4cb0-a37e-0f887ee9fa26",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "47534f5c-85e5-4614-bc45-f691e13b8fb5",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3a951733-3956-4197-b79c-8a3db5a4e39c",
        "cursor": {
          "ref": "7e1865a6-6325-4da6-885d-1930e4c84895",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9b10498b-41a4-4530-964b-dd3df9df948a"
        },
        "item": {
          "id": "3a951733-3956-4197-b79c-8a3db5a4e39c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5cd3a618-cfed-421c-bfb7-c759edc5fad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f854750-522e-4657-ad82-f3798c637ef4",
        "cursor": {
          "ref": "e359de30-cc0b-4e27-8b52-608c6c45819f",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f02dd892-67b5-459a-ae9b-22c65d063316"
        },
        "item": {
          "id": "8f854750-522e-4657-ad82-f3798c637ef4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "aa9149bf-b68d-4530-a130-9a12ab10aa03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63d63aa-3569-4140-9b25-220372fb7615",
        "cursor": {
          "ref": "f07e365a-960b-45a9-b3e4-e09bc62d7dae",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "91de9227-5a55-43e2-90f0-0f0a5d3ae360"
        },
        "item": {
          "id": "a63d63aa-3569-4140-9b25-220372fb7615",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "18449254-f9dc-4709-9134-93f35b24c0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d1ad58-98ed-4b96-b4b8-a3a2b837efd1",
        "cursor": {
          "ref": "6e026009-15c8-47ac-8645-64cf2d3bc153",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "36586890-5035-4a1a-942f-9a488c092b96"
        },
        "item": {
          "id": "b3d1ad58-98ed-4b96-b4b8-a3a2b837efd1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "85b98467-e905-48c1-97a5-2c4849469994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb1d14d-ee92-46b3-97a6-6499811777dc",
        "cursor": {
          "ref": "a5d8a42c-8756-4c3c-acac-d5082018276e",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "776ee39d-6ad5-45a0-baa1-2bc1df2f853a"
        },
        "item": {
          "id": "5cb1d14d-ee92-46b3-97a6-6499811777dc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "499a648d-d671-424b-a588-bc06662f34fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c405e301-94d3-4257-a03d-3f6c144f4e24",
        "cursor": {
          "ref": "b7519b62-0e3b-4c71-a47d-bd9b11f5c82a",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6b304895-f3ba-494d-9ba9-eda5bce67eb6"
        },
        "item": {
          "id": "c405e301-94d3-4257-a03d-3f6c144f4e24",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9b0e0788-bf82-4efa-a76a-9bdb2ddc37aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73f551d-6825-4474-b05c-5a3715c3b0c3",
        "cursor": {
          "ref": "e2981fdf-3a72-42cc-a0a5-6fa5c529d2bf",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "114de586-9b1a-47ca-ab33-e68466818f08"
        },
        "item": {
          "id": "e73f551d-6825-4474-b05c-5a3715c3b0c3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c65a4de4-2094-4185-9a4e-a50f21d678ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491cb364-6163-4f2b-845b-e4f90d544845",
        "cursor": {
          "ref": "11867612-6c1f-4a61-8c2f-5fd50f4376f5",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9e6baead-7591-4f85-a03e-1106977aeed4"
        },
        "item": {
          "id": "491cb364-6163-4f2b-845b-e4f90d544845",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d546f2ca-246c-489f-9e29-af26fb82f6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcfa05e-d05b-4f49-bb90-2aa4d5c77304",
        "cursor": {
          "ref": "03d685e4-f817-4198-af28-ad5907120ba4",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "75cca057-e55b-46f4-8b09-1211af542c14"
        },
        "item": {
          "id": "9bcfa05e-d05b-4f49-bb90-2aa4d5c77304",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "78938ca0-1289-4c70-9a20-3b302de1fe93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d52eadd-5f6b-43e3-97cb-e5214cef1ea6",
        "cursor": {
          "ref": "5b7cfeff-4ad4-453f-8f6c-384152458afb",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "85079d6b-3868-4d10-9ab2-9f0e014a305c"
        },
        "item": {
          "id": "3d52eadd-5f6b-43e3-97cb-e5214cef1ea6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cff49135-205d-42a8-beee-f0ee597d0b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69dd3fac-0adb-4c85-8941-6927f9902d98",
        "cursor": {
          "ref": "a49cce7a-58c3-42e6-9c58-7e1259573f06",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "20493639-e869-4ca9-896c-d716f3aeb607"
        },
        "item": {
          "id": "69dd3fac-0adb-4c85-8941-6927f9902d98",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "13bbe05d-755d-4ed5-a8bd-9def72ddcf45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8450aad-ede4-4530-ab5a-c865abcc6979",
        "cursor": {
          "ref": "586942a7-a7ac-4ce3-aead-2d5bb8e2f246",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b55a787b-b623-4679-bbf6-4dc0b9af5808"
        },
        "item": {
          "id": "c8450aad-ede4-4530-ab5a-c865abcc6979",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ccbd6916-0129-4ba7-8370-e47ad632bd41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27693d2-dc97-4a85-9f17-3e5eb77be812",
        "cursor": {
          "ref": "e106b9d6-94a9-46da-9fd2-61fd887ee3a3",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e01dd5f0-6240-4d63-806e-acf8e81880a0"
        },
        "item": {
          "id": "d27693d2-dc97-4a85-9f17-3e5eb77be812",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b37d331b-b407-4993-be98-99a25f92370f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad651824-f7fa-4b12-91d5-15bd626d8959",
        "cursor": {
          "ref": "89b46f26-a4fe-441d-b14c-c826610e9d3e",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fee2585e-c019-46b2-8a7f-60bcd8ecf4ae"
        },
        "item": {
          "id": "ad651824-f7fa-4b12-91d5-15bd626d8959",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "722177b1-d38e-4e8f-920f-a673a054859d",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "160666b4-5801-45c0-a6cd-ea0b1537bd73",
        "cursor": {
          "ref": "f2417a3a-a732-4c51-82ba-27c5350b9d84",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9a7fac50-9d22-498a-bc89-969c766791c4"
        },
        "item": {
          "id": "160666b4-5801-45c0-a6cd-ea0b1537bd73",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2cea339e-1814-4077-afd6-155e57425a9f",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e9c5444a-87e5-417f-af1b-b0c4977c42d2",
        "cursor": {
          "ref": "9d3c1ed3-d5d6-4f92-a3f3-bdcd168dfa5f",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "da2c98e1-77d6-4daa-870c-5a48669de9e2"
        },
        "item": {
          "id": "e9c5444a-87e5-417f-af1b-b0c4977c42d2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "16ee1ef6-7bf8-4fe5-b87c-4eed9ec198bc",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8e945e9c-08db-4a29-a88d-ff2100b324aa",
        "cursor": {
          "ref": "d5a850b8-60bb-4b91-b2a2-625330f22e9a",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ce0b316c-2a59-4182-867a-05e1749423e5"
        },
        "item": {
          "id": "8e945e9c-08db-4a29-a88d-ff2100b324aa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "91f69319-f27e-4d03-89eb-0d1e8d613604",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4aee6c27-30a1-4353-a530-f5d22b5d6bea",
        "cursor": {
          "ref": "cf625812-2f5b-4d6e-94df-145bb8fa7897",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d46f6c21-63e9-4502-b5ef-b2ebb4d36f00"
        },
        "item": {
          "id": "4aee6c27-30a1-4353-a530-f5d22b5d6bea",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9efe0edb-a9c0-413b-b842-e00b992eb0a2",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "587df6b2-0e49-4ea3-9d4c-c4b9c8646e76",
        "cursor": {
          "ref": "1ac15616-32dd-4b92-abc1-97e1efa345d7",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6823eaa0-81b0-4a4c-b337-d59cd32bfc7f"
        },
        "item": {
          "id": "587df6b2-0e49-4ea3-9d4c-c4b9c8646e76",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2bf9f443-46d1-4412-8fa3-7817d7e9a72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fa10c5-de4d-4cb0-aada-cab71189f5ea",
        "cursor": {
          "ref": "2e684618-ddae-407e-a38e-114f344a8391",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1784bbcc-7dc1-499f-9fc4-fe7833c23cdc"
        },
        "item": {
          "id": "26fa10c5-de4d-4cb0-aada-cab71189f5ea",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "15ec6056-ef76-4080-af1f-064e4948f118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471902c0-5896-4103-a8a8-2df5a8de23ef",
        "cursor": {
          "ref": "76795b01-8472-4f09-8fa2-088bf126a711",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bafe6500-2f32-4b97-9c54-e4b42b52b2c0"
        },
        "item": {
          "id": "471902c0-5896-4103-a8a8-2df5a8de23ef",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c897d9de-5e00-403f-b17d-717012a1daab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b58cbfd-5e6e-43ee-957b-8525d46c2a90",
        "cursor": {
          "ref": "d7afe984-de83-4f9c-bbd1-b07cfd5e57e5",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "dcc81e75-0936-4d7f-95ae-304968b73b48"
        },
        "item": {
          "id": "1b58cbfd-5e6e-43ee-957b-8525d46c2a90",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1e7bf7e4-a510-4086-9e5f-e50c6d49522d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e769bc-a00b-4235-819f-4d6a0f841bf7",
        "cursor": {
          "ref": "25d3d953-5f24-423d-82cf-b6699aaac33d",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "502c2b05-8465-4d0f-baf6-4c34f3a9c7b5"
        },
        "item": {
          "id": "08e769bc-a00b-4235-819f-4d6a0f841bf7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "02b754cb-44ff-4ad4-a733-1dec073b9576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c06440-7852-4496-a958-d59148bdc69f",
        "cursor": {
          "ref": "4e93152f-7916-4216-b633-98a07d649d17",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ecc3eb49-e23d-4a9d-b4c1-a9ed2fef8c23"
        },
        "item": {
          "id": "09c06440-7852-4496-a958-d59148bdc69f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "946e2582-0acc-4ee3-b524-8795888574bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84ed6a1-62e7-4510-90dc-a9c399e612ae",
        "cursor": {
          "ref": "9c89c6fc-1e17-4891-a8a6-9d0bab852a5a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "38a445fa-af5e-4570-8e9c-c8065c15ae71"
        },
        "item": {
          "id": "d84ed6a1-62e7-4510-90dc-a9c399e612ae",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c764e405-119d-45b5-a431-5e3de11d4196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87143c8d-1bea-4cf0-8454-80cf30c21b57",
        "cursor": {
          "ref": "1ab79da0-44fa-4a18-b3cd-d4135cc8214b",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2cfd2058-4368-49e4-95bd-3f4418183e50"
        },
        "item": {
          "id": "87143c8d-1bea-4cf0-8454-80cf30c21b57",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c2b8b741-d208-4ad8-b1b3-505afd158e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6497ddf-89bf-43a8-aa75-db136a7ede08",
        "cursor": {
          "ref": "d6a8d91f-c86c-4f06-9533-759841e1d23a",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e8e9db04-82b6-4c04-80d8-467e0653ca23"
        },
        "item": {
          "id": "d6497ddf-89bf-43a8-aa75-db136a7ede08",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3a614a2a-5b2f-455c-a28f-58d0a3ab527e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66ffbb4-dce8-4fcc-a241-5c5ceba54464",
        "cursor": {
          "ref": "d8b713f9-8a06-4f21-a9f5-f4e605d442d3",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "726d33c3-29df-48b2-82b8-b2709593f597"
        },
        "item": {
          "id": "d66ffbb4-dce8-4fcc-a241-5c5ceba54464",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8e21d965-29d6-4716-abf0-31c0ade6df09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa642b1e-4ab1-4fb5-b17f-614b802caa03",
        "cursor": {
          "ref": "b07f0bf0-09d8-44e4-b66d-d5fb6d14be22",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9c0c839a-745d-4cde-8407-dd85f18589da"
        },
        "item": {
          "id": "fa642b1e-4ab1-4fb5-b17f-614b802caa03",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e6998f19-5521-4b4f-8456-050f99b09c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01726618-bff6-4157-9fee-0353e01ed6a6",
        "cursor": {
          "ref": "6a6b2afc-fcea-4ac7-a206-425ade2353c1",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2309ff72-980a-46bc-88f4-185e500b3148"
        },
        "item": {
          "id": "01726618-bff6-4157-9fee-0353e01ed6a6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "73804b3a-0e08-4c9f-be5c-822ab208ec2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da129951-18cc-48e6-9b87-20466150d292",
        "cursor": {
          "ref": "b05879cd-424a-447a-91dd-0fb9851703c4",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9e0e8c40-ce6a-4e55-ac29-e3426437a343"
        },
        "item": {
          "id": "da129951-18cc-48e6-9b87-20466150d292",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "466121b4-75e2-4fe5-8e96-db3b84e5b66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeaff2f6-bae7-4fa9-8d9c-7d6642836494",
        "cursor": {
          "ref": "8f0e73d2-fd74-4303-9fed-15be3ec260db",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "64b3abd7-4693-4999-b330-43a1c06de470"
        },
        "item": {
          "id": "eeaff2f6-bae7-4fa9-8d9c-7d6642836494",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "220e1709-1080-4cbe-a5c5-b7cda5d4c177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52869a02-1867-4f64-b686-f46eeaf4bc56",
        "cursor": {
          "ref": "2d6962e0-f435-45af-a50d-42993cb87e7b",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "12e41f8a-24d8-48b0-bd8d-c035b19ce6d6"
        },
        "item": {
          "id": "52869a02-1867-4f64-b686-f46eeaf4bc56",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1ab98e10-81d6-4065-b7ad-fb380cc898fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b1596e-213e-4a15-b9bd-45aa68308b81",
        "cursor": {
          "ref": "4d648a51-3a01-4896-9cfb-a17620bc2f54",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5debae76-9909-44a4-9423-7ebe456faebd"
        },
        "item": {
          "id": "89b1596e-213e-4a15-b9bd-45aa68308b81",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "64e14c0f-9562-457f-b355-560fc5b9ffd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efadba4c-75a2-4ef8-8d12-0ff48c5cf860",
        "cursor": {
          "ref": "b4830f99-52f9-4114-bf5d-d6670b110fd9",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "bcb5ff48-184d-4d15-92e1-504bd172e006"
        },
        "item": {
          "id": "efadba4c-75a2-4ef8-8d12-0ff48c5cf860",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b5a2f6ec-3267-49c0-85f7-c1f7047faf90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef27053f-49bf-4f9e-9a0d-a954c8ced112",
        "cursor": {
          "ref": "9332b626-92b2-47de-8f33-0520036ef52c",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9842da94-f182-41b2-a69f-89afef83a737"
        },
        "item": {
          "id": "ef27053f-49bf-4f9e-9a0d-a954c8ced112",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3847707c-b379-4510-b38f-ab591166f8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2624ffe-ea3c-457f-adeb-4370e56ddf4a",
        "cursor": {
          "ref": "e9500c53-3764-45d8-af58-502f02bf06b4",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1508eeec-679a-4c60-ba8c-ba821a934429"
        },
        "item": {
          "id": "c2624ffe-ea3c-457f-adeb-4370e56ddf4a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "66a18f60-41aa-4fc6-b677-de8d9321ec28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da7265ac-6284-47b5-a5e6-597b5cde2ff8",
        "cursor": {
          "ref": "78299026-a512-4570-a5f2-30745be27578",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "aa333595-97b8-4fdc-9626-598056efce41"
        },
        "item": {
          "id": "da7265ac-6284-47b5-a5e6-597b5cde2ff8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2d0411e4-b2b6-4242-b292-eab81152a4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d641e47a-f678-40a3-9142-351142b13525",
        "cursor": {
          "ref": "21948bae-da21-4656-9701-dcfad8dcc172",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fb993973-04e4-4dd6-bf88-d2e9af4cfe7f"
        },
        "item": {
          "id": "d641e47a-f678-40a3-9142-351142b13525",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d8dbd7b9-f440-4fb2-af31-870d8ac1bb31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46144a04-3025-401a-8969-f42d9c49bff0",
        "cursor": {
          "ref": "12593b97-9c86-4e66-bbb2-186beab8e71a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c3c38fb6-52e4-4222-b493-36ee601e0612"
        },
        "item": {
          "id": "46144a04-3025-401a-8969-f42d9c49bff0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "961a597b-9c9b-4113-a48a-781b3f345457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4335f3c4-1781-4d2d-ad97-bc72d93be6f2",
        "cursor": {
          "ref": "db446034-85cf-4038-a6f1-bcf1a876d22e",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "91a2024e-8a70-4868-a893-c99263504c61"
        },
        "item": {
          "id": "4335f3c4-1781-4d2d-ad97-bc72d93be6f2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5d776b49-e00a-4a05-a2bf-22e6df77f3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f20812b-b53b-4b53-959d-b667d5fff86a",
        "cursor": {
          "ref": "a19afd8a-3512-49c6-9320-8148e5cbbf73",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f972e472-c1f8-4fca-8928-d1fa966a4501"
        },
        "item": {
          "id": "3f20812b-b53b-4b53-959d-b667d5fff86a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ce9e6772-e751-42cd-966a-664c53fb9417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104db1e1-d750-4afa-af89-16cd7f8194b1",
        "cursor": {
          "ref": "ed5fbc6c-4e0d-411a-aa03-809b4b5543c4",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ee70ee86-784f-4b3d-87bb-63b167f2ef88"
        },
        "item": {
          "id": "104db1e1-d750-4afa-af89-16cd7f8194b1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c70cf333-bc8e-42a7-8efd-df972fbdc321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d893f048-aa08-4b94-8279-00a7c153ee13",
        "cursor": {
          "ref": "4c8328bc-b852-46b1-a321-cd877bedaa60",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "89cffb98-623c-4c8c-96ab-c8dfdf2edbb6"
        },
        "item": {
          "id": "d893f048-aa08-4b94-8279-00a7c153ee13",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3f95dccc-e986-4cfa-bea4-994f5641bc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f5f167-b8e2-419c-afdc-df0a9a08bb29",
        "cursor": {
          "ref": "2011b947-25dc-4a71-8db5-e144879b2f30",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "09b44946-0d4f-48d0-bfb8-5124d9efa6b0"
        },
        "item": {
          "id": "16f5f167-b8e2-419c-afdc-df0a9a08bb29",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4bd1ae71-2464-4ed8-8934-5475eab277e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9214965-b629-4b3e-ae34-412ea2d5bdeb",
        "cursor": {
          "ref": "75f73037-124a-4c8b-8552-b1cafd2313ed",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9f9a2a55-3940-4b06-b75e-3769c1d4ee44"
        },
        "item": {
          "id": "b9214965-b629-4b3e-ae34-412ea2d5bdeb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "98194cef-0ec8-4b0b-bb52-8f08d8cf1016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882d169c-2fd5-46ca-a87f-c6b6699c750d",
        "cursor": {
          "ref": "5e3580b8-fe99-440a-869b-3dc48d353c23",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2d4cd39d-c668-40bc-85d7-c2fbb2e8be57"
        },
        "item": {
          "id": "882d169c-2fd5-46ca-a87f-c6b6699c750d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7457723e-0b03-4d5c-b39e-385514ed7ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee33eb8-3b9f-463e-af81-aa5ce48fe7eb",
        "cursor": {
          "ref": "41a3a5f9-d6ba-4011-a7db-e40409980315",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5ebaaec7-910c-4c66-b2e8-90f72e433bb6"
        },
        "item": {
          "id": "3ee33eb8-3b9f-463e-af81-aa5ce48fe7eb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "678716cd-ce58-4764-9000-e9a462603dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc601d8-22af-45d3-bf89-cde19c7ed30d",
        "cursor": {
          "ref": "13c488ab-0d44-461c-a970-ae8532bbd055",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2b49f7bc-ee42-4048-9623-bb565278aeda"
        },
        "item": {
          "id": "5bc601d8-22af-45d3-bf89-cde19c7ed30d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e8d5b8c8-5801-4ee3-a395-62fc811e712f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2673fa1-8363-49e7-a041-0cf9b77639fb",
        "cursor": {
          "ref": "d2901f7e-08d0-47f7-b591-7beaaa2a4e45",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8a7e473e-670e-4b35-bcef-d21589b68a96"
        },
        "item": {
          "id": "f2673fa1-8363-49e7-a041-0cf9b77639fb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "12f976b9-f531-40fc-830f-bd3effb0db64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8765bf-5b1f-4769-b4c0-84ff2424e311",
        "cursor": {
          "ref": "a52bb464-005e-4b73-979a-55400feaaac6",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "eacfb76a-7cc6-4d8d-8f31-09f1fac900e0"
        },
        "item": {
          "id": "5b8765bf-5b1f-4769-b4c0-84ff2424e311",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5b42f5e5-1e15-47a3-846c-73222c29ae11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "77d395ee-9891-4ec0-97c4-0cedd52ae96d",
        "cursor": {
          "ref": "a68d1019-6b10-4ef1-8bc5-7e52d6bd1e45",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2b14f34c-1021-4a66-b601-5752a9a18cf3"
        },
        "item": {
          "id": "77d395ee-9891-4ec0-97c4-0cedd52ae96d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f7ce2893-2f2a-452f-ad66-f8b35b6494e3",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "10eb7d23-24ba-4801-a26d-0aa47842be56",
        "cursor": {
          "ref": "139b6566-e669-4a35-a281-d5379db18c9f",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d2c6fe8f-8f94-4491-aae5-d536ad8a727c"
        },
        "item": {
          "id": "10eb7d23-24ba-4801-a26d-0aa47842be56",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b359edf3-c0b2-426e-a81d-2e547ffb42b9",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "07651c23-b625-4b82-8951-c8ceb825b77c",
        "cursor": {
          "ref": "42013b53-20c3-4c70-aa3c-aa6f910bfab1",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "694247a8-ca26-43e9-a0c0-33952b82ee8c"
        },
        "item": {
          "id": "07651c23-b625-4b82-8951-c8ceb825b77c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1c2c888c-1af5-428e-b65f-cfc2b4baa28f",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "45755f51-fa13-496c-8c81-198ae3f0da4e",
        "cursor": {
          "ref": "935dc03d-d4fd-4a18-89cc-1fa78e1e1c09",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "44e29679-942e-46c9-a820-8e77738951d8"
        },
        "item": {
          "id": "45755f51-fa13-496c-8c81-198ae3f0da4e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "25add374-10a6-4eee-9c98-5efa7d5f7bf7",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "de802c75-abe4-44c8-aece-1b55cb53251b",
        "cursor": {
          "ref": "2aa5a196-c8b6-4888-b443-96e283cab23e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "73771465-bbed-424c-b21b-30158fea2803"
        },
        "item": {
          "id": "de802c75-abe4-44c8-aece-1b55cb53251b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fe80b9c9-811f-4a57-8113-530d6b18a1e8",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-30T00:37:35.961Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-30T00:37:35.961Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b79628ca-f8ae-402b-a1d8-8e28d6249769",
        "cursor": {
          "ref": "4c030f05-529b-4058-aedb-807a472cb259",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "75696fa2-7267-40cf-a491-f12fd6eb210d"
        },
        "item": {
          "id": "b79628ca-f8ae-402b-a1d8-8e28d6249769",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b20ab03b-60a0-4766-bcdf-130cd2cb3958",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4896f64d-31e5-4532-836c-4020c7ab0be4",
        "cursor": {
          "ref": "a38ffa11-9791-4e43-acfd-4ba5ff900b43",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "25db7372-f953-4624-9210-cc672665811d"
        },
        "item": {
          "id": "4896f64d-31e5-4532-836c-4020c7ab0be4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bfe369e1-f109-4e9b-a53a-3ff860df13b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ae5bb4-e174-427a-9de7-61feb44294d3",
        "cursor": {
          "ref": "a73f9811-b541-4232-9fc3-7584e50aa73e",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8b806051-8a6d-4590-92ee-f8b1db8ac8a0"
        },
        "item": {
          "id": "c5ae5bb4-e174-427a-9de7-61feb44294d3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "04c671af-dcda-45f4-80ba-e20a810cc06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f69ba9-6cf7-4d81-a1b0-d5a7632a332d",
        "cursor": {
          "ref": "32feae87-5970-4c36-8485-403a7bc02bec",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fe600122-dc44-46ca-b0bf-bd22d836dd52"
        },
        "item": {
          "id": "15f69ba9-6cf7-4d81-a1b0-d5a7632a332d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fcf6343c-157f-4206-8085-da33ed4514bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c46448-7205-4ea3-bf47-0f7343382fbc",
        "cursor": {
          "ref": "9d135c78-e9b2-44eb-b155-1de60dff05ff",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d86e1a0d-8ebf-4cd2-8c67-1243c80c577f"
        },
        "item": {
          "id": "51c46448-7205-4ea3-bf47-0f7343382fbc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "46c7f84a-c970-40bd-84a3-e054e914a121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02326b40-0945-4216-97d4-82dabdf7fd26",
        "cursor": {
          "ref": "ab1ccf84-a0ac-45ca-a3f1-775d21762d12",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "321009d9-6c76-4d16-82f0-87c33982620d"
        },
        "item": {
          "id": "02326b40-0945-4216-97d4-82dabdf7fd26",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "64e28f70-bc6d-4995-88f6-2f86163886cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629de6c3-534c-4f03-a8f3-1935ab4e5942",
        "cursor": {
          "ref": "0c633234-400f-4de3-8461-7ea4d87f490c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "966409fd-88c0-4c06-88fa-686e52ee3d46"
        },
        "item": {
          "id": "629de6c3-534c-4f03-a8f3-1935ab4e5942",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "020ddc31-59c2-4e6c-b610-dd8883414adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103c01a8-286a-4ee1-ab12-e95c7b19f9b4",
        "cursor": {
          "ref": "33de1eaa-444d-4ca9-9f61-ac1428e298aa",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5102a0a1-5c37-4ec8-b0a2-c7b4cead8451"
        },
        "item": {
          "id": "103c01a8-286a-4ee1-ab12-e95c7b19f9b4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2db08fce-6348-4e90-902e-fdd672da8bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605e835f-ab78-4422-80ec-6963a8c5f0c0",
        "cursor": {
          "ref": "f17ad790-13d8-4812-8b72-ebe4e34deb60",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "40ffbcd5-463c-48ca-ad2a-54a0feb9d6f6"
        },
        "item": {
          "id": "605e835f-ab78-4422-80ec-6963a8c5f0c0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e10a1900-98e9-491a-8303-0b21f91b4ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddc1cfc-f960-4dcb-9334-25dbc2cb0e6f",
        "cursor": {
          "ref": "0985b56b-1bb8-4eae-a59e-0e3e7bb2ceb0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "cadc7295-b192-458e-8475-ccc8758a96a1"
        },
        "item": {
          "id": "1ddc1cfc-f960-4dcb-9334-25dbc2cb0e6f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a348e01b-7789-44c0-81b5-229f5ebe0cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec92613-3649-49f4-83d5-0ac3ad116ff9",
        "cursor": {
          "ref": "f32a8031-57b9-4692-8ae6-3ed35814485c",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "dc4dbc14-99d4-4a86-a465-e036e27dc42c"
        },
        "item": {
          "id": "bec92613-3649-49f4-83d5-0ac3ad116ff9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aae825cc-2ef2-4161-ae05-f005d59b9854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf788c4-2d85-4c29-8aac-caf1c346a951",
        "cursor": {
          "ref": "4b1350e3-467b-4f11-89d2-4a3923cd34d4",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4dbf3c91-2a29-4cde-ba02-1c4e8f4fb96c"
        },
        "item": {
          "id": "cdf788c4-2d85-4c29-8aac-caf1c346a951",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8b1a91e3-212f-4c7a-8047-0975369cbd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c450da-5ea6-4886-97cf-04ca33984451",
        "cursor": {
          "ref": "1e017aa2-75be-45f6-b1e6-9829dc7b7fe1",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5e5c2868-253e-43f4-b103-8a31304c64f8"
        },
        "item": {
          "id": "d2c450da-5ea6-4886-97cf-04ca33984451",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fa0b94f4-3ac8-4e9c-8c1f-01cd327f811e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847b9172-0faa-436c-9f07-60286df2a761",
        "cursor": {
          "ref": "df92a6b6-be8b-406d-8a81-7f268b0327ac",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "31999ab1-2950-4983-8246-724f9b89a17f"
        },
        "item": {
          "id": "847b9172-0faa-436c-9f07-60286df2a761",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2cacea4a-d863-4465-9f0a-5647088515ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e796d34-2c13-42a0-a0ff-d63c7a38a449",
        "cursor": {
          "ref": "dab2507c-1761-4eae-8f7a-a95afe4e634d",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "db49766a-446a-4c08-9d98-143f63ce2a51"
        },
        "item": {
          "id": "1e796d34-2c13-42a0-a0ff-d63c7a38a449",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "601b159d-52f6-4a5a-8c2c-fd56d4ec1d17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "543dee3b-8be8-4305-bed5-11d9d1d3c81c",
        "cursor": {
          "ref": "afe3ca7e-6ae6-480a-bc3b-d241e4fde09b",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c2d01d9d-1d10-4d96-a661-51ca2c34b448"
        },
        "item": {
          "id": "543dee3b-8be8-4305-bed5-11d9d1d3c81c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1126ae7d-a508-4aac-bbd9-77fa1e92f4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a237961d-c2ae-4d02-90ed-a2ae10ba2df7",
        "cursor": {
          "ref": "dd96ef79-f631-493f-817c-22b1b97a1f68",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2aa5ff4b-af61-49b8-b475-6ea91b44d477"
        },
        "item": {
          "id": "a237961d-c2ae-4d02-90ed-a2ae10ba2df7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b2357962-9afc-435b-8c80-817dc35b9ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d83907-8430-40f2-9ac8-86c205d59c6f",
        "cursor": {
          "ref": "f6a74049-a3c6-4028-a30f-fe55c0420227",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b76c0886-e024-4849-b7d9-36819517d041"
        },
        "item": {
          "id": "91d83907-8430-40f2-9ac8-86c205d59c6f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "aec407c4-4551-4562-8d48-cd0ddcfeecb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6b0c65-420b-48df-99bd-8273694a863d",
        "cursor": {
          "ref": "baa90da8-747c-4e0a-a683-3f02d73deea9",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c5965028-b568-4072-882d-9e1328c5b0d4"
        },
        "item": {
          "id": "4a6b0c65-420b-48df-99bd-8273694a863d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "afe37567-4838-4b28-be89-9af827fada30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38bd4af3-2068-4f00-8dcd-d238d1231a76",
        "cursor": {
          "ref": "d3c01ba1-b13c-4cca-a6c9-acce30a13e50",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d99c1acd-5f81-4445-98d3-ecad13f2f052"
        },
        "item": {
          "id": "38bd4af3-2068-4f00-8dcd-d238d1231a76",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "195296ac-f613-4997-8168-11568cd05bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c46922-bac4-4a86-9e74-09f89417bb49",
        "cursor": {
          "ref": "f10d2568-4343-48a2-9163-1359b8af04f8",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2424daa4-bf6b-4388-9f1f-47b0155be0da"
        },
        "item": {
          "id": "93c46922-bac4-4a86-9e74-09f89417bb49",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fb732f4f-ddd7-4dde-9cfa-f510cc10a254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6454fbb-f4a6-4892-a527-9b964519b5a7",
        "cursor": {
          "ref": "68640a2d-48cd-45e0-b8e6-a6b25148dadb",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "77ec8c97-cb94-4008-a952-8c19f7ec34e5"
        },
        "item": {
          "id": "e6454fbb-f4a6-4892-a527-9b964519b5a7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7d4c7ada-4e2c-4996-9b03-9154ebdf4917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b7da6c-5e1a-42a9-a660-11307f9aea15",
        "cursor": {
          "ref": "c339a753-0f90-413a-b01f-4e87c83037b3",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "aa58e246-2d67-43eb-8ec8-2900e376c1b9"
        },
        "item": {
          "id": "a1b7da6c-5e1a-42a9-a660-11307f9aea15",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "24325396-8eb2-4bd0-bc9c-9f3a1d1aedfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0717a778-d47f-4e74-8ae8-d32ed3690c22",
        "cursor": {
          "ref": "ab4e047e-997f-4736-bef8-7a351e3a37f1",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e6048d00-a7e8-4547-9dcf-3657d564237f"
        },
        "item": {
          "id": "0717a778-d47f-4e74-8ae8-d32ed3690c22",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2bebcf53-4aec-4ce6-bceb-db1de44bab4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8af5211-6c7b-4228-8267-00d16432efb9",
        "cursor": {
          "ref": "885dab78-235e-49ba-9adf-91c1e889bd1f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "95a2ff80-ea0c-4772-9845-cbf9229194de"
        },
        "item": {
          "id": "a8af5211-6c7b-4228-8267-00d16432efb9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "41540740-1736-4b93-a208-646d7879566f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a105fcc-79e4-4bab-aad9-f390e84479b7",
        "cursor": {
          "ref": "b0e439a6-9eff-4079-bf78-f1672e2c2432",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3348fd77-68c0-439e-b239-f39af0445119"
        },
        "item": {
          "id": "8a105fcc-79e4-4bab-aad9-f390e84479b7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "010cee9b-3fcb-4db7-8fd7-8eebf2f4aa23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5067acf4-5b03-447c-a073-4bb915140117",
        "cursor": {
          "ref": "52191db8-877e-4f74-8597-d4e32b2682f8",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "44537d4a-e5bd-42ee-9b51-99ac71b6bf57"
        },
        "item": {
          "id": "5067acf4-5b03-447c-a073-4bb915140117",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d647d344-6829-4697-8b34-160fa685dbb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a1ec37-07fe-4820-bfaf-1f6130ff4518",
        "cursor": {
          "ref": "dccf97f8-b15f-443a-8533-3e349d1cfb05",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "099a5933-c39b-40a2-850d-5dd3d7e87428"
        },
        "item": {
          "id": "92a1ec37-07fe-4820-bfaf-1f6130ff4518",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "37c14559-cf57-43d5-bb23-fd6e1ef5d809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21076b3d-9d0d-4a20-b69d-60f8b4897a0f",
        "cursor": {
          "ref": "6aaa909d-ad5c-4181-950c-c70cf7994ecc",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "488f661a-44cd-4b0e-9858-8354aade9efc"
        },
        "item": {
          "id": "21076b3d-9d0d-4a20-b69d-60f8b4897a0f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8ec963da-34d6-40b2-9c90-7c46f2a52e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dad141-de12-4e3e-b973-de5d97f0effc",
        "cursor": {
          "ref": "a1974f17-56c6-4e2b-8a1e-6d256f0c57c8",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "49865cd1-e031-4d75-b13f-65f1c46820d3"
        },
        "item": {
          "id": "08dad141-de12-4e3e-b973-de5d97f0effc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "06b006b7-c3e9-477a-ad32-bf7d2fd459c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5d9c18-6c09-4552-aeb3-ae5cc373945f",
        "cursor": {
          "ref": "64d90e1f-4065-48ff-8009-0002680e62b6",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ff9339b6-4d40-404f-9d93-7cd7d744104c"
        },
        "item": {
          "id": "ab5d9c18-6c09-4552-aeb3-ae5cc373945f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "56d44213-aba0-429c-80cd-c71676f03d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407dbc87-9e8a-44b8-a762-0ae73b7f6c8f",
        "cursor": {
          "ref": "bf849ab5-bd31-44bb-bd46-3a2c0bf47304",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0ff7a6dc-e482-4d86-bdc0-ad0d638b870e"
        },
        "item": {
          "id": "407dbc87-9e8a-44b8-a762-0ae73b7f6c8f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "51d8a20a-602a-48ae-97ad-e7295a2cf1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab6900b-99ad-4008-8e71-77414c92beb7",
        "cursor": {
          "ref": "1a2de6b0-bfd4-41d5-afc9-dab3adcaa784",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6bd9b527-b899-4e24-a70e-ebbc54fef0e6"
        },
        "item": {
          "id": "eab6900b-99ad-4008-8e71-77414c92beb7",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "05a485b6-3eea-403c-91fe-effa91ea5b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14921aa7-cfa5-4db9-b159-5be75ab0fd9a",
        "cursor": {
          "ref": "02ba8463-83c1-49d2-8791-e37ac5c84726",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "aa397bf4-f538-4cf1-b212-2b9fe2436890"
        },
        "item": {
          "id": "14921aa7-cfa5-4db9-b159-5be75ab0fd9a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f6801969-51fb-4c4b-8918-373edbaa9f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca58007-881a-41ac-98d8-8afb60d45a3c",
        "cursor": {
          "ref": "25506a24-bd0f-4923-8942-cfd76c499b2f",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5c869146-3c7b-4ae3-bc53-2ce47cd9f42c"
        },
        "item": {
          "id": "aca58007-881a-41ac-98d8-8afb60d45a3c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "364c3449-05cb-4831-927d-055b07ed754f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d73ff350-ae0e-44b5-b83f-7bf27e60fd09",
        "cursor": {
          "ref": "f450cea2-f6ce-4ef8-b5c3-2317799041bc",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6c7c06f8-9f16-47b6-989c-7b8eb9aa9ae7"
        },
        "item": {
          "id": "d73ff350-ae0e-44b5-b83f-7bf27e60fd09",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7f40438c-73fd-4f2e-b48c-92ee199e0b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cca8a52-b55a-48ae-8609-25c5d7fbf333",
        "cursor": {
          "ref": "bc35dd40-201a-41d1-8f58-5bdea8be6a17",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ca7618ef-a997-4b88-a067-5bdb9d91826b"
        },
        "item": {
          "id": "3cca8a52-b55a-48ae-8609-25c5d7fbf333",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "210899e6-5aeb-4f45-834e-56ac9c75b801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06025ad6-9ebe-46a7-9cd8-ce00a9a679e7",
        "cursor": {
          "ref": "4eb6811f-c227-450c-a9f4-6ceb33648c38",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "02811759-3a3a-480c-a4e3-39d0f50480eb"
        },
        "item": {
          "id": "06025ad6-9ebe-46a7-9cd8-ce00a9a679e7",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "aef1c335-2c76-4f0f-93f5-3d97f65004f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f9af20-61af-4294-8041-a6327ea02b03",
        "cursor": {
          "ref": "729655c7-199a-4c76-a38e-aec2cc02da37",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ed244d83-62b8-4048-bdfe-727198f582a4"
        },
        "item": {
          "id": "25f9af20-61af-4294-8041-a6327ea02b03",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "94ffcff1-8cd1-49f7-8661-0bb761992356",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26fadb5-0b04-4e81-b8b5-bd1bec8138a9",
        "cursor": {
          "ref": "d6fffc1d-3a69-4c6f-924e-9280f50689fd",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a8ece56d-a27d-4aa3-936c-8661b3139846"
        },
        "item": {
          "id": "f26fadb5-0b04-4e81-b8b5-bd1bec8138a9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8b1c5c32-aca3-4955-96ba-a2f95d189a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9887cb07-494d-4d9b-b273-947c0e5ec36d",
        "cursor": {
          "ref": "621c9d85-8b6f-4981-89b5-02e7599de7e4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a019c211-0aec-45f2-9739-07b760baa62f"
        },
        "item": {
          "id": "9887cb07-494d-4d9b-b273-947c0e5ec36d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6e912986-e8ae-4c4f-bc51-6d0d94858d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b48841b-2e50-4cff-88bb-55475edd1312",
        "cursor": {
          "ref": "4450e896-6c58-46f8-9740-c0331049bad9",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2d0373b8-6d4d-4d28-a828-79036fd58931"
        },
        "item": {
          "id": "5b48841b-2e50-4cff-88bb-55475edd1312",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e4d0ab0f-9bd2-4a51-a68d-ca9df21d3f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7879e51d-dec5-4f53-a931-288765a1e129",
        "cursor": {
          "ref": "53bc5f3b-638a-4697-9ee5-30ce7e479cd7",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cbe1272b-5ca1-44cd-ab64-72bc6e662e92"
        },
        "item": {
          "id": "7879e51d-dec5-4f53-a931-288765a1e129",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "951f6245-ddd5-4a6d-b4bc-35869c6d3fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c3fa38-5e44-4ee7-909f-68770341e9ad",
        "cursor": {
          "ref": "4b4071aa-80d5-40c5-9bb1-0515da41ad40",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b0a81652-15f2-46b9-877b-92c22fa536f9"
        },
        "item": {
          "id": "65c3fa38-5e44-4ee7-909f-68770341e9ad",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d0a9dbea-5585-4385-9e37-9412899213d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7588c7f-cfde-41da-9df9-3dbd48d69ad9",
        "cursor": {
          "ref": "14dd25b1-5032-498d-ba56-b3f55b4362ac",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6276cad6-a426-4359-9dcd-1a09d4d06063"
        },
        "item": {
          "id": "d7588c7f-cfde-41da-9df9-3dbd48d69ad9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d997f3d4-fc1e-4206-966e-e105aff26f13",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "07f80725-0499-4c17-a4b4-c6826d926325",
        "cursor": {
          "ref": "bf31964d-c82e-438f-a0de-3d10c84202dc",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1ef925e7-bf90-4c5a-9681-f693b6321b00"
        },
        "item": {
          "id": "07f80725-0499-4c17-a4b4-c6826d926325",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8b7aa1ee-bffb-430c-9387-b3d336ea1c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef294566-5ed1-4e00-812e-a7b358577762",
        "cursor": {
          "ref": "4e646ab6-6d72-428a-94b1-763f89df510b",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "57d6afb6-b14c-471f-be9f-3b6c9134a1c5"
        },
        "item": {
          "id": "ef294566-5ed1-4e00-812e-a7b358577762",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "02377714-8095-43df-a549-5b3529705166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7520abcd-0221-4000-a392-6ec49945bda0",
        "cursor": {
          "ref": "d88b1af8-ceb1-4a38-a68d-86260368ab1a",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1d010cbc-e962-44e5-9b6f-25ab1f1a98cc"
        },
        "item": {
          "id": "7520abcd-0221-4000-a392-6ec49945bda0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "70074a52-dfd3-48f0-81fd-f8464cb930c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb01497-98b9-4109-a585-4d608143fba0",
        "cursor": {
          "ref": "a9036342-0b31-4684-ba7a-55b5f78cbd0f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a7932ef1-a419-4250-b9ea-e47f1b5fa905"
        },
        "item": {
          "id": "aeb01497-98b9-4109-a585-4d608143fba0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5200614b-13bf-4f4b-81c2-3d1951d9126a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e2a594-a6f4-4677-946b-c74109a0fa16",
        "cursor": {
          "ref": "85b4b114-b1fe-47ad-a4c9-334d936ee56e",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7e9bb84a-6ed7-4ae2-a842-b50cded02cc1"
        },
        "item": {
          "id": "00e2a594-a6f4-4677-946b-c74109a0fa16",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "02aeb985-5ae2-4de3-b204-866ebaf75239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008d6065-9666-46fa-a5c2-1dfaaad1e501",
        "cursor": {
          "ref": "5d7d0990-2088-449d-80d1-6cf09b366126",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9e2c15c3-bc89-4901-8d26-7601ae588940"
        },
        "item": {
          "id": "008d6065-9666-46fa-a5c2-1dfaaad1e501",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6343bc65-0ac4-46bc-a980-a4121f1af844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a5991e-5ad6-4eb4-8ab8-55d8799983f7",
        "cursor": {
          "ref": "e93e3ef2-fe66-4ca4-8fae-d0e1319d754b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2058690e-b273-4f99-a106-7fa55e7b378a"
        },
        "item": {
          "id": "64a5991e-5ad6-4eb4-8ab8-55d8799983f7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fefbdaed-71fa-4d08-b16d-5cdd2a6dc62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2945a7ac-82e7-4cb0-9c9c-93165498acce",
        "cursor": {
          "ref": "b7b389ba-a1c2-4fab-a9f1-3e2f7bfe4ef7",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d5f57876-8ac9-45ab-ad4c-dedccf2dced8"
        },
        "item": {
          "id": "2945a7ac-82e7-4cb0-9c9c-93165498acce",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "314dc77d-8b9c-43d3-97b6-764c46cb02de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2317f909-3221-4254-9746-424ba8f58e98",
        "cursor": {
          "ref": "0247b47b-0314-4832-a875-a69c8535ee04",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a41b9681-4797-463c-be26-bbcdf2452dea"
        },
        "item": {
          "id": "2317f909-3221-4254-9746-424ba8f58e98",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "af7485c3-ae19-4655-812f-5f6f32efd200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853b21ca-5f80-4059-b3dc-e0da6aa96bd0",
        "cursor": {
          "ref": "192e5453-1000-4c81-84b0-3b00e5b67075",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "be4f07af-41f5-412a-9846-a65d070c9ccc"
        },
        "item": {
          "id": "853b21ca-5f80-4059-b3dc-e0da6aa96bd0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ea300ffc-6810-44a2-8d7c-e91551a02bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78bf5ea-2640-42f7-ac7d-e4c473d531f8",
        "cursor": {
          "ref": "d546e975-b399-4530-af2b-8aa6a40ec34f",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5f16dfb7-76a9-4d68-9413-4e8e44057341"
        },
        "item": {
          "id": "b78bf5ea-2640-42f7-ac7d-e4c473d531f8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6794d36e-6444-4604-9b1c-d457781847f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5a8a9b-8f32-4b11-be40-b85ac5bc624a",
        "cursor": {
          "ref": "7065074a-8bc1-442b-b59e-4e058a5e6ab3",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "dc65e6fa-6885-429b-a1c1-c9482dc5a1cd"
        },
        "item": {
          "id": "9a5a8a9b-8f32-4b11-be40-b85ac5bc624a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "85712b6f-a957-4afb-9725-d851a1132a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14766bb4-ad66-400c-9135-54d0d93fcb80",
        "cursor": {
          "ref": "d5a1557e-a096-4273-858a-15fc333c5115",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0e5e3a42-2542-4c60-84db-d09e8b0e0e19"
        },
        "item": {
          "id": "14766bb4-ad66-400c-9135-54d0d93fcb80",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f99e3738-ae9d-470c-b3c1-bbdfae9efa16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adb2eaf-8694-48a8-ba25-18551aaa58fe",
        "cursor": {
          "ref": "c8c7e7de-2bf2-4799-963d-db31cf8b4f76",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4ddeae05-d42a-49a2-8b35-7857618dc653"
        },
        "item": {
          "id": "7adb2eaf-8694-48a8-ba25-18551aaa58fe",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "29e5d2f2-880f-42d6-968c-98a1c922ee22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28abede6-8d7a-4cb5-9c40-546104cd41cc",
        "cursor": {
          "ref": "e7266018-4d94-4bd1-b88f-0885c5d84e72",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d611e5ed-ef05-42b9-85cf-14b4aa07c6b3"
        },
        "item": {
          "id": "28abede6-8d7a-4cb5-9c40-546104cd41cc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cbe86de5-4592-45ad-8d24-272d97324d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82dda3c1-1c4a-4af6-a45d-ad511ea15140",
        "cursor": {
          "ref": "137eadbe-c171-4adb-a351-0de6f52044c7",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fbf5a4c4-4fe1-47e2-acf6-34ca28aa475b"
        },
        "item": {
          "id": "82dda3c1-1c4a-4af6-a45d-ad511ea15140",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "04951e19-2f50-4cd7-9d49-82186219d615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fcfeb4-a14d-41fe-9f6e-951d051e03e4",
        "cursor": {
          "ref": "853f31f9-1c0c-4756-ad7b-f4b302133dd4",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d67eab08-d1d4-42e7-b8f6-232d232f1e63"
        },
        "item": {
          "id": "21fcfeb4-a14d-41fe-9f6e-951d051e03e4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1c32ea98-cfa1-41f7-9715-67d904d0d0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1308d4-e125-4534-a903-a0fa8c3de8fa",
        "cursor": {
          "ref": "f62b65f9-6f6c-422b-bd02-8471d16f8f8a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "faac80c2-8411-4c2a-b236-60b8fc196c78"
        },
        "item": {
          "id": "aa1308d4-e125-4534-a903-a0fa8c3de8fa",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1b6191e2-0b6d-4ab2-9ed3-cd39e988f1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c56862-11b4-4d1d-b7a3-7b76f1eb9fde",
        "cursor": {
          "ref": "973526a0-c55b-4a19-9118-b629c4c6d272",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b2e21c90-b83b-4255-abb4-10b7254d784a"
        },
        "item": {
          "id": "b2c56862-11b4-4d1d-b7a3-7b76f1eb9fde",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "196cc093-e278-4e60-8598-e54286daa86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12abf682-2aa9-4759-ba57-0ca77e4cfb59",
        "cursor": {
          "ref": "91792e42-5a03-48e8-86d9-dec226ae1509",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "87f67bd6-778c-4710-bf1c-6a40e487ab11"
        },
        "item": {
          "id": "12abf682-2aa9-4759-ba57-0ca77e4cfb59",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "66138e34-147b-4e06-9f01-5fc38a22a40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc9c59d-1359-4d19-998e-69b1445f299e",
        "cursor": {
          "ref": "d3d92d68-13a2-4801-8b0c-12cde2bce5c6",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2b20a450-c1be-46c5-a1ba-607d0b668252"
        },
        "item": {
          "id": "2fc9c59d-1359-4d19-998e-69b1445f299e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2924f765-2167-4075-8068-082cb3ac2fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b0737f-a47a-43b9-a8b7-04126f86fe9b",
        "cursor": {
          "ref": "7bec6003-8552-4708-a1fe-bc9f1c41eb4e",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6c79f30c-bbec-4f7c-8e2d-95da1de40654"
        },
        "item": {
          "id": "30b0737f-a47a-43b9-a8b7-04126f86fe9b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "88fb9411-5285-4d9d-bb99-7f931a7cab54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1fe804-aca0-41a7-b449-72e1a0973edf",
        "cursor": {
          "ref": "4c7f9be3-d59a-42ac-8607-c2da145f4a45",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8c3cea13-437c-4c59-9362-4196a6fb4c33"
        },
        "item": {
          "id": "ad1fe804-aca0-41a7-b449-72e1a0973edf",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bfecb2d5-047c-42ee-9354-e131f2e1a5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9dc485-b739-44e7-9259-d0b0d129a200",
        "cursor": {
          "ref": "4f6550cc-43e3-4bf8-b09d-7fa0f4929b42",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "57de5268-7a63-47e7-b28f-a67e0f99403a"
        },
        "item": {
          "id": "bc9dc485-b739-44e7-9259-d0b0d129a200",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9d14f554-5c9a-4362-bbb9-d2eb684bf87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbc999b-d86a-495d-b512-c50f3d86a530",
        "cursor": {
          "ref": "48f7572e-d76e-452b-8aed-4baba5a96629",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e34858dc-c82a-42a4-80f9-1551243a7766"
        },
        "item": {
          "id": "5cbc999b-d86a-495d-b512-c50f3d86a530",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "68942689-117c-4523-850a-8318c8974b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7aa28a6-67ba-4387-9a73-3f12537c671e",
        "cursor": {
          "ref": "2599ebc6-4b33-469a-bf19-9bc2ee1d4c08",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "19079d6b-794e-4f2c-b1c4-729ebf8a8936"
        },
        "item": {
          "id": "c7aa28a6-67ba-4387-9a73-3f12537c671e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "32b3afc9-ee29-44f7-8309-f9e574ecc22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2e8b39-d678-4333-8368-e95555c3b3e3",
        "cursor": {
          "ref": "a915f9b0-fb06-46c6-b384-9232036132b8",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "24fda4c5-3577-4b28-a557-6e11cadda168"
        },
        "item": {
          "id": "8e2e8b39-d678-4333-8368-e95555c3b3e3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "21c93e1c-dd56-4f7a-9d8b-538d44acf8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c84e8f7e-cadc-4d31-a170-4a8084a3c088",
        "cursor": {
          "ref": "a220ac26-d987-4df2-945b-d4f7b4a61ded",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "86565d84-6f15-4a3e-9dce-e3cec24332c1"
        },
        "item": {
          "id": "c84e8f7e-cadc-4d31-a170-4a8084a3c088",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f81ea665-410f-435d-a45d-93b149c4a3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bb0a30-c223-46ac-ac58-182f11936ff4",
        "cursor": {
          "ref": "1e968ebf-449d-4170-b009-730e0ca77a72",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "26994030-a2fa-4cc0-a7be-9febda6adef7"
        },
        "item": {
          "id": "05bb0a30-c223-46ac-ac58-182f11936ff4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b152a636-2c19-4de3-a1cc-51641ff73521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4dd723-a76e-4f2f-8a2f-142c0c3e0460",
        "cursor": {
          "ref": "5a1ac9ef-c7da-4cb3-8459-69c74c864943",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "92fb35c3-a776-453c-983f-828ec8c88354"
        },
        "item": {
          "id": "2e4dd723-a76e-4f2f-8a2f-142c0c3e0460",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "df4f04fd-f6f9-4528-b6a1-16fa5fe24450",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "fecce246-e3c7-4fcd-b68b-4622d932c7db",
        "cursor": {
          "ref": "da649d27-35f3-4921-933a-185a8f04a682",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4c67e706-8f40-4d69-b109-e911dc013f49"
        },
        "item": {
          "id": "fecce246-e3c7-4fcd-b68b-4622d932c7db",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ea4af03a-9ccc-4d7a-8e25-7e9b51d187ff",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "05100438-6ed2-454b-8de0-de1625e422bd",
        "cursor": {
          "ref": "4f72bcb5-e09a-404a-8e63-70013225fe20",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5edca852-ded2-476c-8edc-43b7058b71c6"
        },
        "item": {
          "id": "05100438-6ed2-454b-8de0-de1625e422bd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8a868700-0000-48f4-9312-9335be349280",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c61b38af-8174-4130-b536-b3c290d0872a",
        "cursor": {
          "ref": "90eef77c-79f3-48a9-bef2-be00b1022fc1",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e9fb5dd9-e29c-442c-ad9d-6f9cd9bfde8c"
        },
        "item": {
          "id": "c61b38af-8174-4130-b536-b3c290d0872a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6caf5d5a-f25f-4342-9013-1e50cc45cfff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9156067f-9ceb-41a3-aa3c-db6f30a635c8",
        "cursor": {
          "ref": "12a7dff1-dddb-490a-a8d9-c150ce99a81b",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "af340d22-40b9-4a99-a2f7-7cf86cd01573"
        },
        "item": {
          "id": "9156067f-9ceb-41a3-aa3c-db6f30a635c8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0d610bc5-6580-4400-9ced-b90dd323636c",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "0aabac93-e437-4cf1-9856-9c75e0a3c3af",
        "cursor": {
          "ref": "3bf37cec-a1c7-4c62-ba0b-1a58d96eea9d",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7651574c-fa6a-4f6e-bcf8-75cd5587dfd1"
        },
        "item": {
          "id": "0aabac93-e437-4cf1-9856-9c75e0a3c3af",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7a4284e3-2c79-4ff1-b3b4-9e86ec8b06f3",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "156be9d6-cae3-4c44-bd0a-60f4cbc3a082",
        "cursor": {
          "ref": "dd1e3ae8-a5c2-4ba2-94db-a3286a023fd3",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9745fbb3-9579-41c1-9c65-10385d3a3cc7"
        },
        "item": {
          "id": "156be9d6-cae3-4c44-bd0a-60f4cbc3a082",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3e4bb1cc-85ee-4aec-90b5-19fb3622ca40",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "1e82e008-19af-46d9-925c-5efa1c40228d",
        "cursor": {
          "ref": "5bde1643-bb7c-41f3-af17-80b2820b056b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1eb3ca5e-044c-4c4e-83e2-7ea00bc2a9c4"
        },
        "item": {
          "id": "1e82e008-19af-46d9-925c-5efa1c40228d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "117c73ab-658d-4ea8-a648-1fd182137e34",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "d1a516ec-2c50-4556-bfb8-bce6d88c78f4",
        "cursor": {
          "ref": "219149e7-c67c-41a4-b653-8f73bd145430",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "47b111f8-4da7-4399-803b-7bfa6b993ad3"
        },
        "item": {
          "id": "d1a516ec-2c50-4556-bfb8-bce6d88c78f4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c9a0d8bc-5896-4790-b8a7-b738f9a560c6",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "9e8cf22e-5a3f-43a8-b1ae-62a4b9f904a6",
        "cursor": {
          "ref": "9dea72aa-19c4-4e96-b4e6-124b8df4b702",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7f7a7695-a491-42da-aa6d-4d2014585ed9"
        },
        "item": {
          "id": "9e8cf22e-5a3f-43a8-b1ae-62a4b9f904a6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4c8936b1-f0d2-4464-9856-9c4ba7fe5f1d",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "dd0c7d86-9a8f-473d-9f9c-b03908659782",
        "cursor": {
          "ref": "e117709f-9872-4f9b-8725-c6c20f064b58",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "52dfb152-447d-45d2-b357-34d124f4aa8a"
        },
        "item": {
          "id": "dd0c7d86-9a8f-473d-9f9c-b03908659782",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "78473bec-b14c-4143-b6ca-4aa45e571561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c889775-1bfd-49fc-a904-20d38034d6a1",
        "cursor": {
          "ref": "58303f45-b38c-4a1b-bb0f-feca84300139",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "44104d59-9e3a-4748-b1de-0692ed634ff7"
        },
        "item": {
          "id": "4c889775-1bfd-49fc-a904-20d38034d6a1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1b6551a6-5fcb-46f1-94d3-bccf259edd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704ed85d-7d43-4022-80ae-5bef8ec2f576",
        "cursor": {
          "ref": "ddb60c37-e551-4e7a-913c-781b096b12fe",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e49e9665-b88d-4848-9ab8-b1e4b0b4c127"
        },
        "item": {
          "id": "704ed85d-7d43-4022-80ae-5bef8ec2f576",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "34a6b9d5-cbed-47a4-b863-53353efc9109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c980b8d6-835e-4666-8792-5f6dcb915a28",
        "cursor": {
          "ref": "d6c61f93-d36b-457c-a378-d93fc649d3a9",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bd7abc7b-3e57-450e-952b-f26c5ebe9865"
        },
        "item": {
          "id": "c980b8d6-835e-4666-8792-5f6dcb915a28",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4b35c7e1-f8ae-428c-9278-04db7e74ee2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff3d4d4-e769-4901-89cb-e3cbd9aa5298",
        "cursor": {
          "ref": "7fdfab38-0348-44dc-9ca2-607fde62b3d6",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a7198deb-251b-4d56-b455-da8f1a769ab5"
        },
        "item": {
          "id": "fff3d4d4-e769-4901-89cb-e3cbd9aa5298",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ad70faaf-23c2-4e71-b8c7-a8e00efccf3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c00333-b6a0-4dd7-b2c8-69e74186b473",
        "cursor": {
          "ref": "1f08d4c9-8554-465e-a274-66a2ec8e1d2d",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7bc61a1b-48f3-429f-800c-85d87bfcaf15"
        },
        "item": {
          "id": "c0c00333-b6a0-4dd7-b2c8-69e74186b473",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d5ef7f4d-2fb3-42b6-bfa9-4fd56b332127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b7bee2-6ca0-4258-a2b8-daa8ef8d7068",
        "cursor": {
          "ref": "ccc638a5-a6e7-4aca-84cc-09ccc69ec8eb",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9906bd27-b476-4513-a7ab-b79f20ffe733"
        },
        "item": {
          "id": "11b7bee2-6ca0-4258-a2b8-daa8ef8d7068",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e3257eec-7eb1-4545-94c6-0fda6f2b90fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff919312-f8d5-4d02-93cd-0ce0b83b1a94",
        "cursor": {
          "ref": "7ce198af-6b66-4ec8-b841-dd5ad7507fe5",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "78659565-3216-46c7-ba1e-c7fe50a359be"
        },
        "item": {
          "id": "ff919312-f8d5-4d02-93cd-0ce0b83b1a94",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "066ab3f5-279a-45a7-8e2e-bd40d513f532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6b13c2-affc-400b-b5b3-3110dd1b096b",
        "cursor": {
          "ref": "31d60e86-8273-4fbb-b635-8731d5829e16",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ca3cfbef-22ad-4212-973d-a71ce04335cd"
        },
        "item": {
          "id": "bb6b13c2-affc-400b-b5b3-3110dd1b096b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9b72e709-e5aa-4905-953b-972f89d5faf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf669dd-697b-4e1e-832f-3bbdcc4d9207",
        "cursor": {
          "ref": "73add6ef-c0b5-458c-ad88-a1cc00adc8e2",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "14697e8c-9894-470c-86e7-c808d8365044"
        },
        "item": {
          "id": "caf669dd-697b-4e1e-832f-3bbdcc4d9207",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "83234c78-49a1-468a-9096-650d6f4dc4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a67e09-86f0-48fc-b868-0cb0a2a19adb",
        "cursor": {
          "ref": "03ec6f43-73f6-45ae-a04b-0be6cd31f601",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1710806b-fe55-4583-8b59-5115b6e302c9"
        },
        "item": {
          "id": "69a67e09-86f0-48fc-b868-0cb0a2a19adb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "25d3f8e2-e67a-40db-aeb3-4e67a5d9c5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f22dbe8-dcf8-4d99-b366-2ea5458d2a09",
        "cursor": {
          "ref": "66ce6328-c850-42cd-a344-12e37402033f",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c6b9a067-fe75-4b6e-b638-c1524c6d9b92"
        },
        "item": {
          "id": "0f22dbe8-dcf8-4d99-b366-2ea5458d2a09",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0d0af2e0-07a2-4d01-8a93-e004b798cb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de85a190-10eb-49da-a5fe-5b71bae41213",
        "cursor": {
          "ref": "605a8448-6075-4091-ab46-9e5534fcedc1",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b120f742-1195-4a65-83e0-86e5b8078617"
        },
        "item": {
          "id": "de85a190-10eb-49da-a5fe-5b71bae41213",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "75f60665-bde0-4b35-8311-876d4633d16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f7e188-fa48-4e8e-bd74-85e9d70a05ec",
        "cursor": {
          "ref": "469bc34f-b97a-4ad7-accd-655c8c260d68",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "66f50580-a339-4eda-bd89-e45c0e5b3b2f"
        },
        "item": {
          "id": "e0f7e188-fa48-4e8e-bd74-85e9d70a05ec",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1ed5b37c-88f8-46a9-a7d0-0cce22e2ef59",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "66b87ebe-460c-4ccb-b4a9-de637eadc859",
        "cursor": {
          "ref": "f7216447-0079-4320-8dbd-0018c84a0d92",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "247d0e91-1df6-4b90-8876-62f65106316d"
        },
        "item": {
          "id": "66b87ebe-460c-4ccb-b4a9-de637eadc859",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9dc512a3-87a4-4232-881c-a10889ddd2ca",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "27e69bd6-e755-459b-ba9f-c03dad924ede",
        "cursor": {
          "ref": "9f38b801-cd64-4406-bb59-c757c95010e2",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "416b1999-342d-4e37-bb4e-e0c821e5ec28"
        },
        "item": {
          "id": "27e69bd6-e755-459b-ba9f-c03dad924ede",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f0c4f8c5-4b2f-414d-85a1-bef24367c564",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "843465c2-6e7a-4294-ba8b-12b62da9e01d",
        "cursor": {
          "ref": "55abe3ed-0f70-4f8e-80c4-62fcf5f342f7",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "51d66331-57e2-442d-91b4-2f1a0039ae78"
        },
        "item": {
          "id": "843465c2-6e7a-4294-ba8b-12b62da9e01d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a6da0a1f-054a-48f3-99ad-465e183a835b",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "7cea25e8-e2e2-4cf1-9870-15a9839d67a8",
        "cursor": {
          "ref": "db9c67da-aa0c-4895-9fff-b73d36672f71",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d739a2db-9919-4984-aa92-c8302d5bb1d5"
        },
        "item": {
          "id": "7cea25e8-e2e2-4cf1-9870-15a9839d67a8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d902c854-1de5-4c04-88ed-ced6600f466e",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "e239c1b8-1c93-465f-a4a2-05743ebd7d80",
        "cursor": {
          "ref": "588447fa-573d-4dcb-ada6-a4a627d47913",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c29c52cc-9bba-4b18-bf85-fc6911e5f1e2"
        },
        "item": {
          "id": "e239c1b8-1c93-465f-a4a2-05743ebd7d80",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f0fa02c5-625e-472c-8e73-d15fc2925577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee614fe-c3ba-4196-bf39-7521e580a980",
        "cursor": {
          "ref": "67877acf-cd43-4be8-8506-3b133b60cd25",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "99e1fb8b-fe83-4d20-a34c-2fe8957eefbb"
        },
        "item": {
          "id": "bee614fe-c3ba-4196-bf39-7521e580a980",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2c8666b0-6611-4f53-a7b9-368369732cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f13f0bd-d2ea-4250-afe0-c55837d6d430",
        "cursor": {
          "ref": "ef210580-d73d-4976-806d-b6cb0962d83c",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ff98bd38-8746-4b42-bcf8-6d4ad3497190"
        },
        "item": {
          "id": "6f13f0bd-d2ea-4250-afe0-c55837d6d430",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ce755ebc-56f3-4c31-9a62-f4e7f299902b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f8f842-ff5b-436d-970b-3f3e941b28f8",
        "cursor": {
          "ref": "cee8973e-6117-4b1a-8f93-160f731c1c1c",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a320736e-204f-42be-ae92-1f5ee41d9e0d"
        },
        "item": {
          "id": "51f8f842-ff5b-436d-970b-3f3e941b28f8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "160a422e-d2ba-4421-a219-6ecb62618415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0f5342-aa10-48be-84a9-847b754d2c4e",
        "cursor": {
          "ref": "db0c32f1-288a-4343-8d40-44eb92ab354e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "72aa0662-564a-4340-a254-f45cd1b95bae"
        },
        "item": {
          "id": "4f0f5342-aa10-48be-84a9-847b754d2c4e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "981f925c-db95-4e6a-a082-570a16516d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb494960-71cf-41c0-b8f4-6c80e9271ca0",
        "cursor": {
          "ref": "a6a29f95-6ec2-4ad2-b6ae-5824b110aa85",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ee2383fb-f35a-46bf-b6d7-6af5bec2047b"
        },
        "item": {
          "id": "eb494960-71cf-41c0-b8f4-6c80e9271ca0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "884bfb2c-bb50-41e6-b2c4-83f373effbdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0759f7b-a86d-4eed-83dc-563002215bec",
        "cursor": {
          "ref": "3c0efdc2-f3b8-4c12-b270-3adf0937f8c1",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e4814a20-9294-4dce-997d-470ce50209c8"
        },
        "item": {
          "id": "a0759f7b-a86d-4eed-83dc-563002215bec",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "babc6e8e-4013-4f98-ac9e-7313b6016099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0612928-9be2-4b62-9988-74b18605c0fa",
        "cursor": {
          "ref": "d9845b7a-20d4-491c-8750-57abf96895c4",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "479cdbc6-a703-4512-ab8c-8ab2bbdbb639"
        },
        "item": {
          "id": "c0612928-9be2-4b62-9988-74b18605c0fa",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "210fa9c4-6789-4a26-b84b-24aad48106d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ecc4e9-89b9-4ab5-986c-9e5d0702110f",
        "cursor": {
          "ref": "f04fdae4-bc39-48e3-87bd-54723ac1023d",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4cd2a79b-4c00-47b7-a5a0-53a09b5db528"
        },
        "item": {
          "id": "89ecc4e9-89b9-4ab5-986c-9e5d0702110f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e55d724d-f003-4654-8d4b-6bb932561087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb09c3da-d5a2-4aff-9773-174ef4236e54",
        "cursor": {
          "ref": "65e1e37f-a9d4-49e8-b7af-d70bcf51f969",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "274de81d-da2c-434a-94f8-8425e536bb85"
        },
        "item": {
          "id": "cb09c3da-d5a2-4aff-9773-174ef4236e54",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3986745a-47cd-474e-959c-b53a15ae1e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0af9e48-0461-4fcc-88e5-2cb8f9789303",
        "cursor": {
          "ref": "6a80f761-3c37-4367-bfb0-89c1dc263220",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cfea3982-4668-4a0c-8748-daf39970b1f6"
        },
        "item": {
          "id": "c0af9e48-0461-4fcc-88e5-2cb8f9789303",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "98a26630-9b65-4252-bd4b-cacb9df29c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a9a082-8741-4776-920e-a824f6ecd36e",
        "cursor": {
          "ref": "3388b762-6edc-4d45-ba46-c0f53ad71f5a",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8717322e-36a1-4361-b805-434a8e15f71a"
        },
        "item": {
          "id": "d7a9a082-8741-4776-920e-a824f6ecd36e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "30bc83a0-856e-4e42-b995-a3743ceca4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cf6749-546c-4d03-9700-059b40bf1015",
        "cursor": {
          "ref": "a4d3a6b0-9a06-4b7d-8777-f337166e146e",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "168178ec-46c1-47ad-ae94-a8e5919eec3e"
        },
        "item": {
          "id": "b9cf6749-546c-4d03-9700-059b40bf1015",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6b52f28d-9ae0-48b4-aa71-5b220e17ba85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db18c2f-5d9b-436b-91fa-d393beebbaea",
        "cursor": {
          "ref": "2024ca78-36ec-4b63-bd70-888a9fde7dfe",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b341fc0a-89e9-4a34-8bf3-e4fa037902a2"
        },
        "item": {
          "id": "9db18c2f-5d9b-436b-91fa-d393beebbaea",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2dc1acb8-83a6-429b-9ba5-1948db32529b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423e2fd4-2af5-48d2-89fe-1c07f8ce95c2",
        "cursor": {
          "ref": "6781d441-62dd-4345-9908-c8f633b9b0ab",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7b63abff-9fce-4bec-bffa-7c02f5dd6e69"
        },
        "item": {
          "id": "423e2fd4-2af5-48d2-89fe-1c07f8ce95c2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dd88f13c-e961-40d9-8f9d-7af2aa0ce168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038275bf-80ab-4159-ba18-7855ae3fc9d1",
        "cursor": {
          "ref": "6a1c5453-5dae-4c2f-80da-aaa5a4e3be07",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e0351409-f865-46fe-93f7-4b5de6204b10"
        },
        "item": {
          "id": "038275bf-80ab-4159-ba18-7855ae3fc9d1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7877c922-f55a-4c5b-ae13-85fe50acb1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2ef465-0aba-4938-bb39-5248b4145ee2",
        "cursor": {
          "ref": "b034d543-7045-44e3-83e8-d42cce89e307",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "80440a6c-76ed-4a26-b3e4-675475ece394"
        },
        "item": {
          "id": "3e2ef465-0aba-4938-bb39-5248b4145ee2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a5121c58-c0f9-4964-a979-ce5ba1e37d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a420e5c-f8ad-440f-8754-b09e40a38389",
        "cursor": {
          "ref": "9a0acd02-67bd-4892-8be5-b975b80da78f",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "de3bf675-a550-4e8b-8c73-cae36e671f80"
        },
        "item": {
          "id": "5a420e5c-f8ad-440f-8754-b09e40a38389",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7ad20983-60b8-475a-8964-207c4da844fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5efb17-e3d3-4f47-b703-fb66c9f8a31c",
        "cursor": {
          "ref": "f3e31cf3-e5a8-4e83-83a3-25c4c4fd37b5",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5ffd6d71-232a-48f4-9fcf-2a7756131709"
        },
        "item": {
          "id": "be5efb17-e3d3-4f47-b703-fb66c9f8a31c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6daeb0e8-9313-4b68-8c87-eeb1239c0ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709866da-e0c1-44ef-98d9-d5b102bf2b7e",
        "cursor": {
          "ref": "9f2aea53-4728-42be-a96c-fcb14d4e3137",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c39e0053-6a4d-4d88-af04-cde5239ae984"
        },
        "item": {
          "id": "709866da-e0c1-44ef-98d9-d5b102bf2b7e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ce152a61-0f41-468b-9bc2-434deb8fa4d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71845ecb-4409-48cb-92e1-f7b208c3bc56",
        "cursor": {
          "ref": "3bee7f0d-4f7e-4c7f-807e-b162f7f25da3",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1423c4b4-4452-42dc-95f3-263d14ede5f7"
        },
        "item": {
          "id": "71845ecb-4409-48cb-92e1-f7b208c3bc56",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "30e7e540-0f01-4cd6-bde1-903c4124918d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0655709e-6cbf-49d8-8ba7-69b66be59c3f",
        "cursor": {
          "ref": "58c5f88b-24ea-473e-a1a6-0cb52be34cb5",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8775f73a-569e-466e-b8c8-60db00c8d489"
        },
        "item": {
          "id": "0655709e-6cbf-49d8-8ba7-69b66be59c3f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c7988907-144c-4a56-a6d2-d48b1440bcad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96e704c-095d-453c-abf5-a09cdaabb7a8",
        "cursor": {
          "ref": "16534e8b-cfe1-4e02-a9b1-3c0a4df9f23f",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ef4f0383-823a-4160-abc5-371dda915433"
        },
        "item": {
          "id": "a96e704c-095d-453c-abf5-a09cdaabb7a8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0c0a0f69-52bf-45e6-946c-dea0fa77768f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61c3143-85c0-42e4-aab4-ab32e8d02a8d",
        "cursor": {
          "ref": "5394ea04-d44a-45c3-bff4-d58f10ca1814",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "db8502f9-3629-4b6f-859e-260baa295dc1"
        },
        "item": {
          "id": "c61c3143-85c0-42e4-aab4-ab32e8d02a8d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "730b28d0-10fb-4a44-8a5a-92b77c8ef633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1cb991-3ebc-47a5-87e2-896dedbcc1b8",
        "cursor": {
          "ref": "9e3fc9a4-d613-42c8-8f70-743ac1292806",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6b142088-4cdf-49e3-92b4-180ec6a89419"
        },
        "item": {
          "id": "bc1cb991-3ebc-47a5-87e2-896dedbcc1b8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f14ba075-6a97-42b9-94e5-da1c56aadb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540d241e-00f6-4045-bdaf-390168256c6d",
        "cursor": {
          "ref": "cda1388f-c604-4001-975a-8acb8983542f",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1171eb44-2176-49d6-9827-cda8e967fd72"
        },
        "item": {
          "id": "540d241e-00f6-4045-bdaf-390168256c6d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "da6f07ea-25ad-47b8-aa45-6a31547882d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d79273c-de8a-451a-bd22-ce4aaf24d5e3",
        "cursor": {
          "ref": "5f9af169-b939-4d83-8005-41a207884542",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a4b1f312-ccba-499a-810d-9a47cc90a304"
        },
        "item": {
          "id": "3d79273c-de8a-451a-bd22-ce4aaf24d5e3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "988c4db8-65af-482b-9382-499521e5f064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8aeab2-27e7-4ba0-b315-ac80f5c29982",
        "cursor": {
          "ref": "2b8b6b54-b36b-417b-8322-73fd059f88c7",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6eebe8b2-6445-4bfc-aecd-20aa7145fdf7"
        },
        "item": {
          "id": "8c8aeab2-27e7-4ba0-b315-ac80f5c29982",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "15642aa7-a7ca-487b-9ce3-dfe29188dff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcfd1c2-5410-4c08-8d09-d25698ab812d",
        "cursor": {
          "ref": "73e8296f-8782-480a-b8d8-8ecc08dccdcd",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2edceafe-ccf6-46f7-b981-913828c5cdb3"
        },
        "item": {
          "id": "1fcfd1c2-5410-4c08-8d09-d25698ab812d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0e3ba61e-f4f7-4349-adb5-3d336b356d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95de8e1c-9376-471c-8392-de0ada587c90",
        "cursor": {
          "ref": "0b163acc-230d-4e0d-b349-301a44d5afa9",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8d256ebf-8ebd-4498-b31a-b04b23059435"
        },
        "item": {
          "id": "95de8e1c-9376-471c-8392-de0ada587c90",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8049ebbf-303a-48d4-9533-e93ff91cd764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4c9fc1-89da-44e1-a5f5-ea71d9b519a2",
        "cursor": {
          "ref": "a7bb1496-a03b-4991-8df6-6e88a9970156",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "79b5bcd9-6bd6-4b20-aadd-cfab0d737feb"
        },
        "item": {
          "id": "1f4c9fc1-89da-44e1-a5f5-ea71d9b519a2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5ecc498a-40fe-462f-9101-95148ba15aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151934d0-13f8-4f12-94c8-2ca18e8b2f2b",
        "cursor": {
          "ref": "a107a500-0f1c-401e-b923-c294765a98fa",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d4c4b7c3-159a-4582-9243-aef791eceee6"
        },
        "item": {
          "id": "151934d0-13f8-4f12-94c8-2ca18e8b2f2b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "360d55df-f6c0-46f5-92d1-34af8bbbbbda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca816d52-dc54-4b86-bdd6-049a612b0ab2",
        "cursor": {
          "ref": "75a7f2ee-8070-45ea-9584-4d2e4c1c4123",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "85904d6b-5a57-4441-9a6e-a5cc0cccf8e0"
        },
        "item": {
          "id": "ca816d52-dc54-4b86-bdd6-049a612b0ab2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "91b19720-55e4-45c4-86b7-0e6bf01f4c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462840c3-11ca-4b9f-953f-3f0dc50c828d",
        "cursor": {
          "ref": "c0acb5c0-bc30-4049-b868-f7ea2a08ff38",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9b07d549-d8dd-47af-b6ef-269bdd729d3b"
        },
        "item": {
          "id": "462840c3-11ca-4b9f-953f-3f0dc50c828d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "dbcc42af-1a20-4140-bf84-3860b9042a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6547bdb-0d0c-4ab9-bf1f-590aefdc59f8",
        "cursor": {
          "ref": "5c8174ac-2b21-4ce2-b341-3b290d466e0c",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d60b6e47-5b24-4ce4-99e1-730ed7f76f1a"
        },
        "item": {
          "id": "b6547bdb-0d0c-4ab9-bf1f-590aefdc59f8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c6a5508f-a56c-44b4-8691-1a884669cd4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b281ccb9-2a68-4499-9513-eb102d2d70f5",
        "cursor": {
          "ref": "4b478797-38cd-4b05-89e5-e5440e4b0bd7",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7a047789-3ba3-4dae-842b-f3b9a26e95db"
        },
        "item": {
          "id": "b281ccb9-2a68-4499-9513-eb102d2d70f5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6abf2b6d-88d6-45b8-bfb3-67a550efe7c5",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "50f54f15-4e07-45e8-9627-74761059c8aa",
        "cursor": {
          "ref": "cd91ad5a-9a5b-492c-82c6-ae32df50f78a",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "54792793-51cb-405c-a0f4-65d38080c1b6"
        },
        "item": {
          "id": "50f54f15-4e07-45e8-9627-74761059c8aa",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1a25d43a-e544-45e8-8e3d-8d8408372e57",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16eb7d8-bf33-43df-92a7-bafbb312849f",
        "cursor": {
          "ref": "e2b8b137-463c-4012-923f-0329b03612d6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8bbd3c82-7031-4b24-89ab-b9ec98319dfb"
        },
        "item": {
          "id": "b16eb7d8-bf33-43df-92a7-bafbb312849f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "46db93f7-46a7-4d4c-af47-cdd3b9da646b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e1adaa-deab-4b78-a5cc-b81f9e1fc821",
        "cursor": {
          "ref": "59cb8b3b-39e0-4147-845a-6142660597af",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2d7b5ddb-208e-4ff2-97e4-32e2d3cb8892"
        },
        "item": {
          "id": "c3e1adaa-deab-4b78-a5cc-b81f9e1fc821",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b0c76f99-b30b-409b-b2cb-f5c9238bde2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e1adaa-deab-4b78-a5cc-b81f9e1fc821",
        "cursor": {
          "ref": "59cb8b3b-39e0-4147-845a-6142660597af",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2d7b5ddb-208e-4ff2-97e4-32e2d3cb8892"
        },
        "item": {
          "id": "c3e1adaa-deab-4b78-a5cc-b81f9e1fc821",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b0c76f99-b30b-409b-b2cb-f5c9238bde2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a21fdb-1c83-43ab-8560-97835ffcf9d1",
        "cursor": {
          "ref": "e5c8bfc1-edd9-4f21-8be8-315ad196ebdf",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c60e4554-3f43-45f4-bd16-308d862f2c95"
        },
        "item": {
          "id": "92a21fdb-1c83-43ab-8560-97835ffcf9d1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1b3db44d-ba81-4af3-af24-efeb6ebee432",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77803030-9669-4229-9e3e-3e3e7338c4f6",
        "cursor": {
          "ref": "3c6dcc71-3e9d-435b-b706-2d1543e66233",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d058da96-af7b-4bbf-a48f-e6f6ba089ff0"
        },
        "item": {
          "id": "77803030-9669-4229-9e3e-3e3e7338c4f6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ed547b5c-02e0-4b81-b86d-709e6a2809da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}